#!/usr/bin/env python3

# Copyright (C) 2024 Igalia S.L.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 3.  Neither the name of Apple Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from __future__ import annotations

from typing import Union
from pathlib import Path

import argparse
import os
import re
import sys
import shutil
import logging
from string import Template

logger = logging.getLogger("update-clangd-config")

def is_dir_virtually_empty(dir_path: Union[Path, str]) -> None:
    """
    Operating systems often create cache files that are not meaningful
    to users. This function considers a directory empty if nothing
    other than those files exist inside.
    """
    allowed_names = {
        ".ds_store",
        ".temporaryitems",
        ".fseventsd",
        "desktop.ini",
        "thumbs.db",
        "ethumbs.db",
    }
    found_names = set(name.lower() for name in os.listdir(dir_path))
    return len(found_names - allowed_names) == 0

def gen_template_environment():
    env = {}
    env["header_file_platform_specific_flags"] = \
        "-xobjective-cpp," if sys.platform == "darwin" else ""
    return env

# This warning is better placed in the code than in the template file, as
# otherwise it could be very confusing to people reading the template.
autogenerated_warning = """
# !!! Autogenerated by update-clangd-config !!!
# ^ Removing this line will prevent this file from updating
#
# If you want to commit changes to the clangd config, edit
# Tools/clangd/clangd-config.yaml.tpl instead.
#
# You can regenerate .clangd by building it like any other target, e.g:
#
#   ninja -C WebKitBuild/GTK/Debug "$(realpath .clangd)"
#
# ----------------------------------------------------------------------------
#
""".lstrip()

def render_updated_config(template_src: Path) -> bytes:
    with open(template_src, "r", encoding="utf-8") as f:
        template = Template(f.read())
    generated_text = autogenerated_warning + template.substitute(gen_template_environment())
    return generated_text.encode("utf-8")


def delete_stale_clang_dir(config_dst: Path):
    # Existing directories named .clangd can be deleted.
    # These were used for temporary storage by clangd before version 11.
    # See: https://clangd.llvm.org/config
    if config_dst.name != ".clangd":
        return  # do not risk doing any of this if the path doesn't end in .clangd
    if not os.path.islink(config_dst) and os.path.isdir(config_dst):
        if is_dir_virtually_empty(config_dst):
            logger.info(f"Deleting obsolete .clangd temporary directory: {config_dst}")
            shutil.rmtree(config_dst)
        else:
            logger.error(f"Obsolete .clangd directory has been found and it's not empty. "
                "Double-check its contents and remove it: {path_clangd}")
            raise SystemExit(1)


def should_update_config(config_dst: Path, new_config_bytes: bytes):
    pattern = rb"^\s*# !!! Autogenerated .* !!!\s*$"
    try:
        with open(config_dst, "rb") as f:
            current_config_bytes = f.read()
            if current_config_bytes == new_config_bytes:
                logger.debug(f"Not updating {config_dst}: already up-to-date.")
                return False
            if not len(current_config_bytes):
                logger.warning(f"Updating {config_dst}: the file is empty (file system corruption?)")
                return True
            if re.match(pattern, current_config_bytes, re.MULTILINE) is None:
                logger.debug(f"Not updating {config_dst}: the file is not autogenerated")
                return False
            logger.debug(f"Updating autogenerated file: {config_dst}")
            return True
    except FileNotFoundError:
        logger.debug(f"{config_dst} doesn't exist, will create it.")
        return True


def main():
    parser = argparse.ArgumentParser("update-clangd-config")
    parser.add_argument("template_src", type=Path,
        help="Path to the template file used to generate the clangd configuration file.")
    parser.add_argument("config_dst", type=Path, default=argparse.SUPPRESS,
        help="Path to the clangd configuration file to be generated.")

    log_level_group = parser.add_mutually_exclusive_group()
    log_level_group.set_defaults(log_level=logging.INFO)
    log_level_group.add_argument("-v", "--verbose",
        action="store_const", dest="log_level", const=logging.DEBUG,
        help="Print even if no changes to any files are done.")
    log_level_group.add_argument("-q", "--quiet",
        action="store_const", dest="log_level", const=logging.WARNING,
        help="Do not print messages except for errors and warnings.")

    args = parser.parse_args()
    log_level = args.log_level
    template_src: Path = args.template_src
    config_dst: Path = args.config_dst

    logging.basicConfig(format="%(message)s", level=log_level)
    delete_stale_clang_dir(config_dst)
    updated_config_bytes = render_updated_config(template_src)
    if should_update_config(config_dst, updated_config_bytes):
        with open(config_dst, "wb") as f:
            f.write(updated_config_bytes)


if __name__ == "__main__":
    main()
