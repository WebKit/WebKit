diff --git a/tests/resources/main.js b/tests/resources/main.js
--- a/tests/resources/main.js
+++ b/tests/resources/main.js
@@ -885,6 +885,7 @@
     function(stage, options)
     {
         this._animateLoop = this._animateLoop.bind(this);
+        this._animateLoopProxy = this._animateLoopProxy.bind(this);
         this._warmupLength = options["warmup-length"];
         this._frameCount = 0;
         this._warmupFrameCount = options["warmup-frame-count"];
@@ -946,6 +947,7 @@
             this._finishPromise = new SimplePromise;
             this._previousTimestamp = undefined;
             this._didWarmUp = false;
+            this._callbackCount = 0;
             this._stage.tune(this._controller.initialComplexity - this._stage.complexity());
             this._animateLoop();
             return this._finishPromise;
@@ -960,6 +962,15 @@
         return promise;
     },
 
+    _animateLoopProxy: function(timestamp)
+    {
+        this._callbackCount++;
+        if (this._callbackCount % 4 == 0) { // Ensure 15 FPS, only dispatch every 4th callback.
+            this._animateLoop(timestamp);
+	} else
+            requestAnimationFrame(this._animateLoopProxy);
+    },
+
     _animateLoop: function(timestamp)
     {
         timestamp = (this._getTimestamp && this._getTimestamp()) || timestamp;
@@ -986,13 +997,13 @@
 
             this._stage.animate(0);
             ++this._frameCount;
-            requestAnimationFrame(this._animateLoop);
+            requestAnimationFrame(this._animateLoopProxy);
             return;
         }
 
         this._controller.update(timestamp, this._stage);
         this._stage.animate(timestamp - this._previousTimestamp);
         this._previousTimestamp = timestamp;
-        requestAnimationFrame(this._animateLoop);
+        requestAnimationFrame(this._animateLoopProxy);
     }
 });
diff --git a/resources/runner/motionmark.js b/resources/runner/motionmark.js
index a2ea114..14a9cba 100644
--- a/resources/runner/motionmark.js
+++ b/resources/runner/motionmark.js
@@ -477,8 +477,11 @@ window.benchmarkController = {
         "warmup-length": 2000,
         "warmup-frame-count": 30,
         "first-frame-minimum-length": 0,
-        "system-frame-rate": 60,
-        "frame-rate": 60,
+        // Running with a target of 15FPS allows low-end devices (like the RPi)
+        // to get scores around 100-600 instead of 1-6 and that (bigger scores)
+        // is really useful for performance regression tracking.
+        "system-frame-rate": 15,
+        "frame-rate": 15,
     },
 
     initialize: async function()
@@ -493,11 +496,12 @@ window.benchmarkController = {
         this._startButton.disabled = true;
         this._startButton.textContent = Strings.text.determininingFrameRate;
 
-        let targetFrameRate;
+        let targetFrameRate = this.benchmarkDefaultParameters["frame-rate"];
+        /* Do no autodetect the frame-rate, use the one from benchmarkDefaultParameters.
         try {
             targetFrameRate = await benchmarkController.determineFrameRate();
         } catch (e) {
-        }
+        }*/
         this.frameRateDeterminationComplete(targetFrameRate);
     },
     
diff --git a/resources/strings.js b/resources/strings.js
index c82e047..45d7771 100644
--- a/resources/strings.js
+++ b/resources/strings.js
@@ -23,7 +23,7 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 var Strings = {
-    version: "1.3.1",
+    version: "1.3.1-15fps",
     text: {
         testName: "Test Name",
         score: "Score",
