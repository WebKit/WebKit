#!/usr/bin/env perl

# Copyright (C) 2006 Apple Inc.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 3.  Neither the name of Apple Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script runs a list of scripts through jsc a specified number of times.

use strict;
use warnings;
use File::Spec;
use FindBin;
use lib $FindBin::Bin;
use Getopt::Long;
use webkitdirs;
Getopt::Long::Configure("no_auto_abbrev", "pass_through");

use English;

my $usage = "Usage: run-jsc [--count run_count] [--debugger] shell_file [file2...]";

my $count = 1;
my $debugger = 0;

GetOptions("count|c=i" => \$count);
GetOptions("debugger" => \$debugger);

setConfiguration();

my $jsc;
if ($debugger) {
    my $debuggerCmd = defined($ENV{"DEBUGGER"}) ? $ENV{"DEBUGGER"} : "lldb";
    $jsc = $debuggerCmd . " " . File::Spec->catfile(jscProductDir(), "jsc -- --useDollarVM=1 ") . "@ARGV";
} else {
    $jsc = File::Spec->catfile(jscProductDir(), "jsc --useDollarVM=1 ") . "@ARGV";
}

my $dyld = jscProductDir();

$ENV{"DYLD_FRAMEWORK_PATH"} = $dyld;
print STDERR "Running $count time(s): DYLD_FRAMEWORK_PATH=$dyld $jsc\n";

while ($count--) {
    system("$jsc");
    my $signal = $? & 0x7f;
    my $status = ($? >> 8) & 0xff;
    if ($signal != 0) {
        system("kill -" . $signal . " " . $PID); # We kill ourselves with the same signal that the `jsc` process was killed with to make it look like `jsc` was directly invoked.
    }
    if ($status != 0) {
        print STDERR "\njsc exited with non-zero status: $status\n";
        exit $status;
    }
}
