#!/usr/bin/env ruby
# Copyright (C) 2023 Igalia S.L. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Exercise test-handlers for all runners, dispatchers and verbosity values and
# compare the results to the recorded "golden" output.
#
# The aim of this test is to catch unintentional behavioral changes. Intentional
# changes can and should change the output, in which case the patch will need to
# update the golden*.txt files.

require 'fileutils'
require 'optparse'
require 'pathname'
require 'shellwords'
require 'tempfile'

$base = Pathname.new($0).dirname

def runNoFail(cmd)
    system(cmd)
    if not $?.exited? or $?.exitstatus != 0
        raise "Failed to execute #{cmd}"
    end
end

RUNNERS= [
    "make",
    # XXX: this only matches the expected output when forcing numProcs=1 for the shell runner
    "shell",
    "ruby",
]

DISPATCHERS = [
    "default",
    "ruby",
]

# We could add --report-execution-time too, but that depends on bash and would
# require manual testing.
PARAMS = [
    "",
    "-v",
    "-v -v",
]

to_gc = []
DISPATCHERS.product(RUNNERS, PARAMS).each { |dispatcher, runner, params|
    outdir = "#{runner}-runner-#{dispatcher}-dispatcher-#{params.gsub(/\s/, '')}"
    goldenfile = "golden-#{params.gsub(/\s/, '')}.txt"
    FileUtils.rm_rf(outdir)
    to_gc << outdir
    $stderr.puts("outdir: #{outdir}")
    cmd = "#{($base + "test-handlers").realpath} -o #{outdir} -- --#{runner}-runner --test-writer #{dispatcher} #{params} 2>&1"
    runNoFail(cmd)
    norm = "sed -r 's/20[0-9]{2}-[0-9]{2}-[0-9]{2}.*[-+][0-9][0-9][0-9][0-9]$//g'"
    if runner == "shell"
        # We can't force the shell runner to execute things serially, just sort
        # the output and hope for the best.
        norm = "#{norm} | sort"
    end
    Tempfile.open("golden") { |golden|
        Tempfile.open("output") { |output|
            runNoFail("cat #{goldenfile} | #{norm} >#{Shellwords.shellescape(golden.path)}")
            runNoFail("cat #{outdir}/out | #{norm} >#{Shellwords.shellescape(output.path)}")
            system("diff -u #{Shellwords.shellescape(golden.path)} #{Shellwords.shellescape(output.path)}")
            if not $?.exited?
                raise "Failed to diff files"
            end
            if $?.exitstatus != 0
                $stderr.puts("OUTPUTS DIFFER! #{goldenfile} #{outdir}/out")
                exit(1)
            end
        }
    }
}

to_gc.each { |d|
    FileUtils.rm_rf(d)
}
