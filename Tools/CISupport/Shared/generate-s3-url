#!/usr/bin/env python3
import argparse
import boto3
import os
import socket

from botocore.config import Config

custom_suffix = ''
hostname = socket.gethostname().strip()
if 'dev' in hostname:
    custom_suffix = '-dev'
if 'uat' in hostname:
    custom_suffix = '-uat'

S3_DEFAULT_BUCKET = f'archives.webkit{custom_suffix}.org'
S3_EWS_BUCKET = f'ews-archives.webkit{custom_suffix}.org'
S3_MINIFIED_BUCKET = f'minified-archives.webkit{custom_suffix}.org'

def generateS3URL(bucket, identifier, revision, extension=None, content_type=None):
    key = f"{identifier}/{revision}.{extension or 'zip'}"
    print(f'\tS3 Bucket: {bucket}\n\tS3 Key: {key}')
    config = Config(region_name = 'us-west-2')
    s3 = boto3.client('s3', config=config)
    params = {'Bucket': bucket, 'Key': key}
    if content_type:
        params['ContentType'] = content_type
    url = s3.generate_presigned_url(ClientMethod='put_object', Params=params, ExpiresIn=30*60)
    print(f'S3 URL: {url}\n')
    return url

def main():
    parser = argparse.ArgumentParser(add_help=True)

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--revision', action="store", help='Revision number or change identifier for the built archive')
    group.add_argument('--change-id', dest='change_id', action="store", help='patch id or hash of specified change')
    parser.add_argument('--identifier', action="store", required=True, help='S3 destination identifier, in the form of fullPlatform-architecture-configuration. [mac-mojave-x86_64-release]')
    parser.add_argument('--extension', action='store', required=False, default=None, help='File extension of uploaded file')
    parser.add_argument('--content-type', action='store', required=False, default=None, help='Content type of file to be uploaded')
    parser.add_argument('--minified', action='store_true', required=False, default=False, help='If the content being uploaded is minified')

    args = parser.parse_args()

    s3_bucket = S3_DEFAULT_BUCKET
    if args.change_id:
        s3_bucket = S3_EWS_BUCKET
    if args.minified:
        s3_bucket = S3_MINIFIED_BUCKET

    url = generateS3URL(
        s3_bucket, args.identifier, args.revision or args.change_id,
        extension=args.extension, content_type=args.content_type,
    )
    return url

if __name__ == "__main__":
    main()
