{
    "domain": "DOM",
    "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>",
    "debuggableTypes": ["itml", "page", "web-page"],
    "targetTypes": ["itml", "page"],
    "types": [
        {
            "id": "NodeId",
            "type": "integer",
            "description": "Unique DOM node identifier."
        },
        {
            "id": "EventListenerId",
            "type": "integer",
            "description": "Unique event listener identifier."
        },
        {
            "id": "PseudoType",
            "type": "string",
            "enum": ["before", "after"],
            "description": "Pseudo element type."
        },
        {
            "id": "ShadowRootType",
            "type": "string",
            "enum": ["user-agent", "open", "closed"],
            "description": "Shadow root type."
        },
        {
            "id": "CustomElementState",
            "type": "string",
            "enum": ["builtin", "custom", "waiting", "failed"],
            "description": "Custom element state."
        },
        {
            "id": "LiveRegionRelevant",
            "type": "string",
            "enum": ["additions", "removals", "text"],
            "description": "Token values of @aria-relevant attribute."
        },
        {
            "id": "Node",
            "type": "object",
            "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.",
            "properties": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client." },
                { "name": "nodeType", "type": "integer", "description": "<code>Node</code>'s nodeType." },
                { "name": "nodeName", "type": "string", "description": "<code>Node</code>'s nodeName." },
                { "name": "localName", "type": "string", "description": "<code>Node</code>'s localName." },
                { "name": "nodeValue", "type": "string", "description": "<code>Node</code>'s nodeValue." },
                { "name": "frameId", "$ref": "Network.FrameId", "optional": true, "description": "Identifier of the containing frame." },
                { "name": "childNodeCount", "type": "integer", "optional": true, "description": "Child count for <code>Container</code> nodes." },
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Child nodes of this node when requested with children." },
                { "name": "attributes", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>." },
                { "name": "documentURL", "type": "string", "optional": true, "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to." },
                { "name": "baseURL", "type": "string", "optional": true, "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion." },
                { "name": "publicId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s publicId." },
                { "name": "systemId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s systemId." },
                { "name": "xmlVersion", "type": "string", "optional": true, "description": "<code>Document</code>'s XML version in case of XML documents." },
                { "name": "name", "type": "string", "optional": true, "description": "<code>Attr</code>'s name." },
                { "name": "value", "type": "string", "optional": true, "description": "<code>Attr</code>'s value." },
                { "name": "pseudoType", "$ref": "PseudoType", "optional": true, "description": "Pseudo element type for this node." },
                { "name": "shadowRootType", "$ref": "ShadowRootType", "optional": true, "description": "Shadow root type." },
                { "name": "customElementState", "$ref": "CustomElementState", "optional": true, "description": "Custom element state." },
                { "name": "contentDocument", "$ref": "Node", "optional": true, "description": "Content document for frame owner elements." },
                { "name": "shadowRoots", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Shadow root list for given element host." },
                { "name": "templateContent", "$ref": "Node", "optional": true, "description": "Content document fragment for template elements" },
                { "name": "pseudoElements", "type": "array", "items": { "$ref": "Node" }, "optional": true, "description": "Pseudo elements associated with this node." },
                { "name": "contentSecurityPolicyHash", "type": "string", "optional": true, "description": "Computed SHA-256 Content Security Policy hash source for given element." },
                { "name": "layoutContextType", "$ref": "CSS.LayoutContextType", "optional": true, "description": "The layout context type of the node. When not provided, the <code>LayoutContextType</code> of the node is not a context for which Web Inspector has specific functionality." }
            ]
        },
        {
            "id": "DataBinding",
            "type": "object",
            "description": "Relationship between data that is associated with a node and the node itself.",
            "properties": [
                { "name": "binding", "type": "string", "description": "The binding key that is specified." },
                { "name": "type", "optional": true, "type": "string", "description": "A more descriptive name for the type of binding that represents this paritcular data relationship" },
                { "name": "value", "type": "string", "description": "The value that is resolved to with this data binding relationship." }
            ]
        },
        {
            "id": "EventListener",
            "type": "object",
            "description": "A structure holding event listener properties.",
            "properties": [
                { "name": "eventListenerId", "$ref": "EventListenerId" },
                { "name": "type", "type": "string", "description": "<code>EventListener</code>'s type." },
                { "name": "useCapture", "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
                { "name": "isAttribute", "type": "boolean", "description": "<code>EventListener</code>'s isAttribute." },
                { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "The target <code>DOMNode</code> id if the event listener is for a node." },
                { "name": "onWindow", "type": "boolean", "optional": true, "description": "True if the event listener was added to the window." },
                { "name": "location", "$ref": "Debugger.Location", "optional": true, "description": "Handler code location." },
                { "name": "handlerName", "type": "string", "optional": true, "description": "Event handler function name." },
                { "name": "passive", "type": "boolean", "optional": true, "description": "<code>EventListener</code>'s passive." },
                { "name": "once", "type": "boolean", "optional": true, "description": "<code>EventListener</code>'s once." },
                { "name": "disabled", "type": "boolean", "optional": true },
                { "name": "hasBreakpoint", "type": "boolean", "optional": true }
            ]
        },
        {
            "id": "AccessibilityProperties",
            "description": "A structure holding accessibility properties.",
            "type": "object",
            "properties": [
                { "name": "activeDescendantNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility object referenced by aria-activedescendant." },
                { "name": "busy", "type": "boolean", "optional": true, "description": "Value of @aria-busy on current or ancestor node." },
                { "name": "checked", "type": "string", "optional": true, "enum": ["true", "false", "mixed"], "description": "Checked state of certain form controls." },
                { "name": "childNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of the accessibility tree children if available." },
                { "name": "controlledNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-controls." },
                { "name": "current", "type": "string", "optional": true, "enum": ["true", "false", "page", "step", "location", "date", "time"], "description": "Current item within a container or set of related elements." },
                { "name": "disabled", "type": "boolean", "optional": true, "description": "Disabled state of form controls." },
                { "name": "headingLevel", "type": "number", "optional": true, "description": "Heading level of a heading element." },
                { "name": "hierarchyLevel", "type": "number", "optional": true, "description": "The hierarchical level of an element." },
                { "name": "isPopUpButton", "type": "boolean", "optional": true, "description": "Whether an element is a popup button." },
                { "name": "exists", "type": "boolean", "description": "Indicates whether there is an existing AX object for the DOM node. If this is false, all the other properties will be default values." },
                { "name": "expanded", "type": "boolean", "optional": true, "description": "Expanded state." },
                { "name": "flowedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-flowto." },
                { "name": "focused", "type": "boolean", "optional": true, "description": "Focused state. Only defined on focusable elements." },
                { "name": "ignored", "type": "boolean", "optional": true, "description": "Indicates whether the accessibility of the associated AX object node is ignored, whether heuristically or explicitly." },
                { "name": "ignoredByDefault", "type": "boolean", "optional": true, "description": "State indicating whether the accessibility of the associated AX object node is ignored by default for node type." },
                { "name": "invalid", "type": "string", "optional": true, "enum": ["true", "false", "grammar", "spelling"], "description": "Invalid status of form controls." },
                { "name": "hidden", "type": "boolean", "optional": true, "description": "Hidden state. True if node or an ancestor is hidden via CSS or explicit @aria-hidden, to clarify why the element is ignored." },
                { "name": "label", "type": "string", "description": "Computed label value for the node, sometimes calculated by referencing other nodes." },
                { "name": "liveRegionAtomic", "type": "boolean", "optional": true, "description": "Value of @aria-atomic." },
                { "name": "liveRegionRelevant", "type": "array", "items": { "type": "string" }, "optional": true, "description": "Token value(s) of element's @aria-relevant attribute. Array of string values matching $ref LiveRegionRelevant. FIXME: Enum values blocked by http://webkit.org/b/133711" },
                { "name": "liveRegionStatus", "type": "string", "optional": true, "enum": ["assertive", "polite", "off"], "description": "Value of element's @aria-live attribute." },
                { "name": "mouseEventNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of node or closest ancestor node that has a mousedown, mouseup, or click event handler." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
                { "name": "ownedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-owns." },
                { "name": "parentNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility tree parent object if available." },
                { "name": "pressed", "type": "boolean", "optional": true, "description": "Pressed state for toggle buttons." },
                { "name": "readonly", "type": "boolean", "optional": true, "description": "Readonly state of text controls." },
                { "name": "required", "type": "boolean", "optional": true, "description": "Required state of form controls." },
                { "name": "role", "type": "string", "description": "Computed value for first recognized role token, default role per element, or overridden role." },
                { "name": "selected", "type": "boolean", "optional": true, "description": "Selected state of certain form controls." },
                { "name": "selectedChildNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any children marked as selected." }
            ]
        },
        {
            "id": "RGBAColor",
            "type": "object",
            "description": "A structure holding an RGBA color.",
            "properties": [
                { "name": "r", "type": "integer", "description": "The red component, in the [0-255] range." },
                { "name": "g", "type": "integer", "description": "The green component, in the [0-255] range." },
                { "name": "b", "type": "integer", "description": "The blue component, in the [0-255] range." },
                { "name": "a", "type": "number", "optional": true, "description": "The alpha component, in the [0-1] range (default: 1)." }
            ]
        },
        {
            "id": "Quad",
            "type": "array",
            "items": { "type": "number" },
            "minItems": 8,
            "maxItems": 8,
            "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
        },
        {
            "id": "HighlightConfig",
            "type": "object",
            "description": "Configuration data for the highlighting of page elements.",
            "properties": [
                { "name": "showInfo", "type": "boolean", "optional": true, "description": "Whether the node info tooltip should be shown (default: false)." },
                { "name": "contentColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "paddingColor", "$ref": "RGBAColor", "optional": true, "description": "The padding highlight fill color (default: transparent)." },
                { "name": "borderColor", "$ref": "RGBAColor", "optional": true, "description": "The border highlight fill color (default: transparent)." },
                { "name": "marginColor", "$ref": "RGBAColor", "optional": true, "description": "The margin highlight fill color (default: transparent)." }
            ]
        }
    ],
    "commands": [
        {
            "name": "getDocument",
            "description": "Returns the root DOM node to the caller.",
            "returns": [
                { "name": "root", "$ref": "Node", "description": "Resulting node." }
            ]
        },
        {
            "name": "requestChildNodes",
            "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get children for." },
                { "name": "depth", "type": "integer", "optional": true, "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0." }
            ]
        },
        {
            "name": "querySelector",
            "description": "Executes <code>querySelector</code> on a given node.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Query selector result." }
            ]
        },
        {
            "name": "querySelectorAll",
            "description": "Executes <code>querySelectorAll</code> on a given node.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Query selector result." }
            ]
        },
        {
            "name": "setNodeName",
            "description": "Sets node name for a node with given id.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set name for." },
                { "name": "name", "type": "string", "description": "New node's name." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New node's id." }
            ]
        },
        {
            "name": "setNodeValue",
            "description": "Sets node value for a node with given id.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set value for." },
                { "name": "value", "type": "string", "description": "New node's value." }
            ]
        },
        {
            "name": "removeNode",
            "description": "Removes node with given id.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to remove." }
            ]
        },
        {
            "name": "setAttributeValue",
            "description": "Sets attribute for an element with given id.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attribute for." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ]
        },
        {
            "name": "setAttributesAsText",
            "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attributes for." },
                { "name": "text", "type": "string", "description": "Text with a number of attributes. Will parse this text using HTML parser." },
                { "name": "name", "type": "string", "optional": true, "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully." }
            ]
        },
        {
            "name": "removeAttribute",
            "description": "Removes attribute with given name from an element with given id.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to remove attribute from." },
                { "name": "name", "type": "string", "description": "Name of the attribute to remove." }
            ]
        },
        {
            "name": "getSupportedEventNames",
            "description": "Gets the list of builtin DOM event names.",
            "returns": [
                { "name": "eventNames", "type": "array", "items": { "type": "string" } }
            ]
        },
        {
            "name": "getDataBindingsForNode",
            "description": "Returns all data binding relationships between data that is associated with the node and the node itself.",
            "condition": "defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS",
            "targetTypes": ["itml"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get data bindings for." }
            ],
            "returns": [
                { "name": "dataBindings", "type": "array", "items": { "$ref": "DataBinding"}, "description": "Array of binding relationships between data and node" }
            ]
        },
        {
            "name": "getAssociatedDataForNode",
            "description": "Returns all data that has been associated with the node and is available for data binding.",
            "condition": "defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS",
            "targetTypes": ["itml"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get associated data for." }
            ],
            "returns": [
                { "name": "associatedData", "type": "string", "optional": true, "description": "Associated data bound to this node. Sent as a JSON string." }
            ]
        },
        {
            "name": "getEventListenersForNode",
            "description": "Returns event listeners relevant to the node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get listeners for." }
            ],
            "returns": [
                { "name": "listeners", "type": "array", "items": { "$ref": "EventListener"}, "description": "Array of relevant listeners." }
            ]
        },
        {
            "name": "setEventListenerDisabled",
            "description": "Enable/disable the given event listener. A disabled event listener will not fire.",
            "parameters": [
                { "name": "eventListenerId", "$ref": "EventListenerId" },
                { "name": "disabled", "type": "boolean" }
            ]
        },
        {
            "name": "setBreakpointForEventListener",
            "description": "Set a breakpoint on the given event listener.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "eventListenerId", "$ref": "EventListenerId" },
                { "name": "options", "$ref": "Debugger.BreakpointOptions", "optional": true, "description": "Options to apply to this breakpoint to modify its behavior." }
            ]
        },
        {
            "name": "removeBreakpointForEventListener",
            "description": "Remove any breakpoints on the given event listener.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "eventListenerId", "$ref": "EventListenerId" }
            ]
        },
        {
            "name": "getAccessibilityPropertiesForNode",
            "description": "Returns a dictionary of accessibility properties for the node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for which to get accessibility properties." }
            ],
            "returns": [
                { "name": "properties", "$ref": "AccessibilityProperties", "description": "Dictionary of relevant accessibility properties." }
            ]
        },
        {
            "name": "getOuterHTML",
            "description": "Returns node's HTML markup.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get markup for." }
            ],
            "returns": [
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup." }
            ]
        },
        {
            "name": "setOuterHTML",
            "description": "Sets node HTML markup, returns new node id.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set markup for." },
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup to set." }
            ]
        },
        {
            "name": "insertAdjacentHTML",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId" },
                { "name": "position", "type": "string" },
                { "name": "html", "type": "string" }
            ]
        },
        {
            "name": "performSearch",
            "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.",
            "parameters": [
                { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." },
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Ids of nodes to use as starting points for the search." },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." }
            ],
            "returns": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "resultCount", "type": "integer", "description": "Number of search results." }
            ]
        },
        {
            "name": "getSearchResults",
            "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier.",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "fromIndex", "type": "integer", "description": "Start index of the search result to be returned." },
                { "name": "toIndex", "type": "integer", "description": "End index of the search result to be returned." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the search result nodes." }
            ]
        },
        {
            "name": "discardSearchResults",
            "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." }
            ]
        },
        {
            "name": "requestNode",
            "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "JavaScript object id to convert into node." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node id for given object." }
            ]
        },
        {
            "name": "setInspectModeEnabled",
            "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspect' command upon element selection.",
            "condition": "defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True to enable inspection mode, false to disable it." },
                { "name": "highlightConfig", "$ref": "HighlightConfig", "optional": true, "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>." }
            ]
        },
        {
            "name": "setInspectModeEnabled",
            "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspect' command upon element selection.",
            "condition": "!(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True to enable inspection mode, false to disable it." },
                { "name": "highlightConfig", "$ref": "HighlightConfig", "optional": true, "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>." },
                { "name": "showRulers", "type": "boolean", "optional": true, "description": "Whether the rulers should be shown during element selection. This overrides Page.setShowRulers." }
            ]
        },
        {
            "name": "highlightRect",
            "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "x", "type": "integer", "description": "X coordinate" },
                { "name": "y", "type": "integer", "description": "Y coordinate" },
                { "name": "width", "type": "integer", "description": "Rectangle width" },
                { "name": "height", "type": "integer", "description": "Rectangle height" },
                { "name": "color", "$ref": "RGBAColor", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBAColor", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ]
        },
        {
            "name": "highlightQuad",
            "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "quad", "$ref": "Quad", "description": "Quad to highlight" },
                { "name": "color", "$ref": "RGBAColor", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBAColor", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ]
        },
        {
            "name": "highlightSelector",
            "description": "Highlights all DOM nodes that match a given selector. A string containing a CSS selector must be specified.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "highlightConfig", "$ref": "HighlightConfig", "description": "A descriptor for the highlight appearance." },
                { "name": "selectorString", "type": "string", "description": "A CSS selector for finding matching nodes to highlight." },
                { "name": "frameId", "type": "string", "optional": true, "description": "Identifier of the frame which will be searched using the selector.  If not provided, the main frame will be used." }
            ]
        },
        {
            "name": "highlightNode",
            "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.",
            "parameters": [
                { "name": "highlightConfig", "$ref": "HighlightConfig", "description": "A descriptor for the highlight appearance." },
                { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "Identifier of the node to highlight." },
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "optional": true, "description": "JavaScript object id of the node to be highlighted." }
            ]
        },
        {
            "name": "highlightNodeList",
            "description": "Highlights each DOM node in the given list.",
            "parameters": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" } },
                { "name": "highlightConfig", "$ref": "HighlightConfig" }
            ]
        },
        {
            "name": "hideHighlight",
            "description": "Hides DOM node highlight."
        },
        {
            "name": "highlightFrame",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame to highlight." },
                { "name": "contentColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "contentOutlineColor", "$ref": "RGBAColor", "optional": true, "description": "The content box highlight outline color (default: transparent)." }
            ],
            "description": "Highlights owner element of the frame with given id."
        },
        {
            "name": "showGridOverlay",
            "description": "Shows a grid overlay for a node that begins a 'grid' layout context. The command has no effect if <code>nodeId</code> is invalid or the associated node does not begin a 'grid' layout context. A node can only have one grid overlay at a time; subsequent calls with the same <code>nodeId</code> will override earlier calls.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "The node for which a grid overlay should be shown." },
                { "name": "gridColor", "$ref": "RGBAColor", "description": "The primary color to use for the grid overlay." },
                { "name": "showLineNames", "type": "boolean", "optional": true, "description": "Show labels for grid line names. If not specified, the default value is false." },
                { "name": "showLineNumbers", "type": "boolean", "optional": true, "description": "Show labels for grid line numbers. If not specified, the default value is false." },
                { "name": "showExtendedGridLines", "type": "boolean", "optional": true, "description": "Show grid lines that extend beyond the bounds of the grid. If not specified, the default value is false." },
                { "name": "showTrackSizes", "type": "boolean", "optional": true, "description": "Show grid track size information. If not specified, the default value is false." },
                { "name": "showAreaNames", "type": "boolean", "optional": true, "description": "Show labels for grid area names. If not specified, the default value is false." }
            ]
        },
        {
            "name": "hideGridOverlay",
            "description": "Hides a grid overlay for a node that begins a 'grid' layout context. The command has no effect if <code>nodeId</code> is specified and invalid, or if there is not currently an overlay set for the <code>nodeId</code>.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "The node for which a grid overlay should be hidden. If a <code>nodeId</code> is not specified, all grid overlays will be hidden." }
            ]
        },
        {
            "name": "pushNodeByPathToFrontend",
            "description": "Requests that the node is sent to the caller given its path.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "path", "type": "string", "description": "Path to node in the proprietary format." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for given path." }
            ]
        },
        {
            "name": "resolveNode",
            "description": "Resolves JavaScript node object for given node id.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to resolve." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
            ],
            "returns": [
                { "name": "object", "$ref": "Runtime.RemoteObject", "description": "JavaScript object wrapper for given node." }
            ]
        },
        {
            "name": "getAttributes",
            "description": "Returns attributes for the specified node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to retrieve attributes for." }
            ],
            "returns": [
                { "name": "attributes", "type": "array", "items": { "type": "string" }, "description": "An interleaved array of node attribute names and values." }
            ]
        },
        {
            "name": "moveTo",
            "description": "Moves node into the new container, places it before the given anchor.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to drop." },
                { "name": "targetNodeId", "$ref": "NodeId", "description": "Id of the element to drop into." },
                { "name": "insertBeforeNodeId", "$ref": "NodeId", "optional": true, "description": "Drop node before given one." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New id of the moved node." }
            ]
        },
        {
            "name": "undo",
            "description": "Undoes the last performed action.",
            "targetTypes": ["page"]
        },
        {
            "name": "redo",
            "description": "Re-does the last undone action.",
            "targetTypes": ["page"]
        },
        {
            "name": "markUndoableState",
            "description": "Marks last undoable state.",
            "targetTypes": ["page"]
        },
        {
            "name": "focus",
            "description": "Focuses the given element.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to focus." }
            ]
        },
        {
            "name": "setInspectedNode",
            "description": "Enables console to refer to the node with given id via $0 (see Command Line API for more details).",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "DOM node id to be accessible by means of $0 command line API." }
            ]
        },
        {
            "name": "setAllowEditingUserAgentShadowTrees",
            "description": "Controls whether any DOM commands work for nodes inside a UserAgent shadow tree.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "allow", "type": "boolean" }
            ]
        }
    ],
    "events": [
        {
            "name": "documentUpdated",
            "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
            "name": "inspect",
            "description": "Inspect a particular node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Equivalent of Inspector.inspect but with a nodeId instead of a RemoteObject. Useful for augmented contexts." }
            ]
        },
        {
            "name": "setChildNodes",
            "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.",
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Parent node id to populate with children." },
                { "name": "nodes", "type": "array", "items": { "$ref": "Node"}, "description": "Child nodes array." }
            ]
        },
        {
            "name": "attributeModified",
            "description": "Fired when <code>Element</code>'s attribute is modified.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ]
        },
        {
            "name": "attributeRemoved",
            "description": "Fired when <code>Element</code>'s attribute is removed.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "Attribute name." }
            ]
        },
        {
            "name": "inlineStyleInvalidated",
            "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification.",
            "parameters": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the nodes for which the inline styles have been invalidated." }
            ]
        },
        {
            "name": "characterDataModified",
            "description": "Mirrors <code>DOMCharacterDataModified</code> event.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "characterData", "type": "string", "description": "New text value." }
            ]
        },
        {
            "name": "childNodeCountUpdated",
            "description": "Fired when <code>Container</code>'s child node count has changed.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "childNodeCount", "type": "integer", "description": "New node count." }
            ]
        },
        {
            "name": "childNodeInserted",
            "description": "Mirrors <code>DOMNodeInserted</code> event.",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "previousNodeId", "$ref": "NodeId", "description": "Id of the previous sibling." },
                { "name": "node", "$ref": "Node", "description": "Inserted node data." }
            ]
        },
        {
            "name": "childNodeRemoved",
            "description": "Mirrors <code>DOMNodeRemoved</code> event.",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Parent id." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has been removed." }
            ]
        },
        {
            "name": "willDestroyDOMNode",
            "description": "Fired when a detached DOM node is about to be destroyed. Currently, this event will only be fired when a DOM node that is detached is about to be destructed.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that will be destroyed." }
            ]
        },
        {
            "name": "shadowRootPushed",
            "description": "Called when shadow root is pushed into the element.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "root", "$ref": "Node", "description": "Shadow root." }
            ]
        },
        {
            "name": "shadowRootPopped",
            "description": "Called when shadow root is popped from the element.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "rootId", "$ref": "NodeId", "description": "Shadow root id." }
            ]
        },
        {
            "name": "customElementStateChanged",
            "description": "Called when the custom element state is changed.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Element id." },
                { "name": "customElementState", "$ref": "CustomElementState", "description": "Custom element state." }
            ]
        },
        {
            "name": "pseudoElementAdded",
            "description": "Called when a pseudo element is added to an element.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Pseudo element's parent element id." },
                { "name": "pseudoElement", "$ref": "Node", "description": "The added pseudo element." }
            ]
        },
        {
            "name": "pseudoElementRemoved",
            "description": "Called when a pseudo element is removed from an element.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Pseudo element's parent element id." },
                { "name": "pseudoElementId", "$ref": "NodeId", "description": "The removed pseudo element id." }
            ]
        },
        {
            "name": "didAddEventListener",
            "description": "Called when an event listener is added to a node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId" }
            ]
        },
        {
            "name": "willRemoveEventListener",
            "description": "Called after a request has been made to remove an event listener from a node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId" }
            ]
        },
        {
            "name": "didFireEvent",
            "description": "Called when an event is fired on a node.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId" },
                { "name": "eventName", "type": "string" },
                { "name": "timestamp", "$ref": "Network.Timestamp", "description": "Time when the event was fired" },
                { "name": "data", "type": "object", "optional": true, "description": "Holds ancillary information about the event or its target." }
            ]
        },
        {
            "name": "powerEfficientPlaybackStateChanged",
            "description": "Called when an element enters/exits a power efficient playback state.",
            "condition": "defined(ENABLE_VIDEO) && ENABLE_VIDEO",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId" },
                { "name": "timestamp", "$ref": "Network.Timestamp" },
                { "name": "isPowerEfficient", "type": "boolean" }
            ]
        }
    ]
}
