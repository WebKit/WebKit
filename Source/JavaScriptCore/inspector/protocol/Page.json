{
    "domain": "Page",
    "description": "Actions and events related to the inspected page belong to the page domain.",
    "debuggableTypes": ["itml", "page", "web-page"],
    "targetTypes": ["itml", "page"],
    "types": [
        {
            "id": "Setting",
            "type": "string",
            "description": "List of settings able to be overridden by WebInspector.",
            "enum": [
                "PrivateClickMeasurementDebugModeEnabled",
                "AuthorAndUserStylesEnabled",
                "ICECandidateFilteringEnabled",
                "ITPDebugModeEnabled",
                "ImagesEnabled",
                "MediaCaptureRequiresSecureConnection",
                "MockCaptureDevicesEnabled",
                "NeedsSiteSpecificQuirks",
                "ScriptEnabled",
                "ShowDebugBorders",
                "ShowRepaintCounter",
                "WebRTCEncryptionEnabled",
                "WebSecurityEnabled",
                "DeviceOrientationEventEnabled",
                "SpeechRecognitionEnabled",
                "PointerLockEnabled",
                "NotificationsEnabled",
                "FullScreenEnabled",
                "InputTypeMonthEnabled",
                "InputTypeWeekEnabled"
            ]
        },
        {
            "id": "ResourceType",
            "type": "string",
            "enum": ["Document", "StyleSheet", "Image", "Font", "Script", "XHR", "Fetch", "Ping", "Beacon", "WebSocket", "EventSource", "Other"],
            "description": "Resource type as it was perceived by the rendering engine."
        },
        {
            "id": "CoordinateSystem",
            "type": "string",
            "enum": ["Viewport", "Page"],
            "description": "Coordinate system used by supplied coordinates."
        },
        {
            "id": "CookieSameSitePolicy",
            "type": "string",
            "enum": ["None", "Lax", "Strict"],
            "description": "Same-Site policy of a cookie."
        },
        {
            "id": "Appearance",
            "type": "string",
            "condition": "(defined(ENABLE_DARK_MODE_CSS) && ENABLE_DARK_MODE_CSS) || (defined(HAVE_OS_DARK_MODE_SUPPORT) && HAVE_OS_DARK_MODE_SUPPORT)",
            "enum": ["Light", "Dark"],
            "description": "Page appearance name."
        },
        {
            "id": "ReducedMotion",
            "type": "string",
            "enum": ["Reduce", "NoPreference"],
            "description": "Page reduced-motion media query override."
        },
        {
            "id": "Frame",
            "type": "object",
            "description": "Information about the Frame on the page.",
            "properties": [
                { "name": "id", "type": "string", "description": "Frame unique identifier." },
                { "name": "parentId", "type": "string", "optional": true, "description": "Parent frame identifier." },
                { "name": "loaderId", "$ref": "Network.LoaderId", "description": "Identifier of the loader associated with this frame." },
                { "name": "name", "type": "string", "optional": true, "description": "Frame's name as specified in the tag." },
                { "name": "url", "type": "string", "description": "Frame document's URL." },
                { "name": "securityOrigin", "type": "string", "description": "Frame document's security origin." },
                { "name": "mimeType", "type": "string", "description": "Frame document's mimeType as determined by the browser." }
            ]
        },
        {
            "id": "FrameResource",
            "type": "object",
            "properties": [
                { "name": "url", "type": "string", "description": "Resource URL." },
                { "name": "type", "$ref": "ResourceType", "description": "Type of this resource." },
                { "name": "mimeType", "type": "string", "description": "Resource mimeType as determined by the browser." },
                { "name": "failed", "type": "boolean", "optional": true, "description": "True if the resource failed to load." },
                { "name": "canceled", "type": "boolean", "optional": true, "description": "True if the resource was canceled during loading." },
                { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with this resource (if any)." },
                { "name": "targetId", "type": "string", "optional": true, "description": "Identifier for the context of where the load originated. In general this is the target identifier. For Workers this will be the workerId." }
            ]
        },
        {
            "id": "FrameResourceTree",
            "type": "object",
            "description": "Information about the Frame hierarchy along with their cached resources.",
            "properties": [
                { "name": "frame", "$ref": "Frame", "description": "Frame information for this tree item." },
                { "name": "childFrames", "type": "array", "optional": true, "items": { "$ref": "FrameResourceTree" }, "description": "Child frames." },
                { "name": "resources", "type": "array", "items": { "$ref": "FrameResource" }, "description": "Information about frame resources." }
            ]
        },
        {
            "id": "SearchResult",
            "type": "object",
            "description": "Search result for resource.",
            "properties": [
                { "name": "url", "type": "string", "description": "Resource URL." },
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Resource frame id." },
                { "name": "matchesCount", "type": "number", "description": "Number of matches in the resource content." },
                { "name": "requestId", "$ref": "Network.RequestId", "optional": true, "description": "Network request id." }
            ]
        },
        {
            "id": "Cookie",
            "type": "object",
            "description": "Cookie object",
            "properties": [
                { "name": "name", "type": "string", "description": "Cookie name." },
                { "name": "value", "type": "string", "description": "Cookie value." },
                { "name": "domain", "type": "string", "description": "Cookie domain." },
                { "name": "path", "type": "string", "description": "Cookie path." },
                { "name": "expires", "type": "number", "description": "Cookie expires." },
                { "name": "session", "type": "boolean", "description": "True in case of session cookie." },
                { "name": "httpOnly", "type": "boolean", "description": "True if cookie is http-only." },
                { "name": "secure", "type": "boolean", "description": "True if cookie is secure." },
                { "name": "sameSite", "$ref": "CookieSameSitePolicy", "description": "Cookie Same-Site policy." }
            ]
        },
        {
            "id": "AXNode",
            "type": "object",
            "description": "Accessibility Node",
            "properties": [
                { "name": "role", "type": "string", "description": "The role."},
                { "name": "name", "type": "string","optional": true, "description": "A human readable name for the node."},
                { "name": "value", "type": "any", "optional": true, "description": "The current value of the node."},
                { "name": "description", "type": "string", "optional": true, "description": "An additional human readable description of the node."},
                { "name": "keyshortcuts", "type": "string", "optional": true, "description": "Keyboard shortcuts associated with this node."},
                { "name": "roledescription", "type": "string", "optional": true, "description": "A human readable alternative to the role."},
                { "name": "valuetext", "type": "string", "optional": true, "description": "A description of the current value."},
                { "name": "disabled", "type": "boolean", "optional": true, "description": "Whether the node is disabled."},
                { "name": "expanded", "type": "boolean", "optional": true, "description": "Whether the node is expanded or collapsed."},
                { "name": "focused", "type": "boolean", "optional": true, "description": "Whether the node is focused."},
                { "name": "modal", "type": "boolean", "optional": true, "description": "Whether the node is modal."},
                { "name": "multiline", "type": "boolean", "optional": true, "description": "Whether the node text input supports multiline."},
                { "name": "multiselectable", "type": "boolean", "optional": true, "description": "Whether more than one child can be selected."},
                { "name": "readonly", "type": "boolean", "optional": true, "description": "Whether the node is read only."},
                { "name": "required", "type": "boolean", "optional": true, "description": "Whether the node is required."},
                { "name": "selected", "type": "boolean", "optional": true, "description": "Whether the node is selected in its parent node."},
                { "name": "checked", "type": "string", "optional": true, "enum": ["true", "false", "mixed"], "description": "Whether the checkbox is checked, or \"mixed\"."},
                { "name": "pressed", "type": "string", "optional": true, "enum": ["true", "false", "mixed"], "description": "Whether the toggle button is checked, or \"mixed\"."},
                { "name": "level", "type": "integer", "optional": true, "description": "The level of a heading."},
                { "name": "valuemin", "type": "number", "optional": true, "description": "The minimum value in a node."},
                { "name": "valuemax", "type": "number", "optional": true, "description": "The maximum value in a node."},
                { "name": "autocomplete", "type": "string", "optional": true, "description": "What kind of autocomplete is supported by a control."},
                { "name": "haspopup", "type": "string", "optional": true, "description": "What kind of popup is currently being shown for a node."},
                { "name": "invalid", "type": "string", "optional": true, "enum": ["true", "false", "grammar", "spelling"], "description": "Whether and in what way this node's value is invalid."},
                { "name": "orientation", "type": "string", "optional": true, "description": "Whether the node is oriented horizontally or vertically."},
                { "name": "focusable", "type": "boolean", "optional": true, "description": "Whether the node is focusable."},
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "AXNode"}, "description": "Child AXNodes of this node, if any."},
                { "name": "found", "type": "boolean", "optional": true, "description": "True if this AXNode corresponds with the ObjectId passed into acessibilitySnapshot."}
            ]
        },
        {
            "id": "Insets",
            "type": "object",
            "properties": [
                { "name": "top", "type": "number" },
                { "name": "right", "type": "number" },
                { "name": "bottom", "type": "number" },
                { "name": "left", "type": "number" }
            ]
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables page domain notifications."
        },
        {
            "name": "disable",
            "description": "Disables page domain notifications."
        },
        {
            "name": "reload",
            "description": "Reloads the main frame of the inspected page.",
            "parameters": [
                { "name": "ignoreCache", "type": "boolean", "optional": true, "description": "If true, the page is reloaded from its origin without using cached resources." },
                { "name": "revalidateAllResources", "type": "boolean", "optional": true, "description": "If true, all cached subresources will be revalidated when the main resource loads. Otherwise, only expired cached subresources will be revalidated (the default behavior for most WebKit clients)." }
            ]
        },
        {
            "name": "goBack",
            "description": "Goes back in the history."
        },
        {
            "name": "goForward",
            "description": "Goes forward in the history."
        },
        {
            "name": "navigate",
            "description": "Navigates current page to the given URL.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "url", "type": "string", "description": "URL to navigate the page to." }
            ]
        },
        {
            "name": "overrideUserAgent",
            "description": "Override's the user agent of the inspected page",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "value", "type": "string", "optional": true, "description": "Value to override the user agent with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects." }
            ]
        },
        {
            "name": "overridePlatform",
            "description": "Override's the navigator.platform of the inspected page",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "value", "type": "string", "optional": true, "description": "Value to override the platform with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects." }
            ]
        },
        {
            "name": "overrideSetting",
            "description": "Allows the frontend to override the inspected page's settings.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "setting", "$ref": "Setting" },
                { "name": "value", "type": "boolean", "optional": true, "description": "Value to override the setting with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects." }
            ]
        },
        {
            "name": "getCookies",
            "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.",
            "targetTypes": ["page"],
            "returns": [
                { "name": "cookies", "type": "array", "items": { "$ref": "Cookie"}, "description": "Array of cookie objects." }
            ]
        },
        {
            "name": "setCookie",
            "description": "Sets a new browser cookie with the given name, domain, and path.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "cookie", "$ref": "Cookie" }
            ]
        },
        {
            "name": "deleteCookie",
            "description": "Deletes browser cookie with given name, domain, and path.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "cookieName", "type": "string", "description": "Name of the cookie to remove." },
                { "name": "url", "type": "string", "description": "URL to match cookie domain and path." }
            ]
        },
        {
            "name": "getResourceTree",
            "description": "Returns present frame / resource tree structure.",
            "returns": [
                { "name": "frameTree", "$ref": "FrameResourceTree", "description": "Present frame / resource tree structure." }
            ]
        },
        {
            "name": "getResourceContent",
            "description": "Returns content of the given resource.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id to get resource for." },
                { "name": "url", "type": "string", "description": "URL of the resource to get content for." }
            ],
            "returns": [
                { "name": "content", "type": "string", "description": "Resource content." },
                { "name": "base64Encoded", "type": "boolean", "description": "True, if content was served as base64." }
            ]
        },
        {
            "name": "setBootstrapScript",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "source", "type": "string", "optional": true, "description": "If `source` is provided (and not empty), it will be injected into all future global objects as soon as they're created. Omitting `source` will stop this from happening." },
                { "name": "worldName", "type": "string", "optional": true, "description": "Isolated world name to evaluate the script in. If not specified main world will be used." }
            ]
        },
        {
            "name": "searchInResource",
            "description": "Searches for given string in resource content.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id for resource to search in." },
                { "name": "url", "type": "string", "description": "URL of the resource to search in." },
                { "name": "query", "type": "string", "description": "String to search for." },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." },
                { "name": "requestId", "$ref": "Network.RequestId", "optional": true, "description": "Request id for resource to search in." }
            ],
            "returns": [
                { "name": "result", "type": "array", "items": { "$ref": "GenericTypes.SearchMatch" }, "description": "List of search matches." }
            ]
        },
        {
            "name": "searchInResources",
            "description": "Searches for given string in frame / resource tree structure.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "text", "type": "string", "description": "String to search for." },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
            ],
            "returns": [
                { "name": "result", "type": "array", "items": { "$ref": "SearchResult" }, "description": "List of search results." }
            ]
        },
        {
            "name": "setShowRulers",
            "description": "Requests that backend draw rulers in the inspector overlay",
            "condition": "!(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "result", "type": "boolean", "description": "True for showing rulers" }
            ]
        },
        {
            "name": "setShowPaintRects",
            "description": "Requests that backend shows paint rectangles",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "result", "type": "boolean", "description": "True for showing paint rectangles" }
            ]
        },
        {
            "name": "setEmulatedMedia",
            "description": "Emulates the given media for CSS media queries.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "media", "type": "string", "description": "Media type to emulate. Empty string disables the override." }
            ]
        },
        {
            "name": "setForcedAppearance",
            "description": "Forces the given appearance for the page.",
            "condition": "(defined(ENABLE_DARK_MODE_CSS) && ENABLE_DARK_MODE_CSS) || (defined(HAVE_OS_DARK_MODE_SUPPORT) && HAVE_OS_DARK_MODE_SUPPORT)",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "appearance", "$ref": "Appearance", "optional": true }
            ]
        },
        {
            "name": "setForcedReducedMotion",
            "description": "Forces the reduced-motion media query for the page.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "reducedMotion", "$ref": "ReducedMotion", "optional": true }
            ]
        },
        {
            "name": "setTimeZone",
            "description": "Enables time zone emulation.",
            "parameters": [
                { "name": "timeZone", "type": "string", "optional": true }
            ]
        },
        {
            "name": "setTouchEmulationEnabled",
            "description": "Enables touch events on platforms that lack them.",
            "parameters": [
                {"name": "enabled", "type": "boolean", "description": "Whether touch should be enabled."}
            ]
        },
        {
            "name": "snapshotNode",
            "description": "Capture a snapshot of the specified node that does not include unrelated layers.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id of the node to snapshot." }
            ],
            "returns": [
                { "name": "dataURL", "type": "string", "description": "Base64-encoded image data (PNG)." }
            ]
        },
        {
            "name": "snapshotRect",
            "description": "Capture a snapshot of the page within the specified rectangle and coordinate system.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "x", "type": "integer", "description": "X coordinate" },
                { "name": "y", "type": "integer", "description": "Y coordinate" },
                { "name": "width", "type": "integer", "description": "Rectangle width" },
                { "name": "height", "type": "integer", "description": "Rectangle height" },
                { "name": "coordinateSystem", "$ref": "CoordinateSystem", "description": "Indicates the coordinate system of the supplied rectangle." },
                { "name": "omitDeviceScaleFactor", "type": "boolean", "optional": true, "description": "By default, screenshot is inflated by device scale factor to avoid blurry image. This flag disables it." }
            ],
            "returns": [
                { "name": "dataURL", "type": "string", "description": "Base64-encoded image data (PNG)." }
            ]
        },
        {
            "name": "archive",
            "description": "Grab an archive of the page.",
            "condition": "(defined(ENABLE_WEB_ARCHIVE) && ENABLE_WEB_ARCHIVE) && (defined(USE_CF) && USE_CF)",
            "targetTypes": ["page"],
            "returns": [
                { "name": "data", "type": "string", "description": "Base64-encoded web archive." }
            ]
        },
        {
            "name": "setScreenSizeOverride",
            "description": "Overrides screen size exposed to DOM and used in media queries for testing with provided values.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "width", "type": "integer", "description": "Screen width", "optional": true },
                { "name": "height", "type": "integer", "description": "Screen height", "optional": true }
            ]
        },
        {
            "name": "insertText",
            "description": "Insert text into the current selection of the page.",
            "parameters": [
                { "name": "text", "type": "string", "description": "Text to insert." }
            ]
        },
        {
            "name": "accessibilitySnapshot",
            "description": "Serializes and returns all of the accessibility nodes of the page.",
            "parameters": [
                { "name": "objectId", "type": "string", "optional": true, "description": "Object Id of a node to find in the accessibility tree."}
            ],
            "returns": [
                { "name": "axNode", "$ref": "AXNode", "description": "The root AXNode."}
            ]
        },
        {
            "name": "setInterceptFileChooserDialog",
            "description": "Intercepts file chooser dialog",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True to enable." }
            ]
        },
        {
            "name": "setDefaultBackgroundColorOverride",
            "description": "Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.",
            "parameters": [
                { "name": "color", "$ref": "DOM.RGBAColor", "optional": true, "description": "RGBA of the default background color. If not specified, any existing override will be cleared." }
            ]
        },
        {
            "name": "createUserWorld",
            "description": "Creates an user world for every loaded frame.",
            "parameters": [
                { "name": "name", "type": "string", "description": "Isolated world name, will be used as an execution context name." }
            ]
        },
        {
            "name": "setBypassCSP",
            "description": "Enable page Content Security Policy by-passing.",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "Whether to bypass page CSP." }
            ]
        },
        {
            "name": "crash",
            "description": "Crashes the page process"
        },
        {
            "name": "setOrientationOverride",
            "description": "Overrides window.orientation with provided value.",
            "parameters": [
                { "name": "angle", "type": "integer", "optional": true }
            ]
        },
        {
            "name": "setVisibleContentRects",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "unobscuredContentRect", "$ref": "DOM.Rect", "optional": true },
                { "name": "contentInsets", "$ref": "Insets", "optional": true },
                { "name": "obscuredInsets", "$ref": "Insets", "optional": true },
                { "name": "unobscuredInsets", "$ref": "Insets", "optional": true }
            ]
        },
        {
            "name": "updateScrollingState",
            "description": "Ensures that the scroll regions are up to date."
        }
    ],
    "events": [
        {
            "name": "domContentEventFired",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "timestamp", "type": "number" },
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has fired DOMContentLoaded event." }
            ]
        },
        {
            "name": "loadEventFired",
            "targetTypes": ["page"],
            "parameters": [
              { "name": "timestamp", "type": "number" },
              { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has fired load event." }
            ]
        },
        {
            "name": "frameNavigated",
            "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
            "parameters": [
                { "name": "frame", "$ref": "Frame", "description": "Frame object." }
            ]
        },
        {
          "name": "frameAttached",
          "description": "Fired when frame has been attached to its parent.",
          "parameters": [
              { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has been detached." },
              { "name": "parentFrameId", "$ref": "Network.FrameId", "optional": true, "description": "Parent frame id if non-root." }
          ]
        },
        {
            "name": "frameDetached",
            "description": "Fired when frame has been detached from its parent.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has been detached." }
            ]
        },
        {
            "name": "frameStartedLoading",
            "description": "Fired when frame has started loading.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has started loading." }
            ]
        },
        {
            "name": "frameStoppedLoading",
            "description": "Fired when frame has stopped loading.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has stopped loading." }
            ]
        },
        {
            "name": "frameScheduledNavigation",
            "description": "Fired when frame schedules a potential navigation.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has scheduled a navigation." },
                { "name": "delay", "type": "number", "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start." }
            ]
        },
        {
            "name": "frameClearedScheduledNavigation",
            "description": "Fired when frame no longer has a scheduled navigation.",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has cleared its scheduled navigation." }
            ]
        },
        {
            "name": "navigatedWithinDocument",
            "description": "Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.",
            "parameters": [
                {
                    "name": "frameId",
                    "description": "Id of the frame.",
                    "$ref": "Network.FrameId"
                },
                {
                    "name": "url",
                    "description": "Frame's new url.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "defaultAppearanceDidChange",
            "description": "Fired when page's default appearance changes, even if there is a forced appearance.",
            "condition": "(defined(ENABLE_DARK_MODE_CSS) && ENABLE_DARK_MODE_CSS) || (defined(HAVE_OS_DARK_MODE_SUPPORT) && HAVE_OS_DARK_MODE_SUPPORT)",
            "targetTypes": ["page"],
            "parameters": [
                { "name": "appearance", "$ref": "Appearance", "description": "Name of the appearance that is active (not considering any forced appearance.)" }
            ]
        },
        {
          "name": "willRequestOpenWindow",
          "description": "Fired when page tries to open a new window.",
          "parameters": [
              { "name": "url", "type": "string" }
          ]
        },
        {
          "name": "didRequestOpenWindow",
          "description": "Fired after page did try to open a new window.",
          "parameters": [
              { "name": "opened", "type": "boolean" }
          ]
        },
        {
            "name": "fileChooserOpened",
            "description": "Fired when the page shows file chooser for it's <input type=file>.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame where file chooser is opened." },
                { "name": "element", "$ref": "Runtime.RemoteObject", "description": "Input element." }
            ]
        }
    ]
}
