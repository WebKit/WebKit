{
    "comments": ["This file describes the WebAssembly ISA.",
                 "Scripts in this folder auto-generate C++ code for JavaScriptCore as well as the testing DSL which WebKit's WebAssembly tests use."
                ],
    "preamble": [
        { "name": "magic number", "type": "uint32", "value": 1836278016, "description": "NULL character followed by 'asm'" },
        { "name": "version",      "type": "uint32", "value":          1, "description": "Version number" }
    ],
    "type" : {
        "i32":       { "type": "varint7", "value":   -1, "b3type": "B3::Int32" },
        "i64":       { "type": "varint7", "value":   -2, "b3type": "B3::Int64" },
        "f32":       { "type": "varint7", "value":   -3, "b3type": "B3::Float" },
        "f64":       { "type": "varint7", "value":   -4, "b3type": "B3::Double" },
        "funcref":   { "type": "varint7", "value":  -16, "b3type": "B3::Int64" },
        "externref": { "type": "varint7", "value":  -17, "b3type": "B3::Int64" },
        "ref_null":  { "type": "varint7", "value":  -20, "b3type": "B3::Int64" },
        "ref":       { "type": "varint7", "value":  -21, "b3type": "B3::Int64" },
        "func":      { "type": "varint7", "value":  -32, "b3type": "B3::Void" },
        "void":      { "type": "varint7", "value":  -64, "b3type": "B3::Void" },
        "type_idx":  { "type": "varint7", "value": -128, "b3type": "B3::Int64" }
    },
    "value_type": ["i32", "i64", "f32", "f64", "externref", "funcref"],
    "block_type": ["i32", "i64", "f32", "f64", "void", "externref", "funcref"],
    "ref_type": ["funcref", "externref", "type_idx"],
    "external_kind": {
        "Function": { "type": "uint8", "value": 0 },
        "Table":    { "type": "uint8", "value": 1 },
        "Memory":   { "type": "uint8", "value": 2 },
        "Global":   { "type": "uint8", "value": 3 }
    },
    "section" : {
        "Type":     { "type": "varuint7", "value":  1, "description": "Function signature declarations" },
        "Import":   { "type": "varuint7", "value":  2, "description": "Import declarations" },
        "Function": { "type": "varuint7", "value":  3, "description": "Function declarations" },
        "Table":    { "type": "varuint7", "value":  4, "description": "Indirect function table and other tables" },
        "Memory":   { "type": "varuint7", "value":  5, "description": "Memory attributes" },
        "Global":   { "type": "varuint7", "value":  6, "description": "Global declarations" },
        "Export":   { "type": "varuint7", "value":  7, "description": "Exports" },
        "Start":    { "type": "varuint7", "value":  8, "description": "Start function declaration" },
        "Element":  { "type": "varuint7", "value":  9, "description": "Elements section" },
        "Code":     { "type": "varuint7", "value": 10, "description": "Function bodies (code)" },
        "Data":     { "type": "varuint7", "value": 11, "description": "Data segments" }
    },
    "opcode": {
        "unreachable":         { "category": "control",    "value":   0, "return": [],                               "parameter": [],                             "immediate": [],                                                                                            "description": "trap immediately" },
        "block":               { "category": "control",    "value":   2, "return": ["control"],                      "parameter": [],                             "immediate": [{"name": "sig", "type": "block_type"}],                                                       "description": "begin a sequence of expressions, yielding 0 or 1 values" },
        "loop":                { "category": "control",    "value":   3, "return": ["control"],                      "parameter": [],                             "immediate": [{"name": "sig", "type": "block_type"}],                                                       "description": "begin a block which can also form control flow loops" },
        "if":                  { "category": "control",    "value":   4, "return": ["control"],                      "parameter": ["bool"],                       "immediate": [{"name": "sig", "type": "block_type"}],                                                       "description": "begin if expression" },
        "else":                { "category": "control",    "value":   5, "return": ["control"],                      "parameter": [],                             "immediate": [],                                                                                            "description": "begin else expression of if" },
        "select":              { "category": "control",    "value":  27, "return": ["prev"],                         "parameter": ["any", "prev", "bool"],        "immediate": [],                                                                                            "description": "select one of two values based on condition" },
        "annotated_select":    { "category": "control",    "value":  28, "return": ["prev"],                         "parameter": ["any", "prev", "bool"],        "immediate": [{"name": "target_types_count", "type": "varuint32",                                           "description": "number of entries in the target types vector"},
                                                                                                                                                                                {"name": "target_types",       "type": "value_type*",                                         "description": "target types that indicate result of select instruction"}],
                                                                                                                                                                                                                                                                              "description": "the same as just select but with the annotation for result types" },
        "br":                  { "category": "control",    "value":  12, "return": [],                               "parameter": [],                             "immediate": [{"name": "relative_depth", "type": "varuint32"}],                                             "description": "break that targets an outer nested block" },
        "br_if":               { "category": "control",    "value":  13, "return": [],                               "parameter": [],                             "immediate": [{"name": "relative_depth", "type": "varuint32"}],                                             "description": "conditional break that targets an outer nested block" },
        "br_table":            { "category": "control",    "value":  14, "return": [],                               "parameter": [],                             "immediate": [{"name": "target_count",   "type": "varuint32",                                               "description": "number of entries in the target_table"},
                                                                                                                                                                                {"name": "target_table",   "type": "varuint32*",                                              "description": "target entries that indicate an outer block or loop to which to break"},
                                                                                                                                                                                {"name": "default_target", "type": "varuint32",                                               "description": "an outer block or loop to which to break in the default case"}],
                                                                                                                                                                                                                                                                              "description": "branch table control flow construct" },
        "return":              { "category": "control",    "value":  15, "return": [],                               "parameter": [],                             "immediate": [],                                                                                            "description": "return zero or one value from this function" },
        "drop":                { "category": "control",    "value":  26, "return": [],                               "parameter": ["any"],                        "immediate": [],                                                                                            "description": "ignore value" },
        "nop":                 { "category": "control",    "value":   1, "return": [],                               "parameter": [],                             "immediate": [],                                                                                            "description": "no operation" },
        "end":                 { "category": "control",    "value":  11, "return": [],                               "parameter": [],                             "immediate": [],                                                                                            "description": "end a block, loop, or if" },
        "i32.const":           { "category": "special",    "value":  65, "return": ["i32"],                          "parameter": [],                             "immediate": [{"name": "value",          "type": "varint32"}],                                              "description": "a constant value interpreted as i32" },
        "i64.const":           { "category": "special",    "value":  66, "return": ["i64"],                          "parameter": [],                             "immediate": [{"name": "value",          "type": "varint64"}],                                              "description": "a constant value interpreted as i64" },
        "f64.const":           { "category": "special",    "value":  68, "return": ["f64"],                          "parameter": [],                             "immediate": [{"name": "value",          "type": "double"}],                                                "description": "a constant value interpreted as f64" },
        "f32.const":           { "category": "special",    "value":  67, "return": ["f32"],                          "parameter": [],                             "immediate": [{"name": "value",          "type": "float"}],                                                 "description": "a constant value interpreted as f32" },
        "ref.null":            { "category": "special",    "value": 208, "return": ["externref", "funcref"],         "parameter": [],                             "immediate": [{"name": "reftype",        "type": "ref_type"}],                                              "description": "a constant null reference" },
        "ref.is_null":         { "category": "special",    "value": 209, "return": ["i32"],                          "parameter": ["externref"],                  "immediate": [],                                                                                            "description": "determine if a reference is null" },
        "ref.func":            { "category": "special",    "value": 210, "return": ["funcref"],                      "parameter": [],                             "immediate": [{"name": "function_index", "type": "varuint32"}],                                             "description": "return a reference to the function at the given index" },
        "get_local":           { "category": "special",    "value":  32, "return": ["any"],                          "parameter": [],                             "immediate": [{"name": "local_index",    "type": "varuint32"}],                                             "description": "read a local variable or parameter" },
        "set_local":           { "category": "special",    "value":  33, "return": [],                               "parameter": ["any"],                        "immediate": [{"name": "local_index",    "type": "varuint32"}],                                             "description": "write a local variable or parameter" },
        "tee_local":           { "category": "special",    "value":  34, "return": ["any"],                          "parameter": ["any"],                        "immediate": [{"name": "local_index",    "type": "varuint32"}],                                             "description": "write a local variable or parameter and return the same value" },
        "get_global":          { "category": "special",    "value":  35, "return": ["any"],                          "parameter": [],                             "immediate": [{"name": "global_index",   "type": "varuint32"}],                                             "description": "read a global variable" },
        "set_global":          { "category": "special",    "value":  36, "return": [],                               "parameter": ["any"],                        "immediate": [{"name": "global_index",   "type": "varuint32"}],                                             "description": "write a global variable" },
        "table.get":           { "category": "special",    "value":  37, "return": ["externref"],                    "parameter": ["i32"],                        "immediate": [{"name": "table_index",    "type": "varuint32"}],                                             "description": "get a table value" },
        "table.set":           { "category": "special",    "value":  38, "return": [],                               "parameter": ["i32", "externref"],           "immediate": [{"name": "table_index",    "type": "varuint32"}],                                             "description": "set a table value" },
        "table.init":          { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "i32", "i32"],          "immediate": [{"name": "element_index",  "type": "varuint32"}, {"name": "table_index","type": "varuint32"}],"description": "initialize table from a given element", "extendedOp": 12 },
        "elem.drop":           { "category": "exttable",   "value":  252, "return": [],                              "parameter": [],                             "immediate": [{"name": "element_index",  "type": "varuint32"}],                                             "description": "prevents further use of a passive element segment", "extendedOp": 13 },
        "table.grow":          { "category": "exttable",   "value":  252, "return": ["i32"],                         "parameter": ["externref", "i32"],           "immediate": [{"name": "table_index",    "type": "varuint32"}],                                             "description": "grow a table by the given delta and return the previous size, or -1 if enough space cannot be allocated", "extendedOp": 15 },
        "table.size":          { "category": "exttable",   "value":  252, "return": ["i32"],                         "parameter": [],                             "immediate": [{"name": "table_index",    "type": "varuint32"}],                                             "description": "get the size of a table", "extendedOp": 16 },
        "table.fill":          { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "externref", "i32"],    "immediate": [{"name": "table_index",    "type": "varuint32"}],                                             "description": "fill entries [i,i+n) with the given value", "extendedOp": 17 },
        "table.copy":          { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "i32", "i32"],          "immediate": [{"name": "dst_index",      "type": "varuint32"}, {"name": "src_index",  "type": "varuint32"}],"description": "copy table elements from dst_table[dstOffset, dstOffset + length] to src_table[srcOffset, srcOffset + length]", "extendedOp": 14 },
        "memory.fill":         { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "i32", "i32"],          "immediate": [{"name": "unused",         "type": "uint8"}],                                                 "description": "sets all values in a region to a given byte", "extendedOp": 11 },
        "memory.copy":         { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "i32", "i32"],          "immediate": [{"name": "unused",         "type": "uint8"}, {"name": "unused",         "type": "uint8"}],    "description": "copies data from a source memory region to destination region", "extendedOp": 10 },
        "memory.init":         { "category": "exttable",   "value":  252, "return": [],                              "parameter": ["i32", "i32", "i32"],          "immediate": [{"name": "segment_index",  "type": "varuint32"}, {"name": "unsued",  "type": "varuint32"}],   "description": "copies data from a passive data segment into a memory", "extendedOp": 8 },
        "data.drop":           { "category": "exttable",   "value":  252, "return": [],                              "parameter": [],                             "immediate": [{"name": "segment_index",  "type": "varuint32"}],                                             "description": "shrinks the size of the segment to zero", "extendedOp": 9 },
        "call":                { "category": "call",       "value":  16, "return": ["call"],                         "parameter": ["call"],                       "immediate": [{"name": "function_index", "type": "varuint32"}],                                             "description": "call a function by its index" },
        "call_indirect":       { "category": "call",       "value":  17, "return": ["call"],                         "parameter": ["call"],                       "immediate": [{"name": "type_index",     "type": "varuint32"}, {"name": "table_index","type": "varuint32"}],"description": "call a function indirect with an expected signature" },
        "call_ref":            { "category": "call",       "value":  20, "return": ["call"],                         "parameter": ["call"],                       "immediate": [],                                                                                            "description": "call a function reference" },
        "i32.load8_s":         { "category": "memory",     "value":  44, "return": ["i32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i32.load8_u":         { "category": "memory",     "value":  45, "return": ["i32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i32.load16_s":        { "category": "memory",     "value":  46, "return": ["i32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i32.load16_u":        { "category": "memory",     "value":  47, "return": ["i32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load8_s":         { "category": "memory",     "value":  48, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load8_u":         { "category": "memory",     "value":  49, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load16_s":        { "category": "memory",     "value":  50, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load16_u":        { "category": "memory",     "value":  51, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load32_s":        { "category": "memory",     "value":  52, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load32_u":        { "category": "memory",     "value":  53, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i32.load":            { "category": "memory",     "value":  40, "return": ["i32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i64.load":            { "category": "memory",     "value":  41, "return": ["i64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "f32.load":            { "category": "memory",     "value":  42, "return": ["f32"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "f64.load":            { "category": "memory",     "value":  43, "return": ["f64"],                          "parameter": ["addr"],                       "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "load from memory" },
        "i32.store8":          { "category": "memory",     "value":  58, "return": [],                               "parameter": ["addr", "i32"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i32.store16":         { "category": "memory",     "value":  59, "return": [],                               "parameter": ["addr", "i32"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i64.store8":          { "category": "memory",     "value":  60, "return": [],                               "parameter": ["addr", "i64"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i64.store16":         { "category": "memory",     "value":  61, "return": [],                               "parameter": ["addr", "i64"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i64.store32":         { "category": "memory",     "value":  62, "return": [],                               "parameter": ["addr", "i64"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i32.store":           { "category": "memory",     "value":  54, "return": [],                               "parameter": ["addr", "i32"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "i64.store":           { "category": "memory",     "value":  55, "return": [],                               "parameter": ["addr", "i64"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "f32.store":           { "category": "memory",     "value":  56, "return": [],                               "parameter": ["addr", "f32"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "f64.store":           { "category": "memory",     "value":  57, "return": [],                               "parameter": ["addr", "f64"],                "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "description": "store to memory" },
        "current_memory":      { "category": "operation",  "value":  63, "return": ["size"],                         "parameter": [],                             "immediate": [{"name": "flags",          "type": "uint8"}],                                            "description": "query the size of memory" },
        "grow_memory":         { "category": "operation",  "value":  64, "return": ["size"],                         "parameter": ["size"],                       "immediate": [{"name": "flags",          "type": "uint8"}],                                            "description": "grow the size of memory" },
        "i32.add":             { "category": "arithmetic", "value": 106, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Add"          },
        "i32.sub":             { "category": "arithmetic", "value": 107, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Sub"          },
        "i32.mul":             { "category": "arithmetic", "value": 108, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Mul"          },
        "i32.div_s":           { "category": "arithmetic", "value": 109, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": []                         },
        "i32.div_u":           { "category": "arithmetic", "value": 110, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": []                         },
        "i32.rem_s":           { "category": "arithmetic", "value": 111, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": []                         },
        "i32.rem_u":           { "category": "arithmetic", "value": 112, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": []                         },
        "i32.and":             { "category": "arithmetic", "value": 113, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "BitAnd"       },
        "i32.or":              { "category": "arithmetic", "value": 114, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "BitOr"        },
        "i32.xor":             { "category": "arithmetic", "value": 115, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "BitXor"       },
        "i32.shl":             { "category": "arithmetic", "value": 116, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Shl"          },
        "i32.shr_u":           { "category": "arithmetic", "value": 118, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "ZShr"         },
        "i32.shr_s":           { "category": "arithmetic", "value": 117, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "SShr"         },
        "i32.rotr":            { "category": "arithmetic", "value": 120, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "RotR"         },
        "i32.rotl":            { "category": "arithmetic", "value": 119, "return": ["i32"],                          "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "RotL"         },
        "i32.eq":              { "category": "comparison", "value":  70, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Equal"        },
        "i32.ne":              { "category": "comparison", "value":  71, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "NotEqual"     },
        "i32.lt_s":            { "category": "comparison", "value":  72, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "LessThan"     },
        "i32.le_s":            { "category": "comparison", "value":  76, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "LessEqual"    },
        "i32.lt_u":            { "category": "comparison", "value":  73, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Below"        },
        "i32.le_u":            { "category": "comparison", "value":  77, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "BelowEqual"   },
        "i32.gt_s":            { "category": "comparison", "value":  74, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "GreaterThan"  },
        "i32.ge_s":            { "category": "comparison", "value":  78, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "GreaterEqual" },
        "i32.gt_u":            { "category": "comparison", "value":  75, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "Above"        },
        "i32.ge_u":            { "category": "comparison", "value":  79, "return": ["bool"],                         "parameter": ["i32", "i32"],                 "immediate": [], "b3op": "AboveEqual"   },
        "i32.clz":             { "category": "arithmetic", "value": 103, "return": ["i32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "Clz"          },
        "i32.ctz":             { "category": "arithmetic", "value": 104, "return": ["i32"],                          "parameter": ["i32"],                        "immediate": []                         },
        "i32.popcnt":          { "category": "arithmetic", "value": 105, "return": ["i32"],                          "parameter": ["i32"],                        "immediate": []                         },
        "i32.eqz":             { "category": "comparison", "value":  69, "return": ["bool"],                         "parameter": ["i32"],                        "immediate": [], "b3op": "Equal(i32(0), @0)" },
        "i64.add":             { "category": "arithmetic", "value": 124, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Add"          },
        "i64.sub":             { "category": "arithmetic", "value": 125, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Sub"          },
        "i64.mul":             { "category": "arithmetic", "value": 126, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Mul"          },
        "i64.div_s":           { "category": "arithmetic", "value": 127, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": []                         },
        "i64.div_u":           { "category": "arithmetic", "value": 128, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": []                         },
        "i64.rem_s":           { "category": "arithmetic", "value": 129, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": []                         },
        "i64.rem_u":           { "category": "arithmetic", "value": 130, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": []                         },
        "i64.and":             { "category": "arithmetic", "value": 131, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "BitAnd"       },
        "i64.or":              { "category": "arithmetic", "value": 132, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "BitOr"        },
        "i64.xor":             { "category": "arithmetic", "value": 133, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "BitXor"       },
        "i64.shl":             { "category": "arithmetic", "value": 134, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Shl(@0, Trunc(@1))" },
        "i64.shr_u":           { "category": "arithmetic", "value": 136, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "ZShr(@0, Trunc(@1))" },
        "i64.shr_s":           { "category": "arithmetic", "value": 135, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "SShr(@0, Trunc(@1))" },
        "i64.rotr":            { "category": "arithmetic", "value": 138, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "RotR(@0, Trunc(@1))" },
        "i64.rotl":            { "category": "arithmetic", "value": 137, "return": ["i64"],                          "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "RotL(@0, Trunc(@1))" },
        "i64.eq":              { "category": "comparison", "value":  81, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Equal"        },
        "i64.ne":              { "category": "comparison", "value":  82, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "NotEqual"     },
        "i64.lt_s":            { "category": "comparison", "value":  83, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "LessThan"     },
        "i64.le_s":            { "category": "comparison", "value":  87, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "LessEqual"    },
        "i64.lt_u":            { "category": "comparison", "value":  84, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Below"        },
        "i64.le_u":            { "category": "comparison", "value":  88, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "BelowEqual"   },
        "i64.gt_s":            { "category": "comparison", "value":  85, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "GreaterThan"  },
        "i64.ge_s":            { "category": "comparison", "value":  89, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "GreaterEqual" },
        "i64.gt_u":            { "category": "comparison", "value":  86, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "Above"        },
        "i64.ge_u":            { "category": "comparison", "value":  90, "return": ["bool"],                         "parameter": ["i64", "i64"],                 "immediate": [], "b3op": "AboveEqual"   },
        "i64.clz":             { "category": "arithmetic", "value": 121, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "Clz"          },
        "i64.ctz":             { "category": "arithmetic", "value": 122, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": []                         },
        "i64.popcnt":          { "category": "arithmetic", "value": 123, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": []                         },
        "i64.eqz":             { "category": "comparison", "value":  80, "return": ["bool"],                         "parameter": ["i64"],                        "immediate": [], "b3op": "Equal(i64(0), @0)" },
        "f32.add":             { "category": "arithmetic", "value": 146, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Add"          },
        "f32.sub":             { "category": "arithmetic", "value": 147, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Sub"          },
        "f32.mul":             { "category": "arithmetic", "value": 148, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Mul"          },
        "f32.div":             { "category": "arithmetic", "value": 149, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Div"          },
        "f32.min":             { "category": "arithmetic", "value": 150, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Select(Equal(@0, @1), BitOr(@0, @1), Select(LessThan(@0, @1), @0, Select(GreaterThan(@0, @1), @1, Add(@0, @1))))" },
        "f32.max":             { "category": "arithmetic", "value": 151, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Select(Equal(@0, @1), BitAnd(@0, @1), Select(LessThan(@0, @1), @1, Select(GreaterThan(@0, @1), @0, Add(@0, @1))))" },
        "f32.abs":             { "category": "arithmetic", "value": 139, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "Abs"          },
        "f32.neg":             { "category": "arithmetic", "value": 140, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "Neg"          },
        "f32.copysign":        { "category": "arithmetic", "value": 152, "return": ["f32"],                          "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "BitwiseCast(BitOr(BitAnd(BitwiseCast(@1), i32(0x80000000)), BitAnd(BitwiseCast(@0), i32(0x7fffffff))))" },
        "f32.ceil":            { "category": "arithmetic", "value": 141, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "Ceil"         },
        "f32.floor":           { "category": "arithmetic", "value": 142, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "Floor"        },
        "f32.trunc":           { "category": "arithmetic", "value": 143, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": []                         },
        "f32.nearest":         { "category": "arithmetic", "value": 144, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": []                         },
        "f32.sqrt":            { "category": "arithmetic", "value": 145, "return": ["f32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "Sqrt"         },
        "f32.eq":              { "category": "comparison", "value":  91, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "Equal"        },
        "f32.ne":              { "category": "comparison", "value":  92, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "NotEqual"     },
        "f32.lt":              { "category": "comparison", "value":  93, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "LessThan"     },
        "f32.le":              { "category": "comparison", "value":  95, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "LessEqual"    },
        "f32.gt":              { "category": "comparison", "value":  94, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "GreaterThan"  },
        "f32.ge":              { "category": "comparison", "value":  96, "return": ["bool"],                         "parameter": ["f32", "f32"],                 "immediate": [], "b3op": "GreaterEqual" },
        "f64.add":             { "category": "arithmetic", "value": 160, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Add"          },
        "f64.sub":             { "category": "arithmetic", "value": 161, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Sub"          },
        "f64.mul":             { "category": "arithmetic", "value": 162, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Mul"          },
        "f64.div":             { "category": "arithmetic", "value": 163, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Div"          },
        "f64.min":             { "category": "arithmetic", "value": 164, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Select(Equal(@0, @1), BitOr(@0, @1), Select(LessThan(@0, @1), @0, Select(GreaterThan(@0, @1), @1, Add(@0, @1))))" },
        "f64.max":             { "category": "arithmetic", "value": 165, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Select(Equal(@0, @1), BitAnd(@0, @1), Select(LessThan(@0, @1), @1, Select(GreaterThan(@0, @1), @0, Add(@0, @1))))" },
        "f64.abs":             { "category": "arithmetic", "value": 153, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "Abs"          },
        "f64.neg":             { "category": "arithmetic", "value": 154, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "Neg"          },
        "f64.copysign":        { "category": "arithmetic", "value": 166, "return": ["f64"],                          "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "BitwiseCast(BitOr(BitAnd(BitwiseCast(@1), i64(0x8000000000000000)), BitAnd(BitwiseCast(@0), i64(0x7fffffffffffffff))))" },
        "f64.ceil":            { "category": "arithmetic", "value": 155, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "Ceil"         },
        "f64.floor":           { "category": "arithmetic", "value": 156, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "Floor"        },
        "f64.trunc":           { "category": "arithmetic", "value": 157, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": []                         },
        "f64.nearest":         { "category": "arithmetic", "value": 158, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": []                         },
        "f64.sqrt":            { "category": "arithmetic", "value": 159, "return": ["f64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "Sqrt"         },
        "f64.eq":              { "category": "comparison", "value":  97, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "Equal"        },
        "f64.ne":              { "category": "comparison", "value":  98, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "NotEqual"     },
        "f64.lt":              { "category": "comparison", "value":  99, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "LessThan"     },
        "f64.le":              { "category": "comparison", "value": 101, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "LessEqual"    },
        "f64.gt":              { "category": "comparison", "value": 100, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "GreaterThan"  },
        "f64.ge":              { "category": "comparison", "value": 102, "return": ["bool"],                         "parameter": ["f64", "f64"],                 "immediate": [], "b3op": "GreaterEqual" },
        "i32.trunc_s/f32":     { "category": "conversion", "value": 168, "return": ["i32"],                          "parameter": ["f32"],                        "immediate": []                         },
        "i32.trunc_s/f64":     { "category": "conversion", "value": 170, "return": ["i32"],                          "parameter": ["f64"],                        "immediate": []                         },
        "i32.trunc_u/f32":     { "category": "conversion", "value": 169, "return": ["i32"],                          "parameter": ["f32"],                        "immediate": []                         },
        "i32.trunc_u/f64":     { "category": "conversion", "value": 171, "return": ["i32"],                          "parameter": ["f64"],                        "immediate": []                         },
        "i32.wrap/i64":        { "category": "conversion", "value": 167, "return": ["i32"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "Trunc"        },
        "i64.trunc_s/f32":     { "category": "conversion", "value": 174, "return": ["i64"],                          "parameter": ["f32"],                        "immediate": []                         },
        "i64.trunc_s/f64":     { "category": "conversion", "value": 176, "return": ["i64"],                          "parameter": ["f64"],                        "immediate": []                         },
        "i64.trunc_u/f32":     { "category": "conversion", "value": 175, "return": ["i64"],                          "parameter": ["f32"],                        "immediate": []                         },
        "i64.trunc_u/f64":     { "category": "conversion", "value": 177, "return": ["i64"],                          "parameter": ["f64"],                        "immediate": []                         },
        "i64.extend_s/i32":    { "category": "conversion", "value": 172, "return": ["i64"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "SExt32"       },
        "i64.extend_u/i32":    { "category": "conversion", "value": 173, "return": ["i64"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "ZExt32"       },
        "f32.convert_s/i32":   { "category": "conversion", "value": 178, "return": ["f32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "IToF"         },
        "f32.convert_u/i32":   { "category": "conversion", "value": 179, "return": ["f32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "IToF(ZExt32(@0))" },
        "f32.convert_s/i64":   { "category": "conversion", "value": 180, "return": ["f32"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "IToF"         },
        "f32.convert_u/i64":   { "category": "conversion", "value": 181, "return": ["f32"],                          "parameter": ["i64"],                        "immediate": []                         },
        "f32.demote/f64":      { "category": "conversion", "value": 182, "return": ["f32"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "DoubleToFloat"},
        "f32.reinterpret/i32": { "category": "conversion", "value": 190, "return": ["f32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "BitwiseCast"  },
        "f64.convert_s/i32":   { "category": "conversion", "value": 183, "return": ["f64"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "IToD"         },
        "f64.convert_u/i32":   { "category": "conversion", "value": 184, "return": ["f64"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "IToD(ZExt32(@0))" },
        "f64.convert_s/i64":   { "category": "conversion", "value": 185, "return": ["f64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "IToD"         },
        "f64.convert_u/i64":   { "category": "conversion", "value": 186, "return": ["f64"],                          "parameter": ["i64"],                        "immediate": []                         },
        "f64.promote/f32":     { "category": "conversion", "value": 187, "return": ["f64"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "FloatToDouble"},
        "f64.reinterpret/i64": { "category": "conversion", "value": 191, "return": ["f64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "BitwiseCast"  },
        "i32.reinterpret/f32": { "category": "conversion", "value": 188, "return": ["i32"],                          "parameter": ["f32"],                        "immediate": [], "b3op": "BitwiseCast"  },
        "i64.reinterpret/f64": { "category": "conversion", "value": 189, "return": ["i64"],                          "parameter": ["f64"],                        "immediate": [], "b3op": "BitwiseCast"  },
        "i32.extend8_s":       { "category": "conversion", "value": 192, "return": ["i32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "SExt8"        },
        "i32.extend16_s":      { "category": "conversion", "value": 193, "return": ["i32"],                          "parameter": ["i32"],                        "immediate": [], "b3op": "SExt16"       },
        "i64.extend8_s":       { "category": "conversion", "value": 194, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "SExt32(SExt8(Trunc(@0)))"  },
        "i64.extend16_s":      { "category": "conversion", "value": 195, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "SExt32(SExt16(Trunc(@0)))" },
        "i64.extend32_s":      { "category": "conversion", "value": 196, "return": ["i64"],                          "parameter": ["i64"],                        "immediate": [], "b3op": "SExt32(Trunc(@0))"         },

        "i32.trunc_sat_f32_s": { "category": "conversion", "value": 252, "return": ["i32"], "parameter": ["f32"], "immediate": [], "extendedOp": 0 },
        "i32.trunc_sat_f32_u": { "category": "conversion", "value": 252, "return": ["i32"], "parameter": ["f32"], "immediate": [], "extendedOp": 1 },
        "i32.trunc_sat_f64_s": { "category": "conversion", "value": 252, "return": ["i32"], "parameter": ["f64"], "immediate": [], "extendedOp": 2 },
        "i32.trunc_sat_f64_u": { "category": "conversion", "value": 252, "return": ["i32"], "parameter": ["f64"], "immediate": [], "extendedOp": 3 },
        "i64.trunc_sat_f32_s": { "category": "conversion", "value": 252, "return": ["i64"], "parameter": ["f32"], "immediate": [], "extendedOp": 4 },
        "i64.trunc_sat_f32_u": { "category": "conversion", "value": 252, "return": ["i64"], "parameter": ["f32"], "immediate": [], "extendedOp": 5 },
        "i64.trunc_sat_f64_s": { "category": "conversion", "value": 252, "return": ["i64"], "parameter": ["f64"], "immediate": [], "extendedOp": 6 },
        "i64.trunc_sat_f64_u": { "category": "conversion", "value": 252, "return": ["i64"], "parameter": ["f64"], "immediate": [], "extendedOp": 7 },

        "memory.atomic.notify":       { "category": "atomic",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp":  0 },
        "memory.atomic.wait32":       { "category": "atomic",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp":  1 },
        "memory.atomic.wait64":       { "category": "atomic",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i64", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp":  2 },
        "atomic.fence":               { "category": "atomic",     "value": 254, "return": [],           "parameter": [],                       "immediate": [{"name": "flags",          "type": "uint8"    }], "extendedOp":  3 },
        "i32.atomic.load":            { "category": "atomic.load",     "value": 254, "return": ["i32"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 16 },
        "i64.atomic.load":            { "category": "atomic.load",     "value": 254, "return": ["i64"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 17 },
        "i32.atomic.load8_u":         { "category": "atomic.load",     "value": 254, "return": ["i32"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 18 },
        "i32.atomic.load16_u":        { "category": "atomic.load",     "value": 254, "return": ["i32"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 19 },
        "i64.atomic.load8_u":         { "category": "atomic.load",     "value": 254, "return": ["i64"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 20 },
        "i64.atomic.load16_u":        { "category": "atomic.load",     "value": 254, "return": ["i64"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 21 },
        "i64.atomic.load32_u":        { "category": "atomic.load",     "value": 254, "return": ["i64"],      "parameter": ["addr"],                 "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 22 },
        "i32.atomic.store":           { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 23 },
        "i64.atomic.store":           { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 24 },
        "i32.atomic.store8_u":        { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 25 },
        "i32.atomic.store16_u":       { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 26 },
        "i64.atomic.store8_u":        { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 27 },
        "i64.atomic.store16_u":       { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 28 },
        "i64.atomic.store32_u":       { "category": "atomic.store",     "value": 254, "return": [],           "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 29 },
        "i32.atomic.rmw.add":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 30 },
        "i64.atomic.rmw.add":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 31 },
        "i32.atomic.rmw8.add_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 32 },
        "i32.atomic.rmw16.add_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 33 },
        "i64.atomic.rmw8.add_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 34 },
        "i64.atomic.rmw16.add_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 35 },
        "i64.atomic.rmw32.add_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 36 },
        "i32.atomic.rmw.sub":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 37 },
        "i64.atomic.rmw.sub":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 38 },
        "i32.atomic.rmw8.sub_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 39 },
        "i32.atomic.rmw16.sub_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 40 },
        "i64.atomic.rmw8.sub_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 41 },
        "i64.atomic.rmw16.sub_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 42 },
        "i64.atomic.rmw32.sub_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 43 },
        "i32.atomic.rmw.and":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 44 },
        "i64.atomic.rmw.and":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 45 },
        "i32.atomic.rmw8.and_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 46 },
        "i32.atomic.rmw16.and_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 47 },
        "i64.atomic.rmw8.and_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 48 },
        "i64.atomic.rmw16.and_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 49 },
        "i64.atomic.rmw32.and_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 50 },
        "i32.atomic.rmw.or":          { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 51 },
        "i64.atomic.rmw.or":          { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 52 },
        "i32.atomic.rmw8.or_u":       { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 53 },
        "i32.atomic.rmw16.or_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 54 },
        "i64.atomic.rmw8.or_u":       { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 55 },
        "i64.atomic.rmw16.or_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 56 },
        "i64.atomic.rmw32.or_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 57 },
        "i32.atomic.rmw.xor":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 58 },
        "i64.atomic.rmw.xor":         { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 59 },
        "i32.atomic.rmw8.xor_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 60 },
        "i32.atomic.rmw16.xor_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 61 },
        "i64.atomic.rmw8.xor_u":      { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 62 },
        "i64.atomic.rmw16.xor_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 63 },
        "i64.atomic.rmw32.xor_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 64 },
        "i32.atomic.rmw.xchg":        { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 65 },
        "i64.atomic.rmw.xchg":        { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 66 },
        "i32.atomic.rmw8.xchg_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 67 },
        "i32.atomic.rmw16.xchg_u":    { "category": "atomic.rmw.binary",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 68 },
        "i64.atomic.rmw8.xchg_u":     { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 69 },
        "i64.atomic.rmw16.xchg_u":    { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 70 },
        "i64.atomic.rmw32.xchg_u":    { "category": "atomic.rmw.binary",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64"],          "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 71 },
        "i32.atomic.rmw.cmpxchg":     { "category": "atomic.rmw",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32", "i32"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 72 },
        "i64.atomic.rmw.cmpxchg":     { "category": "atomic.rmw",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 73 },
        "i32.atomic.rmw8.cmpxchg_u":  { "category": "atomic.rmw",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32", "i32"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 74 },
        "i32.atomic.rmw16.cmpxchg_u": { "category": "atomic.rmw",     "value": 254, "return": ["i32"],      "parameter": ["addr", "i32", "i32"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 75 },
        "i64.atomic.rmw8.cmpxchg_u":  { "category": "atomic.rmw",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 76 },
        "i64.atomic.rmw16.cmpxchg_u": { "category": "atomic.rmw",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 77 },
        "i64.atomic.rmw32.cmpxchg_u": { "category": "atomic.rmw",     "value": 254, "return": ["i64"],      "parameter": ["addr", "i64", "i64"],   "immediate": [{"name": "flags",          "type": "varuint32"}, {"name": "offset",   "type": "varuint32"}], "extendedOp": 78 }
    }
}
