#!/usr/bin/env python3

#
# Copyright (C) 2024 Igalia S.L.
# Copyright (C) 2016-2024 Apple Inc. All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
#

import optparse
import os
import re
import sys

header = """/*
 * Copyright (C) 2024 Igalia S.L.
 * Copyright (C) 2016-2024 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// DO NO EDIT! - This file was generated by create_jit_instrumentation

// -- ORIGINAL FILE FOLLOWS

"""

footer = """
// --- DONE
"""

def openOrExit(path, mode):
    try:
        dirname = os.path.dirname(path)
        if not os.path.isdir(dirname):
            os.makedirs(dirname)
        if sys.version_info.major >= 3:
            return open(path, mode, encoding="UTF-8")
        else:
            return open(path, mode)
    except IOError as e:
        print("I/O error opening {0}, ({1}): {2}".format(path, e.errno, e.strerror))
        exit(1)


def containsUnterminatedSingleLineIf(code):
    # Very bad hack to work around code like:
    # if (x)
    #   y;
    # // instrumentation can't go here
    # else

    def understandLine(line):
        line = line.strip()
        line = line.split("//")[0]
        if ("if " in line or "if(" in line) and not line[-1] == "{":
            return ["if"]
        elif "else " in line and not line[-1] == "{":
            return ["else"]
        elif len(line) and line[-1] == ";":
            return [";"]
        return []

    lines = sum(map(understandLine, code.split("\\n")), [])

    lines = lines[-2:]

    if not len(lines):
        return False

    if len(lines) > 1 and lines[1] in ["if", "else"]:
        return True

    return lines[0] in ["if", "else"]


if __name__ == "__main__":
    parser = optparse.OptionParser(usage = "usage: %prog  <In.cpp> <Out.generated.cpp>")
    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.error("<In.cpp> <Out.generated.cpp>")

    inPath = args[0]
    outPath = args[1]
    inFile = openOrExit(inPath, "r")
    outFile = openOrExit(outPath, "w")

    outText = ""

    instrumentationOn = False
    lastStatement = ""

    for line in inFile:
        if "@+ForEachLine(INSTRUMENT_LINE)" in line:
            assert not instrumentationOn
            instrumentationOn = True
            lastStatement = ""
            continue

        if "@-ForEachLine(INSTRUMENT_LINE)" in line:
            assert instrumentationOn
            instrumentationOn = False
            lastStatement = ""
            continue

        outText = outText + line

        if not instrumentationOn:
            continue

        line = line.strip()

        # Skip #if, #define, etc..
        if "#" in line:
            continue

        if len(line):
            lastStatement = lastStatement + line + "\\n"

        if containsUnterminatedSingleLineIf(lastStatement):
            outText = outText + "/* unterminated if */"
            continue

        if line.strip()[-1:] == ";":
            outText = outText + " INSTRUMENT_LINE(\"{line}\") \n".format(line=lastStatement[:-len("\\n")])
            lastStatement = ""

    outFile.write(header);
    outFile.write(outText)
    outFile.write(footer);

    inFile.close()
    outFile.close()

    exit(0)
