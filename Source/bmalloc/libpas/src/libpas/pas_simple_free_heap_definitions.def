/*
 * Copyright (c) 2018-2020 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

static const bool verbose = false;

pas_simple_large_free_heap PAS_SIMPLE_FREE_HEAP_NAME = PAS_SIMPLE_LARGE_FREE_HEAP_INITIALIZER;
size_t PAS_SIMPLE_FREE_HEAP_ID(_num_allocated_object_bytes) = 0;
size_t PAS_SIMPLE_FREE_HEAP_ID(_num_allocated_object_bytes_peak) = 0;

pas_allocation_result PAS_SIMPLE_FREE_HEAP_ID(_try_allocate)(
    size_t size,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    return PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_alignment)(
        size, pas_alignment_create_trivial(), name, allocation_kind);
}

pas_allocation_result PAS_SIMPLE_FREE_HEAP_ID(_allocate)(
    size_t size,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    return PAS_SIMPLE_FREE_HEAP_ID(_allocate_with_alignment)(
        size, pas_alignment_create_trivial(), name, allocation_kind);
}

pas_allocation_result
PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_manual_alignment)(
    size_t size,
    pas_alignment alignment,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    return pas_simple_free_heap_helpers_try_allocate_with_manual_alignment(
        &PAS_SIMPLE_FREE_HEAP_NAME, initialize_config, PAS_SIMPLE_FREE_HEAP_ID(_kind),
        size, alignment, name, allocation_kind,
        &PAS_SIMPLE_FREE_HEAP_ID(_num_allocated_object_bytes),
        &PAS_SIMPLE_FREE_HEAP_ID(_num_allocated_object_bytes_peak));
}

pas_allocation_result
PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_alignment)(
    size_t size,
    pas_alignment alignment,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    alignment = pas_alignment_round_up(alignment, PAS_INTERNAL_MIN_ALIGN);

    return PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_manual_alignment)(
        size, alignment, name, allocation_kind);
}

pas_allocation_result PAS_SIMPLE_FREE_HEAP_ID(_allocate_with_manual_alignment)(
    size_t size,
    pas_alignment alignment,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    pas_allocation_result result =
        PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_manual_alignment)(
            size, alignment, name, allocation_kind);
    PAS_ASSERT(result.did_succeed);
    PAS_ASSERT(result.begin);
    return result;
}

pas_allocation_result PAS_SIMPLE_FREE_HEAP_ID(_allocate_with_alignment)(
    size_t size,
    pas_alignment alignment,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    pas_allocation_result result =
        PAS_SIMPLE_FREE_HEAP_ID(_try_allocate_with_alignment)(
            size, alignment, name, allocation_kind);
    PAS_ASSERT(result.did_succeed);
    PAS_ASSERT(result.begin);
    return result;
}

void PAS_SIMPLE_FREE_HEAP_ID(_deallocate)(
    void* ptr,
    size_t size,
    pas_allocation_kind allocation_kind)
{
    return pas_simple_free_heap_helpers_deallocate(
        &PAS_SIMPLE_FREE_HEAP_NAME, initialize_config, PAS_SIMPLE_FREE_HEAP_ID(_kind),
        ptr, size, allocation_kind,
        &PAS_SIMPLE_FREE_HEAP_ID(_num_allocated_object_bytes));
}

size_t PAS_SIMPLE_FREE_HEAP_ID(_get_num_free_bytes)(void)
{
    return pas_simple_large_free_heap_get_num_free_bytes(&PAS_SIMPLE_FREE_HEAP_NAME);
}

void* PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_allocate)(
    size_t size,
    const char* name,
    pas_allocation_kind allocation_kind)
{
    void* result;
    
    pas_heap_lock_lock();
    result = PAS_SIMPLE_FREE_HEAP_ID(_allocate_simple)(size, name, allocation_kind);
    pas_heap_lock_unlock();
    
    return result;
}

void PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_deallocate)(
    void* ptr,
    size_t size,
    pas_allocation_kind allocation_kind)
{
    if (!ptr) {
        PAS_ASSERT(!size);
        return;
    }
    
    pas_heap_lock_lock();
    PAS_SIMPLE_FREE_HEAP_ID(_deallocate)(ptr, size, allocation_kind);
    pas_heap_lock_unlock();
}

void* PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_allocate_for_config)(
    size_t size,
    const char* name,
    pas_allocation_kind allocation_kind,
    void* arg)
{
    PAS_ASSERT(!arg);
    return PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_allocate)(size, name, allocation_kind);
}
    
void PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_deallocate_for_config)(
    void* ptr,
    size_t size,
    pas_allocation_kind allocation_kind,
    void* arg)
{
    PAS_ASSERT(!arg);
    PAS_SIMPLE_FREE_HEAP_ID(_hold_lock_and_deallocate)(ptr, size, allocation_kind);
}

void* PAS_SIMPLE_FREE_HEAP_ID(_allocate_simple_for_config)(
    size_t size,
    const char* name,
    pas_allocation_kind allocation_kind,
    void* arg)
{
    PAS_ASSERT(!arg);
    return PAS_SIMPLE_FREE_HEAP_ID(_allocate_simple)(size, name, allocation_kind);
}

void PAS_SIMPLE_FREE_HEAP_ID(_deallocate_for_config)(
    void* ptr,
    size_t size,
    pas_allocation_kind allocation_kind,
    void* arg)
{
    PAS_ASSERT(!arg);
    PAS_SIMPLE_FREE_HEAP_ID(_deallocate)(ptr, size, allocation_kind);
}

