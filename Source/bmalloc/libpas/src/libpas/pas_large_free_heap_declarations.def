/*
 * Copyright (c) 2020 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

PAS_API extern pas_fast_large_free_heap PAS_LARGE_FREE_HEAP_NAME;
PAS_API extern size_t PAS_LARGE_FREE_HEAP_ID(_num_allocated_object_bytes);
PAS_API extern size_t PAS_LARGE_FREE_HEAP_ID(_num_allocated_object_bytes_peak);

PAS_API void* PAS_LARGE_FREE_HEAP_ID(_try_allocate_with_alignment)(
    size_t size, pas_alignment alignment, const char* name);
PAS_API void* PAS_LARGE_FREE_HEAP_ID(_allocate_with_alignment)(
    size_t size, pas_alignment alignment, const char* name);

PAS_API void* PAS_LARGE_FREE_HEAP_ID(_try_allocate)(
    size_t size, const char* name);
PAS_API void* PAS_LARGE_FREE_HEAP_ID(_allocate)(
    size_t size, const char* name);

PAS_API void PAS_LARGE_FREE_HEAP_ID(_deallocate)(void* ptr, size_t size);

PAS_API pas_heap_summary PAS_LARGE_FREE_HEAP_ID(_compute_summary)(void);

PAS_API void* PAS_LARGE_FREE_HEAP_ID(_allocate_for_allocation_config)(
    size_t size, const char* name, pas_allocation_kind allocation_kind, void* arg);
PAS_API void PAS_LARGE_FREE_HEAP_ID(_deallocate_for_allocation_config)(
    void* ptr, size_t size, pas_allocation_kind allocation_kind, void* arg);

PAS_API extern const pas_allocation_config PAS_LARGE_FREE_HEAP_ID(_allocation_config);
