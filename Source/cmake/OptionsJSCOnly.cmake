find_package(Threads REQUIRED)

if (MSVC)
    include(OptionsMSVC)
else ()
    set(CMAKE_C_VISIBILITY_PRESET hidden)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
    set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
endif ()

add_definitions(-DBUILDING_JSCONLY__)

set(PROJECT_VERSION_MAJOR 1)
set(PROJECT_VERSION_MINOR 0)
set(PROJECT_VERSION_MICRO 0)
set(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_MICRO})

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(USE_BUN_JSC_ADDITIONS "Whether to enable Bun's JSC additions" PUBLIC OFF)

if(USE_BUN_JSC_ADDITIONS)
    SET_AND_EXPOSE_TO_BUILD(USE_BUN_JSC_ADDITIONS 1)

    if(WIN32)
        SET_AND_EXPOSE_TO_BUILD(JS_NO_EXPORT 1)
    endif()
endif()

WEBKIT_OPTION_END()

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ENABLE_MALLOC_HEAP_BREAKDOWN "Whether to enable MALLOC_HEAP_BREAKDOWN" PUBLIC OFF)

# Only works on macOS for now.
if(ENABLE_MALLOC_HEAP_BREAKDOWN)
    SET_AND_EXPOSE_TO_BUILD(ENABLE_MALLOC_HEAP_BREAKDOWN 1)
    SET_AND_EXPOSE_TO_BUILD(BENABLE_MALLOC_HEAP_BREAKDOWN 1)

    # To workaround ASSERT(cell->heap() != heap()) failing.
    SET_AND_EXPOSE_TO_BUILD(USE_SYSTEM_MALLOC 1)
    SET_AND_EXPOSE_TO_BUILD(ENABLE_LIBPAS 0)
endif()

WEBKIT_OPTION_END()

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ENABLE_STATIC_JSC "Whether to build JavaScriptCore as a static library." PUBLIC OFF)
WEBKIT_OPTION_DEFINE(USE_LIBBACKTRACE "Whether to enable usage of libbacktrace." PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_REMOTE_INSPECTOR PRIVATE OFF)
if (WIN32)
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTL_JIT PRIVATE ON)
    # FIXME: Port bmalloc to Windows. https://bugs.webkit.org/show_bug.cgi?id=143310
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(USE_SYSTEM_MALLOC PRIVATE ON)
endif ()

WEBKIT_OPTION_END()

set(ALL_EVENT_LOOP_TYPES
    GLib
    Generic
)

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS "Whether to allow line numbers & column numbers in builtins" PUBLIC OFF)
if (ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS)
    set(ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS ON)
    SET_AND_EXPOSE_TO_BUILD(USE_ALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS 1)
endif ()
WEBKIT_OPTION_END()

set(DEFAULT_EVENT_LOOP_TYPE "Generic")

set(EVENT_LOOP_TYPE ${DEFAULT_EVENT_LOOP_TYPE} CACHE STRING "Implementation of event loop to be used in JavaScriptCore (one of ${ALL_EVENT_LOOP_TYPES})")

set(ENABLE_WEBCORE OFF)
set(ENABLE_WEBKIT_LEGACY OFF)
set(ENABLE_WEBKIT OFF)
set(ENABLE_WEBINSPECTORUI OFF)
set(ENABLE_WEBGL OFF)
set(ENABLE_WEBGL2 OFF)

SET_AND_EXPOSE_TO_BUILD(ENABLE_RESOURCE_USAGE ON)

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ENABLE_REMOTE_INSPECTOR "Whether to build JavaScriptCore with remote inspector support" PUBLIC OFF)
if (ENABLE_REMOTE_INSPECTOR)
    set(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS ON)
    SET_AND_EXPOSE_TO_BUILD(USE_INSPECTOR_SOCKET_SERVER 1)
    SET_AND_EXPOSE_TO_BUILD(USE_UNIX_DOMAIN_SOCKETS 1)
else ()
    set(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS OFF)
endif ()
WEBKIT_OPTION_END()

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE "Only set VMEntryScope once per globalobject" PUBLIC OFF)
if (ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE)
    set(ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE ON)
    SET_AND_EXPOSE_TO_BUILD(ENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE 1)
endif ()
WEBKIT_OPTION_END()

if (WIN32)
    set(ENABLE_API_TESTS OFF)
else ()
    set(ENABLE_API_TESTS ON)
endif ()

if (WTF_CPU_ARM OR WTF_CPU_MIPS)
    SET_AND_EXPOSE_TO_BUILD(USE_CAPSTONE TRUE)
endif ()

if (APPLE)

    # SET_AND_EXPOSE_TO_BUILD(USE_FOUNDATION TRUE)
    # SET_AND_EXPOSE_TO_BUILD(USE_CF TRUE)
    # SET_AND_EXPOSE_TO_BUILD(USE_CF_RETAIN_PTR TRUE)
    # SET_AND_EXPOSE_TO_BUILD(USE_EXPORT_MACROS TRUE)
    # SET_AND_EXPOSE_TO_BUILD(USE_APPLE_INTERNAL_SDK TRUE)
endif ()

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFINE(ENABLE_BUN_SKIP_FAILING_ASSERTIONS "Skip failing ASSERT when targeting Bun" PUBLIC OFF)
if (ENABLE_BUN_SKIP_FAILING_ASSERTIONS)
    set(BUN_SKIP_FAILING_ASSERTIONS ON)
    SET_AND_EXPOSE_TO_BUILD(BUN_SKIP_FAILING_ASSERTIONS 1)
endif ()
WEBKIT_OPTION_END()

if (NOT ENABLE_STATIC_JSC)
    set(JavaScriptCore_LIBRARY_TYPE SHARED)
    set(bmalloc_LIBRARY_TYPE OBJECT)
    set(WTF_LIBRARY_TYPE OBJECT)
    set(JavaScriptCore_LIBRARY_TYPE SHARED)
    set(PAL_LIBRARY_TYPE OBJECT)
    set(WebCore_LIBRARY_TYPE SHARED)
endif ()

if (USE_BUN_JSC_ADDITIONS)
    set(CMAKE_POSITION_INDEPENDENT_CODE False)
endif ()

if (WIN32)
    add_definitions(-DNOMINMAX)
    add_definitions(-D_WINDOWS -DWINVER=0x601 -D_WIN32_WINNT=0x601)
    add_definitions(-DUNICODE -D_UNICODE)

    add_definitions(-D_WINSOCKAPI_=)

    set(CMAKE_DISABLE_PRECOMPILE_HEADERS OFF)

    if (ENABLE_STATIC_JSC)
        set(bmalloc_LIBRARY_TYPE STATIC)
        set(WTF_LIBRARY_TYPE STATIC)
        set(JavaScriptCore_LIBRARY_TYPE STATIC)
        set(PAL_LIBRARY_TYPE STATIC)
        set(WebCore_LIBRARY_TYPE STATIC)
    endif ()

    if (NOT WEBKIT_LIBRARIES_DIR)
        if (DEFINED ENV{WEBKIT_LIBRARIES})
            set(WEBKIT_LIBRARIES_DIR "$ENV{WEBKIT_LIBRARIES}")
        else ()
            set(WEBKIT_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/WebKitLibraries/win")
        endif ()
    endif ()

    set(CMAKE_PREFIX_PATH ${WEBKIT_LIBRARIES_DIR})

    if (WTF_CPU_X86_64)
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS OFF)
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)
    endif ()

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
endif ()

string(TOLOWER ${EVENT_LOOP_TYPE} LOWERCASE_EVENT_LOOP_TYPE)
if (LOWERCASE_EVENT_LOOP_TYPE STREQUAL "glib")
    find_package(GLIB 2.36 REQUIRED COMPONENTS gio gio-unix gobject)
    SET_AND_EXPOSE_TO_BUILD(USE_GLIB 1)
    SET_AND_EXPOSE_TO_BUILD(USE_GLIB_EVENT_LOOP 1)
    SET_AND_EXPOSE_TO_BUILD(WTF_DEFAULT_EVENT_LOOP 0)
else ()
    SET_AND_EXPOSE_TO_BUILD(USE_GENERIC_EVENT_LOOP 1)
    SET_AND_EXPOSE_TO_BUILD(WTF_DEFAULT_EVENT_LOOP 0)
endif ()

if (DEFINED ENV{ICU_INCLUDE_DIRS})
    set(ICU_INCLUDE_DIRS "$ENV{ICU_INCLUDE_DIRS}" CACHE "" INTERNAL FORCE)
endif ()

find_package(ICU 60.2 REQUIRED COMPONENTS data i18n uc)
if (APPLE)
    add_definitions(-DU_DISABLE_RENAMING=1)
endif ()

if (USE_LIBBACKTRACE)
    find_package(LibBacktrace)
    if (NOT LIBBACKTRACE_FOUND)
        message(FATAL_ERROR "libbacktrace is required for USE_LIBBACKTRACE")
    endif ()
endif ()
