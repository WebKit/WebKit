/*
 * Copyright (C) 2016 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://drafts.csswg.org/css-font-loading/#FontFaceSet-interface

enum FontFaceSetLoadStatus {
    "loading",
    "loaded"
};

[
    ActiveDOMObject,
    Exposed=(Window,Worker)
] interface FontFaceSet : EventTarget {
    [CallWith=CurrentScriptExecutionContext] constructor(sequence<FontFace> initialFaces);

    boolean has(FontFace font);

    // FIXME: We should add support for the setlike declaration (webkit.org/b/230119).
    iterable<FontFace>;

    readonly attribute long size;

    FontFaceSet add(FontFace font);
    [ImplementedAs=remove] boolean delete(FontFace font);
    undefined clear();

    // events for when loading state changes
    attribute EventHandler onloading;
    attribute EventHandler onloadingdone;
    attribute EventHandler onloadingerror;

    // check and start loads if appropriate
    // and fulfill promise when all loads complete
    Promise<sequence<FontFace>> load(DOMString font, optional DOMString text = " ");

    // return whether all fonts in the fontlist are loaded
    // (does not initiate load if not available)
    boolean check(DOMString font, optional DOMString text = " ");

    // async notification that font loading and layout operations are done
    readonly attribute Promise<FontFaceSet> ready;

    // loading state, "loading" while one or more fonts loading, "loaded" otherwise
    readonly attribute FontFaceSetLoadStatus status;
};
