/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTestStringContext.h"

#include "ActiveDOMObject.h"
#include "ElementInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "HTMLNames.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>


namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTML);
static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScript);
static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURL);
static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString);
static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptAndLegacyNullToEmptyString);
static JSC_DECLARE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContextConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptURL);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptURL);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript);
static JSC_DECLARE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL);
static JSC_DECLARE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL);

class JSTestStringContextPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTestStringContextPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTestStringContextPrototype* ptr = new (NotNull, JSC::allocateCell<JSTestStringContextPrototype>(vm)) JSTestStringContextPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTestStringContextPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTestStringContextPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTestStringContextPrototype, JSTestStringContextPrototype::Base);

using JSTestStringContextDOMConstructor = JSDOMConstructorNotConstructable<JSTestStringContext>;

template<> const ClassInfo JSTestStringContextDOMConstructor::s_info = { "TestStringContext"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestStringContextDOMConstructor) };

template<> JSValue JSTestStringContextDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSTestStringContextDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "TestStringContext"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSTestStringContext::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const HashTableValue JSTestStringContextPrototypeTableValues[] =
{
    { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContextConstructor, 0 } },
    { "attributeWithStringContextTrustedHTML"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedHTML, setJSTestStringContext_attributeWithStringContextTrustedHTML } },
    { "attributeWithStringContextTrustedScript"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedScript, setJSTestStringContext_attributeWithStringContextTrustedScript } },
    { "attributeWithStringContextTrustedScriptURL"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedScriptURL, setJSTestStringContext_attributeWithStringContextTrustedScriptURL } },
    { "attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString, setJSTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString } },
    { "attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString, setJSTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString } },
    { "attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString, setJSTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString } },
    { "reflectedAttributeWithStringContextTrustedHTML"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedAttributeWithStringContextTrustedHTML, setJSTestStringContext_reflectedAttributeWithStringContextTrustedHTML } },
    { "reflectedAttributeWithStringContextTrustedScript"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedAttributeWithStringContextTrustedScript, setJSTestStringContext_reflectedAttributeWithStringContextTrustedScript } },
    { "reflectedAttributeWithStringContextTrustedScriptURL"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL, setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL } },
    { "reflectedUrlAttributeWithStringContextTrustedHTML"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML, setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML } },
    { "reflectedUrlAttributeWithStringContextTrustedScript"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript, setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript } },
    { "reflectedUrlAttributeWithStringContextTrustedScriptURL"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL, setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL } },
    { "methodWithStringContextTrustedHTML"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTML, 1 } },
    { "methodWithStringContextTrustedScript"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScript, 1 } },
    { "methodWithStringContextTrustedScriptURL"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURL, 1 } },
    { "methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString, 1 } },
    { "methodWithStringContextTrustedScriptAndLegacyNullToEmptyString"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptAndLegacyNullToEmptyString, 1 } },
    { "methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString, 1 } },
};

const ClassInfo JSTestStringContextPrototype::s_info = { "TestStringContext"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestStringContextPrototype) };

void JSTestStringContextPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTestStringContext::info(), JSTestStringContextPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSTestStringContext::s_info = { "TestStringContext"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestStringContext) };

JSTestStringContext::JSTestStringContext(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TestStringContext>&& impl)
    : JSDOMWrapper<TestStringContext>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, TestStringContext>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSTestStringContext::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSTestStringContextPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSTestStringContextPrototype::create(vm, &globalObject, structure);
}

JSObject* JSTestStringContext::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSTestStringContext>(vm, globalObject);
}

JSValue JSTestStringContext::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTestStringContextDOMConstructor, DOMConstructorID::TestStringContext>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSTestStringContext::destroy(JSC::JSCell* cell)
{
    JSTestStringContext* thisObject = static_cast<JSTestStringContext*>(cell);
    thisObject->JSTestStringContext::~JSTestStringContext();
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSTestStringContextPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!prototype))
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSTestStringContext::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedHTMLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedHTML())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedHTMLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedHTMLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedHTML"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedHTML(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedHTMLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedScriptGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedScript())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedScriptGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedScriptSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedScript"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedScript(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedScriptSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedScriptURLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedScriptURL())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedScriptURLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedScriptURLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedScriptURL"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedScriptURL(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedScriptURLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyStringGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLegacyNullToEmptyStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyStringSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedHTMLAndLegacyNullToEmptyStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyStringGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLegacyNullToEmptyStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyStringSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedScriptAndLegacyNullToEmptyString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedScriptAndLegacyNullToEmptyStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLegacyNullToEmptyStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, throwScope, impl.attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, value, "TestStringContext attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_attributeWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedAttributeWithStringContextTrustedHTMLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedhtmlAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedAttributeWithStringContextTrustedHTMLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedAttributeWithStringContextTrustedHTMLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext reflectedAttributeWithStringContextTrustedHTML"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedhtmlAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedAttributeWithStringContextTrustedHTMLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.attributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedscriptAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext reflectedAttributeWithStringContextTrustedScript"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedscriptAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptURLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, throwScope, impl.attributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedscripturlAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedAttributeWithStringContextTrustedScriptURLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptURLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, value, "TestStringContext reflectedAttributeWithStringContextTrustedScriptURL"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedattributewithstringcontexttrustedscripturlAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedAttributeWithStringContextTrustedScriptURLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTMLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.getURLAttributeForBindings(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedhtmlAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTMLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTMLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext reflectedUrlAttributeWithStringContextTrustedHTML"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedhtmlAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedHTMLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.getURLAttributeForBindings(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedscriptAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedScriptAdaptor<IDLDOMString>>(lexicalGlobalObject, value, "TestStringContext reflectedUrlAttributeWithStringContextTrustedScript"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedscriptAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURLGetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, throwScope, impl.getURLAttributeForBindings(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedscripturlAttr))));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::get<jsTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURLSetter(JSGlobalObject& lexicalGlobalObject, JSTestStringContext& thisObject, JSValue value)
{
    auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(lexicalGlobalObject, value, "TestStringContext reflectedUrlAttributeWithStringContextTrustedScriptURL"_s);
    if (UNLIKELY(nativeValueConversionResult.hasException(throwScope)))
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::reflectedurlattributewithstringcontexttrustedscripturlAttr, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestStringContext>::set<setJSTestStringContext_reflectedUrlAttributeWithStringContextTrustedScriptURLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLStringContextTrustedHTMLAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedHTML"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedHTML(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTML, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedHTML");
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLStringContextTrustedScriptAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedScript"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedScript(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScript, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedScript");
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLStringContextTrustedScriptURLAdaptor<IDLUSVString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedScriptURL"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedScriptURL(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURL, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedScriptURL");
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLAndLegacyNullToEmptyStringBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedHTMLAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedHTMLAndLegacyNullToEmptyStringBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedHTMLAndLegacyNullToEmptyString");
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptAndLegacyNullToEmptyStringBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedScriptAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedScriptAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedScriptAndLegacyNullToEmptyString(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptAndLegacyNullToEmptyStringBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedScriptAndLegacyNullToEmptyString");
}

static inline JSC::EncodedJSValue jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTestStringContext>::ClassParameter castedThis)
{
    auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(callFrame->argumentCount() < 1))
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto strConversionResult = convert<IDLLegacyNullToEmptyStringStringContextTrustedScriptURLAdaptor<IDLUSVString>>(*lexicalGlobalObject, argument0.value(), "TestStringContext methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString"_s);
    if (UNLIKELY(strConversionResult.hasException(throwScope)))
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString(strConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTestStringContext>::call<jsTestStringContextPrototypeFunction_methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyStringBody>(*lexicalGlobalObject, *callFrame, "methodWithStringContextTrustedScriptURLAndLegacyNullToEmptyString");
}

JSC::GCClient::IsoSubspace* JSTestStringContext::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSTestStringContext, UseCustomHeapCellType::No>(vm,
        [] (auto& spaces) { return spaces.m_clientSubspaceForTestStringContext.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForTestStringContext = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForTestStringContext.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForTestStringContext = std::forward<decltype(space)>(space); }
    );
}

void JSTestStringContext::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSTestStringContext*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, "url "_s + thisObject->scriptExecutionContext()->url().string());
    Base::analyzeHeap(cell, analyzer);
}

bool JSTestStringContextOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSTestStringContextOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTestStringContext = static_cast<JSTestStringContext*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsTestStringContext->protectedWrapped().ptr(), jsTestStringContext);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7TestStringContext@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore17TestStringContextE[]; }
#endif
template<typename T, typename = std::enable_if_t<std::is_same_v<T, TestStringContext>, void>> static inline void verifyVTable(TestStringContext* ptr) {
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7TestStringContext@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore17TestStringContextE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // TestStringContext has subclasses. If TestStringContext has subclasses that get passed
        // to toJS() we currently require TestStringContext you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<TestStringContext>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<TestStringContext>(impl.ptr());
#endif
    return createWrapper<TestStringContext>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, TestStringContext& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

TestStringContext* JSTestStringContext::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSTestStringContext*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
