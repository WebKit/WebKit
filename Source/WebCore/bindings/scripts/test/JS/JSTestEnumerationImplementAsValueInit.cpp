/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTestEnumerationImplementAsValueInit.h"

#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSString.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/SortedArrayMap.h>


namespace WebCore {
using namespace JSC;

template<> TestEnumerationImplementAsValueInit convertDictionary<TestEnumerationImplementAsValueInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    VM& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return { };
    }
    TestEnumerationImplementAsValueInit result;
    JSValue valueValue;
    if (isNullOrUndefined)
        valueValue = jsUndefined();
    else {
        valueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "value"_s));
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    if (!valueValue.isUndefined()) {
        result.value = convert<IDLEnumeration<TestEnumerationImplementAsValueInit::ImplementedAsValue>>(lexicalGlobalObject, valueValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.value = TestEnumerationImplementAsValueInit::ImplementedAsValue::AnEnumValue1;
    return result;
}

String convertEnumerationToString(TestEnumerationImplementAsValueInit::ImplementedAsValue enumerationValue)
{
    static const NeverDestroyed<String> values[] = {
        MAKE_STATIC_STRING_IMPL("enumValue1"),
    };
    static_assert(static_cast<size_t>(TestEnumerationImplementAsValueInit::ImplementedAsValue::AnEnumValue1) == 0, "TestEnumerationImplementAsValueInit::ImplementedAsValue::AnEnumValue1 is not 0 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, TestEnumerationImplementAsValueInit::ImplementedAsValue enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<TestEnumerationImplementAsValueInit::ImplementedAsValue> parseEnumerationFromString<TestEnumerationImplementAsValueInit::ImplementedAsValue>(const String& stringValue)
{
    static constexpr std::pair<ComparableASCIILiteral, TestEnumerationImplementAsValueInit::ImplementedAsValue> mappings[] = {
        { "enumValue1", TestEnumerationImplementAsValueInit::ImplementedAsValue::AnEnumValue1 },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); LIKELY(enumerationValue))
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<TestEnumerationImplementAsValueInit::ImplementedAsValue> parseEnumeration<TestEnumerationImplementAsValueInit::ImplementedAsValue>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<TestEnumerationImplementAsValueInit::ImplementedAsValue>(value.toWTFString(&lexicalGlobalObject));
}

template<> const char* expectedEnumerationValues<TestEnumerationImplementAsValueInit::ImplementedAsValue>()
{
    return "\"enumValue1\"";
}

} // namespace WebCore
