/*
 * Copyright (C) 2017 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

enum AnimationPlayState {
    "idle",
    "running",
    "paused",
    "finished"
};

enum AnimationReplaceState {
    "active",
    "removed",
    "persisted"
};

[
    ActiveDOMObject,
    InterfaceName=Animation,
    CustomToJSObject,
    ExportMacro=WEBCORE_EXPORT,
    Exposed=Window
] interface WebAnimation : EventTarget {
    [Custom] constructor();

    attribute DOMString id;
    [ImplementedAs=bindingsEffect] attribute AnimationEffect? effect;
    [SettingsConditionallyReadWrite=WebAnimationsMutableTimelines] attribute AnimationTimeline? timeline;
    [ImplementedAs=bindingsStartTime] attribute double? startTime;
    [ImplementedAs=bindingsCurrentTime] attribute double? currentTime;
    attribute double playbackRate;
    [ImplementedAs=bindingsPlayState] readonly attribute AnimationPlayState playState;
    [ImplementedAs=bindingsReplaceState] readonly attribute AnimationReplaceState replaceState;
    [ImplementedAs=bindingsPending] readonly attribute boolean pending;
    attribute EventHandler onfinish;
    attribute EventHandler oncancel;
    attribute EventHandler onremove;
    [ImplementedAs=bindingsReady] readonly attribute Promise<WebAnimation> ready;
    [ImplementedAs=bindingsFinished] readonly attribute Promise<WebAnimation> finished;
    undefined cancel();
    undefined finish();
    [ImplementedAs=bindingsPlay] undefined play();
    [ImplementedAs=bindingsPause] undefined pause();
    undefined updatePlaybackRate(double playbackRate);
    [ImplementedAs=bindingsReverse] undefined reverse();
    undefined persist();
    undefined commitStyles();
};
