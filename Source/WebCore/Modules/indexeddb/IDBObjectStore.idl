/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// NOTE: This type is specified as 'any' in the IndexedDB specification, but is always
// constrained to this union.
typedef (DOMString or sequence<DOMString>) IDBKeyPath;

[
    ActiveDOMObject,
    GenerateIsReachable=Impl,
    JSCustomMarkFunction,
    SkipVTableValidation,
    Exposed=(Window,Worker)
] interface IDBObjectStore {
    attribute DOMString name;
    [SameObject, CachedAttribute] readonly attribute IDBKeyPath? keyPath;
    readonly attribute DOMStringList indexNames;
    [SameObject] readonly attribute IDBTransaction transaction;
    readonly attribute boolean autoIncrement;

    [NewObject, CallWith=GlobalObject] IDBRequest put(any value, optional any key);
    [NewObject, CallWith=GlobalObject] IDBRequest add(any value, optional any key);
    [NewObject, CallWith=GlobalObject, ImplementedAs=deleteFunction] IDBRequest delete(IDBKeyRange? keyRange);
    [NewObject, CallWith=GlobalObject, ImplementedAs=deleteFunction] IDBRequest delete(any key);
    [NewObject, CallWith=GlobalObject] IDBRequest clear();
    [NewObject, CallWith=GlobalObject] IDBRequest get(IDBKeyRange? key);
    [NewObject, CallWith=GlobalObject] IDBRequest get(any key);
    [NewObject, CallWith=GlobalObject] IDBRequest getKey(IDBKeyRange? key);
    [NewObject, CallWith=GlobalObject] IDBRequest getKey(any key);
    [NewObject, CallWith=GlobalObject] IDBRequest getAll(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=GlobalObject] IDBRequest getAll(any key, optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=GlobalObject] IDBRequest getAllKeys(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=GlobalObject] IDBRequest getAllKeys(any key, optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=GlobalObject] IDBRequest count(optional IDBKeyRange? range = null);
    [NewObject, CallWith=GlobalObject] IDBRequest count(any key);

    [NewObject, CallWith=GlobalObject] IDBRequest openCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
    [NewObject, CallWith=GlobalObject] IDBRequest openCursor(any key, optional IDBCursorDirection direction = "next");
    [NewObject, CallWith=GlobalObject] IDBRequest openKeyCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
    [NewObject, CallWith=GlobalObject] IDBRequest openKeyCursor(any key, optional IDBCursorDirection direction = "next");

    IDBIndex index(DOMString name);

    [NewObject, CallWith=GlobalObject] IDBIndex createIndex(DOMString name, (DOMString or sequence<DOMString>) keyPath, optional IDBIndexParameters options);
    undefined deleteIndex(DOMString name);
};

dictionary IDBIndexParameters {
    boolean unique = false;
    boolean multiEntry = false;
};
