/*
 * Copyright (C) 2010, Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=WEB_AUDIO,
    JSGenerateToJSObject,
    Exposed=Window
] interface AnalyserNode : AudioNode {
    [EnabledBySetting=WebAudio] constructor (BaseAudioContext context, optional AnalyserOptions options);

    attribute unsigned long fftSize;
    readonly attribute unsigned long frequencyBinCount;

    // minDecibels / maxDecibels represent the range to scale the FFT analysis data for conversion to unsigned byte values.
    attribute double minDecibels;
    attribute double maxDecibels;

    // A value from 0.0 -> 1.0 where 0.0 represents no time averaging with the last analysis frame.
    attribute double smoothingTimeConstant;

    // Copies the current frequency data into the passed array.
    // If the array has fewer elements than the frequencyBinCount, the excess elements will be dropped.
    undefined getFloatFrequencyData(Float32Array array);
    undefined getByteFrequencyData(Uint8Array array);

    // Real-time waveform data
    undefined getFloatTimeDomainData(Float32Array array);
    undefined getByteTimeDomainData(Uint8Array array);
};
