/*
 * Copyright (C) 2013, 2014 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

enum DeviceType {
    "none",
    "airplay",
    "tvout"
};

[
    Conditional=MEDIA_CONTROLS_SCRIPT,
    ImplementationLacksVTable,
    LegacyNoInterfaceObject,
] interface MediaControlsHost {
    readonly attribute DOMString layoutTraitsClassName;

    sequence<TextTrack> sortedTrackListForMenu(TextTrackList trackList);
    sequence<AudioTrack> sortedTrackListForMenu(AudioTrackList trackList);
    DOMString displayNameForTrack((TextTrack or AudioTrack)? track);
    readonly attribute TextTrack captionMenuOffItem;
    readonly attribute TextTrack captionMenuAutomaticItem;
    readonly attribute DOMString captionDisplayMode;
    undefined setSelectedTextTrack(TextTrack? track);
    readonly attribute HTMLElement textTrackContainer;
    readonly attribute boolean allowsInlineMediaPlayback;
    readonly attribute boolean supportsFullscreen;
    readonly attribute boolean isVideoLayerInline;
    readonly attribute boolean userGestureRequired;
    readonly attribute boolean isInMediaDocument;
    readonly attribute boolean shouldForceControlsDisplay;

    readonly attribute DOMString externalDeviceDisplayName;
    readonly attribute DeviceType externalDeviceType;

    attribute boolean controlsDependOnPageScaleFactor;
    
    undefined updateTextTrackContainer();
    undefined enteredFullscreen();
    undefined exitedFullscreen();

    DOMString generateUUID();

    [Conditional=MODERN_MEDIA_CONTROLS] readonly attribute DOMString shadowRootCSSText;
    [Conditional=MODERN_MEDIA_CONTROLS] DOMString base64StringForIconNameAndType(DOMString iconName, DOMString iconType);
    [Conditional=MODERN_MEDIA_CONTROLS] DOMString formattedStringForDuration(unrestricted double durationInSeconds);
    [Conditional=MODERN_MEDIA_CONTROLS&MEDIA_CONTROLS_CONTEXT_MENUS, EnabledBySetting=MediaControlsContextMenus] boolean showMediaControlsContextMenu(HTMLElement target, JSON options, VoidCallback callback);
};
