/*
 * Copyright (C) 2018 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

typedef long COSEAlgorithmIdentifier;

[
    Conditional=WEB_AUTHN,
] dictionary PublicKeyCredentialCreationOptions {
    required PublicKeyCredentialRpEntity rp;
    required PublicKeyCredentialUserEntity user;

    required BufferSource challenge;
    required sequence<PublicKeyCredentialParameters> pubKeyCredParams;

    unsigned long timeout;
    sequence<PublicKeyCredentialDescriptor> excludeCredentials = [];
    AuthenticatorSelectionCriteria authenticatorSelection;
    AttestationConveyancePreference attestation = "none";
    AuthenticationExtensionsClientInputs extensions;
};

[
    Conditional=WEB_AUTHN,
] dictionary PublicKeyCredentialEntity {
    required DOMString name;
    USVString icon;
};

[
    Conditional=WEB_AUTHN,
] dictionary PublicKeyCredentialRpEntity : PublicKeyCredentialEntity {
    DOMString id;
};

[
    Conditional=WEB_AUTHN,
] dictionary PublicKeyCredentialUserEntity : PublicKeyCredentialEntity {
    required BufferSource id;
    required DOMString displayName;
};

[
    Conditional=WEB_AUTHN,
] dictionary PublicKeyCredentialParameters {
    required PublicKeyCredentialType type;
    required COSEAlgorithmIdentifier alg;
};

[
    Conditional=WEB_AUTHN,
] dictionary AuthenticatorSelectionCriteria {
    AuthenticatorAttachment      authenticatorAttachment;
    boolean                      requireResidentKey = false;
    UserVerificationRequirement  userVerification = "preferred";
};
