/*
 * Copyright (C) 2024 Apple, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://github.com/immersive-web/WebXR-WebGPU-Binding/blob/main/explainer.md
[
    Conditional=WEBXR_LAYERS,
    EnabledBySetting=WebXRWebGPUBindingsEnabled,
    Exposed=Window
] interface XRGPUBinding {
    constructor(WebXRSession session, GPUDevice device);

    readonly attribute double nativeProjectionScaleFactor;

    [CallWith=CurrentScriptExecutionContext] XRProjectionLayer createProjectionLayer(optional XRGPUProjectionLayerInit init);
    // The core specification doesn't require these, support will be added later.
    // XRQuadLayer createQuadLayer(optional XRGPUQuadLayerInit init);
    // XRCylinderLayer createCylinderLayer(optional XRGPUCylinderLayerInit init);
    // XREquirectLayer createEquirectLayer(optional XRGPUEquirectLayerInit init);
    // XRCubeLayer createCubeLayer(optional XRGPUCubeLayerInit init);

    XRGPUSubImage getSubImage(XRCompositionLayer layer, WebXRFrame frame, optional XREye eye = "none");
    XRGPUSubImage getViewSubImage(XRProjectionLayer layer, WebXRView view);

    GPUTextureFormat getPreferredColorFormat();
};
