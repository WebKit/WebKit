/*
 * Copyright (C) 2020 Igalia S.L. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    EnabledBySetting=WebXR,
    Conditional=WEBXR,
    ActiveDOMObject,
    SecureContext,
    Exposed=Window,
    InterfaceName=XRSession
] interface WebXRSession : EventTarget {
    // Attributes
    readonly attribute XRInteractionMode interactionMode;
    readonly attribute XREnvironmentBlendMode environmentBlendMode;
    readonly attribute XRVisibilityState visibilityState;
    [SameObject] readonly attribute WebXRRenderState renderState;
    [SameObject] readonly attribute WebXRInputSourceArray inputSources;

    // Methods
    undefined updateRenderState(optional XRRenderStateInit stateInit);
    [NewObject] Promise<WebXRReferenceSpace> requestReferenceSpace(XRReferenceSpaceType type);

    unsigned long requestAnimationFrame(XRFrameRequestCallback callback);
    undefined cancelAnimationFrame(unsigned long handle);

    Promise<undefined> end();

    // Events
    attribute EventHandler onend;
    attribute EventHandler onselect;
    attribute EventHandler oninputsourceschange;
    attribute EventHandler onselectstart;
    attribute EventHandler onselectend;
    attribute EventHandler onsqueeze;
    attribute EventHandler onsqueezestart;
    attribute EventHandler onsqueezeend;
    attribute EventHandler onvisibilitychange;
};
