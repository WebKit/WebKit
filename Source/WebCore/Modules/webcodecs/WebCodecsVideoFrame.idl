/*
 * Copyright (C) 2022 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

typedef (HTMLImageElement
    or SVGImageElement
    or HTMLCanvasElement
    or ImageBitmap
    or CSSStyleImageValue
#if defined(ENABLE_OFFSCREEN_CANVAS) && ENABLE_OFFSCREEN_CANVAS
    or OffscreenCanvas
#endif
#if defined(ENABLE_VIDEO) && ENABLE_VIDEO
    or HTMLVideoElement
#endif
) CanvasImageSource;

// FIXME: Support Serializable and Transferable.
[
    Conditional=WEB_CODECS,
    EnabledBySetting=WebCodecsEnabled,
    Exposed=(Window,DedicatedWorker),
    InterfaceName=VideoFrame,
    ReportExtraMemoryCost,
] interface WebCodecsVideoFrame {
    [CallWith=CurrentScriptExecutionContext] constructor(CanvasImageSource image, optional VideoFrameInit init = {});
    [CallWith=CurrentScriptExecutionContext] constructor(WebCodecsVideoFrame image, optional VideoFrameInit init = {});
    [CallWith=CurrentScriptExecutionContext] constructor([AllowShared] (ArrayBufferView or ArrayBuffer) data, VideoFrameBufferInit init);

    readonly attribute VideoPixelFormat? format;
    readonly attribute unsigned long codedWidth;
    readonly attribute unsigned long codedHeight;
    readonly attribute DOMRectReadOnly? codedRect;
    readonly attribute DOMRectReadOnly? visibleRect;
    readonly attribute unsigned long displayWidth;
    readonly attribute unsigned long displayHeight;
    readonly attribute unsigned long long? duration;
    readonly attribute long long timestamp;
    readonly attribute VideoColorSpace colorSpace;

    unsigned long allocationSize(optional VideoFrameCopyToOptions options = {});
    Promise<sequence<PlaneLayout>> copyTo([AllowShared] (ArrayBufferView or ArrayBuffer) destination, optional VideoFrameCopyToOptions options = {});
    [CallWith=CurrentScriptExecutionContext] WebCodecsVideoFrame clone();
    undefined close();
};

[Conditional=WEB_CODECS]
dictionary VideoFrameInit {
    unsigned long long duration;
    long long timestamp;
    WebCodecsAlphaOption alpha;

    DOMRectInit visibleRect;

    [EnforceRange] unsigned long displayWidth;
    [EnforceRange] unsigned long displayHeight;
};

[Conditional=WEB_CODECS]
dictionary VideoFrameBufferInit {
    required VideoPixelFormat format;
    required [EnforceRange] unsigned long codedWidth;
    required [EnforceRange] unsigned long codedHeight;
    required [EnforceRange] long long timestamp;
    [EnforceRange] unsigned long long duration;

    sequence<PlaneLayout> layout;

    DOMRectInit visibleRect;

    [EnforceRange] unsigned long displayWidth;
    [EnforceRange] unsigned long displayHeight;

    VideoColorSpaceInit colorSpace;
};

[Conditional=WEB_CODECS]
dictionary VideoFrameCopyToOptions {
  DOMRectInit rect;
  sequence<PlaneLayout> layout;
};
