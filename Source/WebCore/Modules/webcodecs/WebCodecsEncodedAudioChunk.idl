/*
 * Copyright (C) 2022 Apple Inc. All rights reserved.
 * Copyright (C) 2023 Igalia S.L
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// FIXME: Support Serializable and Transferable.
[
    Conditional=WEB_CODECS,
    EnabledBySetting=WebCodecsAudioEnabled,
    Exposed=(Window,DedicatedWorker),
    InterfaceName=EncodedAudioChunk,
] interface WebCodecsEncodedAudioChunk {
  constructor(WebCodecsEncodedAudioChunkInit init);
  readonly attribute WebCodecsEncodedAudioChunkType type;
  readonly attribute long long timestamp;
  readonly attribute unsigned long long? duration;
  readonly attribute unsigned long byteLength;

  undefined copyTo([AllowShared] (ArrayBufferView or ArrayBuffer) destination);
};

typedef [EnforceRange] long long WebCodecsEncodedAudioChunkInitTimestamp;
typedef [EnforceRange] unsigned long long WebCodecsEncodedAudioChunkInitDuration;

[
    Conditional=WEB_CODECS
] dictionary WebCodecsEncodedAudioChunkInit {
  required WebCodecsEncodedAudioChunkType type;
  WebCodecsEncodedAudioChunkInitTimestamp timestamp;
  WebCodecsEncodedAudioChunkInitDuration duration;
  required [AllowShared] (ArrayBufferView or ArrayBuffer) data;
};
