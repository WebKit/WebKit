/*
 * Copyright (C) 2012 Google Inc. All rights reserved.
 * Copyright (C) 2017 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    ActiveDOMObject,
    Conditional=WEB_RTC,
    EnabledBySetting=PeerConnection,
    Exposed=(Window,Worker),
] interface RTCDataChannel : EventTarget {
    // FIXME: Add support for priority attribute.

    readonly attribute USVString label;
    readonly attribute boolean ordered;
    readonly attribute unsigned short? maxPacketLifeTime;
    readonly attribute unsigned short? maxRetransmits;
    readonly attribute USVString protocol;
    readonly attribute boolean negotiated;
    readonly attribute unsigned short? id;
    readonly attribute RTCDataChannelState readyState;
    readonly attribute unsigned long bufferedAmount;
    readonly attribute RTCPriorityType priority;
    attribute unsigned long bufferedAmountLowThreshold;

    attribute DOMString binaryType;

    undefined send(ArrayBuffer data);
    undefined send(ArrayBufferView data);
    undefined send(Blob data);
    undefined send(USVString data);

    undefined close();

    attribute EventHandler onopen;
    attribute EventHandler onerror;
    attribute EventHandler onclose;
    attribute EventHandler onmessage;
    attribute EventHandler onbufferedamountlow;
};

[
    Conditional=WEB_RTC,
    EnabledBySetting=PeerConnection,
    ImplementedAs=RTCDataChannelState
] enum RTCDataChannelState {
    "connecting",
    "open",
    "closing",
    "closed"
};
