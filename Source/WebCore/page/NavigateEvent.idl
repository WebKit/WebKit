/*
 * Copyright (C) 2024 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigateevent
[
    EnabledBySetting=NavigationAPIEnabled,
    Exposed=Window
] interface NavigateEvent : Event {
    constructor([AtomString] DOMString type, NavigateEventInit eventInitDict);

    readonly attribute NavigationNavigationType navigationType;
    readonly attribute NavigationDestination destination;
    readonly attribute boolean canIntercept;
    readonly attribute boolean userInitiated;
    readonly attribute boolean hashChange;
    readonly attribute AbortSignal signal;
    readonly attribute DOMFormData? formData;
    readonly attribute DOMString? downloadRequest;
    readonly attribute any info;
    [EnabledBySetting=UAVisualTransitionDetectionEnabled] readonly attribute boolean hasUAVisualTransition;

    undefined intercept(optional NavigationInterceptOptions options = {});
    undefined scroll();
};

// https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigateeventinit
dictionary NavigateEventInit : EventInit {
    NavigationNavigationType navigationType = "push";
    required NavigationDestination destination;
    boolean canIntercept = false;
    boolean userInitiated = false;
    boolean hashChange = false;
    required AbortSignal signal;
    DOMFormData? formData = null;
    DOMString? downloadRequest = null;
    any info;
    [EnabledBySetting=UAVisualTransitionDetectionEnabled] boolean hasUAVisualTransition = false;
};

// https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigationinterceptoptions
dictionary NavigationInterceptOptions {
    NavigationInterceptHandler handler;
    NavigationFocusReset focusReset;
    NavigationScrollBehavior scroll;
};

// https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigationfocusreset
enum NavigationFocusReset {
    "after-transition",
    "manual"
};

// https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigationscrollbehavior
enum NavigationScrollBehavior {
    "after-transition",
    "manual"
};
