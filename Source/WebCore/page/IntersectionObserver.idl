/*
 * Copyright (C) 2016 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://wicg.github.io/IntersectionObserver/

[
    Conditional=INTERSECTION_OBSERVER,
    EnabledBySetting=IntersectionObserver,
    Exposed=Window,
    JSCustomMarkFunction,
    CustomIsReachable,
    ImplementationLacksVTable
] interface IntersectionObserver {
    [CallWith=Document] constructor(IntersectionObserverCallback callback, optional IntersectionObserverInit options);

    readonly attribute Node? root;
    readonly attribute DOMString rootMargin;
    readonly attribute sequence<double> thresholds;

    undefined observe(Element target);
    undefined unobserve(Element target);
    undefined disconnect();
    [ResultField=records] sequence<IntersectionObserverEntry> takeRecords();
};

[
    Conditional=INTERSECTION_OBSERVER,
    EnabledBySetting=IntersectionObserver
]
dictionary IntersectionObserverInit {
    (Element or Document)? root = null;
    DOMString rootMargin = "0px";
    (double or sequence<double>) threshold = 0.0;
};
