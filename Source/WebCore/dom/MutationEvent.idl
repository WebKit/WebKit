/*
 * Copyright (C) 2006 Apple Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    Exposed=Window
] interface MutationEvent : Event {
    // attrChangeType
    const unsigned short MODIFICATION = 1;
    const unsigned short ADDITION = 2;
    const unsigned short REMOVAL = 3;

    readonly attribute Node? relatedNode;
    readonly attribute DOMString prevValue;
    readonly attribute DOMString newValue;
    readonly attribute DOMString attrName;
    readonly attribute unsigned short attrChange;

    undefined initMutationEvent([AtomString] DOMString type, optional boolean canBubble = false, optional boolean cancelable = false,
        optional Node? relatedNode = null, optional DOMString prevValue = "undefined", optional DOMString newValue = "undefined",
        optional DOMString attrName = "undefined", optional unsigned short attrChange = 0);
};
