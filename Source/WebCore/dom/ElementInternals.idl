/*
 * Copyright (C) 2022 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

typedef (File or USVString or DOMFormData) FormValue;

[
    GenerateIsReachable=ImplElementRoot,
    GenerateAddOpaqueRoot=element,
    Exposed=Window,
    EnabledBySetting=FormAssociatedCustomElementsEnabled,
] interface ElementInternals {
    readonly attribute ShadowRoot? shadowRoot;

    undefined setFormValue(FormValue? value, optional FormValue? state);

    readonly attribute HTMLFormElement? form;

    undefined setValidity(optional ValidityStateFlags flags = {}, optional DOMString message, optional HTMLElement validationAnchor);
    readonly attribute boolean willValidate;
    readonly attribute ValidityState validity;
    readonly attribute DOMString validationMessage;
    boolean checkValidity();
    boolean reportValidity();

    readonly attribute NodeList labels;

    [CEReactions, Reflect, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? role;
    [CEReactions, Reflect=aria_activedescendant, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute Element? ariaActiveDescendantElement;
    [CEReactions, Reflect=aria_atomic, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaAtomic;
    [CEReactions, Reflect=aria_autocomplete, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaAutoComplete;
    [CEReactions, Reflect=aria_busy, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaBusy;
    [CEReactions, Reflect=aria_checked, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaChecked;
    [CEReactions, Reflect=aria_colcount, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaColCount;
    [CEReactions, Reflect=aria_colindex, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaColIndex;
    [CEReactions, Reflect=aria_colspan, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaColSpan;
    [CEReactions, CustomGetter, Reflect=aria_controls, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaControlsElements;
    [CEReactions, Reflect=aria_current, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaCurrent;
    [CEReactions, CustomGetter, Reflect=aria_describedby, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaDescribedByElements;
    [CEReactions, CustomGetter, Reflect=aria_details, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaDetailsElements;
    [CEReactions, Reflect=aria_disabled, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaDisabled;
    [CEReactions, CustomGetter, Reflect=aria_errormessage, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaErrorMessageElements;
    [CEReactions, Reflect=aria_expanded, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaExpanded;
    [CEReactions, CustomGetter, Reflect=aria_flowto, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaFlowToElements;
    [CEReactions, Reflect=aria_haspopup, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaHasPopup;
    [CEReactions, Reflect=aria_hidden, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaHidden;
    [CEReactions, Reflect=aria_invalid, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaInvalid;
    [CEReactions, Reflect=aria_keyshortcuts, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaKeyShortcuts;
    [CEReactions, Reflect=aria_label, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaLabel;
    [CEReactions, CustomGetter, Reflect=aria_labelledby, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaLabelledByElements;
    [CEReactions, Reflect=aria_level, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaLevel;
    [CEReactions, Reflect=aria_live, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaLive;
    [CEReactions, Reflect=aria_modal, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaModal;
    [CEReactions, Reflect=aria_multiline, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaMultiLine;
    [CEReactions, Reflect=aria_multiselectable, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaMultiSelectable;
    [CEReactions, Reflect=aria_orientation, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaOrientation;
    [CEReactions, CustomGetter, Reflect=aria_owns, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute FrozenArray<Element>? ariaOwnsElements;
    [CEReactions, Reflect=aria_placeholder, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaPlaceholder;
    [CEReactions, Reflect=aria_posinset, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaPosInSet;
    [CEReactions, Reflect=aria_pressed, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaPressed;
    [CEReactions, Reflect=aria_readonly, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaReadOnly;
    [CEReactions, Reflect=aria_relevant, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRelevant;
    [CEReactions, Reflect=aria_required, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRequired;
    [CEReactions, Reflect=aria_roledescription, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRoleDescription;
    [CEReactions, Reflect=aria_rowcount, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRowCount;
    [CEReactions, Reflect=aria_rowindex, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRowIndex;
    [CEReactions, Reflect=aria_rowspan, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaRowSpan;
    [CEReactions, Reflect=aria_selected, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaSelected;
    [CEReactions, Reflect=aria_setsize, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaSetSize;
    [CEReactions, Reflect=aria_sort, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaSort;
    [CEReactions, Reflect=aria_valuemax, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaValueMax;
    [CEReactions, Reflect=aria_valuemin, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaValueMin;
    [CEReactions, Reflect=aria_valuenow, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaValueNow;
    [CEReactions, Reflect=aria_valuetext, EnabledBySetting=DefaultARIAForCustomElementsEnabled] attribute DOMString? ariaValueText;
};
