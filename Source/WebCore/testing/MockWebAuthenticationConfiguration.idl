/*
 * Copyright (C) 2019 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=WEB_AUTHN,
] enum MockHidStage {
    "info",
    "request"
};

[
    Conditional=WEB_AUTHN,
] enum MockHidSubStage {
    "init",
    "msg"
};

[
    Conditional=WEB_AUTHN,
] enum MockHidError {
    "success",
    "data-not-sent",
    "empty-report",
    "wrong-channel-id",
    "malicious-payload",
    "unsupported-options",
    "wrong-nonce"
};

[
    Conditional=WEB_AUTHN,
] enum MockNfcError {
    "success",
    "no-tags",
    "wrong-tag-type",
    "no-connections",
    "malicious-payload"
};

[
    Conditional=WEB_AUTHN,
] enum UserVerification {
    "no",
    "yes",
    "cancel",
    "presence"
};

[
    Conditional=WEB_AUTHN,
] dictionary MockWebAuthenticationConfiguration {
    boolean silentFailure = false;
    MockLocalConfiguration local;
    MockHidConfiguration hid;
    MockNfcConfiguration nfc;
};

[
    Conditional=WEB_AUTHN,
] dictionary MockLocalConfiguration {
    UserVerification userVerification = "no";
    boolean acceptAttestation = false;
    DOMString privateKeyBase64;
    DOMString userCertificateBase64;
    DOMString intermediateCACertificateBase64;
    DOMString preferredCredentialIdBase64;
};

[
    Conditional=WEB_AUTHN,
] dictionary MockHidConfiguration {
    sequence<DOMString> payloadBase64;
    MockHidStage stage = "info";
    MockHidSubStage subStage = "init";
    MockHidError error = "success";
    boolean isU2f = false;
    boolean keepAlive = false;
    boolean fastDataArrival = false;
    boolean continueAfterErrorData = false;
    boolean canDowngrade = false;
    boolean expectCancel = false;
    boolean supportClientPin = false;
};

[
    Conditional=WEB_AUTHN,
] dictionary MockNfcConfiguration {
    MockNfcError error = "success";
    sequence<DOMString> payloadBase64;
    boolean multipleTags = false;
    boolean multiplePhysicalTags = false;
};
