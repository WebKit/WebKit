2021-04-11  Sam Weinig  <weinig@apple.com>

        Reduce compile time and binary size cost of enabling proper CSSStyleDeclaration property access behavior
        https://bugs.webkit.org/show_bug.cgi?id=222518
        <rdar://problem/75136887>

        Reviewed by Darin Adler.

        * wtf/PlatformEnable.h:
        Remove ENABLE_ATTRIBUTE_BASED_PROPERTIES_FOR_CSS_STYLE_DECLARATION, as it is now the default and on everwhere.

2021-04-09  Jer Noble  <jer.noble@apple.com>

        WTF SoftLinking macros can cause collisions with their target functions
        https://bugs.webkit.org/show_bug.cgi?id=224379
        <rdar://76434202>

        Reviewed by Eric Carlson.

        Do not declare an inline version of the target function, as this will collide if the target function
        becomes inlined. Instead, callers should use the explicit softLink_Library_Function() syntax, or
        the LibrarySoftLinking.h headers should use #defines to re-declare the function name.

        * wtf/cocoa/SoftLinking.h:

2021-04-08  Stephan Szabo  <stephan.szabo@sony.com>

        [RunLoopGeneric] OneShotTimer should not remain "isActive" after fired
        https://bugs.webkit.org/show_bug.cgi?id=189335
        <rdar://problem/44226604>

        Reviewed by Geoffrey Garen.

        * wtf/generic/RunLoopGeneric.cpp:

        Deactivate one-shot timer before invoking its callback.

2021-04-08  Khem Raj  <raj.khem@gmail.com>

        [WPE] Build fixes for musl C library on Linux
        https://bugs.webkit.org/show_bug.cgi?id=210068

        Reviewed by Carlos Alberto Lopez Perez.

        Define 128KB DEFAULT_THREAD_STACK_SIZE_IN_KB for musl
        Use OS(LINUX) check to include musl when building for
        Linux based platforms.

        * wtf/PlatformHave.h:
        * wtf/Threading.cpp:

2021-04-08  Chris Dumez  <cdumez@apple.com>

        OfflineAudioContext objects are leaking
        https://bugs.webkit.org/show_bug.cgi?id=224279

        Reviewed by Darin Adler.

        Add flag that can be passed when constructing a WeakPtr to disable threading assertions.
        This is useful for cases where we know it is safe due to locking but we'd like to use a
        WeakPtr instead of a raw pointer because it is safer.

        * wtf/WeakPtr.h:
        (WTF::WeakPtr::get const):
        (WTF::WeakPtr::operator-> const):
        (WTF::WeakPtr::operator* const):
        (WTF::WeakPtr::WeakPtr):
        (WTF::WeakPtrFactory::createWeakPtr const):
        (WTF::=):
        (WTF::makeWeakPtr):

2021-04-08  Simon Fraser  <simon.fraser@apple.com>

        Copy-constructed Vectors should not have excess capacity
        https://bugs.webkit.org/show_bug.cgi?id=224313

        Reviewed by Darin Adler.

        When copy-constructing a Vector<>, set the capacity to the size of the input.
        This avoids wasted vector capacity at call sites that dynamically build vectors
        and then copy them into read-only caches.

        * wtf/Vector.h:
        (WTF::Malloc>::Vector):

2021-04-02  Darin Adler  <darin@apple.com>

        Use Hasher more, remove IntegerHasher, fix hashing-related mistakes
        https://bugs.webkit.org/show_bug.cgi?id=224138

        Reviewed by Chris Dumez.

        * wtf/HashFunctions.h: Export intHash and pairIntHash to the global namespace
        so they can be called without an explicit WTF prefix. This follows the usual
        WTF design pattern given that these functions are intended for use outside WTF.

        * wtf/Hasher.h: Deleted IntegerHasher.
        (WTF::add): Added overloads for String, AtomString, and URL.

        * wtf/ObjectIdentifier.h:
        (WTF::add): Added a Hasher overload for any ObjectIdentifier.

        * wtf/RetainPtr.h: Export safeCFEqual and safeCFHash to the global namespace
        so they can be called without an explicit WTF prefix. This follows the usual
        WTF design pattern given that these functions are intended for use outside WTF.

        * wtf/VectorHash.h: Removed the VectorHash template, instead just specializing
        DefaultHash. Use computeHash to hash the contents of the vector instead of
        hashing the hashes of the items in the vector. This is better in general and
        better for the one case where we are currently using this, for a Vector<int>.
        We want to hash all the integers rather than hashing hashes of all the integers.
        In the future, this means the elements of the Vector need to be hashable using
        the Hasher machinery. The old requirement was the the elements had a DefaultHash.

2021-04-07  Michael Catanzaro  <mcatanzaro@gnome.org>

        Suppress -Warray-bounds warning spam in Bitmap.h
        https://bugs.webkit.org/show_bug.cgi?id=224207

        Reviewed by Don Olmstead.

        Suppress this warning.

        * wtf/Bitmap.h:
        (WTF::WordType>::clear):

2021-04-07  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Use FixedVector more in bytecode dir and JumpTable
        https://bugs.webkit.org/show_bug.cgi?id=224275

        Reviewed by Michael Saboff and Mark Lam.

        * wtf/FixedVector.h:
        (WTF::FixedVector::offsetOfStorage):
        * wtf/RefCountedArray.h:
        (WTF::RefCountedArray::Header::size):
        (WTF::RefCountedArray::Header::offsetOfLength):

2021-04-07  Alex Christensen  <achristensen@webkit.org>

        Use os_transaction_create instead of deprecated xpc_transaction_begin/end
        https://bugs.webkit.org/show_bug.cgi?id=224288

        Reviewed by Tim Horton.

        * wtf/spi/darwin/XPCSPI.h:

2021-04-06  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] WasmMemory caging should care nullptr
        https://bugs.webkit.org/show_bug.cgi?id=224268
        <rdar://problem/74654838>

        Reviewed by Mark Lam.

        Accept size_t since Wasm::Memory's length can be larger than 4GB.

        * wtf/CagedPtr.h:
        (WTF::CagedPtr::CagedPtr):
        (WTF::CagedPtr::get const):
        (WTF::CagedPtr::getMayBeNull const):
        (WTF::CagedPtr::at const):
        (WTF::CagedPtr::recage):
        * wtf/CagedUniquePtr.h:
        (WTF::CagedUniquePtr::CagedUniquePtr):
        (WTF::CagedUniquePtr::create):
        (WTF::CagedUniquePtr::tryCreate):

2021-04-06  Alex Christensen  <achristensen@webkit.org>

        Add U+0581 and U+0585 to list of Armenian characters that look like Latin characters
        https://bugs.webkit.org/show_bug.cgi?id=224219
        <rdar://75896365>

        Reviewed by Brent Fulgham.

        These code points are allowed in the context of other Armenian code points and punctuation, but not other script code points.
        This was already implemented for the others, but I consolidated the list to one location to avoid having two locations for the list.

        * wtf/URLHelpers.cpp:
        (WTF::URLHelpers::isArmenianLookalikeCharacter):
        (WTF::URLHelpers::isArmenianLookalikeSequence):
        (WTF::URLHelpers::isLookalikeCharacter):

2021-04-06  Yusuke Suzuki  <ysuzuki@apple.com>

        [WTF] Introduce FixedVector and use it for FixedOperands
        https://bugs.webkit.org/show_bug.cgi?id=224171

        Reviewed by Mark Lam.

        This FixedVector<T> is a wrapper around RefCountedArray<T>, but this offers Vector-like copy / move semantics,
        so that we can use this FixedVector<T> as a drop-in-replacement for fixed-sized Vector fields. The purpose
        of that is saving memory by removing unnecessary storage (FixedVector is fixed-sized allocated) and putting size
        into the allocated memory.

        * WTF.xcodeproj/project.pbxproj:
        * wtf/CMakeLists.txt:
        * wtf/FastBitVector.h:
        (WTF::FastBitVector::FastBitVector):
        * wtf/FixedVector.h: Added.
        (WTF::FixedVector::FixedVector):
        (WTF::FixedVector::operator=):
        (WTF::FixedVector::size const):
        (WTF::FixedVector::isEmpty const):
        (WTF::FixedVector::byteSize const):
        (WTF::FixedVector::data):
        (WTF::FixedVector::begin):
        (WTF::FixedVector::end):
        (WTF::FixedVector::data const):
        (WTF::FixedVector::begin const):
        (WTF::FixedVector::end const):
        (WTF::FixedVector::rbegin):
        (WTF::FixedVector::rend):
        (WTF::FixedVector::rbegin const):
        (WTF::FixedVector::rend const):
        (WTF::FixedVector::at):
        (WTF::FixedVector::at const):
        (WTF::FixedVector::operator[]):
        (WTF::FixedVector::operator[] const):
        (WTF::FixedVector::first):
        (WTF::FixedVector::first const):
        (WTF::FixedVector::last):
        (WTF::FixedVector::last const):
        (WTF::FixedVector::fill):
        (WTF::FixedVector::operator== const):
        (WTF::FixedVector::swap):
        (WTF::swap):
        * wtf/RefCountedArray.h:
        (WTF::RefCountedArray::RefCountedArray):
        (WTF::RefCountedArray::fill):
        (WTF::RefCountedArray::swap):

2021-04-06  Youenn Fablet  <youenn@apple.com>

        Enable NSURLSession WebSocket code path by default
        https://bugs.webkit.org/show_bug.cgi?id=224102

        Reviewed by Alex Christensen.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:

2021-04-05  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Shrink some of Vectors in JSC
        https://bugs.webkit.org/show_bug.cgi?id=224162

        Reviewed by Simon Fraser.

        Add rbegin and rend to make RefCountedArray usable for Vector clients who use these features.

        * wtf/RefCountedArray.h:
        (WTF::RefCountedArray::begin):
        (WTF::RefCountedArray::end):
        (WTF::RefCountedArray::begin const):
        (WTF::RefCountedArray::end const):
        (WTF::RefCountedArray::rbegin):
        (WTF::RefCountedArray::rend):
        (WTF::RefCountedArray::rbegin const):
        (WTF::RefCountedArray::rend const):

2021-04-05  Alex Christensen  <achristensen@webkit.org>

        Resurrect Mac CMake build
        https://bugs.webkit.org/show_bug.cgi?id=224084

        Reviewed by Tim Horton.

        * wtf/PlatformMac.cmake:

2021-04-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION: ASSERTION FAILED: settings().textAutosizingEnabled() && settings().textAutosizingUsesIdempotentMode() on various tests
        https://bugs.webkit.org/show_bug.cgi?id=209450
        <rdar://problem/60799255>

        Reviewed by Tim Horton.

        Replace the call to `setNeedsRecalcStyleInAllFrames` with `textAutosizingUsesIdempotentModeChanged` when
        changing whether idempotent text autosizing is enabled.

        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-04-05  Yusuke Suzuki  <ysuzuki@apple.com>

        Define AtomString(ASCIILiteral) and use ASCIILiteral more to avoid memory allocation
        https://bugs.webkit.org/show_bug.cgi?id=224125

        Reviewed by Saam Barati.

        Add AtomString(ASCIILiteral). ASCIILiteral ensures that storage is constant non-heap string by its type.
        So we can just use it as a literal (not allocating a string storage).

        * wtf/text/AtomString.h:

2021-04-02  Simon Fraser  <simon.fraser@apple.com>

        Enable PreferPageRenderingUpdatesNear60FPSEnabled by default
        https://bugs.webkit.org/show_bug.cgi?id=224133

        Reviewed by Tim Horton.

        Turn the PreferPageRenderingUpdatesNear60FPSEnabled internal setting on by default. This
        means that requestAnimationFrame on 144Hz displays will fire at 72Hz. 60Hz displays are
        unaffected.

        Firing at "close to 60fps" was determined to be necessary for web compatibility and power.

        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-04-02  Youenn Fablet  <youenn@apple.com>

        [MacOS] Enable NSURLSession WebSocket code path in WebKitTestRunner
        https://bugs.webkit.org/show_bug.cgi?id=220973
        <rdar://problem/73655870>

        Reviewed by Darin Adler.

        * wtf/PlatformHave.h:
        Bump NSURLSessionWebSocket path to above BigSur and iOS14.

2021-04-02  Yusuke Suzuki  <ysuzuki@apple.com>

        Unreviewed, fix passing hash value
        https://bugs.webkit.org/show_bug.cgi?id=223895

        * wtf/RobinHoodHashTable.h:
        (WTF::SizePolicy>::addPassingHashCode):

2021-04-01  Yusuke Suzuki  <ysuzuki@apple.com>

        [WTF] Introduce RobinHoodHashTable
        https://bugs.webkit.org/show_bug.cgi?id=223895

        Reviewed by Fil Pizlo.

        This patch implements RobinHoodHashTable[1]. We don't use it as a default hashtable since it has different performance v.s. memory-saving characteristics,
        and this patch's goal is not tackling on making this default. Rather, the goal of this patch is introducing it to non-performance sensitive area quickly
        so that we can save memory. RobinHoodHashTable more frequently computes hash value compared to HashTable, so this is not drop-in replacement for the existing
        one. But still, this is useful since we know that "while there are many small HashTables and they holds much memory, there are super large HashTables and
        they holds almost same amount of memory while they are a few.". This patch's goal is applying this RobinHoodHashTable to these "large, but a few" singleton tables.

        RobinHoodHashTable maintains distance-from-initial-bucket (DIB) small by adjusting existing entries when inserting. When inserting, if we found that the
        existing entry has less DIB than the current inserting entry's DIB, then we swap entries, and insert the existing entry to the other place. This is giving
        some good DIB from rich entry to poor entry (that's why it is called RobinHood Hashing), and making average DIB lower. And this algorithm adds good invariant
        that, when looking up an entry, and we found that existing entry has smaller DIB, then we can stop searching in the middle of the chain since we know that
        we should swap entries when this happened when inserting. These two tricks maintain HashTable performance even under significantly high load factor: 90% load-factor
        just works. 95% load-factor regress adding performance, but still it does not become catastrophic compared to normal open-addressing HashTable.

        We introduce RobinHoodHashTable, and adding several kinds of tables based on load-factors.

        1. MemoryCompactLookupOnlyRobinHoodHashSet / HashMap

            This has 95% load-factor. This is suitable for sets and maps which is mostly-constant: constructing once, and looking up repeatedly. In WebKit, there are so
            many this kind of tables e.g. singleton HashMap for various kinds of things. We can use this super high load-factor table so that we can save memory even while
            we are maintains fast HashTable lookup.

        2. MemoryCompactRobinHoodHashSet / HashMap

            This has 90% load-factor. It just works, and we can try using it if sets and maps are significantly performance intensive.

        3. FastRobinHoodHashSet / HashMap

            This has 75% load-factor. This is still good compared to HashSet and HashMap since they are using 50% load-factor for large sized tables. This has very slightly performance regressed
            compared to 50% load-factor large HashSet and HashMap, but if that is not performance intensive (e.g. AtomStringTable is one of the most performance intensive table), this is good.

        In this patch, we replace many singleton HashSet / HashMap with RobinHoodHashTable.

        [1]: https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/

        * WTF.xcodeproj/project.pbxproj:
        * wtf/CMakeLists.txt:
        * wtf/Forward.h:
        * wtf/HashMap.h:
        (WTF::Y>::swap):
        (WTF::Y>::size const):
        (WTF::Y>::capacity const):
        (WTF::Y>::isEmpty const):
        (WTF::Y>::begin):
        (WTF::Y>::end):
        (WTF::Y>::begin const):
        (WTF::Y>::end const):
        (WTF::Y>::find):
        (WTF::Y>::find const):
        (WTF::Y>::contains const):
        (WTF::Y>::get const):
        (WTF::Y>::inlineGet const):
        (WTF::TableTraitsArg>::inlineSet):
        (WTF::TableTraitsArg>::inlineAdd):
        (WTF::TableTraitsArg>::inlineEnsure):
        (WTF::TableTraitsArg>::set):
        (WTF::TableTraitsArg>::add):
        (WTF::TableTraitsArg>::fastAdd):
        (WTF::TableTraitsArg>::ensure):
        (WTF::Y>::remove):
        (WTF::Y>::removeIf):
        (WTF::Y>::clear):
        (WTF::Y>::take):
        (WTF::Y>::checkConsistency const):
        (WTF::Y>::isValidKey):
        (WTF::operator==):
        (WTF::operator!=):
        (WTF::X>::swap): Deleted.
        (WTF::X>::size const): Deleted.
        (WTF::X>::capacity const): Deleted.
        (WTF::X>::isEmpty const): Deleted.
        (WTF::X>::begin): Deleted.
        (WTF::X>::end): Deleted.
        (WTF::X>::begin const): Deleted.
        (WTF::X>::end const): Deleted.
        (WTF::X>::find): Deleted.
        (WTF::X>::find const): Deleted.
        (WTF::X>::contains const): Deleted.
        (WTF::X>::get const): Deleted.
        (WTF::X>::inlineGet const): Deleted.
        (WTF::MappedTraitsArg>::inlineSet): Deleted.
        (WTF::MappedTraitsArg>::inlineAdd): Deleted.
        (WTF::MappedTraitsArg>::inlineEnsure): Deleted.
        (WTF::MappedTraitsArg>::set): Deleted.
        (WTF::MappedTraitsArg>::add): Deleted.
        (WTF::MappedTraitsArg>::fastAdd): Deleted.
        (WTF::MappedTraitsArg>::ensure): Deleted.
        (WTF::MappedTraits>::get const): Deleted.
        (WTF::MappedTraits>::inlineGet const): Deleted.
        (WTF::X>::remove): Deleted.
        (WTF::X>::removeIf): Deleted.
        (WTF::X>::clear): Deleted.
        (WTF::MappedTraits>::take): Deleted.
        (WTF::X>::take): Deleted.
        (WTF::X>::checkConsistency const): Deleted.
        (WTF::X>::isValidKey): Deleted.
        * wtf/HashSet.h:
        (WTF::W>::swap):
        (WTF::W>::size const):
        (WTF::W>::capacity const):
        (WTF::W>::isEmpty const):
        (WTF::W>::begin const):
        (WTF::W>::end const):
        (WTF::W>::find const):
        (WTF::W>::contains const):
        (WTF::TableTraits>::find const):
        (WTF::TableTraits>::contains const):
        (WTF::TableTraits>::ensure):
        (WTF::W>::add):
        (WTF::W>::addVoid):
        (WTF::TableTraits>::add):
        (WTF::W>::remove):
        (WTF::W>::removeIf):
        (WTF::W>::clear):
        (WTF::W>::take):
        (WTF::W>::takeAny):
        (WTF::TableTraits>::remove):
        (WTF::TableTraits>::take):
        (WTF::W>::isValidValue):
        (WTF::= const):
        (WTF::W>::checkConsistency const):
        (WTF::V>::swap): Deleted.
        (WTF::V>::size const): Deleted.
        (WTF::V>::capacity const): Deleted.
        (WTF::V>::isEmpty const): Deleted.
        (WTF::V>::begin const): Deleted.
        (WTF::V>::end const): Deleted.
        (WTF::V>::find const): Deleted.
        (WTF::V>::contains const): Deleted.
        (WTF::Traits>::find const): Deleted.
        (WTF::Traits>::contains const): Deleted.
        (WTF::Traits>::ensure): Deleted.
        (WTF::V>::add): Deleted.
        (WTF::V>::addVoid): Deleted.
        (WTF::Traits>::add): Deleted.
        (WTF::V>::remove): Deleted.
        (WTF::V>::removeIf): Deleted.
        (WTF::V>::clear): Deleted.
        (WTF::V>::take): Deleted.
        (WTF::V>::takeAny): Deleted.
        (WTF::Traits>::remove): Deleted.
        (WTF::Traits>::take): Deleted.
        (WTF::V>::isValidValue): Deleted.
        (WTF::V>::checkConsistency const): Deleted.
        * wtf/HashTable.h:
        (WTF::addIterator):
        (WTF::removeIterator):
        (WTF::invalidateIterators):
        (WTF::HashTable::~HashTable):
        (WTF::HashTable::random):
        (WTF::KeyTraits>::inlineLookup):
        (WTF::KeyTraits>::lookupForWriting):
        (WTF::KeyTraits>::fullLookupForWriting):
        (WTF::KeyTraits>::addUniqueForInitialization):
        (WTF::KeyTraits>::add):
        (WTF::KeyTraits>::addPassingHashCode):
        (WTF::KeyTraits>::removeAndInvalidateWithoutEntryConsistencyCheck):
        (WTF::KeyTraits>::removeAndInvalidate):
        (WTF::KeyTraits>::clear):
        (WTF::KeyTraits>::swap):
        (WTF::KeyTraits>::HashTable):
        (WTF::HashTable::invalidateIterators): Deleted.
        (WTF::KeyTraits>::invalidateIterators): Deleted.
        * wtf/RobinHoodHashMap.h: Added.
        * wtf/RobinHoodHashSet.h: Added.
        * wtf/RobinHoodHashTable.h: Added.
        (WTF::RobinHoodHashTable::~RobinHoodHashTable):
        (WTF::RobinHoodHashTable::begin):
        (WTF::RobinHoodHashTable::end):
        (WTF::RobinHoodHashTable::begin const):
        (WTF::RobinHoodHashTable::end const):
        (WTF::RobinHoodHashTable::random):
        (WTF::RobinHoodHashTable::random const):
        (WTF::RobinHoodHashTable::size const):
        (WTF::RobinHoodHashTable::capacity const):
        (WTF::RobinHoodHashTable::isEmpty const):
        (WTF::RobinHoodHashTable::reserveInitialCapacity):
        (WTF::RobinHoodHashTable::add):
        (WTF::RobinHoodHashTable::find):
        (WTF::RobinHoodHashTable::find const):
        (WTF::RobinHoodHashTable::contains const):
        (WTF::RobinHoodHashTable::isEmptyBucket):
        (WTF::RobinHoodHashTable::isEmptyOrDeletedBucket):
        (WTF::RobinHoodHashTable::lookup):
        (WTF::RobinHoodHashTable::checkTableConsistency):
        (WTF::RobinHoodHashTable::internalCheckTableConsistency const):
        (WTF::RobinHoodHashTable::internalCheckTableConsistencyExceptSize const):
        (WTF::RobinHoodHashTable::internalCheckTableConsistencyExceptSize):
        (WTF::RobinHoodHashTable::internalCheckTableConsistency):
        (WTF::RobinHoodHashTable::shouldExpand):
        (WTF::RobinHoodHashTable::computeTableHash):
        (WTF::RobinHoodHashTable::shouldExpand const):
        (WTF::RobinHoodHashTable::shouldShrink const):
        (WTF::RobinHoodHashTable::shrink):
        (WTF::RobinHoodHashTable::deleteBucket):
        (WTF::RobinHoodHashTable::desiredIndex):
        (WTF::RobinHoodHashTable::probeDistance):
        (WTF::RobinHoodHashTable::makeIterator):
        (WTF::RobinHoodHashTable::makeConstIterator const):
        (WTF::RobinHoodHashTable::makeKnownGoodIterator):
        (WTF::RobinHoodHashTable::makeKnownGoodConstIterator const):
        (WTF::RobinHoodHashTable::checkTableConsistencyExceptSize):
        (WTF::RobinHoodHashTable::tableSize const):
        (WTF::RobinHoodHashTable::tableSizeMask const):
        (WTF::RobinHoodHashTable::keyCount const):
        (WTF::RobinHoodHashTable::tableHash const):
        (WTF::SizePolicy>::checkKey):
        (WTF::SizePolicy>::lookup):
        (WTF::SizePolicy>::inlineLookup):
        (WTF::SizePolicy>::initializeBucket):
        (WTF::SizePolicy>::add):
        (WTF::SizePolicy>::maintainProbeDistanceForAdd):
        (WTF::SizePolicy>::addPassingHashCode):
        (WTF::SizePolicy>::reinsert):
        (WTF::SizePolicy>::find):
        (WTF::SizePolicy>::find const):
        (WTF::SizePolicy>::contains const):
        (WTF::SizePolicy>::removeAndInvalidateWithoutEntryConsistencyCheck):
        (WTF::SizePolicy>::removeAndInvalidate):
        (WTF::SizePolicy>::remove):
        (WTF::SizePolicy>::removeWithoutEntryConsistencyCheck):
        (WTF::SizePolicy>::allocateTable):
        (WTF::SizePolicy>::deallocateTable):
        (WTF::SizePolicy>::expand):
        (WTF::SizePolicy>::computeBestTableSize):
        (WTF::SizePolicy>::shrinkToBestSize):
        (WTF::SizePolicy>::rehash):
        (WTF::SizePolicy>::clear):
        (WTF::SizePolicy>::RobinHoodHashTable):
        (WTF::SizePolicy>::swap):
        (WTF::=):
        (WTF::SizePolicy>::checkTableConsistency const):
        (WTF::SizePolicy>::checkTableConsistencyExceptSize const):
        * wtf/text/AtomStringHash.h:
        * wtf/text/AtomStringImpl.cpp:
        * wtf/text/AtomStringTable.cpp:
        (WTF::AtomStringTable::~AtomStringTable):
        * wtf/text/AtomStringTable.h:
        (WTF::AtomStringTable::table):
        * wtf/text/StringHash.h:

2021-04-01  Kate Cheney  <katherine_cheney@apple.com>

        Clear network website data when a user clears history/website data
        https://bugs.webkit.org/show_bug.cgi?id=224030
        <rdar://problem/75288338>

        Reviewed by David Kilzer.

        * wtf/cocoa/SoftLinking.h:
        Add a new soft link macro to link umbrella private frameworks. We need
        this to support internal additions we need to clear network domain data.

2021-04-01  Chris Dumez  <cdumez@apple.com>

        REGRESSION(r275267): [GTK][WPE] 12 new crashes on service-workers layout tests
        https://bugs.webkit.org/show_bug.cgi?id=224059

        Reviewed by Carlos Alberto Lopez Perez.

        Have the glib implementation of FileSystem::writeToFile() return early when the size to
        write is 0, instead of calling g_output_stream_write_all(). It appears that passing a
        NULL buffer to g_output_stream_write_all() crashes, even if size is 0.

        * wtf/glib/FileSystemGlib.cpp:
        (WTF::FileSystemImpl::writeToFile):

2021-03-31  Jiewen Tan  <jiewen_tan@apple.com>

        Allow ASCWebKitSPISupport to be used on macOS
        https://bugs.webkit.org/show_bug.cgi?id=224036
        <rdar://76028645>

        Reviewed by Brent Fulgham.

        * wtf/PlatformHave.h:

2021-03-31  Sam Weinig  <weinig@apple.com>

        Ease experimentation by enabling <model> if SEPARATED_MODEL is being used
        https://bugs.webkit.org/show_bug.cgi?id=224011

        Reviewed by Tim Horton.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:
        There is little point to experimenting with SEPARATED_MODEL if <model> is disabled.

2021-03-31  Antoine Quint  <graouts@webkit.org>

        Remove CA_WHERE_ADDITIVE_TRANSFORMS_ARE_REVERSED
        https://bugs.webkit.org/show_bug.cgi?id=224000

        Reviewed by Simon Fraser.

        Since trunk is no longer maintained on macOS versions earlier than 10.15,
        we can remove this compile-time flag.

        * wtf/PlatformHave.h:

2021-03-30  Chris Dumez  <cdumez@apple.com>

        Service Worker scripts use too much memory in the network process
        https://bugs.webkit.org/show_bug.cgi?id=223808
        <rdar://75637093>

        Reviewed by Geoff Garen.

        * wtf/FileSystem.cpp:
        (WTF::FileSystemImpl::deleteNonEmptyDirectory):
        Add an implementation of FileSystem::deleteNonEmptyDirectory() on all supported platforms.
        We previously only had implemetations for Cocoa and Windows.

        (WTF::FileSystemImpl::mapToFile):
        Moved most of the mapToFile() logic from NetworkCacheData::mapToFile() to FileSystem, so that
        it can be reused by the new SWScriptStorage class. It creates the destination file, mmap's it,
        writes the provided data to it and then returns the mmap'd file.

        (WTF::FileSystemImpl::readOrMakeSalt):
        Move readOrMakeSalt() from NetworkCacheData to FileSystem so that it can be reused by the new
        SWScriptStorage.
        
        * wtf/FileSystem.h:

2021-03-30  Sam Weinig  <weinig@apple.com>

        JSGlobalObject's m_customGetterFunctionMap and m_customSetterFunctionMap should be sets, not maps, and should use both the identifier and function pointer as the key
        https://bugs.webkit.org/show_bug.cgi?id=223613

        Reviewed by Saam Barati.

        Adds a heterogenous HashSet::ensure, which allows lazy construction of the value to
        insert into the HashSet only if the heterogenous key (e.g. a key + HashTranslator
        that are not the same as the HashSet's ValueType) does not match any item in the
        set. For example given a set of ExpensiveToConstruct, but uniquely identifiable
        by CheapToConstruct:
        
            HashSet<ExpensiveToConstruct> hashSet;
            ...
            struct Translator {
                static unsigned hash(const CheapToConstruct& key)
                {
                    return key.hash();
                }
                static bool equal(const ExpensiveToConstruct& a, const CheapToConstruct& b)
                {
                    return a == b;
                }
            };
            
            hashSet.ensure<Translator>(CheapToConstruct { ... }, [] {
                return ExpensiveToConstruct { ... };
            });

        This will be used by the custom getter/setter sets to avoid constructing the GC objects
        unless they are really needed.

        Also took the opertunity to replace some typedefs with usings, and fixed some comments.

        * wtf/HashSet.h:
        (WTF::Traits>::ensure):

2021-03-30  Mark Lam  <mark.lam@apple.com>

        Add disableForwardingVPrintfStdErrToOSLog() and use it in the jsc shell.
        https://bugs.webkit.org/show_bug.cgi?id=223963

        Reviewed by Saam Barati.

        * wtf/Assertions.cpp:
        (WTF::disableForwardingVPrintfStdErrToOSLog):
        * wtf/Assertions.h:
        * wtf/WTFConfig.h:

2021-03-29  Alex Christensen  <achristensen@webkit.org>

        Use terminate_with_reason instead of xpc_connection_kill
        https://bugs.webkit.org/show_bug.cgi?id=223618

        Reviewed by Darin Adler.

        * wtf/spi/darwin/XPCSPI.h:

2021-03-28  Cameron McCormack  <heycam@apple.com>

        Enable AspectRatioOfImgFromWidthAndHeightEnabled for WebKitLegacy.
        https://bugs.webkit.org/show_bug.cgi?id=223815

        Reviewed by Sam Weinig.

        There's no reason this is enabled for WebKit and not WebKitLegacy.
        And set WebCore = true since this feature could conceivably be
        used in SVG images.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:

2021-03-28  Sam Weinig  <weinig@apple.com>

        Remove ENABLE_INDEXED_DATABASE & ENABLE_INDEXED_DATABASE_IN_WORKERS, it seems like it is on for all ports
        https://bugs.webkit.org/show_bug.cgi?id=223810

        Reviewed by Simon Fraser.

        * wtf/PlatformEnable.h:
        * wtf/PlatformEnableCocoa.h:
        Remove ENABLE_INDEXED_DATABASE and ENABLE_INDEXED_DATABASE_IN_WORKERS.

2021-03-27  Chris Dumez  <cdumez@apple.com>

        wtf/Vector.h:1276:88: runtime error: reference binding to null pointer of type 'const WebCore::Style::RuleFeature'
        https://bugs.webkit.org/show_bug.cgi?id=223828

        Reviewed by David Kilzer.

        Fix issue found by UBSan in Vector::append(const U*, size_t):
        wtf/Vector.h:1276:88: runtime error: reference binding to null pointer of type 'const WebCore::Style::RuleFeature'
        wtf/Vector.h:1276:88: runtime error: reference binding to null pointer of type 'const WebCore::LayoutRect'
        wtf/Vector.h:1276:88: runtime error: reference binding to null pointer of type 'const WTF::RefPtr<WebCore::CSSStyleSheet, WTF::RawPtrTraits<WebCore::CSSStyleSheet>, WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet> >'

        * wtf/Vector.h:
        (WTF::Malloc>::append):
        Return early if dataSize is 0. For some call sites, the pointer may be null and dataSize is 0. In such cases,
        we should just return early instead of proceeding and using the null pointer. I believe this can happen if
        you call Vector::appendVector() with an empty Vector for example.

2021-03-26  Chris Dumez  <cdumez@apple.com>

        REGRESSION (r275038?): Perf test IndexedDB/stress/large-binary-keys.html failing with logging about memory pressure events
        https://bugs.webkit.org/show_bug.cgi?id=223826
        <rdar://problem/75906134>

        Reviewed by Darin Adler.

        Use RELEASE_LOG() instead of WTFLogAlways() to log memory pressure events, so that they don't
        show on stdout in the performance tests and make them fail.

        * wtf/cocoa/MemoryPressureHandlerCocoa.mm:
        (WTF::MemoryPressureHandler::install):

2021-03-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        Use PUICQuickboardController for text input when HAVE(QUICKBOARD_CONTROLLER) is defined
        https://bugs.webkit.org/show_bug.cgi?id=223809
        <rdar://problem/56730407>

        Reviewed by Tim Horton.

        Remove the `QuickboardControllerForTextInputEnabled` WebKit preference, now that the feature is enabled by
        default behind a build-time flag.

        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-03-26  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Use new Apple ICU APIs to avoid C++ ICU API usage
        https://bugs.webkit.org/show_bug.cgi?id=223783
        <rdar://problem/75060240>

        Reviewed by Mark Lam.

        * wtf/DateMath.h:
        (WTF::LocalTimeOffset::LocalTimeOffset):

2021-03-26  Per Arne  <pvollan@apple.com>

        Enforce notifyd message filtering
        https://bugs.webkit.org/show_bug.cgi?id=223601
        <rdar://75098580>

        Reviewed by Brent Fulgham.

        Add ENABLE define for Notify filtering.

        * wtf/PlatformEnableCocoa.h:

2021-03-26  Dean Jackson  <dino@apple.com>

        Enable Metal ANGLE backend for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=220076
        <rdar://problem/72565020>

        Reviewed by Sam Weinig.

        Turn the Metal backend for ANGLE on, moving the feature
        from Internal to Experimental.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:
        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-03-26  Jessie Berlin  <jberlin@webkit.org>

        Update the BEFORE/SINCE, SYSTEM_VERSION_PREFIX, and MACOSX_DEPLOYMENT_TARGET flags
        https://bugs.webkit.org/show_bug.cgi?id=223779

        Reviewed by Tim Horton.

        * Configurations/DebugRelease.xcconfig:

2021-03-25  Megan Gardner  <megan_gardner@apple.com>

        Have App Highlights be a Configuration Setting instead of an internal Preference setting.
        https://bugs.webkit.org/show_bug.cgi?id=223720
        rdar://75196085

        Reviewed by Wenson Hsieh.

        * Scripts/Preferences/WebPreferences.yaml:
        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-03-25  Jessie Berlin  <jberlin@webkit.org>

        Remove 10.13 DEPLOYMENT_TARGETs and SYSTEM_VERSION_PREFIXs
        https://bugs.webkit.org/show_bug.cgi?id=223765

        Reviewed by Tim Horton.

        * Configurations/Base.xcconfig:
        * Configurations/DebugRelease.xcconfig:

2021-03-25  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r275057.
        https://bugs.webkit.org/show_bug.cgi?id=223768

        Caused build failure

        Reverted changeset:

        "Enforce notifyd message filtering"
        https://bugs.webkit.org/show_bug.cgi?id=223601
        https://trac.webkit.org/changeset/275057

2021-03-25  Kate Cheney  <katherine_cheney@apple.com>

        Some calls in AuthenticatorPresenterCoordinator::selectAssertionResponse are not yet available for mac
        https://bugs.webkit.org/show_bug.cgi?id=223752
        <rdar://problem/75808515>

        Reviewed by Jiewen Tan.

        * wtf/PlatformHave.h:

2021-03-25  Per Arne  <pvollan@apple.com>

        Enforce notifyd message filtering
        https://bugs.webkit.org/show_bug.cgi?id=223601
        <rdar://75098580>

        Reviewed by Brent Fulgham.

        Add ENABLE define for Notify filtering.

        * wtf/PlatformEnableCocoa.h:

2021-03-25  Don Olmstead  <don.olmstead@sony.com>

        Embiggen maximum HashTable size when not using ANGLE
        https://bugs.webkit.org/show_bug.cgi?id=223757

        Reviewed by Alex Christensen.

        This is a partial revert of r274603 which cut the maximum size HashTable from 400 to 250.
        When not using ANGLE directly for an OpenGL ES implementation there's some code hashing its
        sh::ShaderVariable from the shader compiler ANGLE ships with. This type is too big and
        triggers the static_assert.

        The eventual goal is for ANGLE to be the OpenGL ES implementation for WebKit when enabling
        WebGL. On PlayStation we already have a system OpenGL ES and any use of WebGL is in legacy
        applications. The WebGL compliance features in ANGLE aren't needed in this case so ideally
        we wouldn't even compile out ANGLE.

        This patch punts on fixing the actual problem and just resolves this build issue.

        * wtf/HashTable.h:
        (WTF::KeyTraits>::inlineLookup):

2021-03-25  Chris Dumez  <cdumez@apple.com>

        Do not do process pre-warming when the system is under memory pressure
        https://bugs.webkit.org/show_bug.cgi?id=223717
        <rdar://problem/75810423>

        Reviewed by Antti Koivisto.

        * wtf/cocoa/MemoryPressureHandlerCocoa.mm:
        (WTF::MemoryPressureHandler::install):
        - Listen to the same memory pressure notifications on macOS and iOS. Previously, macOS would not respond to
          non-critical memory pressure notifications for example. Also, since macOS would not listen for the notification
          that happens when the memory usage goes back to normal, MemoruPressureHandler::isUnderMemoryPressure() would
          start returning true after a critical memory pressure notification and it would never go back to false.

2021-03-25  Alberto Garcia  <berto@igalia.com>

        REGRESSION(r271560): [Linux] release assert in Thread::initializePlatformThreading
        https://bugs.webkit.org/show_bug.cgi?id=223069

        Reviewed by Carlos Garcia Campos.

        Replace an existing signal handler instead of aborting.

        * wtf/posix/ThreadingPOSIX.cpp:
        (WTF::Thread::initializePlatformThreading):

2021-03-24  Mark Lam  <mark.lam@apple.com>

        WTF::setPermissionsOfConfigPage() should allow its VM_FLAGS_PERMANENT workaround unconditionally.
        https://bugs.webkit.org/show_bug.cgi?id=223725
        rdar://75813316

        Reviewed by Saam Barati.

        If the OS does not support the flag, then we should not require it.

        * wtf/WTFConfig.cpp:
        (WTF::setPermissionsOfConfigPage):

2021-03-24  Yusuke Suzuki  <ysuzuki@apple.com>

        Use StaticStringImpl instead of StringImpl::createStaticStringImpl if it is not dynamic string content
        https://bugs.webkit.org/show_bug.cgi?id=223714

        Reviewed by Saam Barati.

        We should just use StaticStringImpl instead of StringImpl::createStaticStringImpl if the string content is
        not dynamically allocated one. Keep in mind that this URL code is strongly assuming that internal StringImpl
        is static so that this string (and URL) can be used in multiple threads. And StaticStringImpl meets this requirement.

        * wtf/URL.cpp:
        (WTF::aboutBlankURL):
        (WTF::aboutSrcDocURL):

2021-03-24  Yusuke Suzuki  <ysuzuki@apple.com>

        All string resources from UserAgentStyleSheets / UserAgentScripts should be used as non-copying StringImpl
        https://bugs.webkit.org/show_bug.cgi?id=223685

        Reviewed by Saam Barati.

        Add StringImpl::createWithoutCopying for `const char*`.

        * wtf/text/StringImpl.h:
        (WTF::StringImpl::createWithoutCopying):

2021-03-24  Eric Carlson  <eric.carlson@apple.com>

        [Cocoa] Add Experimental MediaSession coordinator
        https://bugs.webkit.org/show_bug.cgi?id=222158
        <rdar://problem/74508862>

        Reviewed by Jer Noble.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:
        * wtf/PlatformEnableCocoa.h:

2021-03-24  Chris Dumez  <cdumez@apple.com>

        Address undefined behavior found by UBSan in StringToIntegerConversion.h
        https://bugs.webkit.org/show_bug.cgi?id=223694

        Reviewed by Geoffrey Garen.

        Update StringToIntegerConversion to deal with overflows in a well-defined manner,
        by relying on CheckedArithmetics. This addresses undefined behavior reborted by
        UBSan:
        - wtf/text/StringToIntegerConversion.h:94:30: runtime error: signed integer overflow: 2147483640 + 8 cannot be represented in type 'int'
        - wtf/text/StringToIntegerConversion.h:104:17: runtime error: negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself

        * wtf/text/StringToIntegerConversion.h:
        (WTF::toIntegralType):

2021-03-24  Truitt Savell  <tsavell@apple.com>

        Unreviewed, reverting r274927.

        Broke many tests in WebGL

        Reverted changeset:

        "Enable Metal ANGLE backend for WebGL"
        https://bugs.webkit.org/show_bug.cgi?id=220076
        https://commits.webkit.org/r274927

2021-03-24  Chris Dumez  <cdumez@apple.com>

        Address undefined behavior found by UBSan in DateMath.h
        https://bugs.webkit.org/show_bug.cgi?id=223663

        Reviewed by Darin Adler.

        Address undefined behavior found by UBSan in DateMath.h
        Release/usr/local/include/wtf/DateMath.h:247:39: runtime error: nan is outside the range of representable values of type 'int'
        Release/usr/local/include/wtf/DateMath.h:221:29: runtime error: nan is outside the range of representable values of type 'int'
        Release/usr/local/include/wtf/DateMath.h:165:38: runtime error: signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'

        * wtf/DateMath.h:
        (WTF::daysFrom1970ToYear):
        Cast year to a double *before* substracting 1 instead of *after*. This works around the fact that INT_MIN-1 would not
        fit in an int and would be undefined behavior.

        (WTF::dayInYear):
        (WTF::msToYear):
        Deal with the double potentially being NaN before casting to an int, since
        casting NaN to an int type has undefined behavior.

2021-03-23  Dean Jackson  <yolo@apple.com>

        Enable Metal ANGLE backend for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=220076
        <rdar://problem/72565020>

        Reviewed by Sam Weinig.

        Turn the Metal backend for ANGLE on, moving the feature
        from Internal to Experimental.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:
        * Scripts/Preferences/WebPreferencesInternal.yaml:

2021-03-23  Chris Dumez  <cdumez@apple.com>

        DerivedSources/WebKitTestRunner/JSAccessibilityUIElement.cpp:802:72: runtime error: -1 is outside the range of representable values of type 'unsigned int'
        https://bugs.webkit.org/show_bug.cgi?id=223650

        Reviewed by Darin Adler.

        Update the clampTo() template specialization that converts floating types into integer types so that
        it deals with NaN inputs in a well-defined manner. Previously, it would simply cast the NaN to the
        integer type, which was undefined behavior. We now return the minimum range boundary for the output
        when the input is NaN.

        * wtf/MathExtras.h:
        (clampTo):

2021-03-23  Saam Barati  <sbarati@apple.com>

        Don't require VM_FLAGS_PERMANENT on the simulator builds
        https://bugs.webkit.org/show_bug.cgi?id=223649
        <rdar://problem/75747788>

        Reviewed by Alexey Proskuryakov.

        Since VM_FLAGS_PERMANENT must be supported by the kernel, let's make
        it so that the vm_map that passes this flag in can fail when running
        on the simulator. This is to support the use case of running a newer
        simulator on an older OS. When the call to vm_map fails when running
        on the simulator, we try again without the VM_FLAGS_PERMANENT flag.

        * wtf/WTFConfig.cpp:
        (WTF::setPermissionsOfConfigPage):

2021-03-23  Alex Christensen  <achristensen@webkit.org>

        Remove unused WTF::String::percentage
        https://bugs.webkit.org/show_bug.cgi?id=223651

        Reviewed by Chris Dumez.

        * wtf/text/AtomString.h:
        * wtf/text/WTFString.cpp:
        (WTF::String::percentage const): Deleted.
        * wtf/text/WTFString.h:

2021-03-23  Chris Dumez  <cdumez@apple.com>

        wtf/text/IntegerToStringConversion.h:54:104: runtime error: negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself
        https://bugs.webkit.org/show_bug.cgi?id=223614

        Reviewed by Darin Adler.

        numberToStringSigned() was calling -number when number is negative. This could trigger undefined behavior
        since -number may not be representable in the input type. For example, if the type was int and number was
        INT_MIN, -INT_MIN would overflow and the result would be undefined. To address the issue, we now cast
        number to the destination *unsigned* type *before* negating it.

        * wtf/text/IntegerToStringConversion.h:
        (WTF::numberToStringSigned):

2021-03-23  Alex Christensen  <achristensen@webkit.org>

        Optimize StringView::CodePoints::Iterator
        https://bugs.webkit.org/show_bug.cgi?id=162315

        Reviewed by Darin Adler.

        This stores range pointers in the iterator instead of a pointer to a pointer.

        * wtf/text/StringView.h:
        (WTF::StringView::CodePoints::Iterator::Iterator):
        (WTF::StringView::CodePoints::Iterator::operator++):
        (WTF::StringView::CodePoints::Iterator::operator* const):
        (WTF::StringView::CodePoints::Iterator::operator== const):

2021-03-23  Chris Dumez  <cdumez@apple.com>

        Add assertions to guard against heap allocations on the audio thread
        https://bugs.webkit.org/show_bug.cgi?id=223226

        Reviewed by Darin Adler.

        Add ForbidMallocUseForCurrentThreadScope to FastMalloc.h to enable assertions guarding against
        doing heap allocations on the current thread (during the lifetime of the Scope object).

        Also add a DisableMallocRestrictionsForCurrentThreadScope to temporarily disable those checks
        to allow for some very specific assertions (either because they are required, or simply because
        they are not fixed yet).

        * wtf/FastMalloc.cpp:
        (WTF::ForbidMallocUseForCurrentThreadScope::ForbidMallocUseForCurrentThreadScope):
        (WTF::ForbidMallocUseForCurrentThreadScope::~ForbidMallocUseForCurrentThreadScope):
        (WTF::DisableMallocRestrictionsForCurrentThreadScope::DisableMallocRestrictionsForCurrentThreadScope):
        (WTF::DisableMallocRestrictionsForCurrentThreadScope::~DisableMallocRestrictionsForCurrentThreadScope):
        (WTF::tryFastMalloc):
        (WTF::fastMalloc):
        (WTF::tryFastCalloc):
        (WTF::fastCalloc):
        (WTF::fastRealloc):
        (WTF::tryFastRealloc):
        (WTF::fastAlignedMalloc):
        (WTF::tryFastAlignedMalloc):
        * wtf/FastMalloc.h:
        (WTF::ForbidMallocUseForCurrentThreadScope::~ForbidMallocUseForCurrentThreadScope):
        (WTF::DisableMallocRestrictionsForCurrentThreadScope::~DisableMallocRestrictionsForCurrentThreadScope):

2021-03-22  Devin Rousso  <drousso@apple.com>

        Remove unused JS and CSS files of media controls
        https://bugs.webkit.org/show_bug.cgi?id=214955
        <rdar://problem/66604040>

        Reviewed by Eric Carlson.

        Cocoa platforms are already using modern media controls so there's no reason to keep the old
        media controls resources/logic around any longer. It just wastes space.

        The non-iOS Apple controls must be kept though as they are still used on Windows.

        * wtf/PlatformEnable.h:
        * wtf/PlatformEnableCocoa.h:
        * Scripts/Preferences/WebPreferences.yaml:
        Replace `ModernMediaControlsEnabled` setting with `ENABLE_MODERN_MEDIA_CONTROLS` build flag.

2021-03-22  Rob Buis  <rbuis@igalia.com>

        [css-contain] Parse CSS contain property
        https://bugs.webkit.org/show_bug.cgi?id=223252

        Reviewed by Darin Adler.

        Add experimental feature flag.

        * Scripts/Preferences/WebPreferencesExperimental.yaml:

2021-03-22  Ross Kirsling  <ross.kirsling@sony.com>

        Unreviewed, fix Mac and non-unified JSCOnly builds
        https://bugs.webkit.org/show_bug.cgi?id=223546

        * wtf/PlatformJSCOnly.cmake:
        Add missing file for JSCOnly build on Mac.

2021-03-19  Darin Adler  <darin@apple.com>

        [Cocoa] Make it possible to release a WKWebView on a non-main thread without a crash due to WKScriptMessage race
        https://bugs.webkit.org/show_bug.cgi?id=222336

        Reviewed by Chris Dumez.

        * wtf/spi/cocoa/objcSPI.h: Removed unnecessary #if so functions are correctly compiled for
        non-Objective-C source files. Added include of <objc/objc.h> so that "id" is defined.

2021-03-19  Sam Weinig  <weinig@apple.com>

        Add PropertyName parameter to custom setters to allow shared implementations to do late name lookup
        https://bugs.webkit.org/show_bug.cgi?id=223413

        Reviewed by Alexey Shvayka.

        * wtf/PlatformCallingConventions.h:
        Update JSC_DECLARE_CUSTOM_SETTER to account for the new PropertyName parameter.

== Rolled over to ChangeLog-2021-03-18 ==
