# test comment

headers: "HeaderWithoutCondition"

#if ENABLE(TEST_FEATURE)
headers: "StructHeader.h" "FirstMemberType.h" "SecondMemberType.h"
[AdditionalEncoder=OtherEncoder, CustomHeader=True] struct Namespace::Subnamespace::StructName {
    FirstMemberType firstMemberName
    #if ENABLE(SECOND_MEMBER)
    SecondMemberType secondMemberName;
    #endif
    [Nullable] RetainPtr<CFTypeRef> nullableTestMember;
}
#endif

[Nested] class Namespace::OtherClass {
    [ReturnEarlyIfTrue] bool isNull
    int a
    bool b
}

[Return=Ref] class Namespace::ReturnRefClass {
    double functionCall().member1
    double functionCall().member2
    std::unique_ptr<int> uniqueMember
}

[LegacyPopulateFrom=EmptyConstructor] struct Namespace::EmptyConstructorStruct {
    int m_int;
    double m_double;
}

[LegacyPopulateFrom=EmptyConstructor] class Namespace::EmptyConstructorNullable {
    [ReturnEarlyIfTrue] bool m_isNull;
#if CONDITION_AROUND_M_TYPE_AND_M_VALUE
    MemberType m_type;
    OtherMemberType m_value;
#endif
}

class WithoutNamespace {
    int a;
}

[AdditionalEncoder=OtherEncoder] class WithoutNamespaceWithAttributes {
    int a;
}

class WebCore::InheritsFrom : WithoutNamespace {
    int b;
}

#if ENABLE(BOOL_ENUM)
enum class EnumNamespace::BoolEnumType : bool
#endif

#if ENABLE(UINT16_ENUM)
enum class EnumNamespace::EnumType : uint16_t {
    FirstValue,
#if ENABLE(ENUM_VALUE_CONDITION)
    SecondValue
#endif
}
#endif

[OptionSet, Nested] enum class EnumNamespace2::OptionSetEnumType : uint8_t {
    OptionSetFirstValue,
#if ENABLE(OPTION_SET_SECOND_VALUE)
    OptionSetSecondValue,
#endif
    OptionSetThirdValue
}

class WTF::Seconds {
    double value()
}
