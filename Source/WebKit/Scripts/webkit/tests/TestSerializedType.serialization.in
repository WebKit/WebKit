# test comment

headers: "HeaderWithoutCondition"

#if ENABLE(TEST_FEATURE)
headers: "StructHeader.h" "FirstMemberType.h" "SecondMemberType.h"
[AdditionalEncoder=OtherEncoder, CustomHeader] struct Namespace::Subnamespace::StructName {
    FirstMemberType firstMemberName
    #if ENABLE(SECOND_MEMBER)
    SecondMemberType secondMemberName;
    #endif
    RetainPtr<CFTypeRef> nullableTestMember;
}
#endif

[Nested] class Namespace::OtherClass {
    int a
    [BitField] bool b
    [SecureCodingAllowed=[NSArray.class, PAL::getDDScannerResultClass()]] RetainPtr<NSArray> dataDetectorResults;
}

[RefCounted] class Namespace::ReturnRefClass {
    double functionCall().member1
    double functionCall().member2
    std::unique_ptr<int> uniqueMember
}

[LegacyPopulateFromEmptyConstructor] struct Namespace::EmptyConstructorStruct {
    int m_int;
    double m_double;
}

[LegacyPopulateFromEmptyConstructor] class Namespace::EmptyConstructorWithIf {
#if CONDITION_AROUND_M_TYPE_AND_M_VALUE
    MemberType m_type;
    OtherMemberType m_value;
#endif
}

class WithoutNamespace {
    int a;
}

[AdditionalEncoder=OtherEncoder] class WithoutNamespaceWithAttributes {
    int a;
}

class WebCore::InheritsFrom : WithoutNamespace {
    float b;
}

class WebCore::InheritanceGrandchild : WebCore::InheritsFrom {
    double c;
}

#if ENABLE(BOOL_ENUM)
enum class EnumNamespace::BoolEnumType : bool
#endif

enum class EnumWithoutNamespace : uint8_t {
    Value1,
    Value2,
    Value3
}

#if ENABLE(UINT16_ENUM)
enum class EnumNamespace::EnumType : uint16_t {
    FirstValue,
#if ENABLE(ENUM_VALUE_CONDITION)
    SecondValue
#endif
}
#endif

[OptionSet, Nested] enum class EnumNamespace2::OptionSetEnumType : uint8_t {
    OptionSetFirstValue,
#if ENABLE(OPTION_SET_SECOND_VALUE)
    OptionSetSecondValue,
#endif
    OptionSetThirdValue
}

class WTF::Seconds {
    double value()
}

[CreateUsing=fromDouble] class WTF::CreateUsingClass {
    double value
}

[Alias=class ScrollSnapOffsetsInfo<float,double>] alias WebCore::FloatBoxExtent {
    float top()
    float right()
    float bottom()
    float left()
};

struct SoftLinkedMember {
    [SecureCodingAllowed=[PAL::getDDActionContextClass()]] RetainPtr<DDActionContext> firstMember;
    [SecureCodingAllowed=[PAL::getDDActionContextClass()]] RetainPtr<DDActionContext> secondMember;
}

[RefCounted] class WebCore::TimingFunction subclasses {
    WebCore::LinearTimingFunction,
    WebCore::CubicBezierTimingFunction,
    WebCore::StepsTimingFunction,
    WebCore::SpringTimingFunction
}

[OptionSet] enum class OptionSetEnumFirstCondition : uint32_t {
#if ENABLE(OPTION_SET_FIRST_VALUE)
    OptionSetFirstValue,
#endif
    OptionSetSecondValue,
    OptionSetThirdValue,
}

[OptionSet] enum class OptionSetEnumLastCondition : uint32_t {
    OptionSetFirstValue,
    OptionSetSecondValue,
#if ENABLE(OPTION_SET_THIRD_VALUE)
    OptionSetThirdValue,
#endif
}

[OptionSet] enum class OptionSetEnumAllCondition : uint32_t {
#if ENABLE(OPTION_SET_FIRST_VALUE)
    OptionSetFirstValue,
#endif
#if ENABLE(OPTION_SET_SECOND_VALUE)
    OptionSetSecondValue,
#endif
#if ENABLE(OPTION_SET_THIRD_VALUE)
    OptionSetThirdValue,
#endif
}

using WebCore::SharedStringHash = uint32_t
using WebCore::UsingWithSemicolon = uint32_t;

#if ENABLE(TEST_FEATURE)
headers: "CommonHeader.h"
[CustomHeader] class Namespace::ConditionalCommonClass {
    int value;
}
#endif

headers: "CommonHeader.h"
[CustomHeader] class Namespace::CommonClass {
    int value;
}

headers: "CommonHeader.h"
[CustomHeader, RefCounted] class Namespace::AnotherCommonClass {
    int value;
    [NotSerialized] double notSerialized;
}

[RValue] class WebCore::MoveOnlyBaseClass subclasses {
    WebCore::MoveOnlyDerivedClass,
}

[RValue] class WebCore::MoveOnlyDerivedClass {
    int firstMember;
    int secondMember;
}

webkit_platform_headers: "PlatformClass.h"
[CustomHeader, WebKitPlatform] class WebKit::PlatformClass {
  int value;
};

[CustomEncoder] class WebKit::CustomEncoded {
  int value;
};

class WebKit::LayerProperties {
    [OptionalTupleBits] OptionSet<WebKit::LayerChange> changedProperties
    [NotSerialized] int nonSerializedMember
    [OptionalTupleBit=WebKit::LayerChange::NameChanged] String name;
#if ENABLE(FEATURE)
    [OptionalTupleBit=WebKit::LayerChange::TransformChanged] std::unique_ptr<WebCore::TransformationMatrix> featureEnabledMember;
#endif
    [OptionalTupleBit=WebKit::LayerChange::FeatureEnabledMember, BitField] bool bitFieldMember;
};
