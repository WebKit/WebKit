/* Copyright (C) 2020 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// This file is generated by generate-gpup-webgl. Do not edit.
#if ENABLE(GPU_PROCESS) && ENABLE(WEBGL)

messages -> RemoteGraphicsContextGL NotRefCounted Stream {
    void Reshape(int32_t width, int32_t height)
#if PLATFORM(COCOA)
    void PrepareForDisplay() -> (MachSendRight displayBuffer) Synchronous NotStreamEncodableReply
#endif
#if !PLATFORM(COCOA)
    void PrepareForDisplay() -> () Synchronous
#endif
    void EnsureExtensionEnabled(String extension)
    void NotifyMarkContextChanged()
    void SynthesizeGLError(uint32_t error)
    void GetError() -> (uint32_t returnValue) Synchronous
    void PaintRenderingResultsToCanvas(WebCore::RenderingResourceIdentifier imageBuffer) -> () Synchronous
    void PaintCompositedResultsToCanvas(WebCore::RenderingResourceIdentifier imageBuffer) -> () Synchronous
    void CopyTextureFromMedia(WebCore::MediaPlayerIdentifier identifier, uint32_t texture, uint32_t target, int32_t level, uint32_t internalFormat, uint32_t format, uint32_t type, bool premultiplyAlpha, bool flipY) -> (bool success) Synchronous
    void SimulateEventForTesting(WebCore::GraphicsContextGL::SimulatedEventForTesting event)

    void MoveErrorsToSyntheticErrorList() -> (bool returnValue) Synchronous
    void ActiveTexture(uint32_t texture)
    void AttachShader(uint32_t program, uint32_t shader)
    void BindAttribLocation(uint32_t arg0, uint32_t index, String name)
    void BindBuffer(uint32_t target, uint32_t arg1)
    void BindFramebuffer(uint32_t target, uint32_t arg1)
    void BindRenderbuffer(uint32_t target, uint32_t arg1)
    void BindTexture(uint32_t target, uint32_t arg1)
    void BlendColor(float red, float green, float blue, float alpha)
    void BlendEquation(uint32_t mode)
    void BlendEquationSeparate(uint32_t modeRGB, uint32_t modeAlpha)
    void BlendFunc(uint32_t sfactor, uint32_t dfactor)
    void BlendFuncSeparate(uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha)
    void CheckFramebufferStatus(uint32_t target) -> (uint32_t returnValue) Synchronous
    void Clear(uint32_t mask)
    void ClearColor(float red, float green, float blue, float alpha)
    void ClearDepth(float depth)
    void ClearStencil(int32_t s)
    void ColorMask(bool red, bool green, bool blue, bool alpha)
    void CompileShader(uint32_t arg0)
    void CopyTexImage2D(uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border)
    void CopyTexSubImage2D(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height)
    void CreateBuffer() -> (uint32_t returnValue) Synchronous
    void CreateFramebuffer() -> (uint32_t returnValue) Synchronous
    void CreateProgram() -> (uint32_t returnValue) Synchronous
    void CreateRenderbuffer() -> (uint32_t returnValue) Synchronous
    void CreateShader(uint32_t arg0) -> (uint32_t returnValue) Synchronous
    void CreateTexture() -> (uint32_t returnValue) Synchronous
    void CullFace(uint32_t mode)
    void DeleteBuffer(uint32_t arg0)
    void DeleteFramebuffer(uint32_t arg0)
    void DeleteProgram(uint32_t arg0)
    void DeleteRenderbuffer(uint32_t arg0)
    void DeleteShader(uint32_t arg0)
    void DeleteTexture(uint32_t arg0)
    void DepthFunc(uint32_t func)
    void DepthMask(bool flag)
    void DepthRange(float zNear, float zFar)
    void DetachShader(uint32_t arg0, uint32_t arg1)
    void Disable(uint32_t cap)
    void DisableVertexAttribArray(uint32_t index)
    void DrawArrays(uint32_t mode, int32_t first, int32_t count)
    void DrawElements(uint32_t mode, int32_t count, uint32_t type, uint64_t offset)
    void Enable(uint32_t cap)
    void EnableVertexAttribArray(uint32_t index)
    void Finish()
    void Flush()
    void FramebufferRenderbuffer(uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t arg3)
    void FramebufferTexture2D(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t arg3, int32_t level)
    void FrontFace(uint32_t mode)
    void GenerateMipmap(uint32_t target)
    void GetActiveAttrib(uint32_t program, uint32_t index) -> (bool returnValue, WebCore::GraphicsContextGL::ActiveInfo arg2) Synchronous
    void GetActiveUniform(uint32_t program, uint32_t index) -> (bool returnValue, WebCore::GraphicsContextGL::ActiveInfo arg2) Synchronous
    void GetAttribLocation(uint32_t arg0, String name) -> (int32_t returnValue) Synchronous
    void GetBufferParameteri(uint32_t target, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetString(uint32_t name) -> (String returnValue) Synchronous
    void GetFloatv(uint32_t pname, uint64_t valueSize) -> (IPC::ArrayReference<float> value) Synchronous
    void GetIntegerv(uint32_t pname, uint64_t valueSize) -> (IPC::ArrayReference<int32_t> value) Synchronous
    void GetInteger64(uint32_t pname) -> (int64_t returnValue) Synchronous
    void GetInteger64i(uint32_t pname, uint32_t index) -> (int64_t returnValue) Synchronous
    void GetProgrami(uint32_t program, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetBooleanv(uint32_t pname, uint64_t valueSize) -> (IPC::ArrayReference<bool> value) Synchronous
    void GetFramebufferAttachmentParameteri(uint32_t target, uint32_t attachment, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetProgramInfoLog(uint32_t arg0) -> (String returnValue) Synchronous
    void GetRenderbufferParameteri(uint32_t target, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetShaderi(uint32_t arg0, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetShaderInfoLog(uint32_t arg0) -> (String returnValue) Synchronous
    void GetShaderPrecisionFormat(uint32_t shaderType, uint32_t precisionType) -> (IPC::ArrayReference<int32_t, 2> range, GCGLint precision) Synchronous
    void GetShaderSource(uint32_t arg0) -> (String returnValue) Synchronous
    void GetTexParameterf(uint32_t target, uint32_t pname) -> (float returnValue) Synchronous
    void GetTexParameteri(uint32_t target, uint32_t pname) -> (int32_t returnValue) Synchronous
    void GetUniformfv(uint32_t program, int32_t location, uint64_t valueSize) -> (IPC::ArrayReference<float> value) Synchronous
    void GetUniformiv(uint32_t program, int32_t location, uint64_t valueSize) -> (IPC::ArrayReference<int32_t> value) Synchronous
    void GetUniformuiv(uint32_t program, int32_t location, uint64_t valueSize) -> (IPC::ArrayReference<uint32_t> value) Synchronous
    void GetUniformLocation(uint32_t arg0, String name) -> (int32_t returnValue) Synchronous
    void GetVertexAttribOffset(uint32_t index, uint32_t pname) -> (uint64_t returnValue) Synchronous
    void Hint(uint32_t target, uint32_t mode)
    void IsBuffer(uint32_t arg0) -> (bool returnValue) Synchronous
    void IsEnabled(uint32_t cap) -> (bool returnValue) Synchronous
    void IsFramebuffer(uint32_t arg0) -> (bool returnValue) Synchronous
    void IsProgram(uint32_t arg0) -> (bool returnValue) Synchronous
    void IsRenderbuffer(uint32_t arg0) -> (bool returnValue) Synchronous
    void IsShader(uint32_t arg0) -> (bool returnValue) Synchronous
    void IsTexture(uint32_t arg0) -> (bool returnValue) Synchronous
    void LineWidth(float arg0)
    void LinkProgram(uint32_t arg0)
    void PixelStorei(uint32_t pname, int32_t param)
    void PolygonOffset(float factor, float units)
    void RenderbufferStorage(uint32_t target, uint32_t internalformat, int32_t width, int32_t height)
    void SampleCoverage(float value, bool invert)
    void Scissor(int32_t x, int32_t y, int32_t width, int32_t height)
    void ShaderSource(uint32_t arg0, String arg1)
    void StencilFunc(uint32_t func, int32_t ref, uint32_t mask)
    void StencilFuncSeparate(uint32_t face, uint32_t func, int32_t ref, uint32_t mask)
    void StencilMask(uint32_t mask)
    void StencilMaskSeparate(uint32_t face, uint32_t mask)
    void StencilOp(uint32_t fail, uint32_t zfail, uint32_t zpass)
    void StencilOpSeparate(uint32_t face, uint32_t fail, uint32_t zfail, uint32_t zpass)
    void TexParameterf(uint32_t target, uint32_t pname, float param)
    void TexParameteri(uint32_t target, uint32_t pname, int32_t param)
    void Uniform1f(int32_t location, float x)
    void Uniform1fv(int32_t location, IPC::ArrayReference<float> v)
    void Uniform1i(int32_t location, int32_t x)
    void Uniform1iv(int32_t location, IPC::ArrayReference<int32_t> v)
    void Uniform2f(int32_t location, float x, float y)
    void Uniform2fv(int32_t location, IPC::ArrayReference<float> v)
    void Uniform2i(int32_t location, int32_t x, int32_t y)
    void Uniform2iv(int32_t location, IPC::ArrayReference<int32_t> v)
    void Uniform3f(int32_t location, float x, float y, float z)
    void Uniform3fv(int32_t location, IPC::ArrayReference<float> v)
    void Uniform3i(int32_t location, int32_t x, int32_t y, int32_t z)
    void Uniform3iv(int32_t location, IPC::ArrayReference<int32_t> v)
    void Uniform4f(int32_t location, float x, float y, float z, float w)
    void Uniform4fv(int32_t location, IPC::ArrayReference<float> v)
    void Uniform4i(int32_t location, int32_t x, int32_t y, int32_t z, int32_t w)
    void Uniform4iv(int32_t location, IPC::ArrayReference<int32_t> v)
    void UniformMatrix2fv(int32_t location, bool transpose, IPC::ArrayReference<float> value)
    void UniformMatrix3fv(int32_t location, bool transpose, IPC::ArrayReference<float> value)
    void UniformMatrix4fv(int32_t location, bool transpose, IPC::ArrayReference<float> value)
    void UseProgram(uint32_t arg0)
    void ValidateProgram(uint32_t arg0)
    void VertexAttrib1f(uint32_t index, float x)
    void VertexAttrib1fv(uint32_t index, IPC::ArrayReference<float, 1> values)
    void VertexAttrib2f(uint32_t index, float x, float y)
    void VertexAttrib2fv(uint32_t index, IPC::ArrayReference<float, 2> values)
    void VertexAttrib3f(uint32_t index, float x, float y, float z)
    void VertexAttrib3fv(uint32_t index, IPC::ArrayReference<float, 3> values)
    void VertexAttrib4f(uint32_t index, float x, float y, float z, float w)
    void VertexAttrib4fv(uint32_t index, IPC::ArrayReference<float, 4> values)
    void VertexAttribPointer(uint32_t index, int32_t size, uint32_t type, bool normalized, int32_t stride, uint64_t offset)
    void Viewport(int32_t x, int32_t y, int32_t width, int32_t height)
    void BufferData0(uint32_t target, uint64_t arg1, uint32_t usage)
    void BufferData1(uint32_t target, IPC::ArrayReference<uint8_t> data, uint32_t usage)
    void BufferSubData(uint32_t target, uint64_t offset, IPC::ArrayReference<uint8_t> data)
    void ReadnPixels0(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, uint64_t dataSize) -> (IPC::ArrayReference<uint8_t> data) Synchronous
    void ReadnPixels1(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, uint64_t offset)
    void TexImage2D0(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, IPC::ArrayReference<uint8_t> pixels)
    void TexImage2D1(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, uint64_t offset)
    void TexSubImage2D0(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, IPC::ArrayReference<uint8_t> pixels)
    void TexSubImage2D1(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, uint64_t offset)
    void CompressedTexImage2D0(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, IPC::ArrayReference<uint8_t> data)
    void CompressedTexImage2D1(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, uint64_t offset)
    void CompressedTexSubImage2D0(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, IPC::ArrayReference<uint8_t> data)
    void CompressedTexSubImage2D1(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, uint64_t offset)
    void DrawArraysInstanced(uint32_t mode, int32_t first, int32_t count, int32_t primcount)
    void DrawElementsInstanced(uint32_t mode, int32_t count, uint32_t type, uint64_t offset, int32_t primcount)
    void VertexAttribDivisor(uint32_t index, uint32_t divisor)
    void CreateVertexArray() -> (uint32_t returnValue) Synchronous
    void DeleteVertexArray(uint32_t arg0)
    void IsVertexArray(uint32_t arg0) -> (bool returnValue) Synchronous
    void BindVertexArray(uint32_t arg0)
    void CopyBufferSubData(uint32_t readTarget, uint32_t writeTarget, uint64_t readOffset, uint64_t writeOffset, uint64_t arg4)
    void GetBufferSubData(uint32_t target, uint64_t offset, uint64_t dataSize) -> (IPC::ArrayReference<uint8_t> data) Synchronous
    void BlitFramebuffer(int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter)
    void FramebufferTextureLayer(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer)
    void InvalidateFramebuffer(uint32_t target, IPC::ArrayReference<uint32_t> attachments)
    void InvalidateSubFramebuffer(uint32_t target, IPC::ArrayReference<uint32_t> attachments, int32_t x, int32_t y, int32_t width, int32_t height)
    void ReadBuffer(uint32_t src)
    void RenderbufferStorageMultisample(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height)
    void TexStorage2D(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height)
    void TexStorage3D(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth)
    void TexImage3D0(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, IPC::ArrayReference<uint8_t> pixels)
    void TexImage3D1(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, uint64_t offset)
    void TexSubImage3D0(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, IPC::ArrayReference<uint8_t> pixels)
    void TexSubImage3D1(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, uint64_t offset)
    void CopyTexSubImage3D(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height)
    void CompressedTexImage3D0(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, IPC::ArrayReference<uint8_t> data)
    void CompressedTexImage3D1(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, uint64_t offset)
    void CompressedTexSubImage3D0(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, IPC::ArrayReference<uint8_t> data)
    void CompressedTexSubImage3D1(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, uint64_t offset)
    void GetFragDataLocation(uint32_t program, String name) -> (int32_t returnValue) Synchronous
    void Uniform1ui(int32_t location, uint32_t v0)
    void Uniform2ui(int32_t location, uint32_t v0, uint32_t v1)
    void Uniform3ui(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2)
    void Uniform4ui(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)
    void Uniform1uiv(int32_t location, IPC::ArrayReference<uint32_t> data)
    void Uniform2uiv(int32_t location, IPC::ArrayReference<uint32_t> data)
    void Uniform3uiv(int32_t location, IPC::ArrayReference<uint32_t> data)
    void Uniform4uiv(int32_t location, IPC::ArrayReference<uint32_t> data)
    void UniformMatrix2x3fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void UniformMatrix3x2fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void UniformMatrix2x4fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void UniformMatrix4x2fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void UniformMatrix3x4fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void UniformMatrix4x3fv(int32_t location, bool transpose, IPC::ArrayReference<float> data)
    void VertexAttribI4i(uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w)
    void VertexAttribI4iv(uint32_t index, IPC::ArrayReference<int32_t, 4> values)
    void VertexAttribI4ui(uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w)
    void VertexAttribI4uiv(uint32_t index, IPC::ArrayReference<uint32_t, 4> values)
    void VertexAttribIPointer(uint32_t index, int32_t size, uint32_t type, int32_t stride, uint64_t offset)
    void DrawRangeElements(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, uint64_t offset)
    void DrawBuffers(IPC::ArrayReference<uint32_t> bufs)
    void ClearBufferiv(uint32_t buffer, int32_t drawbuffer, IPC::ArrayReference<int32_t> values)
    void ClearBufferuiv(uint32_t buffer, int32_t drawbuffer, IPC::ArrayReference<uint32_t> values)
    void ClearBufferfv(uint32_t buffer, int32_t drawbuffer, IPC::ArrayReference<float> values)
    void ClearBufferfi(uint32_t buffer, int32_t drawbuffer, float depth, int32_t stencil)
    void CreateQuery() -> (uint32_t returnValue) Synchronous
    void DeleteQuery(uint32_t query)
    void IsQuery(uint32_t query) -> (bool returnValue) Synchronous
    void BeginQuery(uint32_t target, uint32_t query)
    void EndQuery(uint32_t target)
    void GetQuery(uint32_t target, uint32_t pname) -> (uint32_t returnValue) Synchronous
    void GetQueryObjectui(uint32_t query, uint32_t pname) -> (uint32_t returnValue) Synchronous
    void CreateSampler() -> (uint32_t returnValue) Synchronous
    void DeleteSampler(uint32_t sampler)
    void IsSampler(uint32_t sampler) -> (bool returnValue) Synchronous
    void BindSampler(uint32_t unit, uint32_t sampler)
    void SamplerParameteri(uint32_t sampler, uint32_t pname, int32_t param)
    void SamplerParameterf(uint32_t sampler, uint32_t pname, float param)
    void GetSamplerParameterf(uint32_t sampler, uint32_t pname) -> (float returnValue) Synchronous
    void GetSamplerParameteri(uint32_t sampler, uint32_t pname) -> (int32_t returnValue) Synchronous
    void FenceSync(uint32_t condition, uint32_t flags) -> (uint64_t returnValue) Synchronous
    void IsSync(uint64_t arg0) -> (bool returnValue) Synchronous
    void DeleteSync(uint64_t arg0)
    void ClientWaitSync(uint64_t arg0, uint32_t flags, uint64_t timeout) -> (uint32_t returnValue) Synchronous
    void WaitSync(uint64_t arg0, uint32_t flags, int64_t timeout)
    void GetSynci(uint64_t arg0, uint32_t pname) -> (int32_t returnValue) Synchronous
    void CreateTransformFeedback() -> (uint32_t returnValue) Synchronous
    void DeleteTransformFeedback(uint32_t id)
    void IsTransformFeedback(uint32_t id) -> (bool returnValue) Synchronous
    void BindTransformFeedback(uint32_t target, uint32_t id)
    void BeginTransformFeedback(uint32_t primitiveMode)
    void EndTransformFeedback()
    void TransformFeedbackVaryings(uint32_t program, Vector<String> varyings, uint32_t bufferMode)
    void GetTransformFeedbackVarying(uint32_t program, uint32_t index) -> (WebCore::GraphicsContextGL::ActiveInfo arg2) Synchronous
    void PauseTransformFeedback()
    void ResumeTransformFeedback()
    void BindBufferBase(uint32_t target, uint32_t index, uint32_t buffer)
    void BindBufferRange(uint32_t target, uint32_t index, uint32_t buffer, uint64_t offset, uint64_t arg4)
    void GetUniformIndices(uint32_t program, Vector<String> uniformNames) -> (Vector<uint32_t> returnValue) Synchronous
    void GetActiveUniforms(uint32_t program, Vector<uint32_t> uniformIndices, uint32_t pname) -> (Vector<int32_t> returnValue) Synchronous
    void GetUniformBlockIndex(uint32_t program, String uniformBlockName) -> (uint32_t returnValue) Synchronous
    void GetActiveUniformBlockName(uint32_t program, uint32_t uniformBlockIndex) -> (String returnValue) Synchronous
    void UniformBlockBinding(uint32_t program, uint32_t uniformBlockIndex, uint32_t uniformBlockBinding)
    void GetActiveUniformBlockiv(uint32_t program, uint32_t uniformBlockIndex, uint32_t pname, uint64_t paramsSize) -> (IPC::ArrayReference<int32_t> params) Synchronous
    void GetGraphicsResetStatusARB() -> (int32_t returnValue) Synchronous
    void GetTranslatedShaderSourceANGLE(uint32_t arg0) -> (String returnValue) Synchronous
    void DrawBuffersEXT(IPC::ArrayReference<uint32_t> bufs)
    void GetInternalformativ(uint32_t target, uint32_t internalformat, uint32_t pname, uint64_t paramsSize) -> (IPC::ArrayReference<int32_t> params) Synchronous
    void MultiDrawArraysANGLE(uint32_t mode, IPC::ArrayReference<int32_t> firsts, IPC::ArrayReference<int32_t> counts, int32_t drawcount)
    void MultiDrawArraysInstancedANGLE(uint32_t mode, IPC::ArrayReference<int32_t> firsts, IPC::ArrayReference<int32_t> counts, IPC::ArrayReference<int32_t> instanceCounts, int32_t drawcount)
    void MultiDrawElementsANGLE(uint32_t mode, IPC::ArrayReference<int32_t> counts, uint32_t type, IPC::ArrayReference<int32_t> offsets, int32_t drawcount)
    void MultiDrawElementsInstancedANGLE(uint32_t mode, IPC::ArrayReference<int32_t> counts, uint32_t type, IPC::ArrayReference<int32_t> offsets, IPC::ArrayReference<int32_t> instanceCounts, int32_t drawcount)
    void PaintRenderingResultsToPixelBuffer() -> (std::optional<WebCore::PixelBuffer> returnValue) Synchronous
}

#endif
