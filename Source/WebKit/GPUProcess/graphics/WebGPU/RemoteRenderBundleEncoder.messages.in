/* Copyright (C) 2021-2023 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#if ENABLE(GPU_PROCESS)

messages -> RemoteRenderBundleEncoder NotRefCounted Stream {
    void Destruct()
    void SetPipeline(WebKit::WebGPUIdentifier identifier)
    void SetIndexBuffer(WebKit::WebGPUIdentifier identifier, WebCore::WebGPU::IndexFormat indexFormat, std::optional<WebCore::WebGPU::Size64> offset, std::optional<WebCore::WebGPU::Size64> size)
    void SetVertexBuffer(WebCore::WebGPU::Index32 slot, WebKit::WebGPUIdentifier identifier, std::optional<WebCore::WebGPU::Size64> offset, std::optional<WebCore::WebGPU::Size64> size)
    void UnsetVertexBuffer(WebCore::WebGPU::Index32 slot, std::optional<WebCore::WebGPU::Size64> offset, std::optional<WebCore::WebGPU::Size64> size)
    void Draw(WebCore::WebGPU::Size32 vertexCount, std::optional<WebCore::WebGPU::Size32> instanceCount, std::optional<WebCore::WebGPU::Size32> firstVertex, std::optional<WebCore::WebGPU::Size32> firstInstance)
    void DrawIndexed(WebCore::WebGPU::Size32 indexCount, std::optional<WebCore::WebGPU::Size32> instanceCount, std::optional<WebCore::WebGPU::Size32> firstIndex, std::optional<WebCore::WebGPU::SignedOffset32> baseVertex, std::optional<WebCore::WebGPU::Size32> firstInstance)
    void DrawIndirect(WebKit::WebGPUIdentifier indirectBuffer, WebCore::WebGPU::Size64 indirectOffset)
    void DrawIndexedIndirect(WebKit::WebGPUIdentifier indirectBuffer, WebCore::WebGPU::Size64 indirectOffset)
    void SetBindGroup(WebCore::WebGPU::Index32 index, WebKit::WebGPUIdentifier identifier, std::optional<Vector<WebCore::WebGPU::BufferDynamicOffset>> dynamicOffsets)
    void PushDebugGroup(String groupLabel)
    void PopDebugGroup()
    void InsertDebugMarker(String markerLabel)
    void Finish(WebKit::WebGPU::RenderBundleDescriptor descriptor, WebKit::WebGPUIdentifier identifier)
    void SetLabel(String label)
}

#endif
