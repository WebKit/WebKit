/*
 * Copyright (C) 2020 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#if ENABLE(GPU_PROCESS) && ENABLE(MEDIA_SOURCE)

messages -> RemoteSourceBufferProxy NotRefCounted {
    SetActive(bool active)
    CanSwitchToType(WebCore::ContentType contentType) -> (bool canSwitch) Synchronous
    SetMode(WebCore::SourceBufferAppendMode appendMode)
    Append(IPC::DataReference data)
    Abort()
    ResetParserState()
    RemovedFromMediaSource()
    SetMediaSourceEnded(bool isEnded)
    SetReadyState(WebCore::MediaPlayer::ReadyState state)
    StartChangingType()
    UpdateBufferedFromTrackBuffers(bool sourceIsEnded) -> (WebCore::PlatformTimeRanges buffered) Synchronous
    AddTrackBuffer(WebKit::TrackPrivateRemoteIdentifier remoteIdentifier)
    ResetTrackBuffers()
    ClearTrackBuffers()
    SetAllTrackBuffersNeedRandomAccess()
    RemoveCodedFrames(MediaTime start, MediaTime end, MediaTime currentTime, bool isEnded) -> (WebCore::PlatformTimeRanges buffered, uint64_t totalTrackBufferSizeInBytes) Async
    EvictCodedFrames(uint64_t newDataSize, uint64_t maximumBufferSize, MediaTime currentTime, MediaTime duration, bool isEnded) -> (uint64_t totalTrackBufferSizeInBytes) Synchronous
    ReenqueueMediaIfNeeded(MediaTime currentMediaTime)
    SetGroupStartTimestamp(MediaTime timestamp)
    SetGroupStartTimestampToEndTimestamp()
    SetShouldGenerateTimestamps(bool shouldGenerateTimestamps)
    ResetTimestampOffsetInTrackBuffers()
    SetTimestampOffset(MediaTime timestampOffset)
    SetAppendWindowStart(MediaTime appendWindowStart)
    SetAppendWindowEnd(MediaTime appendWindowEnd)
    SeekToTime(MediaTime mediaTime)
    UpdateTrackIds(Vector<std::pair<WebKit::TrackPrivateRemoteIdentifier, WebKit::TrackPrivateRemoteIdentifier>> identifierPairs)
    BufferedSamplesForTrackId(WebKit::TrackPrivateRemoteIdentifier remoteIdentifier) -> (Vector<String> samples) Async
    EnqueuedSamplesForTrackID(WebKit::TrackPrivateRemoteIdentifier remoteIdentifier) -> (Vector<String> samples) Async
}

#endif
