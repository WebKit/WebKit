/*
 * Copyright (C) 2011 Igalia S.L.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

@SHARED_API_SINGLE_HEADER_CHECK@

#ifndef WebKitDefines_h
#define WebKitDefines_h

#include <glib.h>

#ifdef G_OS_WIN32
#    ifdef BUILDING_WEBKIT
#        define WEBKIT_API __declspec(dllexport)
#    else
#        define WEBKIT_API __declspec(dllimport)
#    endif
#else
#    define WEBKIT_API __attribute__((visibility("default")))
#endif

#define WEBKIT_DEPRECATED WEBKIT_API G_DEPRECATED
#define WEBKIT_DEPRECATED_FOR(f) WEBKIT_API G_DEPRECATED_FOR(f)

/**
 * WEBKIT_DEPRECATED_FOR: (skip)
 * @f: replacement symbol name
 *
 * Marks a symbol as deprecated, indicating a replacement.
 */

#if ENABLE(2022_GLIB_API)
/*
 * The G_DECLARE_DERIVABLE_TYPE macro creates an instance struct that
 * has ParentName as its only member; but in order to keep the same code
 * for the pre-2022 API it should have also a "priv" member. There is no
 * reasonable way of bending the GLib macro to do what we want; so this is
 * a version of the GLib macro adapted accordingly.
 */
#define WEBKIT_DECLARE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)               \
    WEBKIT_API GType module_obj_name##_get_type (void);                                                 \
    G_GNUC_BEGIN_IGNORE_DEPRECATIONS                                                                    \
    typedef struct _##ModuleObjName ModuleObjName;                                                      \
    typedef struct _##ModuleObjName##Class ModuleObjName##Class;                                        \
    typedef struct _##ModuleObjName##Private ModuleObjName##Private;                                    \
                                                                                                        \
    _GLIB_DEFINE_AUTOPTR_CHAINUP (ModuleObjName, ParentName)                                            \
    G_DEFINE_AUTOPTR_CLEANUP_FUNC (ModuleObjName##Class, g_type_class_unref)                            \
                                                                                                        \
    G_GNUC_UNUSED static inline ModuleObjName * MODULE##_##OBJ_NAME (gpointer ptr) {                    \
      return G_TYPE_CHECK_INSTANCE_CAST (ptr, module_obj_name##_get_type (), ModuleObjName); }          \
    G_GNUC_UNUSED static inline ModuleObjName##Class * MODULE##_##OBJ_NAME##_CLASS (gpointer ptr) {     \
      return G_TYPE_CHECK_CLASS_CAST (ptr, module_obj_name##_get_type (), ModuleObjName##Class); }      \
    G_GNUC_UNUSED static inline gboolean MODULE##_IS_##OBJ_NAME (gpointer ptr) {                        \
      return G_TYPE_CHECK_INSTANCE_TYPE (ptr, module_obj_name##_get_type ()); }                         \
    G_GNUC_UNUSED static inline gboolean MODULE##_IS_##OBJ_NAME##_CLASS (gpointer ptr) {                \
      return G_TYPE_CHECK_CLASS_TYPE (ptr, module_obj_name##_get_type ()); }                            \
    G_GNUC_UNUSED static inline ModuleObjName##Class * MODULE##_##OBJ_NAME##_GET_CLASS (gpointer ptr) { \
      return G_TYPE_INSTANCE_GET_CLASS (ptr, module_obj_name##_get_type (), ModuleObjName##Class); }    \
    G_GNUC_END_IGNORE_DEPRECATIONS

#define WEBKIT_DECLARE_DERIVABLE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)     \
    WEBKIT_DECLARE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)                   \
    struct _##ModuleObjName { ParentName parent_instance; ModuleObjName ## Private *priv; };

#define WEBKIT_DECLARE_FINAL_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName) \
    WEBKIT_API G_DECLARE_FINAL_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)

#else

#define WEBKIT_DECLARE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName) \
    WEBKIT_API GType module_obj_name ## _get_type (void);                  \
                                                                           \
    typedef struct _ ## ModuleObjName ModuleObjName;                       \
    typedef struct _ ## ModuleObjName ## Class ModuleObjName ## Class;     \
    typedef struct _ ## ModuleObjName ## Private ModuleObjName ## Private; \
                                                                           \
    struct _ ## ModuleObjName {                                            \
        ParentName parent;                                                 \
        /*< private >*/                                                    \
        ModuleObjName ## Private *priv;                                    \
    };

#define WEBKIT_DECLARE_DERIVABLE_TYPE WEBKIT_DECLARE_TYPE
#define WEBKIT_DECLARE_FINAL_TYPE WEBKIT_DECLARE_TYPE

#endif

#endif /* WebKitDefines_h */
