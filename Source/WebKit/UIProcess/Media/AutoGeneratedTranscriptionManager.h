/*
 * Copyright (C) 2024 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#if HAVE(SPEECHRECOGNIZER)

#include "Connection.h"
#include "GPUProcess.h"
#include "MessageReceiver.h"
#include "MessageSender.h"
#include "SharedCARingBuffer.h"

#include <WebCore/CAAudioStreamDescription.h>
#include <WebCore/MediaPlayerIdentifier.h>

namespace WTF {
class MediaTime;
}

namespace WebKit {
class GPUProcessProxy;
class AutomaticTranscriptionGenerator;

class AutoGeneratedTranscriptionManager : public IPC::MessageReceiver, private IPC::MessageSender {
    WTF_MAKE_FAST_ALLOCATED;

public:
    AutoGeneratedTranscriptionManager(IPC::Connection*);

    void registerClient(WebCore::MediaPlayerIdentifier);
    void unregisterClient(WebCore::MediaPlayerIdentifier);

    void startTranscription(WebCore::MediaPlayerIdentifier, const String&);
    void stopTranscription(WebCore::MediaPlayerIdentifier);

    void audioStorageChanged(WebCore::MediaPlayerIdentifier, ConsumerSharedCARingBuffer::Handle&&, const WebCore::CAAudioStreamDescription&);
    void audioSamplesAvailable(WebCore::MediaPlayerIdentifier, uint64_t, uint64_t);

    void createAutoGeneratedCaptionCue(WebCore::MediaPlayerIdentifier, const String&, WTF::MediaTime);
    void updateAutoGeneratedCaptionCue(WebCore::MediaPlayerIdentifier, const String&, WTF::MediaTime);
    void finalizeAutoGeneratedCaptionCue(WebCore::MediaPlayerIdentifier, const String&, WTF::MediaTime, WTF::MediaTime);

private:
    RefPtr<IPC::Connection> m_connection;

    // IPC::MessageReceiver.
    void didReceiveMessage(IPC::Connection&, IPC::Decoder&) final;

    // IPC::MessageSender.
    IPC::Connection* messageSenderConnection() const final { return m_connection.get(); }
    uint64_t messageSenderDestinationID() const final { return 0; }

};

}
#endif
