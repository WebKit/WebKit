# Copyright (C) 2022 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

header: "SessionState.h"
[CustomHeader] struct WebKit::HTTPBody {
    String contentType;
    Vector<WebKit::HTTPBody::Element> elements;
};

[Nested] struct WebKit::HTTPBody::Element {
    std::variant<Vector<uint8_t>, WebKit::HTTPBody::Element::FileData, String> data;
};

[Nested] struct WebKit::HTTPBody::Element::FileData {
    String filePath;
    int64_t fileStart;
    std::optional<int64_t> fileLength;
    std::optional<WallTime> expectedFileModificationTime;
};

[CustomHeader, LegacyPopulateFromEmptyConstructor] class WebKit::FrameState {
    String urlString;
    String originalURLString;
    String referrer;
    AtomString target;

    std::optional<Vector<uint8_t>> stateObjectData;

    int64_t documentSequenceNumber;
    int64_t itemSequenceNumber;

    WebCore::IntPoint scrollPosition;
    bool shouldRestoreScrollPosition;
    float pageScaleFactor;

    std::optional<WebKit::HTTPBody> httpBody;

#if PLATFORM(IOS_FAMILY)
    WebCore::FloatRect exposedContentRect;
    WebCore::IntRect unobscuredContentRect;
    WebCore::FloatSize minimumLayoutSizeInScrollViewCoordinates;
    WebCore::IntSize contentSize;
    bool scaleIsInitial;
    WebCore::FloatBoxExtent obscuredInsets;
#endif

    Vector<WebKit::FrameState> children;
    [Validator='WebKit::FrameState::validateDocumentState(*m_documentState)'] Vector<AtomString> m_documentState;
};

[CustomHeader] struct WebKit::PageState {
    String title;
    WebKit::FrameState mainFrameState;
    WebCore::ShouldOpenExternalURLsPolicy shouldOpenExternalURLsPolicy;
    RefPtr<WebCore::SerializedScriptValue> sessionStateObject;
    bool wasCreatedByJSWithoutUserInteraction;
};

[CustomHeader] struct WebKit::BackForwardListItemState {
    WebCore::BackForwardItemIdentifier identifier;

    WebKit::PageState pageState;
    bool hasCachedPage;
    # snapshot is not serialized.
};

[CustomHeader] struct WebKit::BackForwardListState {
    Vector<WebKit::BackForwardListItemState> items;
    std::optional<uint32_t> currentIndex;
};
