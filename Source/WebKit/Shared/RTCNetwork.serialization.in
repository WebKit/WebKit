# Copyright (C) 2023 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if USE(LIBWEBRTC)

[CustomHeader] struct WebKit::RTC::Network::IPAddress {
    std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily, uint32_t, std::array<uint32_t, 4>> value;
};

[Nested] struct WebKit::RTC::Network::IPAddress::UnspecifiedFamily {
};

[CustomHeader] struct WebKit::RTC::Network::InterfaceAddress {
    WebKit::RTC::Network::IPAddress address;
    int ipv6Flags;
};

[CustomHeader] struct WebKit::RTC::Network::SocketAddress {
    uint16_t port;
    int scopeID;
    Vector<char> hostname;
    std::optional<WebKit::RTC::Network::IPAddress> ipAddress;
};

struct WebKit::RTCNetwork {
    Vector<char> name;
    Vector<char> description;
    WebKit::RTC::Network::IPAddress prefix;
    int prefixLength;
    int type;
    uint16_t id;
    int preference;
    bool active;
    bool ignored;
    int scopeID;
    Vector<WebKit::RTC::Network::InterfaceAddress> ips;
};

#if USE(LIBWEBRTC) && PLATFORM(COCOA)
header: "RTCWebKitEncodedFrameInfo.h"
[CustomHeader] struct webrtc::WebKitEncodedFrameInfo {
    uint32_t width
    uint32_t height
    int64_t timeStamp
    std::optional<uint64_t> duration
    int64_t ntpTimeMS
    int64_t captureTimeMS
    webrtc::VideoFrameType frameType
    webrtc::WebKitEncodedVideoRotation rotation
    webrtc::VideoContentType contentType
    bool completeFrame
    int qp
    int temporalIndex
    webrtc::WebKitEncodedFrameTiming timing;
};

enum class webrtc::WebKitEncodedVideoRotation : uint8_t {
    kVideoRotation_0,
    kVideoRotation_90,
    kVideoRotation_180,
    kVideoRotation_270
};

using WebKitEncodedFrameTiming = webrtc::EncodedImage::Timing

[Nested] struct webrtc::EncodedImage::Timing {
    uint8_t flags
    int64_t encode_start_ms
    int64_t encode_finish_ms
    int64_t packetization_finish_ms
    int64_t pacer_exit_ms
    int64_t network_timestamp_ms
    int64_t network2_timestamp_ms
    int64_t receive_start_ms
    int64_t receive_finish_ms
};

enum class webrtc::VideoFrameType : int {
  kEmptyFrame,
  kVideoFrameKey,
  kVideoFrameDelta,
};

enum class webrtc::VideoContentType : uint8_t {
  UNSPECIFIED,
  SCREENSHARE,
};
#endif

#endif
