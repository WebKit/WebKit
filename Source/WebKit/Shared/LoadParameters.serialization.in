# Copyright (C) 2023 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

[RValue] struct WebKit::LoadParameters {
#if ENABLE(PUBLIC_SUFFIX_LIST)
    String topPrivatelyControlledDomain;
    String host;
#endif
    uint64_t navigationID;
    std::optional<WebCore::FrameIdentifier> frameIdentifier;
    [EncodeRequestBody] WebCore::ResourceRequest request;
    WebKit::SandboxExtension::Handle sandboxExtensionHandle;
    std::span<const uint8_t> data;

    String MIMEType;
    String encodingName;
    String baseURLString;
    String unreachableURLString;
    String provisionalLoadErrorURLString;
    std::optional<WebKit::WebsitePoliciesData> websitePolicies;
    WebCore::ShouldOpenExternalURLsPolicy shouldOpenExternalURLsPolicy;
    WebCore::ShouldTreatAsContinuingLoad shouldTreatAsContinuingLoad;
    WebKit::UserData userData;
    WebCore::LockHistory lockHistory;
    WebCore::LockBackForwardList lockBackForwardList;
    WebCore::SubstituteData::SessionHistoryVisibility sessionHistoryVisibility
    String clientRedirectSourceForHistory;
    WebCore::SandboxFlags effectiveSandboxFlags;
    std::optional<WebKit::NavigatingToAppBoundDomain> isNavigatingToAppBoundDomain;
    std::optional<WebKit::NetworkResourceLoadIdentifier> existingNetworkResourceLoadIdentifierToResume;
    bool isServiceWorkerLoad;

#if PLATFORM(COCOA)
    std::optional<double> dataDetectionReferenceDate;
#endif

    OptionSet<WebCore::AdvancedPrivacyProtections> advancedPrivacyProtections;
};
