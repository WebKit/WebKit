# Copyright (C) 2023 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if ENABLE(WK_WEB_EXTENSIONS)

headers: "WebExtensionScriptInjectionParameters.h" "WebExtensionScriptInjectionResultParameters.h" "WebExtensionRegisteredScriptParameters.h" "WebExtension.h"

struct WebKit::WebExtensionScriptInjectionParameters {
    std::optional<WebKit::WebExtensionTabIdentifier> tabIdentifier;

    std::optional<Ref<API::Data>> arguments;
    std::optional<Vector<String>> files;
    std::optional<Vector<WebKit::WebExtensionFrameIdentifier>> frameIDs;

    std::optional<String> code;
    std::optional<String> css;
    std::optional<String> function;

    WebKit::WebExtensionContentWorldType world;
}

struct WebKit::WebExtensionScriptInjectionResultParameters {
    std::optional<String> error;
    std::optional<String> resultJSON;
    std::optional<WebKit::WebExtensionFrameIdentifier> frameID;
}

struct WebKit::WebExtensionRegisteredScriptParameters {

    std::optional<Vector<String>> css;
    std::optional<Vector<String>> js;

    String identifier;
    std::optional<WebKit::WebExtension::InjectionTime> injectionTime;

    std::optional<Vector<String>> excludeMatchPatterns;
    std::optional<Vector<String>> matchPatterns;

    std::optional<bool> allFrames;
    std::optional<bool> persistent;

    std::optional<WebKit::WebExtensionContentWorldType> world;
}

[Nested] enum class WebKit::WebExtension::InjectionTime : uint8_t {
    DocumentIdle,
    DocumentStart,
    DocumentEnd,
};

#endif
