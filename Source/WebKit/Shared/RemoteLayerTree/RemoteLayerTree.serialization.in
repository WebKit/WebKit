# Copyright (C) 2023 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

header: "RemoteLayerTreeTransaction.h"
[OptionSet] enum class WebKit::LayerChange : uint64_t {
    NameChanged
    TransformChanged
    SublayerTransformChanged
    ShapeRoundedRectChanged
    ChildrenChanged
    AnimationsChanged
    PositionChanged
    AnchorPointChanged
    BoundsChanged
    ContentsRectChanged
    BackingStoreChanged
    FiltersChanged
    ShapePathChanged
    MaskLayerChanged
    ClonedContentsChanged
    TimeOffsetChanged
    SpeedChanged
    ContentsScaleChanged
    CornerRadiusChanged
    BorderWidthChanged
    OpacityChanged
    BackgroundColorChanged
    BorderColorChanged
    CustomAppearanceChanged
    MinificationFilterChanged
    MagnificationFilterChanged
    BlendModeChanged
    WindRuleChanged
    VideoGravityChanged
    AntialiasesEdgesChanged
    HiddenChanged
    BackingStoreAttachmentChanged
    GeometryFlippedChanged
    DoubleSidedChanged
    MasksToBoundsChanged
    OpaqueChanged
    ContentsHiddenChanged
    UserInteractionEnabledChanged
    EventRegionChanged
#if ENABLE(SCROLLING_THREAD)
    ScrollingNodeIDChanged
#endif
#if HAVE(CORE_ANIMATION_SEPARATED_LAYERS)
    SeparatedChanged
#if HAVE(CORE_ANIMATION_SEPARATED_PORTALS)
    SeparatedPortalChanged
    DescendentOfSeparatedPortalChanged
#endif
#endif
#if ENABLE(INTERACTION_REGIONS_IN_EVENT_REGION)
    VisibleRectChanged
#endif
};

header: "SwapBuffersDisplayRequirement.h"
enum class WebKit::SwapBuffersDisplayRequirement : uint8_t {
    NeedsFullDisplay,
    NeedsNormalDisplay,
    NeedsNoDisplay
};

header: "RemoteScrollingUIState.h"
[OptionSet] enum class WebKit::RemoteScrollingUIStateChanges : uint8_t {
    ScrollSnapNodes
    UserScrollNodes
};

[LegacyPopulateFromEmptyConstructor] class WebKit::RemoteLayerTreeTransaction {
{
    WebCore::PlatformLayerIdentifier m_rootLayerID;
    WebKit::ChangedLayers m_changedLayers;

    Markable<WebCore::LayerHostingContextIdentifier> m_remoteContextHostedIdentifier;

    Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties> m_createdLayers;
    Vector<WebCore::PlatformLayerIdentifier> m_destroyedLayerIDs;
    Vector<WebCore::PlatformLayerIdentifier> m_videoLayerIDsPendingFullscreen;
    Vector<WebCore::PlatformLayerIdentifier> m_layerIDsWithNewlyUnreachableBackingStore;

    Vector<IPC::AsyncReplyID> m_callbackIDs;

    WebCore::IntSize m_contentsSize;
    WebCore::IntPoint m_scrollOrigin;
    WebCore::LayoutSize m_baseLayoutViewportSize;
    WebCore::LayoutPoint m_minStableLayoutViewportOrigin;
    WebCore::LayoutPoint m_maxStableLayoutViewportOrigin;
    WebCore::IntPoint m_scrollPosition;
    WebCore::Color m_themeColor;
    WebCore::Color m_pageExtendedBackgroundColor;
    WebCore::Color m_sampledPageTopColor;

#if PLATFORM(MAC)
    Markable<WebCore::PlatformLayerIdentifier> m_pageScalingLayerID;
    Markable<WebCore::PlatformLayerIdentifier> m_scrolledContentsLayerID;
#endif

    double m_pageScaleFactor;
    double m_minimumScaleFactor;
    double m_maximumScaleFactor;
    double m_initialScaleFactor;
    double m_viewportMetaTagWidth;
    uint64_t m_renderTreeSize;
    WebKit::TransactionID m_transactionID;
    WebKit::ActivityStateChangeID m_activityStateChangeID;
    OptionSet<WebCore::LayoutMilestone> m_newlyReachedPaintingMilestones;
    bool m_scaleWasSetByUIProcess;
    bool m_allowsUserScaling;
    bool m_avoidsUnsafeArea;
    bool m_viewportMetaTagWidthWasExplicit;
    bool m_viewportMetaTagCameFromImageDocument;
    bool m_isInStableState;

    std::optional<WebKit::EditorState> m_editorState;
#if PLATFORM(IOS_FAMILY)
    std::optional<uint64_t> m_dynamicViewportSizeUpdateID;
#endif
}

headers: "LayerProperties.h" "PlatformCALayerRemote.h"
[CustomEncoder, CustomHeader] struct WebKit::ChangedLayers {
    [NotSerialized] HashSet<Ref<PlatformCALayerRemote>> changedLayers;
    HashMap<WebCore::PlatformLayerIdentifier, UniqueRef<WebKit::LayerProperties>> changedLayerProperties;
}

[Nested] struct WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData {
};

[Nested] struct WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData {
    WebKit::PlaybackSessionContextIdentifier playerIdentifier;
    WebCore::FloatSize initialSize;
    WebCore::FloatSize naturalSize;
};

[Nested] struct WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData {
    uint32_t hostingContextID;
    float hostingDeviceScaleFactor;
    bool preservesFlip;
};

[Nested] struct WebKit::RemoteLayerTreeTransaction::LayerCreationProperties {
    WebCore::PlatformLayerIdentifier layerID;
    WebCore::PlatformCALayer::LayerType type;
    std::optional<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData> videoElementData;
#if ENABLE(MODEL_ELEMENT)
    std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData, WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData, Ref<WebCore::Model>, WebCore::LayerHostingContextIdentifier> additionalData;
#endif
#if !ENABLE(MODEL_ELEMENT)
    std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData, WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData, WebCore::LayerHostingContextIdentifier> additionalData;
#endif
};

[Nested] struct WebKit::LayerProperties::AnimationChanges {
    Vector<std::pair<String, WebKit::PlatformCAAnimationRemote::Properties>> addedAnimations;
    HashSet<String> keysOfAnimationsToRemove;
#if ENABLE(THREADED_ANIMATION_RESOLUTION)
    Vector<Ref<WebCore::AcceleratedEffect>> effects;
    WebCore::AcceleratedEffectValues baseValues;
#endif
};

[CustomEncoder, CustomHeader] struct WebKit::RemoteLayerBackingStoreOrProperties {
    [NotSerialized] std::unique_ptr<RemoteLayerBackingStore> backingStore;
    std::unique_ptr<WebKit::RemoteLayerBackingStoreProperties> properties;
};

struct WebKit::LayerProperties {
    [OptionalTupleBits] OptionSet<WebKit::LayerChange> changedProperties;
    [NotSerialized] OptionSet<WebKit::LayerChange> everChangedProperties;

    [OptionalTupleBit=WebKit::LayerChange::NameChanged] String name;
    [OptionalTupleBit=WebKit::LayerChange::TransformChanged] std::unique_ptr<WebCore::TransformationMatrix> transform;
    [OptionalTupleBit=WebKit::LayerChange::SublayerTransformChanged] std::unique_ptr<WebCore::TransformationMatrix> sublayerTransform;
    [OptionalTupleBit=WebKit::LayerChange::ShapeRoundedRectChanged] std::unique_ptr<WebCore::FloatRoundedRect> shapeRoundedRect;

    [OptionalTupleBit=WebKit::LayerChange::ChildrenChanged] Vector<WebCore::PlatformLayerIdentifier> children;

    [OptionalTupleBit=WebKit::LayerChange::AnimationsChanged] WebKit::LayerProperties::AnimationChanges animationChanges;

    [OptionalTupleBit=WebKit::LayerChange::PositionChanged] WebCore::FloatPoint3D position;
    [OptionalTupleBit=WebKit::LayerChange::AnchorPointChanged] WebCore::FloatPoint3D anchorPoint;
    [OptionalTupleBit=WebKit::LayerChange::BoundsChanged] WebCore::FloatRect bounds;
    [OptionalTupleBit=WebKit::LayerChange::ContentsRectChanged] WebCore::FloatRect contentsRect;
    [OptionalTupleBit=WebKit::LayerChange::BackingStoreChanged] WebKit::RemoteLayerBackingStoreOrProperties backingStoreOrProperties;
    [OptionalTupleBit=WebKit::LayerChange::FiltersChanged] std::unique_ptr<WebCore::FilterOperations> filters;
    [OptionalTupleBit=WebKit::LayerChange::ShapePathChanged] WebCore::Path shapePath;
    [OptionalTupleBit=WebKit::LayerChange::MaskLayerChanged] Markable<WebCore::PlatformLayerIdentifier> maskLayerID;
    [OptionalTupleBit=WebKit::LayerChange::ClonedContentsChanged] Markable<WebCore::PlatformLayerIdentifier> clonedLayerID;
    [OptionalTupleBit=WebKit::LayerChange::TimeOffsetChanged] double timeOffset;
    [OptionalTupleBit=WebKit::LayerChange::SpeedChanged] float speed;
    [OptionalTupleBit=WebKit::LayerChange::ContentsScaleChanged] float contentsScale;
    [OptionalTupleBit=WebKit::LayerChange::CornerRadiusChanged] float cornerRadius;
    [OptionalTupleBit=WebKit::LayerChange::BorderWidthChanged] float borderWidth;
    [OptionalTupleBit=WebKit::LayerChange::OpacityChanged] float opacity;
    [OptionalTupleBit=WebKit::LayerChange::BackgroundColorChanged] WebCore::Color backgroundColor;
    [OptionalTupleBit=WebKit::LayerChange::BorderColorChanged] WebCore::Color borderColor;
    [OptionalTupleBit=WebKit::LayerChange::CustomAppearanceChanged] WebCore::GraphicsLayer::CustomAppearance customAppearance;
    [OptionalTupleBit=WebKit::LayerChange::MinificationFilterChanged] WebCore::PlatformCALayer::FilterType minificationFilter;
    [OptionalTupleBit=WebKit::LayerChange::MagnificationFilterChanged] WebCore::PlatformCALayer::FilterType magnificationFilter;
    [OptionalTupleBit=WebKit::LayerChange::BlendModeChanged] WebCore::BlendMode blendMode;
    [OptionalTupleBit=WebKit::LayerChange::WindRuleChanged] WebCore::WindRule windRule;
    [OptionalTupleBit=WebKit::LayerChange::VideoGravityChanged] WebCore::MediaPlayerVideoGravity videoGravity;
    [OptionalTupleBit=WebKit::LayerChange::AntialiasesEdgesChanged] bool antialiasesEdges;
    [OptionalTupleBit=WebKit::LayerChange::HiddenChanged] bool hidden;
    [OptionalTupleBit=WebKit::LayerChange::BackingStoreAttachmentChanged] bool backingStoreAttached;
    [OptionalTupleBit=WebKit::LayerChange::GeometryFlippedChanged] bool geometryFlipped;
    [OptionalTupleBit=WebKit::LayerChange::DoubleSidedChanged] bool doubleSided;
    [OptionalTupleBit=WebKit::LayerChange::MasksToBoundsChanged] bool masksToBounds;
    [OptionalTupleBit=WebKit::LayerChange::OpaqueChanged] bool opaque;
    [OptionalTupleBit=WebKit::LayerChange::ContentsHiddenChanged] bool contentsHidden;
    [OptionalTupleBit=WebKit::LayerChange::UserInteractionEnabledChanged] bool userInteractionEnabled;
    [OptionalTupleBit=WebKit::LayerChange::EventRegionChanged] WebCore::EventRegion eventRegion;
#if ENABLE(SCROLLING_THREAD)
    [OptionalTupleBit=WebKit::LayerChange::ScrollingNodeIDChanged] WebCore::ScrollingNodeID scrollingNodeID;
#endif
#if HAVE(CORE_ANIMATION_SEPARATED_LAYERS)
    [OptionalTupleBit=WebKit::LayerChange::SeparatedChanged] bool isSeparated;
#if HAVE(CORE_ANIMATION_SEPARATED_PORTALS)
    [OptionalTupleBit=WebKit::LayerChange::SeparatedPortalChanged] bool isSeparatedPortal;
    [OptionalTupleBit=WebKit::LayerChange::DescendentOfSeparatedPortalChanged] bool isDescendentOfSeparatedPortal;
#endif
#endif
#if ENABLE(INTERACTION_REGIONS_IN_EVENT_REGION)
    [OptionalTupleBit=WebKit::LayerChange::VisibleRectChanged] WebCore::FloatRect visibleRect;
#endif
};
