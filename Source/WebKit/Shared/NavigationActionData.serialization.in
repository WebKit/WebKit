# Copyright (C) 2023 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

struct WebKit::NavigationActionData {
    WebCore::NavigationType navigationType;
    OptionSet<WebKit::WebEventModifier> modifiers;
    WebKit::WebMouseEventButton mouseButton;
    WebKit::WebMouseEventSyntheticClickType syntheticClickType;
    uint64_t userGestureTokenIdentifier;
    std::optional<WTF::UUID> userGestureAuthorizationToken;
    bool canHandleRequest;
    WebCore::ShouldOpenExternalURLsPolicy shouldOpenExternalURLsPolicy;
    WTF::String downloadAttribute;
    WebCore::FloatPoint clickLocationInRootViewCoordinates;
    WebCore::ResourceResponse redirectResponse;
    bool treatAsSameOriginNavigation;
    bool hasOpenedFrames;
    bool openedByDOMWithOpener;
    bool hasOpener;
    WebCore::SecurityOriginData requesterOrigin;
    std::optional<WebCore::BackForwardItemIdentifier> targetBackForwardItemIdentifier;
    std::optional<WebCore::BackForwardItemIdentifier> sourceBackForwardItemIdentifier;
    WebCore::LockHistory lockHistory;
    WebCore::LockBackForwardList lockBackForwardList;
    WTF::String clientRedirectSourceForHistory;
    WebCore::SandboxFlags effectiveSandboxFlags;
    std::optional<WebCore::PrivateClickMeasurement> privateClickMeasurement;
    OptionSet<WebCore::AdvancedPrivacyProtections> advancedPrivacyProtections;
    OptionSet<WebCore::AdvancedPrivacyProtections> originatorAdvancedPrivacyProtections;
#if PLATFORM(MAC) || HAVE(UIKIT_WITH_MOUSE_SUPPORT)
    std::optional<WebKit::WebHitTestResultData> webHitTestResultData;
#endif
};
