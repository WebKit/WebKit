# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


additional_forward_declaration: namespace IPC { template<typename> class ObjectIdentifierReference; }
additional_forward_declaration: namespace IPC { template<typename> class ObjectIdentifierWriteReference; }
additional_forward_declaration: namespace IPC { template<typename> struct ObjectIdentifierReadReference; }
additional_forward_declaration: namespace WebCore { using RenderingResourceIdentifier = AtomicObjectIdentifier<RenderingResourceIdentifierType>; }
additional_forward_declaration: namespace WebKit { using RemoteVideoFrameIdentifier = AtomicObjectIdentifier<RemoteVideoFrameIdentifierType>; }
additional_forward_declaration: namespace WebKit { using RemoteSerializedImageBufferIdentifier = WebCore::RenderingResourceIdentifier; }

#if ENABLE(GPU_PROCESS) && ENABLE(VIDEO)

header: "RemoteVideoFrameIdentifier.h"
[Alias=class IPC::ObjectIdentifierReference<WebKit::RemoteVideoFrameIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteVideoFrameReference {
    WebKit::RemoteVideoFrameIdentifier identifier();
    uint64_t version();
};

header: "RemoteVideoFrameIdentifier.h"
[Alias=class IPC::ObjectIdentifierWriteReference<WebKit::RemoteVideoFrameIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteVideoFrameWriteReference {
    WebKit::RemoteVideoFrameReference reference();
    uint64_t pendingReads();
};

header: "RemoteVideoFrameIdentifier.h"
[Alias=class IPC::ObjectIdentifierReadReference<WebKit::RemoteVideoFrameIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteVideoFrameReadReference {
    WebKit::RemoteVideoFrameReference reference();
};

#endif

#if ENABLE(GPU_PROCESS)

header: "RemoteSerializedImageBufferIdentifier.h"
[Alias=class IPC::ObjectIdentifierReference<WebKit::RemoteSerializedImageBufferIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteSerializedImageBufferReference {
    WebKit::RemoteSerializedImageBufferIdentifier identifier();
    uint64_t version();
};

header: "RemoteSerializedImageBufferIdentifier.h"
[Alias=class IPC::ObjectIdentifierWriteReference<WebKit::RemoteSerializedImageBufferIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteSerializedImageBufferWriteReference {
    WebKit::RemoteSerializedImageBufferReference reference();
    uint64_t pendingReads();
};

header: "RemoteSerializedImageBufferIdentifier.h"
[Alias=class IPC::ObjectIdentifierReadReference<WebKit::RemoteSerializedImageBufferIdentifier>, AdditionalEncoder=StreamConnectionEncoder, CustomHeader] alias WebKit::RemoteSerializedImageBufferReadReference {
    WebKit::RemoteSerializedImageBufferReference reference();
};

#endif
