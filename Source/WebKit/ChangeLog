2022-05-04  Kimmo Kinnunen  <kkinnunen@apple.com>

        DisplayList::Recorder has redundant, unused flushContext
        https://bugs.webkit.org/show_bug.cgi?id=239999

        Reviewed by Simon Fraser.

        Remove DisplayList::Recorder::flushContext(GraphicsContextFlushIdentifier)
        It was unused.
        It has wrong signature for proper operation for the concrete classes.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-05-04  Youenn Fablet  <youenn@apple.com>

        LibWebRTCCodecs does no longer need a pixel conformer
        https://bugs.webkit.org/show_bug.cgi?id=240004

        Reviewed by Eric Carlson.

        Removing no longer used code.
        No change of behavior.
        Unified build fix.

        * SourcesCocoa.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.mm: Removed.
        * WebProcess/InjectedBundle/API/Cocoa/WKWebProcessPlugInNodeHandle.mm:

2022-05-04  Megan Gardner  <megan_gardner@apple.com>

        Enable TextCheckingType::Correction on MacCatalyst.
        https://bugs.webkit.org/show_bug.cgi?id=240036

        Reviewed by Wenson Hsieh.

        Add TextCheckingType::Correction to Catalyst to bring consistency to macOS.

        * UIProcess/ios/TextCheckerIOS.mm:
        (WebKit::TextChecker::checkTextOfParagraph):

2022-05-04  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteImageBuffer ThreadSafeImageBufferFlusher hangs if GPU process crashes
        https://bugs.webkit.org/show_bug.cgi?id=240007

        Reviewed by Geoffrey Garen.

        RemoteResourceCacheProxy clears the RemoteImageBuffer backend when the
        GPUP is lost. Mark the flush as completed in this case, so that any pending
        off-thread flush waits can proceed.

        Make sure RemoteResourceCacheProxy clears the backends on destruction too,
        so that any pending flushes proceed in this case too.

        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:
        * WebProcess/GPU/graphics/RemoteResourceCacheProxy.cpp:
        (WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy):
        (WebKit::RemoteResourceCacheProxy::clearImageBufferBackends):
        (WebKit::RemoteResourceCacheProxy::remoteResourceCacheWasDestroyed):
        * WebProcess/GPU/graphics/RemoteResourceCacheProxy.h:

2022-05-03  Per Arne Vollan  <pvollan@apple.com>

        Add logging related to Launch Services database
        https://bugs.webkit.org/show_bug.cgi?id=240032

        Reviewed by Geoffrey Garen.

        We have reports indicating that it can sometime take unexpectedly long time for the Network process to provide
        the Launch Services database to the WebContent and GPU process. Add some logging to help diagnose the issue.
        There are also some related selector response checks that can be removed now.

        * NetworkProcess/cocoa/LaunchServicesDatabaseObserver.mm:
        (WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver):
        (WebKit::LaunchServicesDatabaseObserver::startObserving):
        (WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver):
        (WebKit::databaseContext): Deleted.
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::NetworkProcessProxy):
        (WebKit::NetworkProcessProxy::didFinishLaunching):
        * UIProcess/Network/NetworkProcessProxyCocoa.mm:
        (WebKit::NetworkProcessProxy::sendXPCEndpointToProcess):
        * WebProcess/cocoa/LaunchServicesDatabaseManager.mm:
        (WebKit::LaunchServicesDatabaseManager::handleEvent):

2022-05-03  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Initialize empty and null AtomString at compile time
        https://bugs.webkit.org/show_bug.cgi?id=240031

        Reviewed by Mark Lam.

        * WebAuthnProcess/WebAuthnProcess.cpp:
        (WebKit::WebAuthnProcess::initializeWebAuthnProcess):

2022-05-03  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r293743.
        https://bugs.webkit.org/show_bug.cgi?id=240042

        Introduced debug assert

        Reverted changeset:

        "Add logging related to Launch Services database"
        https://bugs.webkit.org/show_bug.cgi?id=240032
        https://commits.webkit.org/r293743

2022-05-03  Per Arne Vollan  <pvollan@apple.com>

        Add logging related to Launch Services database
        https://bugs.webkit.org/show_bug.cgi?id=240032

        Reviewed by Geoffrey Garen.

        We have reports indicating that it can sometime take unexpectedly long time for the Network process to provide
        the Launch Services database to the WebContent and GPU process. Add some logging to help diagnose the issue.
        There are also some related selector response checks that can be removed now.

        * NetworkProcess/cocoa/LaunchServicesDatabaseObserver.mm:
        (WebKit::LaunchServicesDatabaseObserver::LaunchServicesDatabaseObserver):
        (WebKit::LaunchServicesDatabaseObserver::startObserving):
        (WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver):
        (WebKit::databaseContext): Deleted.
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::NetworkProcessProxy):
        (WebKit::NetworkProcessProxy::didFinishLaunching):
        * UIProcess/Network/NetworkProcessProxyCocoa.mm:
        (WebKit::NetworkProcessProxy::sendXPCEndpointToProcess):
        * WebProcess/cocoa/LaunchServicesDatabaseManager.mm:
        (WebKit::LaunchServicesDatabaseManager::handleEvent):

2022-05-03  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Only block IOKit access if all GPUP features are enabled
        https://bugs.webkit.org/show_bug.cgi?id=240010

        Reviewed by Tim Horton.

        Only block IOKit access in the WebContent process' sandbox on iOS if all GPUP features are enabled.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::m_appHighlightsVisible):

2022-05-03  Per Arne Vollan  <pvollan@apple.com>

        [iOS][GPUP] Remove Mach sandbox extensions for non browser clients
        https://bugs.webkit.org/show_bug.cgi?id=240008

        Reviewed by Geoffrey Garen.

        Remove Mach sandbox extensions for clients that are not browsers in the GPU process on iOS. The same set of extensions
        has recently been removed from the WebContent process. We also block these in the GPU process' sandbox, so there should
        be no change in behavior.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::initializeGPUProcess):
        * GPUProcess/GPUProcessCreationParameters.cpp:
        (WebKit::GPUProcessCreationParameters::encode const):
        (WebKit::GPUProcessCreationParameters::decode):
        * GPUProcess/GPUProcessCreationParameters.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::GPUProcessProxy):
        (WebKit::nonBrowserServices): Deleted.

2022-05-03  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Remove obsolete message filter
        https://bugs.webkit.org/show_bug.cgi?id=240012

        Reviewed by Geoffrey Garen.

        Remove obsolete message filter in the WebContent process on iOS. This filtering is now enabled by the
        GPU restricted entitlement we have added for the WebContent process.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-05-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] The "Copy Cropped Image" context menu action should be gated on cropped image results
        https://bugs.webkit.org/show_bug.cgi?id=240013
        rdar://88941787

        Reviewed by Tim Horton.

        Only show this item in the context menu when long pressing in the case where `requestImageAnalysisMarkup`
        computes a non-null result for the given image bitmap. This gating logic runs alongside existing gating logic
        for both the visual search item ("Look Up") and "Show Text" actions. See below for more details.

        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _setUpImageAnalysis]):
        (-[WKContentView _tearDownImageAnalysis]):

        Introduce a `_croppedImageResult` ivar to cache the CGImage result after running image analysis over the image
        corresponding to the element for which we're showing the context menu. This is reset in the same lifecycle as
        the extant `_hasVisualSearchResults` and `_hasSelectableTextInImage` flags which are used for the same purpose.

        (-[WKContentView imageAnalysisGestureDidBegin:]):
        (-[WKContentView _completeImageAnalysisRequestForContextMenu:requestIdentifier:hasTextResults:]):

        This is the codepath that currently prevents us from showing the context menu until we know whether or not there
        are relevant visual search results, such that we can conditionally show the "Look Up" context menu item. Adjust
        this so that it calls `-_invokeAllActionsToPerformAfterPendingImageAnalysis:` only after we've also determined
        whether or not there is a non-null cropped image result, so that we can also conditionally show the "Copy
        Cropped Image" item.

        To achieve this, we move the call to `-_invokeAllActionsToPerformAfterPendingImageAnalysis:` into a
        `WTF::CallbackAggregator`, and ref/deref the aggregator when invoking both of the async image analysis
        operations. When the callback aggregator is destroyed (i.e., after both async image analysis operations are
        complete), we proceed with showing the context menu.

        (-[WKContentView imageAnalysisGestureDidTimeOut:]):

        Implement similar logic as above, but for the scenario where we show the context menu after the user continues
        to long press after selecting text inside of an image.

        (-[WKContentView actionSheetAssistantShouldIncludeCopyCroppedImageAction:]):

        Only show the item if `_croppedImageResult` is non-null.

        (-[WKContentView actionSheetAssistant:copyCroppedImage:sourceMIMEType:]):

        Instead of running image analysis and writing the resulting image to the clipboard, simply transcode the cached
        image in `_croppedImageResult`.

2022-05-03  Philippe Normand  <pnormand@igalia.com> and Yury Semikhatsky <yurys@chromium.org>

        [WK2] Add API to allow embedder to set a timezone override
        https://bugs.webkit.org/show_bug.cgi?id=213884

        Reviewed by Yusuke Suzuki.

        This patch adds:

        - new Cocoa API
        - new Glib API (targetting both WPE and GTK ports)
        - new C API (for the win port)

        that allows the embedder to set a timezone override for the underlying PageConfiguration.
        Since this API is not exposed in glib ports, a new contruct-time-only property was added to
        the WebKitWebContext API. It would also allow fine-grained control over multiple pages, for
        instance it's not possible currently to have two pages in different timezones.

        No new layout tests, this change is covered by new API tests.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/API/APIProcessPoolConfiguration.cpp:
        (API::ProcessPoolConfiguration::copy):
        * UIProcess/API/APIProcessPoolConfiguration.h:
        * UIProcess/API/C/WKContextConfigurationRef.cpp:
        (WKContextConfigurationCopyTimeZoneOverride):
        (WKContextConfigurationSetTimeZoneOverride):
        * UIProcess/API/C/WKContextConfigurationRef.h:
        * UIProcess/API/Cocoa/_WKProcessPoolConfiguration.h:
        * UIProcess/API/Cocoa/_WKProcessPoolConfiguration.mm:
        (-[_WKProcessPoolConfiguration timeZoneOverride]):
        (-[_WKProcessPoolConfiguration setTimeZoneOverride:]):
        * UIProcess/API/glib/WebKitWebContext.cpp:
        (webkitWebContextGetProperty):
        (webkitWebContextSetProperty):
        (webkitWebContextConstructed):
        (webkit_web_context_class_init):
        (webkit_web_context_set_time_zone_override):
        (webkit_web_context_get_time_zone_override):
        * UIProcess/API/gtk/WebKitWebContext.h:
        * UIProcess/API/wpe/WebKitWebContext.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess): Apply timezone override if any on process start.

2022-05-03  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC stream connection sends should fail immediately when connection closes
        https://bugs.webkit.org/show_bug.cgi?id=238253

        Reviewed by Simon Fraser.

        Send the StreamClientConnection client wait semaphore from
        StreamServerConnection. This way the client will fail the wait
        when the server crashes.

        Test: ipc/stream-sync-crash-no-timeout.html

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::startListeningForIPC):
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::workQueueInitialize):
        * Platform/IPC/StreamClientConnection.cpp:
        (IPC::StreamClientConnection::setSemaphores):
        (IPC::StreamClientConnection::wakeUpServer):
        * Platform/IPC/StreamClientConnection.h:
        (IPC::StreamClientConnection::tryAcquire):
        (IPC::StreamClientConnection::tryAcquireAll):
        * Platform/IPC/StreamConnectionBuffer.cpp:
        (IPC::StreamConnectionBuffer::StreamConnectionBuffer):
        (IPC::StreamConnectionBuffer::operator=):
        (IPC::StreamConnectionBuffer::encode const):
        (IPC::StreamConnectionBuffer::decode):
        * Platform/IPC/StreamConnectionBuffer.h:
        (IPC::StreamConnectionBuffer::dataSize const):
        * Platform/IPC/StreamServerConnection.cpp:
        (IPC::StreamServerConnection::release):
        (IPC::StreamServerConnection::releaseAll):
        * Platform/IPC/StreamServerConnection.h:
        * Shared/IPCStreamTester.cpp:
        (WebKit::IPCStreamTester::initialize):
        (WebKit::IPCStreamTester::syncCrashOnZero):
        * Shared/IPCStreamTester.h:
        * Shared/IPCStreamTester.messages.in:
        * Shared/IPCStreamTesterProxy.h:
        * Shared/IPCStreamTesterProxy.messages.in:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::wasCreated):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.messages.in:
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::streamConnection):
        (WebKit::RemoteRenderingBackendProxy::didInitialize):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.messages.in:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.cpp:
        (WebKit::RemoteGPUProxy::wasCreated):
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.messages.in:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::setSemaphores):
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::sendIPCStreamTesterSyncCrashOnZero):

2022-05-02  Tim Horton  <timothy_horton@apple.com>

        REGRESSION (r292351): Processes no longer get the right jetsam priority on iOS
        https://bugs.webkit.org/show_bug.cgi?id=239992
        <rdar://problem/92644672>

        Reviewed by Chris Dumez.

        * FeatureFlags/WebKit.plist: Added.
        * WebKit.xcodeproj/project.pbxproj:
        Temporarily reinstate `RB_full_manage_WK_jetsam`, since it is being
        read by a different project.

2022-05-02  Gabriel Nava Marino  <gnavamarino@apple.com>

        Crash in WebKit::ModelElementController::modelElementCreateRemotePreview
        https://bugs.webkit.org/show_bug.cgi?id=239985

        Reviewed by Dean Jackson.

        Add a check before using m_modelElementController, as it's not guaranteed
        to be initialized in the constructor, and can be invalidated in WebPageProxy::resetState.

        Test: fast/html/model-element-controller-crash.html

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::modelElementGetCamera):
        (WebKit::WebPageProxy::modelElementSetCamera):
        (WebKit::WebPageProxy::modelElementIsPlayingAnimation):
        (WebKit::WebPageProxy::modelElementSetAnimationIsPlaying):
        (WebKit::WebPageProxy::modelElementIsLoopingAnimation):
        (WebKit::WebPageProxy::modelElementSetIsLoopingAnimation):
        (WebKit::WebPageProxy::modelElementAnimationDuration):
        (WebKit::WebPageProxy::modelElementAnimationCurrentTime):
        (WebKit::WebPageProxy::modelElementSetAnimationCurrentTime):
        (WebKit::WebPageProxy::modelElementHasAudio):
        (WebKit::WebPageProxy::modelElementIsMuted):
        (WebKit::WebPageProxy::modelElementSetIsMuted):
        (WebKit::WebPageProxy::takeModelElementFullscreen):
        (WebKit::WebPageProxy::modelElementSetInteractionEnabled):
        (WebKit::WebPageProxy::modelElementCreateRemotePreview):
        (WebKit::WebPageProxy::modelElementLoadRemotePreview):
        (WebKit::WebPageProxy::modelElementDestroyRemotePreview):
        (WebKit::WebPageProxy::modelElementSizeDidChange):
        (WebKit::WebPageProxy::handleMouseDownForModelElement):
        (WebKit::WebPageProxy::handleMouseMoveForModelElement):
        (WebKit::WebPageProxy::handleMouseUpForModelElement):
        (WebKit::WebPageProxy::modelInlinePreviewUUIDs):

2022-05-02  Alex Christensen  <achristensen@webkit.org>

        Revert all use of _setPrivacyProxyFailClosedForUnreachableNonMainHosts
        https://bugs.webkit.org/show_bug.cgi?id=239977
        <rdar://92617943>

        Reviewed by John Wilander.

        Due to what is likely confusion about internal integration processes,
        the powers that be have decided that the best course of action for now
        is to restore the status quo and accept any consequences that may entail.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-05-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] The "Markup Image" services menu item should be gated on image analysis results
        https://bugs.webkit.org/show_bug.cgi?id=239933
        rdar://92348202

        Reviewed by Kate Cheney.

        Adjust some macOS-specific logic for appending the "Markup Image" menu item in the services menu, such that we
        only add this new item in the case where the relevant image analysis APIs come back with a valid cropped image
        result. See below for more details.

        Test: ImageAnalysisTests.MarkupImageItemInServicesMenu

        * UIProcess/WebContextMenuProxy.h:
        (WebKit::WebContextMenuProxy::croppedImageResult const):

        Move `m_croppedImageForContextMenu` into `WebContextMenuProxyMac` as `m_croppedImageResult`, so that it can be
        easily used for both the new "Copy Cropped Image" and "Markup Image" items. This also allows us to simplify some
        logic for resetting this cached image result since the whole `m_activeContextMenu` is always destroyed upon
        presenting a context menu, so there's no need to separately clear out `m_croppedImageResult`.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::close):
        (WebKit::WebPageProxy::showContextMenu):
        * UIProcess/WebPageProxy.h:
        * UIProcess/mac/WebContextMenuProxyMac.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):
        (WebKit::WebContextMenuProxyMac::appendMarkupItemToControlledImageMenuIfNeeded):

        Pull this logic out into a separate helper method, and change it so that:
        - We run the image analysis prior to creating and adding the item.
        - Only add the item if the image analysis returned a non-null CGImageRef.
        - Store the CGImageRef on `m_croppedImageResult`, for use if the menu item is invoked.

        (WebKit::WebContextMenuProxyMac::applyMarkupToControlledImage):
        (WebKit::WebContextMenuProxyMac::getContextMenuFromItems):
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::handleContextMenuCopyCroppedImage):
        (WebKit::WebPageProxy::setCroppedImageForContextMenu): Deleted.

2022-05-02  Youenn Fablet  <youenn@apple.com>

        Cancel response stream if load is being cancelled by the web page
        https://bugs.webkit.org/show_bug.cgi?id=239968

        Reviewed by Chris Dumez.

        Use the cancel callback to pipe the order to cancel the stream.

        * WebProcess/Storage/WebServiceWorkerFetchTaskClient.cpp:
        (WebKit::WebServiceWorkerFetchTaskClient::cancel):
        (WebKit::WebServiceWorkerFetchTaskClient::setCancelledCallback):
        * WebProcess/Storage/WebServiceWorkerFetchTaskClient.h:

2022-05-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for the "Markup Image" action when right clicking an image in editable content
        https://bugs.webkit.org/show_bug.cgi?id=239948
        rdar://92064672

        Reviewed by Tim Horton.

        Insert a "Markup Image" menu action when right clicking an editable image element on iPad via trackpad, but only
        when the image has relevant image analysis markup results. See below for more details.

        Test: ImageAnalysisTests.MarkupImageUsingContextMenu

        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView prepareSelectionForContextMenuWithLocationInView:completionHandler:]):

        In the case where a single image is selected in editable content, make this method additionally wait until we've
        finished analyzing the selected image, such that the subsequent call to `-buildMenuForWebViewWithBuilder:` which
        populates items in the right click context menu will include the "Markup Image" item if there are relevant
        results.

        (-[WKContentView buildMenuForWebViewWithBuilder:]):

        Also move the location of this item to before the Format (B/I/U) menu items in both the callout bar and the
        editing context menu.

        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::prepareSelectionForContextMenuWithLocationInView):

        In the case where an image element is clicked, just select the image element instead of trying to detect a
        nearby word or link. We also immediately send a full editor state update here, such that the editor state's
        `selectedEditableImage` will be up to date when the completion handler in the UI process is invoked.

2022-04-29  Michael Catanzaro  <mcatanzaro@redhat.com>

        [GLib] Make WebKitSettings XSS auditor functions no-op
        https://bugs.webkit.org/show_bug.cgi?id=239651
        <rdar://problem/92304443>

        Reviewed by Adrian Perez de Castro.

        Fix -Wdeprecated-declarations warnings introduced by the previous fix.

        * UIProcess/API/glib/WebKitSettings.cpp:
        (webKitSettingsSetProperty):
        (webKitSettingsGetProperty):

2022-05-01  Said Abou-Hallawa  <said@apple.com>

        REGRESSION(r282117): RemoteRenderingBackend::willDestroyImageBuffer() can crash if the RemoteRenderingBackend has already been destroyed
        https://bugs.webkit.org/show_bug.cgi?id=239107
        rdar://91608298

        Reviewed by Darin Adler.

        After r282117, the assumption that RemoteRenderingBackend will outlive
        all its RemoteImageBuffers became wrong. The RemoteRenderingBackend can
        get destroyed under GPUConnectionToWebProcess::didClose() before the
        callOnMainThread() of the ThreadSafeRefcounted image buffers have run.

        This solution is to make the ImageBufferIOSurfaceBackend be responsible 
        of returning its IOSurface to the IOSurfacePool. So no need to call 
        willDestroyImageBuffer() from the RemoteImageBuffer destructor.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteImageBuffer.h:
        (WebKit::RemoteImageBuffer::RemoteImageBuffer):
        (WebKit::RemoteImageBuffer::m_renderingResourcesRequest):
        (WebKit::RemoteImageBuffer::~RemoteImageBuffer):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::willDestroyImageBuffer): Deleted.
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        (WebKit::RemoteRenderingBackend::ioSurfacePool const):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::Buffer::discard):
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.cpp:
        (WebKit::ImageBufferShareableMappedIOSurfaceBackend::create):

2022-04-29  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r293481.
        https://bugs.webkit.org/show_bug.cgi?id=239908

        Introduced perf regression

        Reverted changeset:

        "Adjust what we consider to be private relayed"
        https://bugs.webkit.org/show_bug.cgi?id=239784
        https://commits.webkit.org/r293481

2022-04-29  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r293591.
        https://bugs.webkit.org/show_bug.cgi?id=239907

        Did not resolve perf issue

        Reverted changeset:

        "Set top origin of CORS preflight requests"
        https://bugs.webkit.org/show_bug.cgi?id=239869
        https://commits.webkit.org/r293591

2022-04-29  Kimmo Kinnunen  <kkinnunen@apple.com>

        Fix ASAN build after "IPC testing API should have the ability to test IPC::Connection send and receive through IPC::Connection"
        https://bugs.webkit.org/show_bug.cgi?id=239894

        Unreviewed build fix.
        Add a return for function which does ASSERT_NOT_REACHED().

        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCConnection::didReceiveSyncMessage):

2022-04-29  Diego Pino Garcia  <dpino@igalia.com>

        [macOS] Unreviewed, non-unified build fixes
        https://bugs.webkit.org/show_bug.cgi?id=239889

        * UIProcess/API/Cocoa/_WKDataTask.h:
        * UIProcess/API/Cocoa/_WKDataTask.mm:
        * UIProcess/API/Cocoa/_WKInspectorConfigurationInternal.h:
        * UIProcess/Cocoa/ModalContainerControlClassifier.h:
        * UIProcess/Cocoa/ModalContainerControlClassifier.mm:

2022-04-28  Brent Fulgham  <bfulgham@apple.com>

        Remove the AVFoundationNSURLSessionEnabled preference
        https://bugs.webkit.org/show_bug.cgi?id=239632

        Reviewed by Eric Carlson.

        All supported operating systems have supported AVFoundationNSURLSession
        for several years. Since we expect AVFoundation to always use WebKit
        for network loading (and indeed, expect improper behavior if we do not)
        we should remove this toggle to simplify the code and reduce the chance
        for users to mistakenly activate it.

        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetAVFoundationNSURLSessionEnabled):
        (WKPreferencesGetAVFoundationNSURLSessionEnabled):
        * UIProcess/API/C/WKPreferencesRef.h:

2022-04-28  Yusuke Suzuki  <ysuzuki@apple.com>

        Support C files in Unified Builds
        https://bugs.webkit.org/show_bug.cgi?id=239873

        Reviewed by Mark Lam.

        * Scripts/generate-unified-sources.sh:

2022-04-28  Per Arne Vollan  <pvollan@apple.com>

        Dynamically switch message filter
        https://bugs.webkit.org/show_bug.cgi?id=238577
        <rdar://69263324>

        Reviewed by Geoffrey Garen.

        Use a sandbox state variable to dynamically switch the bootstrap filter in the WebContent process' sandbox.
        During launch of the WebContent process, we use a more permissive bootstrap filter to allow creating Mach
        connections in this time frame. After the WebContent process has launched, we switch to a blocking filter,
        which will essentially block access to launchd. The bootstrap filter is being switched back to the more
        permissive version when we create new Mach sandbox extensions for the WebContent process. This is done on
        a case by case basis, by adding a new parameter to control this behavior when creating Mach sandbox
        extensions. While launching the WebContent process there is usually no need to specify that the permissive
        bootstrap filter is needed, since we are already using the permissive filter during launch time. However,
        for some Mach extensions that will only result in a new XPC connection in the WebContent process after launch,
        we need to specify that the permissive filter is requried. Otherwise, creating the new XPC connection after
        launch will fail. For Mach sandbox extensions created after launch of the WebContent process, we always need
        to use the permissive bootstrap filter to be able to create the XPC connection. Enabling the permissive
        bootstrap filter requires the audit token to be available, which means we need to pass the audit token when
        creating the new Mach sandbox extensions. This patch also waits until after the Web page has been created to
        set the sandbox variable which indicates that the WebContent process has launched. Without this last change,
        the bootstrap filter would have needed switching when creating the Web page, since creating the WebPage will
        consume and revoke some mach extensions.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Scripts/process-entitlements.sh:
        * Shared/Cocoa/SandboxExtensionCocoa.mm:
        (WebKit::SandboxExtension::createHandleForMachLookup):
        (WebKit::SandboxExtension::createHandlesForMachLookup):
        * Shared/Sandbox/SandboxStateVariables.h: Added.
        * Shared/SandboxExtension.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addPlatformLoadParameters):
        (WebKit::WebPageProxy::grantAccessToAssetServices):
        (WebKit::WebPageProxy::switchFromStaticFontRegistryToUserFontRegistry):
        (WebKit::WebPageProxy::fontdMachExtensionHandle):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::registerNotificationObservers):
        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded):
        (WebKit::WebProcessProxy::messageSourceIsValidWebContentProcess):
        (WebKit::WebProcessProxy::auditToken const):
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSourceManager.cpp:
        (WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::addSource):
        * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
        (WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest):
        * UIProcess/UserMediaProcessManager.cpp:
        (WebKit::UserMediaProcessManager::willCreateMediaStream):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::processNextQueuedMouseEvent):
        (WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon):
        (WebKit::WebPageProxy::creationParameters):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebProcessProxy.h:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::create):
        * WebProcess/com.apple.WebProcess.sb.in:

2022-04-28  Alex Christensen  <achristensen@webkit.org>

        Set top origin of CORS preflight requests
        https://bugs.webkit.org/show_bug.cgi?id=239869
        <rdar://92458995>

        Reviewed by Geoffrey Garen.

        Since r293481 we establish two TCP connections to each domain that needs a CORS preflight request.
        This is because we were calling _setPrivacyProxyFailClosedForUnreachableNonMainHosts for the CORS
        preflight request but not the actual request after a successful CORS preflight check.  They were
        different because we weren't setting parameters.topOrigin for the CORS preflight request.  Now we
        are and the two requests can share a TCP connection once more.

        * NetworkProcess/NetworkCORSPreflightChecker.cpp:
        (WebKit::NetworkCORSPreflightChecker::startPreflight):

2022-04-28  Per Arne Vollan  <pvollan@apple.com>

        Fix build error after r293509
        https://bugs.webkit.org/show_bug.cgi?id=239866
        <rdar://92471416>

        Unreviewed build fix.

        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::AuxiliaryProcess::isSystemWebKit):

2022-04-28  Simon Fraser  <simon.fraser@apple.com>

        [ macOS Debug wk2 ] Thirteen imported/w3c/web-platform-tests/html/semantics/embedded-content/media-elements/ are a flaky crash (ASSERTION FAILED: willBeComposited == needsToBeComposited(layer, queryData))
        https://bugs.webkit.org/show_bug.cgi?id=239770
        <rdar://92334616>

        Reviewed by Jer Noble.

        With media in the GPU Process, the contract that changes in the answer to
        HTMLMediaElement::supportsAcceleratedRendering() must be associated with a call to
        contentChanged(VideoChanged) was broken: MediaPlayerPrivateRemote's
        m_configuration.supportsAcceleratedRendering changed in response to IPC from the GPU process,
        but nothing triggered contentChanged(VideoChanged).

        Fix by calling renderingModeChanged().

        * GPUProcess/media/cocoa/RemoteMediaPlayerProxyCocoa.mm:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::acceleratedRenderingStateChanged):

2022-04-28  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Make WebImage be backed by ImageBuffer
        https://bugs.webkit.org/show_bug.cgi?id=239527
        rdar://91113628

        Reviewed by Tim Horton.

        -- Allow ImageBufferBackendHandleSharing and ImageBufferShareableBitmapBackend
           to compile always.

        -- Make WebImage hold an ImageBuffer instead of having it hold a ShareableBitamp.

        -- Pass the ChromeClient to WebImage::create() so it can call its
           createImageBuffer() which creates RemoteImageBuffer for GPUProcess
           drawing.

        -- Remove the ShareableBitamp local mode where is backed by a local memory
           buffer. This mode was added to make WebImage can be non shareable even 
           it was backed by ShareableBitamp. So ShareableBitmap::createShareable()
           should be renamed ShareableBitmap::create().

        -- Replace WebImage::bitmap()::makeCGImageCopy() with 
           WebImage::copyNativeImage(WebCore::CopyBackingStore)

        -- Replace WebImage::bitmap()::makeCGImageCopy() with
           WebImage::copyNativeImage(WebCore::DontCopyBackingStore)

        -- Replace WebImage::bitmap()::createGraphicsContext() with
           WebImage::context()

        -- Allow encoding and decoding ImageBufferShareableBitmapBackend by allowing 
           ImageBufferBackend::Parameters to be encoded and decoded.

        -- Make ImageBuffer be able to createCairoSurface(). The pointer to this
           surface will be leaked. And to maintain a correct life cycle for the 
           surface data which is owned by the backend, the ImageBuffer itself
           will be ref() when the surface RefPtr is created and will be deref()
           when the surface raw pointer is destroyed.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::getShareableBitmapForImageBufferWithQualifiedIdentifier):
        (WebKit::RemoteRenderingBackend::getFilteredImageForImageBuffer):
        * GPUProcess/graphics/wc/WCScene.cpp:
        (WebKit::WCScene::update):
        * GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp:
        (WebKit::RemoteMediaPlayerManagerProxy::bitmapImageForCurrentTime):
        * Shared/API/c/WKImage.cpp:
        (WKImageCreate):
        * Shared/API/c/cairo/WKImageCairo.cpp:
        (WKImageCreateCairoSurface):
        (WKImageCreateFromCairoSurface):
        * Shared/API/c/cg/WKImageCG.cpp:
        (WKImageCreateCGImage):
        (WKImageCreateFromCGImage):
        * Shared/ContextMenuContextData.cpp:
        (WebKit::ContextMenuContextData::setImage):
        * Shared/RemoteLayerTree/CGDisplayListImageBufferBackend.cpp:
        (WebKit::CGDisplayListImageBufferBackend::createBackendHandle const):
        * Shared/RemoteLayerTree/CGDisplayListImageBufferBackend.h:
        * Shared/ShareableBitmap.cpp:
        (WebKit::ShareableBitmap::create):
        (WebKit::ShareableBitmap::createHandle const):
        (WebKit::ShareableBitmap::ShareableBitmap):
        (WebKit::ShareableBitmap::data const):
        (WebKit::ShareableBitmap::createShareable): Deleted.
        (WebKit::ShareableBitmap::~ShareableBitmap): Deleted.
        * Shared/ShareableBitmap.h:
        (WebKit::ShareableBitmap::bytesPerRow const):
        (WebKit::ShareableBitmap::isBackedBySharedMemory const): Deleted.
        * Shared/UserData.cpp:
        (WebKit::UserData::encode):
        (WebKit::UserData::decode):
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::encodeImage):
        * Shared/WebCoreArgumentCoders.h:
        * Shared/WebImage.cpp:
        (WebKit::WebImage::create):
        (WebKit::WebImage::WebImage):
        (WebKit::WebImage::size const):
        (WebKit::WebImage::parameters const):
        (WebKit::WebImage::context const):
        (WebKit::WebImage::copyNativeImage const):
        (WebKit::WebImage::bitmap const):
        (WebKit::WebImage::createCairoSurface):
        (WebKit::WebImage::createHandle const):
        (WebKit::WebImage::~WebImage): Deleted.
        * Shared/WebImage.h:
        (WebKit::WebImage::bitmap): Deleted.
        (WebKit::WebImage::bitmap const): Deleted.
        * Shared/cairo/ShareableBitmapCairo.cpp:
        (WebKit::ShareableBitmap::createPersistentCairoSurface):
        * Shared/gtk/ArgumentCodersGtk.cpp:
        (IPC::encodeImage):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webKitWebViewDidReceiveSnapshot):
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::convertPlatformImageToBitmap):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didGetImageForFindMatch):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/mac/WKTextFinderClient.mm:
        (-[WKTextFinderClient didGetImageForMatchResult:]):
        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::takeScreenshot):
        * WebProcess/GPU/graphics/ImageBufferBackendHandle.h:
        * WebProcess/GPU/graphics/ImageBufferBackendHandleSharing.h:
        (WebKit::ImageBufferBackendHandleSharing::bitmap const):
        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.cpp:
        (WebKit::ImageBufferShareableBitmapBackend::create):
        (WebKit::ImageBufferShareableBitmapBackend::ImageBufferShareableBitmapBackend):
        (WebKit::ImageBufferShareableBitmapBackend::createBackendHandle const):
        (WebKit::ImageBufferShareableBitmapBackend::createCairoSurface):
        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.h:
        * WebProcess/GPU/graphics/RemoteResourceCacheProxy.cpp:
        (WebKit::createShareableBitmapFromNativeImage):
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.cpp:
        (WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle const):
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.h:
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.cpp:
        (WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle const):
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.h:
        * WebProcess/InjectedBundle/API/Cocoa/WKWebProcessPlugInNodeHandle.mm:
        (-[WKWebProcessPlugInNodeHandle renderedImageWithOptions:width:]):
        * WebProcess/InjectedBundle/DOM/InjectedBundleNodeHandle.cpp:
        (WebKit::imageForRect):
        * WebProcess/InjectedBundle/DOM/InjectedBundleRangeHandle.cpp:
        (WebKit::InjectedBundleRangeHandle::renderedImage):
        * WebProcess/InjectedBundle/InjectedBundleHitTestResult.cpp:
        (WebKit::InjectedBundleHitTestResult::image const):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::snapshot):
        * WebProcess/WebCoreSupport/ShareableBitmapUtilities.cpp:
        (WebKit::createShareableBitmap):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createImageBuffer const):
        * WebProcess/WebCoreSupport/gtk/WebDragClientGtk.cpp:
        (WebKit::convertCairoSurfaceToShareableBitmap):
        * WebProcess/WebCoreSupport/mac/WebDragClientMac.mm:
        (WebKit::convertDragImageToBitmap):
        * WebProcess/WebCoreSupport/win/WebPopupMenuWin.cpp:
        (WebKit::WebPopupMenu::setUpPlatformData):
        * WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.cpp:
        (WebKit::DrawingAreaCoordinatedGraphics::display):
        * WebProcess/WebPage/FindController.cpp:
        (WebKit::FindController::getImageForFindMatch):
        * WebProcess/WebPage/WebFrame.cpp:
        (WebKit::WebFrame::createSelectionSnapshot const):
        * WebProcess/WebPage/WebFrame.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::takeSnapshot):
        (WebKit::snapshotColorSpace):
        (WebKit::WebPage::snapshotAtSize):
        (WebKit::WebPage::snapshotNode):
        (WebKit::WebPage::drawRectToImage):
        (WebKit::snapshotOptionsToBitmapConfiguration): Deleted.
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::shareableBitmapSnapshotForNode):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::setTopOverhangImage):
        (WebKit::WebPage::setBottomOverhangImage):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::shouldUseRemoteRenderingFor):

2022-04-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC testing API should have the ability to test IPC::Connection send and receive through IPC::Connection
        https://bugs.webkit.org/show_bug.cgi?id=239495

        Reviewed by Darin Adler.

        Add the testing interfaces to be able to send IPC::Connection instances
        to other processes.
        Add the testing interfaces to be able to send messages through arbitrary
        IPC::Connection instances.

        Test: ipc/create-connection-and-send-async.html

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * Platform/IPC/Connection.h:
        (IPC::Connection::waitForMessageForTesting):
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/IPCConnectionTester.cpp: Added.
        (WebKit::asIdentifier):
        (WebKit::IPCConnectionTester::create):
        (WebKit::IPCConnectionTester::IPCConnectionTester):
        (WebKit::IPCConnectionTester::initialize):
        (WebKit::IPCConnectionTester::stopListeningForIPC):
        (WebKit::IPCConnectionTester::sendAsyncMessages):
        (WebKit::IPCConnectionTester::didClose):
        (WebKit::IPCConnectionTester::didReceiveInvalidMessage):
        (WebKit::IPCConnectionTester::asyncMessage):
        (WebKit::IPCConnectionTester::syncMessage):
        * Shared/IPCConnectionTester.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCConnectionTester.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCConnectionTesterIdentifier.h: Added.
        * Shared/IPCTester.cpp:
        (WebKit::IPCTester::createConnectionTester):
        (WebKit::IPCTester::createConnectionTesterAndSendAsyncMessages):
        (WebKit::IPCTester::releaseConnectionTester):
        * Shared/IPCTester.h:
        * Shared/IPCTester.messages.in:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCAttachment::create):
        (WebKit::IPCTestingAPI::JSIPCAttachment::encode const):
        (WebKit::IPCTestingAPI::JSIPCAttachment::JSIPCAttachment):
        (WebKit::IPCTestingAPI::JSIPCConnection::create):
        (WebKit::IPCTestingAPI::JSIPCConnection::JSIPCConnection):
        (WebKit::IPCTestingAPI::createTypeError):
        (WebKit::IPCTestingAPI::convertToUint64):
        (WebKit::IPCTestingAPI::sendMessageWithJSArguments):
        (WebKit::IPCTestingAPI::extractSyncIPCMessageInfo):
        (WebKit::IPCTestingAPI::sendSyncMessageWithJSArguments):
        (WebKit::IPCTestingAPI::waitForMessageWithJSArguments):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::createJSWrapper):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::wrapperClass):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::unwrap):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::toWrapped):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::initialize):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::finalize):
        (WebKit::IPCTestingAPI::JSIPCSemaphore::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCAttachment::createJSWrapper):
        (WebKit::IPCTestingAPI::JSIPCAttachment::wrapperClass):
        (WebKit::IPCTestingAPI::JSIPCAttachment::unwrap):
        (WebKit::IPCTestingAPI::JSIPCAttachment::toWrapped):
        (WebKit::IPCTestingAPI::JSIPCAttachment::initialize):
        (WebKit::IPCTestingAPI::JSIPCAttachment::finalize):
        (WebKit::IPCTestingAPI::JSIPCAttachment::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCConnection::createJSWrapper):
        (WebKit::IPCTestingAPI::JSIPCConnection::wrapperClass):
        (WebKit::IPCTestingAPI::JSIPCConnection::unwrap):
        (WebKit::IPCTestingAPI::JSIPCConnection::toWrapped):
        (WebKit::IPCTestingAPI::JSIPCConnection::initialize):
        (WebKit::IPCTestingAPI::JSIPCConnection::finalize):
        (WebKit::IPCTestingAPI::JSIPCConnection::didReceiveMessage):
        (WebKit::IPCTestingAPI::JSIPCConnection::didReceiveSyncMessage):
        (WebKit::IPCTestingAPI::JSIPCConnection::didClose):
        (WebKit::IPCTestingAPI::JSIPCConnection::didReceiveInvalidMessage):
        (WebKit::IPCTestingAPI::JSIPCConnection::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCConnection::open):
        (WebKit::IPCTestingAPI::JSIPCConnection::invalidate):
        (WebKit::IPCTestingAPI::JSIPCConnection::sendMessage):
        (WebKit::IPCTestingAPI::JSIPCConnection::sendSyncMessage):
        (WebKit::IPCTestingAPI::JSIPCConnection::waitForMessage):
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::prepareToSendOutOfStreamMessage):
        (WebKit::IPCTestingAPI::JSIPC::staticFunctions):
        (WebKit::IPCTestingAPI::encodeFrameInfoData):
        (WebKit::IPCTestingAPI::encodeAttachment):
        (WebKit::IPCTestingAPI::VectorEncodeHelper::encode const):
        (WebKit::IPCTestingAPI::encodeArrayArgument):
        (WebKit::IPCTestingAPI::encodeArgument):
        (WebKit::IPCTestingAPI::JSIPC::sendMessage):
        (WebKit::IPCTestingAPI::JSIPC::waitForMessage):
        (WebKit::IPCTestingAPI::JSIPC::sendSyncMessage):
        (WebKit::IPCTestingAPI::JSIPC::createConnectionPair):

2022-04-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add a mechanism to override desktop-class browsing state in multitasking mode
        https://bugs.webkit.org/show_bug.cgi?id=239801
        rdar://89786146

        Reviewed by Tim Horton.

        Keep the recommended desktop-class browsing state stable as the width of the web view changes, while
        multitasking mode is active.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/PageClient.h:
        (WebKit::PageClient::isInMultitaskingMode const):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/PageClientImplIOS.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::isInMultitaskingMode const):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::isDesktopClassBrowsingRecommended const):

        Turn the static helper function `desktopClassBrowsingRecommended` into a private method instead, so that we
        don't need to pass in all the information we need from the WebPageProxy when determining whether we should
        default to desktop-class browsing. This also allows us to make a slight adjustment here to avoid recommending
        mobile content when the window is narrower than 375 points in multitasking mode.

        (WebKit::WebPageProxy::effectiveContentModeAfterAdjustingPolicies):
        (WebKit::desktopClassBrowsingRecommended): Deleted.

2022-04-27  Simon Fraser  <simon.fraser@apple.com>

        Avoid sending a flush IPC to the GPU process when destroying a RemoteImageBuffer
        https://bugs.webkit.org/show_bug.cgi?id=239799

        Reviewed by Said Abou-Hallawa.

        After r280652, destroying a RemoteImageBufferProxy would always send a flush to the GPU
        process, even if there had be no drawing since the previous flush.

        Fix to only send a flush and wait when necessary.

        Roughly 8% progression on MotionMark Images subtest on iPhone.

        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:
        (WebKit::RemoteImageBufferProxy::waitForDidFlushWithTimeout):

2022-04-27  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Focus changes unexpectedly when scrolling to a found text range
        https://bugs.webkit.org/show_bug.cgi?id=239793
        rdar://90996437

        Reviewed by Wenson Hsieh.

        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::scrollTextRangeToVisible):

        Specify `DoNotSetFocus` in the `TemporarySelectionOption`s to avoid
        unnecessary focus changes when scrolling to a found text range.

        Focus changes can cause the web view to regain first responder status
        while searching for text, which will dismiss the find panel and end
        the search session.

2022-04-27  Per Arne Vollan  <pvollan@apple.com>

        [macOS] The function getpwnam can sometimes fail
        https://bugs.webkit.org/show_bug.cgi?id=239513
        <rdar://89758690>

        Reviewed by Darin Adler.

        The system function getpwnam is caching the results from the first invocation, and will return the cached
        values after the first call. It may happen that opendirectoryd will invalidate the cached values by
        posting notifications. If that happens, getpwnam will then fail, since there are no cached values and
        the WebContent process' sandbox is blocking access to opendirectoryd. This patch addresses this issue
        by observing these notifications in the UI process, and recreating the cached values for getpwnam, by
        calling the function in the WebContent process while holding a temporary sandbox extenstion to
        opendirectoryd.

        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/mac/GPUProcessMac.mm:
        (WebKit::GPUProcess::openDirectoryCacheInvalidated):
        * GPUProcess/mac/com.apple.WebKit.GPUProcess.sb.in:
        * Shared/AuxiliaryProcess.h:
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::getHomeDirectory):
        (WebKit::populateSandboxInitializationParameters):
        (WebKit::AuxiliaryProcess::openDirectoryCacheInvalidated):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::registerNotificationObservers):
        (WebKit::WebProcessPool::unregisterNotificationObservers):
        * UIProcess/WebProcessPool.h:
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::openDirectoryCacheInvalidated):
        * WebProcess/com.apple.WebProcess.sb.in:

2022-04-26  Michael Catanzaro  <mcatanzaro@redhat.com>

        [GLib] Make WebKitSettings XSS auditor functions no-op
        https://bugs.webkit.org/show_bug.cgi?id=239651
        <rdar://problem/92304443>

        Reviewed by Adrian Perez de Castro.

        Let's deprecate these functions.

        Also, do not print warnings because they are called during init by the property setters.

        * UIProcess/API/glib/WebKitSettings.cpp:
        (webkit_settings_get_enable_xss_auditor):
        (webkit_settings_set_enable_xss_auditor):
        * UIProcess/API/gtk/WebKitSettings.h:
        * UIProcess/API/wpe/WebKitSettings.h:

2022-04-27  Youenn Fablet  <youenn@apple.com>

        service worker update should refresh imported scripts in addition to the main script
        https://bugs.webkit.org/show_bug.cgi?id=239657

        Reviewed by Chris Dumez.

        * NetworkProcess/ServiceWorker/ServiceWorkerSoftUpdateLoader.h:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:
        * WebProcess/Storage/WebSWClientConnection.messages.in:

2022-04-27  Youenn Fablet  <youenn@apple.com>

        Add testRunner API to clear memory cache
        https://bugs.webkit.org/show_bug.cgi?id=239804
        rdar://92033309

        Reviewed by Chris Dumez.

        Add necessary WebKit API to implement the testRunner API.
        Make use of new testRunner API in added test.

        Test: http/wpt/fetch/clear-memory-cache.html

        * NetworkProcess/NetworkProcess.cpp:
        * UIProcess/API/C/WKWebsiteDataStoreRef.cpp:
        * UIProcess/API/C/WKWebsiteDataStoreRef.h:
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:

2022-04-27  Youenn Fablet  <youenn@apple.com>

        Shared workers should match service worker registrations
        https://bugs.webkit.org/show_bug.cgi?id=239122

        Reviewed by Chris Dumez.

        * NetworkProcess/NetworkResourceLoader.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        * WebProcess/Storage/WebSharedWorkerContextManagerConnection.cpp:
        * WebProcess/Storage/WebSharedWorkerContextManagerConnection.h:
        * WebProcess/Storage/WebSharedWorkerContextManagerConnection.messages.in:
        * WebProcess/Storage/WebSharedWorkerObjectConnection.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess):

2022-04-26  Simon Fraser  <simon.fraser@apple.com>

        Don't flush the IOSurface CGContext when just setting ownership identity
        https://bugs.webkit.org/show_bug.cgi?id=239800

        Reviewed by Myles C. Maxfield.

        ImageBufferIOSurfaceBackend::surface() has a call to flushContext(), which we don't need
        to do if we're just getting the surface to call setOwnershipIdentity(), so use m_surface
        directly.

        This is a ~18% perf gain on the Leaves MotionMark subtest on iPhone.

        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.cpp:
        (WebKit::ImageBufferShareableMappedIOSurfaceBackend::setOwnershipIdentity):

2022-04-26  Elliott Williams  <emw@apple.com>

        Unreviewed, reverting "[Xcode] Compute PGO profdata paths instead of searching for them at build time"
        https://bugs.webkit.org/show_bug.cgi?id=239681

        * Configurations/BaseTarget.xcconfig:
        * WebKit.xcodeproj/project.pbxproj:

2022-04-26  Alex Christensen  <achristensen@webkit.org>

        Adjust what we consider to be private relayed
        https://bugs.webkit.org/show_bug.cgi?id=239784
        <rdar://92336270>

        Reviewed by Geoffrey Garen.

        If a request is not eligible for private relay, then do not consider it having been private relayed.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):

2022-04-26  Elliott Williams  <emw@apple.com>

        Fix build error: "cp: JavaScriptCore.profdata is not a directory"
        https://bugs.webkit.org/show_bug.cgi?id=239681

        Unreviewed build fix.

        * WebKit.xcodeproj/project.pbxproj:

2022-04-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        Show the option to Markup Image in the callout bar only when appropriate
        https://bugs.webkit.org/show_bug.cgi?id=239779
        rdar://88941823

        Reviewed by Darin Adler.

        Make a minor adjustment to only show this callout bar action in the case where `_imageAnalysisMarkupData` has
        already been computed and cached.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView imageAnalysisMarkupMenu]):

2022-04-26  Manuel Rego Casasnovas  <rego@igalia.com>

        Remove AriaReflectionEnabled runtime flag
        https://bugs.webkit.org/show_bug.cgi?id=239532

        Reviewed by Chris Fleizach.

        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetAriaReflectionEnabled): Deleted.
        (WKPreferencesGetAriaReflectionEnabled): Deleted.
        * UIProcess/API/C/WKPreferencesRefPrivate.h:

2022-04-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION (r293117): Context menu lift animation encompasses the entire web view
        https://bugs.webkit.org/show_bug.cgi?id=239782
        rdar://92342919

        Reviewed by Aditya Keerthi.

        After r293117, we no longer implement the context menu delegate method for vending a targeted preview when
        showing the context menu for a link or image; rename to match the name of the method we implement to match the
        name of the UIKit delegate method.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKContentView contextMenuInteraction:configuration:previewForHighlightingItemWithIdentifier:]): Deleted.

2022-04-22  Elliott Williams  <emw@apple.com>

        [Xcode] Compute PGO profdata paths instead of searching for them at build time
        https://bugs.webkit.org/show_bug.cgi?id=239681

        Reviewed by Alexey Proskuryakov.

        * Configurations/BaseTarget.xcconfig:
        * WebKit.xcodeproj/project.pbxproj:

2022-04-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        Adjust some image transcoding behaviors related to "Copy Cropped Image"
        https://bugs.webkit.org/show_bug.cgi?id=239748
        rdar://92287000

        Reviewed by Kate Cheney.

        Refactor some logic for extracting "cropped images" and "markup images". Currently, we always try to preserve
        the MIME type of the source image data, but this causes various issues, such as images losing alpha or failing
        to transcode altogether. See below for more details.

        Test: ImageAnalysisTests.PerformImageAnalysisMarkupWithWebPImages

        * Platform/cocoa/CocoaImage.h:
        * Platform/cocoa/CocoaImage.mm:
        (WebKit::transcodeWithPreferredMIMEType):

        Drop support for the `fallbackTypeIdentifier` argument, now that nothing depends on it.

        * Platform/cocoa/ImageAnalysisUtilities.h:
        * Platform/cocoa/ImageAnalysisUtilities.mm:
        (WebKit::imageDataForCroppedImageResult):

        Add a new helper method to convert a CGImageRef to raw image data that's appropriate for the given source MIME
        type. If the type belongs one of a short list of supported types, we use it directly; otherwise, fall back to
        "image/png".

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView imageAnalysisMarkupMenu]):
        (-[WKContentView actionSheetAssistant:copyCroppedImage:sourceMIMEType:]):
        * UIProcess/mac/WebContextMenuProxyMac.mm:

        Deploy `imageDataForCroppedImageResult` in place of directly calling `transcodeWithPreferredMIMEType`.

        (WebKit::WebContextMenuProxyMac::applyMarkupToControlledImage):
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::handleContextMenuCopyCroppedImage):

2022-04-26  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Do not pass ASCCredentialRequestTypePlatform... if LocalService unavailable
        https://bugs.webkit.org/show_bug.cgi?id=239746
        rdar://91981865

        Reviewed by Brent Fulgham.

        Passing platform in requestTypes breaks the UI in registerations with the syncing platform
        authenticator off and local service is unavailable. This patch stops passing it in this case.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureRegistrationRequestContext):
        (WebKit::WebAuthenticatorCoordinatorProxy::performRequest):

2022-04-26  Simon Fraser  <simon.fraser@apple.com>

        Fix crashes under RemoteLayerBackingStore::applyBackingStoreToLayer()
        https://bugs.webkit.org/show_bug.cgi?id=239742
        <rdar://91533748>

        Reviewed by Wenson Hsieh.

        It's possible for ensureBackendCreated() to time out, especially when debugging the GPU
        process, in which case RemoteLayerBackingStore can end up with a front buffer with no
        backend, which results in an unset m_bufferHandle in the UI process. So add some logging
        when this happens, and check the m_bufferHandle optional before accessing its value.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::applyBackingStoreToLayer):
        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:

2022-04-26  Kate Cheney  <katherine_cheney@apple.com>

        Remove WebArchiveDebugMode
        https://bugs.webkit.org/show_bug.cgi?id=239738
        <rdar://problem/88406961>

        Reviewed by Tim Horton.

        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetWebArchiveTestingModeEnabled):
        (WKPreferencesGetWebArchiveTestingModeEnabled):
        (WKPreferencesSetWebArchiveDebugModeEnabled):
        (WKPreferencesGetWebArchiveDebugModeEnabled):
        * UIProcess/API/C/WKPreferencesRefPrivate.h:
        * UIProcess/API/Cocoa/WKPreferences.mm:
        (-[WKPreferences _setWebArchiveTestingModeEnabled:]):
        (-[WKPreferences _webArchiveTestingModeEnabled]):
        (-[WKPreferences _setWebArchiveDebugModeEnabled:]):
        (-[WKPreferences _webArchiveDebugModeEnabled]):
        * UIProcess/API/Cocoa/WKPreferencesPrivate.h:

2022-04-26  Simon Fraser  <simon.fraser@apple.com>

        Add object addresses to IPC logging
        https://bugs.webkit.org/show_bug.cgi?id=239754

        Reviewed by Cameron McCormack.

        It's useful if IPC logging shows the receiver address, so you can distinguish different
        receivers.

        * Platform/IPC/HandleMessage.h:
        (IPC::textStreamForLogging):
        (IPC::logMessageImpl):
        (IPC::logMessage):
        (IPC::logReply):
        (IPC::handleMessage):
        (IPC::handleMessageWantsConnection):
        (IPC::handleMessageSynchronous):
        (IPC::handleMessageSynchronousWantsConnection):
        (IPC::handleMessageAsync):
        (IPC::handleMessageAsyncWantsConnection):

2022-04-26  Youenn Fablet  <youenn@apple.com>

        REGRESSION(r288464?):[ iOS15 Release GPUP arm64 ] TestWebKitAPI.GPUProcess.ExitsUnderMemoryPressureGetUserMediaAudioCase is a constant failure
        https://bugs.webkit.org/show_bug.cgi?id=237854
        <rdar://problem/90273222>

        Reviewed by Eric Carlson.

        stopProducingData was called on some ended tracks.
        This would trigger the creation of a new connection in case GPUProcess is gone.
        To prevent this, we now keep a connection reference in RemoteRealtimeMediaSourceProxy.
        When the GPUProcess connection is being closed, we update the connection if the track is to be continued.

        Covered by API test.

        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:

2022-04-25  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add NSCoding support for findInteractionEnabled
        https://bugs.webkit.org/show_bug.cgi?id=239733
        rdar://87850648

        Reviewed by Wenson Hsieh.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView initWithCoder:]):
        (-[WKWebView encodeWithCoder:]):

2022-04-21  Elliott Williams  <emw@apple.com>

        [XCBuild] Refactor WebKit resources to emit output tasks for dependency validation
        https://bugs.webkit.org/show_bug.cgi?id=239556

        Reviewed by Alexey Proskuryakov.

        * WebKit/WebKit.xcodeproj/project.pbxproj:
          * Replace the script phase that calls generate-automation-atom.py with
            a build rule, and process those files as headers.
          * Clean up references and project metadata for deleted files.
          * Use WK_FRAMEWORK_VERSION_PREFIX in script output paths so that the
            realpaths are correct on macOS.

2022-04-25  Brent Fulgham  <bfulgham@apple.com>

        HARDENING: Add MESSAGE_CHECK in some Captive Portal cases
        https://bugs.webkit.org/show_bug.cgi?id=239551
        <rdar://91478748>

        Reviewed by Darin Adler.

        Add MESSAGE_CHECK protections to a set of message handlers for API prohibited when
        sent from a Captive Portal process. This change also adds a flag to the GPUProcessConnectionParameters
        struct so that GPU Process connections can be marked as being associated with a Captive Portal
        process.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::GPUConnectionToWebProcess):
        (WebKit::GPUConnectionToWebProcess::createGraphicsContextGL):
        (WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL):
        * GPUProcess/GPUConnectionToWebProcess.h:
        (WebKit::GPUConnectionToWebProcess::isCaptivePortalModeEnabled const):
        * GPUProcess/media/RemoteAudioDestinationManager.cpp:
        (WebKit::RemoteAudioDestinationManager::createAudioDestination):
        (WebKit::RemoteAudioDestinationManager::deleteAudioDestination):
        (WebKit::RemoteAudioDestinationManager::startAudioDestination):
        (WebKit::RemoteAudioDestinationManager::stopAudioDestination):
        * Shared/GPUProcessConnectionParameters.h:
        (WebKit::GPUProcessConnectionParameters::encode const):
        (WebKit::GPUProcessConnectionParameters::decode):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::getGPUProcessConnection):

2022-04-25  Devin Rousso  <drousso@apple.com>

        Web Inspector: request interception should not be guarded based on service workers
        https://bugs.webkit.org/show_bug.cgi?id=239677

        Reviewed by Patrick Angle.

        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoad):
        Move the `#if ENABLE(SERVICE_WORKER)` to `WebCore::InspectorNetworkAgent::shouldInterceptRequest`.

2022-04-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unreviewed, fix the macOS Monterey build after r293340
        https://bugs.webkit.org/show_bug.cgi?id=239712

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getContextMenuFromItems):

        Put some of the "Copy Cropped Image" logic here behind ENABLE(IMAGE_ANALYSIS_ENHANCEMENTS), instead of just
        ENABLE(IMAGE_ANALYSIS).

2022-04-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] Only show a context menu action to "Copy Cropped Image" when appropriate
        https://bugs.webkit.org/show_bug.cgi?id=239712
        rdar://92239384

        Reviewed by Darin Adler.

        Implement gating for the "Copy Cropped Image" context menu item. This is similar to the current gating mechanism
        used for visual look up, wherein the Look Up menu item is asynchronously appended to the context menu.

        In this case, we only append the "Copy Cropped Image" menu item in the case where `requestImageAnalysisMarkup`
        completes with a non-null result.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::close):
        (WebKit::WebPageProxy::showContextMenu):
        (WebKit::WebPageProxy::contextMenuItemSelected):
        * UIProcess/WebPageProxy.h:

        Cache the image analysis results for "Copy Cropped Image" in a member variable, `m_croppedImageForContextMenu`.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getContextMenuFromItems):
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::setCroppedImageForContextMenu):
        (WebKit::WebPageProxy::handleContextMenuCopyCroppedImage):

2022-04-25  Aditya Keerthi  <akeerthi@apple.com>

        Fix the tvOS and watchOS builds after r293231
        https://bugs.webkit.org/show_bug.cgi?id=239736
        rdar://92283605

        Reviewed by Wenson Hsieh.

        * UIProcess/API/Cocoa/WKWebView.h:

        UIFindInteraction is marked unavailable on watchOS and tvOS.

        * UIProcess/API/Cocoa/WKWebView.mm:

        Use platform-checks rather than the existing HAVE macro, so that these
        methods are still implemented in older builds. There are no version
        checks in WKWebView.h.

2022-04-25  Claudio Saavedra  <csaavedra@igalia.com>

        [GLIB] Default-handle recently-added ProcessTerminationReason values
        https://bugs.webkit.org/show_bug.cgi?id=239720

        Reviewed by Philippe Normand.

        * UIProcess/API/glib/WebKitNavigationClient.cpp: Add a couple of
        new values for ProcessTerminationReason that were added on r292912
        to silent some compile-time warnings.

2022-04-25  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION (249585@main): TestWebKitAPI.IPCTestingAPI.CanReceiveIPCSemaphore is timing out
        https://bugs.webkit.org/show_bug.cgi?id=239507

        Reviewed by Wenson Hsieh.

        Add purpose-built test interfaces for testing sending IPC::Semaphore via the IPC.

        Test: ipc/send-semaphore.html

        * Shared/IPCTester.cpp:
        (WebKit::IPCTester::sendSameSemaphoreBack):
        (WebKit::IPCTester::sendSemaphoreBackAndSignalProtocol):
        * Shared/IPCTester.h:
        * Shared/IPCTester.messages.in:

2022-04-24  Youenn Fablet  <youenn@apple.com>

        Make NetworkResourceLoader.m_parameters non const
        https://bugs.webkit.org/show_bug.cgi?id=239603

        Reviewed by Anders Carlsson.

        Now that NetworkResourceLoader can be transitioned through WebProcesses,
        several NetworkResourceLoaderParameters might need to be changed over time.
        For that reason, it no longer makes sense to have m_parameters const.

        Covered by existing tests.

        * NetworkProcess/NetworkLoadParameters.h:
        * NetworkProcess/NetworkResourceLoadParameters.h:
        * NetworkProcess/NetworkResourceLoader.h:

2022-04-24  Daniel Kolesa  <dkolesa@igalia.com>

        Use utf-8 for text mode files in generate-automation-atom.py
        https://bugs.webkit.org/show_bug.cgi?id=239542

        Reviewed by Adrian Perez de Castro.

        At least with older versions of python (3.6), this will otherwise
        be ascii, which will break input files that contain non-ascii
        characters, e.g. Source/WebKit/UIProcess/Automation/atoms/FindNodes.js

        * Scripts/generate-automation-atom.py:
        (main):

2022-04-23  Wenson Hsieh  <wenson_hsieh@apple.com>

        Remove the `PreferInlineTextSelectionInImages` internal feature flag
        https://bugs.webkit.org/show_bug.cgi?id=234849

        Reviewed by Sam Weinig.

        This patch reverts r279164, which introduced an internal feature to avoid Live Text analysis when hovering over
        images, and instead added a new context menu item to reveal selectable text in the image by launching the
        QuickLook panel in Live Text mode.

        This alternate Live Text experience was originally devised as a way to mitigate the power and performance impact
        of passively triggering Live Text analysis when hovering over images on pre-M1 devices, but this mitigation was
        ultimately deemed unnecessary in macOS 12.

        * Shared/API/c/WKSharedAPICast.h:
        (WebKit::toAPI):
        (WebKit::toImpl):
        * UIProcess/Cocoa/QuickLookPreviewActivity.h: Removed.
        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::computeHasVisualSearchResults):
        (WebKit::WebViewImpl::computeHasImageAnalysisResults): Deleted.
        * UIProcess/PageClient.h:
        (WebKit::PageClient::computeHasVisualSearchResults):
        (WebKit::PageClient::computeHasImageAnalysisResults): Deleted.
        * UIProcess/WebContextMenuProxy.h:
        (WebKit::WebContextMenuProxy::quickLookPreviewActivity const): Deleted.
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::contextMenuItemSelected):
        (WebKit::WebPageProxy::computeHasVisualSearchResults):
        (WebKit::WebPageProxy::computeHasImageAnalysisResults): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/mac/PageClientImplMac.h:
        * UIProcess/mac/PageClientImplMac.mm:
        (WebKit::PageClientImpl::computeHasVisualSearchResults):
        (WebKit::PageClientImpl::computeHasImageAnalysisResults): Deleted.
        * UIProcess/mac/WKQuickLookPreviewController.h:
        * UIProcess/mac/WKQuickLookPreviewController.mm:
        * UIProcess/mac/WebContextMenuProxyMac.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::menuItemIdentifier):
        (WebKit::WebContextMenuProxyMac::getContextMenuFromItems):
        (WebKit::WebContextMenuProxyMac::insertOrUpdateQuickLookImageItem): Deleted.
        (WebKit::WebContextMenuProxyMac::updateQuickLookContextMenuItemTitle): Deleted.
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::handleContextMenuLookUpImage):
        (WebKit::WebPageProxy::handleContextMenuQuickLookImage): Deleted.
        * WebKit.xcodeproj/project.pbxproj:

2022-04-23  Brady Eidson  <beidson@apple.com>

        Add WKNotification and WKWebsiteDataStore SPI for handling click/close of persistent notifications
        https://bugs.webkit.org/show_bug.cgi

        Reviewed by Chris Dumez.

        For notifications that are persistent, add WKWebsiteDataStore SPI to handle click/close operations,
        as the WKNotificationManager's runtime record of such notifications might be gone.
        
        WebKitTestRunner exercises this new SPI in existing tests.
        
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processNotificationEvent):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        
        * SourcesCocoa.txt:
        
        * UIProcess/API/C/WKNotification.cpp:
        (WKNotificationGetIsPersistent):
        * UIProcess/API/C/WKNotification.h:
        
        * UIProcess/API/C/mac/WKNotificationPrivateMac.h: Copied from Source/WebKit/UIProcess/API/Cocoa/_WKDownloadInternal.h.
        * UIProcess/API/C/mac/WKNotificationPrivateMac.mm: Copied from Source/WebKit/UIProcess/API/Cocoa/_WKDownloadInternal.h.
        (WKNotificationCopyDictionaryRepresentation):
        
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _processPersistentNotificationClick:completionHandler:]):
        (-[WKWebsiteDataStore _processPersistentNotificationClose:completionHandler:]):
        * UIProcess/API/Cocoa/WKWebsiteDataStorePrivate.h:
        
        * UIProcess/API/Cocoa/_WKDownload.mm:
        * UIProcess/API/Cocoa/_WKDownloadInternal.h:
        
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::processNotificationEvent):
        * UIProcess/Network/NetworkProcessProxy.h:
        
        * UIProcess/Notifications/WebNotification.cpp:
        * UIProcess/Notifications/WebNotification.h:
        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        (WebKit::dispatchDidClickNotification):
        (WebKit::WebNotificationManagerProxy::providerDidCloseNotifications):
        
        * WebKit.xcodeproj/project.pbxproj:

2022-04-22  Chris Dumez  <cdumez@apple.com>

        Move global AtomStrings to a common header to promote reuse
        https://bugs.webkit.org/show_bug.cgi?id=239585

        Reviewed by Geoff Garen and Darin Adler.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::initializeGPUProcess):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::initializeNetworkProcess):
        * Shared/Cocoa/WebKit2InitializeCocoa.mm:
        (WebKit::runInitializationCode):
        * Shared/WebKit2Initialize.cpp:
        (WebKit::InitializeWebKit2):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::ContentRuleListStore::compileContentRuleList):

2022-04-22  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add find interaction API to WKWebView
        https://bugs.webkit.org/show_bug.cgi?id=239612
        rdar://88442918

        Reviewed by Alex Christensen.

        Promote the `_findInteraction` and `_findInteractionEnabled` SPI to
        `findInteraction` and `findInteractionEnabled` API.

        In order to make this change, new UIKit objects and protocols must be
        adopted. Existing (deprecated) protocol conformance is kept around to
        avoid breaking internal clients.

        * UIProcess/API/Cocoa/WKWebView.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView findInteractionEnabled]):
        (-[WKWebView setFindInteractionEnabled:]):
        (-[WKWebView findInteraction]):
        * UIProcess/API/Cocoa/WKWebViewInternal.h:
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:

        Declare conformance to three protocols: _UITextSearching, UITextSearching, UIFindInteractionDelegate.

        _UITextSearching: Conformance is kept around to avoid breaking internal clients.
        UITextSearching: Conformance is declared for clients to migrate off of _UITextSearching.
        UIFindInteractionDelegate: Conformance is necessary to begin a UIFindSession.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _didCommitLoadForMainFrame]):

        The "searchable object" does not need to be reset anymore, as UIKit
        will do that in `-[WKWebView findInteraction:sessionForView:]` the next
        time a find session begins.

        (-[WKWebView _searchableObject]):
        (-[WKWebView _setFindInteractionEnabled:]):
        (-[WKWebView _findInteraction]):

        It is safe to cast between the SPI and API version of this object. UIKit
        has guaranteed compatibility.

        (-[WKWebView offsetFromPosition:toPosition:inDocument:]):
        (-[WKWebView compareFoundRange:toRange:inDocument:]):
        (-[WKWebView performTextSearchWithQueryString:usingOptions:resultAggregator:]):
        (-[WKWebView replaceFoundTextInRange:inDocument:withText:]):
        (-[WKWebView decorateFoundTextRange:inDocument:usingStyle:]):
        (-[WKWebView scrollRangeToVisible:inDocument:]):
        (-[WKWebView findInteraction:sessionForView:]):
        (-[WKWebView findInteraction:didBeginFindSession:]):

        Custom content views do not need to be aware that a find session has
        begun, as they do not draw an overlay.

        (-[WKWebView findInteraction:didEndFindSession:]):

        Custom content views do not need to be aware that a find session has
        begun, as they do not draw an overlay.

        * UIProcess/ios/WKContentViewInteraction.h:

        Declare the old _UITextSearching methods explicitly, as we need to
        maintain support for internal clients.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView performTextSearchWithQueryString:usingOptions:resultAggregator:]):
        (-[WKContentView replaceFoundTextInRange:inDocument:withText:]):
        (-[WKContentView decorateFoundTextRange:inDocument:usingStyle:]):
        (-[WKContentView scrollRangeToVisible:inDocument:]):
        (-[WKContentView offsetFromPosition:toPosition:inDocument:]):
        (-[WKContentView compareFoundRange:toRange:inDocument:]):
        * UIProcess/ios/WKPDFView.mm:
        (-[WKPDFView compareFoundRange:toRange:inDocument:]):
        (-[WKPDFView performTextSearchWithQueryString:usingOptions:resultAggregator:]):
        (-[WKPDFView decorateFoundTextRange:inDocument:usingStyle:]):

2022-04-22  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] `-selectWordForReplacement` should select dictation alternatives that span multiple words
        https://bugs.webkit.org/show_bug.cgi?id=239622
        rdar://91416535

        Reviewed by Aditya Keerthi.

        Currently, `-selectWordForReplacement` (which is invoked by UIKit when the tapping on spelling corrections and
        dictation alternatives to reveal the callout bar with text suggestions) handles multi-word dictation ranges by
        only selecting one of the words (i.e., whichever word is closest to the tapped location). This makes it
        impossible to handle dictation ranges that span multiple words, since only part of the range is replaced with
        the chosen alternative.

        To address this, instead of using the existing `extendSelection` method (which is still exercised when tapping
        the "Select" action in the callout bar with a caret selection), we add `extendSelectionForReplacement`, which
        extends the selection to include any dictation alternative range that encompasses the selection (and otherwise
        falls back to selecting the current word).

        Test: SelectionTests.SelectWordForReplacementWithDictationAlternative

        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView selectWordForReplacement]):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::extendSelectionForReplacement):

        Add a new IPC message, `WebPage::ExtendSelectionForReplacement`, and use it to implement `-[WKContentView
        selectWordForReplacement]`.

        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::extendSelectionForReplacement):

        Add logic to select the enclosing dictation alternative marker range (if it exists), or the current word at the
        start of the selection if there is no enclosing marker range. Note that we first grab a Vector of all the marker
        ranges instead of creating them as we iterate through the list of `RenderedDocumentMarker*`, since creating
        visible position ranges from each marker range triggers layout, and each `RenderedDocumentMarker*` is not
        ref-counted, so it's possible that a reentrant call to update the document marker controller during layout could
        destroy the next `RenderedDocumentMarker*` during iteration.

        (WebKit::WebPage::extendSelection):
        (WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded):

        Pull out logic for dispatching synthetic mouse events when selecting text into a separate helper method, which
        is now called from both `extendSelection` and `extendSelectionForReplacement`.

2022-04-22  Zan Dobersek  <zdobersek@igalia.com>

        [GLib] Make WebKitSettings XSS auditor functions no-op
        https://bugs.webkit.org/show_bug.cgi?id=239651

        Reviewed by Adrian Perez de Castro.

        With the XSS auditor feature being deprecated and removed, and the
        preference entries removed in r293199, the GLib API for this feature
        has to be adjusted as well. In both getter and setter, a warning is
        printed out when invoked.

        * UIProcess/API/glib/WebKitSettings.cpp:
        (webkit_settings_get_enable_xss_auditor):
        (webkit_settings_set_enable_xss_auditor):

2022-04-21  John Cunningham  <johncunningham@apple.com>

        Use GCGLSpanTuple to pass buffer parameters to multidraw calls.
        https://bugs.webkit.org/show_bug.cgi?id=239154

        Reviewed by Kimmo Kinnunen.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::WebCore::vectorCopyCast):
        (WebKit::RemoteGraphicsContextGL::multiDrawArraysANGLE):
        (WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedANGLE):
        (WebKit::RemoteGraphicsContextGL::multiDrawElementsANGLE):
        (WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedANGLE):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (getInternalformativ):
        (multiDrawArraysANGLE): Deleted.
        (multiDrawArraysInstancedANGLE): Deleted.
        (multiDrawElementsANGLE): Deleted.
        (multiDrawElementsInstancedANGLE): Deleted.
        * Platform/IPC/ArgumentCoders.h:
        * Platform/IPC/ArrayReferenceTuple.h: Added.
        * Scripts/webkit/messages.py:
        (class_template_headers):
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE):
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE):
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE):
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE): Deleted.
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE): Deleted.
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE): Deleted.
        (WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE): Deleted.

2022-04-20  Yusuke Suzuki  <ysuzuki@apple.com>

        [WTF] Add string concatenate adapter for UUID
        https://bugs.webkit.org/show_bug.cgi?id=239590

        Reviewed by Chris Dumez and Darin Adler.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addStorageSession):
        * NetworkProcess/webrtc/NetworkMDNSRegister.cpp:
        (WebKit::NetworkMDNSRegister::registerMDNSName):
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::handleForWebPageProxy):
        (WebKit::WebAutomationSession::handleForWebFrameID):
        * UIProcess/gtk/WaylandCompositor.cpp:
        (WebKit::WaylandCompositor::WaylandCompositor):
        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView createFileForModel:]):
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.mm:
        (WebKit::ARKitInlinePreviewModelPlayerMac::createFile):

2022-04-21  Chris Dumez  <cdumez@apple.com>

        Adopt RobinHoodHashMap / RobinHoodHashSet more broadly in WebCore
        https://bugs.webkit.org/show_bug.cgi?id=239576

        Reviewed by Yusuke Suzuki.

        Adopt RobinHoodHashMap / RobinHoodHashSet more broadly in WebKit to avoid wasting memory in hash tables.
        RobinHoodHashMap / RobinHoodHashSet have more restrictions on what key types they work with and may result
        in slightly lower performance but they have a much higher load factor that the regular HashMap / HashSet,
        thus reducing memory usage. This patch adopts RobinHoodHashMap / RobinHoodHashSet on non performance
        sensitive maps / sets in WebCore that have compatible keys (String / AtomString / URL because they cache
        their hash).

        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::didSaveScriptsToDisk):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * Shared/WebPageCreationParameters.cpp:
        (WebKit::WebPageCreationParameters::decode):
        * Shared/WebPageCreationParameters.h:
        * UIProcess/API/APIPageConfiguration.h:
        (API::PageConfiguration::allowedNetworkHosts const):
        (API::PageConfiguration::setAllowedNetworkHosts):
        * UIProcess/API/Cocoa/WKWebViewConfiguration.mm:
        (-[WKWebViewConfiguration _setLoadsFromNetwork:]):
        (-[WKWebViewConfiguration _setAllowedNetworkHosts:]):

2022-04-21  Chris Dumez  <cdumez@apple.com>

        Build is broken on shipping macOS due to TBA annotations replacement in API headers
        https://bugs.webkit.org/show_bug.cgi?id=239623

        Unreviewed, bump versions in WebKit.xcconfig too to disable TBA annotation replacement on shipping OS
        so that we don't get warnings about API not yet being available.

        * Configurations/WebKit.xcconfig:

2022-04-21  Simon Fraser  <simon.fraser@apple.com>

        <body> with overflow:hidden CSS is scrollable on iOS standalone web app
        https://bugs.webkit.org/show_bug.cgi?id=220908
        <rdar://73574797>

        Reviewed by Devin Rousso.

        `overflow:hidden` failed to make the primary scroll view unscrollable in a home screen web
        app because of logic in _updateScrollViewForTransaction: that was intended to ensure that if
        the current unobscured rect is equal to the max unobscured rect (i.e. testing for collapsed
        UI in MobileSafari), the user could scroll to expand the UI.

        This failed in Web.app because there is no collapsible UI there, i.e.
        minUnobscuredSize == maxUnobscuredSize. So test for that scenario.

        Tested by new API tests.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _updateScrollViewForTransaction:]):

2022-04-21  Youenn Fablet  <youenn@apple.com>

        A suspended remote shared worker should resume when a new SharedWorker is added
        https://bugs.webkit.org/show_bug.cgi?id=239325

        Reviewed by Chris Dumez.

        Check whether resuming/suspending remote shared worker in case of added/removed SharedWorker object.
        Make sure to suspend the remote shared worker at launch time if needed.

        Covered by updated test.

        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:

2022-04-21  Eric Carlson  <eric.carlson@apple.com>

        AVSampleBufferRenderSynchronizer timeline sometimes goes backwards when playback begins
        https://bugs.webkit.org/show_bug.cgi?id=239471
        rdar://91117803

        Reviewed by Jer Noble.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::currentTimeChanged): Log when time jumps backwards.

2022-04-20  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unreviewed, fix the iOS 15.4 build after r293117

        Remove an unnecessary header include.

        * Platform/spi/ios/UIKitSPI.h:

2022-04-20  Wenson Hsieh  <wenson_hsieh@apple.com>

        Avoid falling back to snapshots for transparent images when triggering batch text recognition
        https://bugs.webkit.org/show_bug.cgi?id=239555
        rdar://91622151

        Reviewed by Aditya Keerthi.

        Refactor `requestTextRecognition()` to take in `TextRecognitionOptions`.
        See WebCore/ChangeLog for more details.

        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::requestTextRecognition):
        * WebProcess/WebCoreSupport/WebChromeClient.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::requestTextRecognition):
        * WebProcess/WebPage/WebPage.h:
        (WebKit::WebPage::requestTextRecognition):

2022-04-20  Simon Fraser  <simon.fraser@apple.com>

        Add release assert logging in RemoteRenderingBackendProxy::prepareBuffersForDisplay()
        https://bugs.webkit.org/show_bug.cgi?id=239563

        Reviewed by Wenson Hsieh.

        Use RELEASE_ASSERT_WITH_MESSAGE() to make it more clear which of the two release
        assertions is being hit.

        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::prepareBuffersForDisplay):

2022-04-20  Megan Gardner  <megan_gardner@apple.com>

        Address recent deprecation warnings on iOS.
        https://bugs.webkit.org/show_bug.cgi?id=239560

        Reviewed by Wenson Hsieh.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKActionSheetAssistant contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView setUpInteraction]):
        (-[WKContentView canPerformActionForWebView:withSender:]):
        (-[WKContentView pasteForWebView:]):
        (-[WKContentView _handleDOMPasteRequestWithResult:]):
        (-[WKContentView _requestDOMPasteAccessForCategory:elementRect:originIdentifier:completionHandler:]):
        (-[WKContentView contextMenuInteraction:configuration:previewForHighlightingItemWithIdentifier:]):
        (-[WKContentView contextMenuInteraction:configuration:dismissalPreviewForItemWithIdentifier:]):
        (-[WKContentView contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.
        (-[WKContentView contextMenuInteraction:previewForDismissingMenuWithConfiguration:]): Deleted.
        * UIProcess/ios/WebDataListSuggestionsDropdownIOS.mm:
        (-[WKDataListSuggestionsDropdown contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKDataListSuggestionsDropdown contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.
        * UIProcess/ios/forms/WKDateTimeInputControl.mm:
        (-[WKDateTimePicker contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKDateTimePicker contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.
        * UIProcess/ios/forms/WKFileUploadPanel.mm:
        (-[WKFileUploadPanel contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKFileUploadPanel contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.
        * UIProcess/ios/forms/WKFormSelectPicker.mm:
        (-[WKSelectPicker contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:]):
        (-[WKSelectPicker contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]): Deleted.

2022-04-20  Alan Bujtas  <zalan@apple.com>

        [IFC][Integration] Do not call WebPreferences::simpleLineLayoutEnabled in canUseForLineLayoutWithReason
        https://bugs.webkit.org/show_bug.cgi?id=239540

        Reviewed by Antti Koivisto.

        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetSimpleLineLayoutEnabled): Deleted.
        (WKPreferencesGetSimpleLineLayoutEnabled): Deleted.
        * UIProcess/API/C/WKPreferencesRefPrivate.h:
        * UIProcess/API/Cocoa/WKPreferences.mm:
        (-[WKPreferences _simpleLineLayoutEnabled]): Deleted.
        (-[WKPreferences _setSimpleLineLayoutEnabled:]): Deleted.
        * UIProcess/API/Cocoa/WKPreferencesPrivate.h:

2022-04-20  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] WebKit and WebKitLegacy shouldn't need to know about WebGPU.framework
        https://bugs.webkit.org/show_bug.cgi?id=239528
        <rdar://problem/91740931>

        Unreviewed build fix.

        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::workQueueInitialize):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGPUForWebGPU const):

2022-04-20  Diego Pino Garcia  <dpino@igalia.com>

        Unreviewed, non-unified build fixes after r293052

        * WebProcess/FullScreen/WebFullScreenManager.cpp:
        (WebKit::WebFullScreenManager::handleEvent):

2022-04-19  Ben Nham  <nham@apple.com>

        Handle public token updates in webpushd
        https://bugs.webkit.org/show_bug.cgi?id=239042

        Reviewed by Brady Eidson.

        When the public token associated with our push service changes, we have to invalidate all
        push subscriptions, since they all derive from the public token. This is only expected to
        happen in very rare cases, e.g. keychain corruption.

        To implement this, we now listen for public token updates from our push service, and pass
        that on to PushDatabase. PushDatabase persists the token and deletes all subscriptions on
        token change if necessary.

        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::messageTypeSendsReply):
        * webpushd/ApplePushServiceConnection.mm:
        (-[_WKAPSConnectionDelegate connection:didReceivePublicToken:]):
        (-[_WKAPSConnectionDelegate connection:didReceiveIncomingMessage:]):
        * webpushd/MockPushServiceConnection.mm:
        (WebPushD::MockPushServiceConnection::MockPushServiceConnection):
        (WebPushD::MockPushServiceConnection::setPublicTokenForTesting):
        * webpushd/PushService.mm:
        (WebPushD::PushService::PushService):
        (WebPushD::PushService::setPublicTokenForTesting):
        (WebPushD::PushService::didReceivePublicToken):
        * webpushd/PushServiceConnection.mm:
        (WebPushD::PushServiceConnection::startListeningForPublicToken):
        (WebPushD::PushServiceConnection::didReceivePublicToken):
        (WebPushD::PushServiceConnection::setPublicTokenForTesting):
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::decodeAndHandleMessage):
        (WebPushD::Daemon::setPublicTokenForTesting):

2022-04-19  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Dictation text that contains emojis is inserted twice upon finalization
        https://bugs.webkit.org/show_bug.cgi?id=239508
        rdar://91895524

        Reviewed by Aditya Keerthi.

        `WebPage::replaceDictatedText` contains logic to only proceed with text replacement in the case where the
        dictated text still matches the text before the current selection. To ensure this, it marches backwards through
        visible positions from the start of the selection, for a total number of times equal to the length of the
        expected string (`oldText`). If the text within this found range (i.e. from the position before the start of the
        selection, to the start of the selection) no longer matches the `oldText` provided by the client, we return
        early and do nothing.

        However, this logic fails in the case where `oldText` contains emojis (or more generally, multiple codepoints
        that combine to form a single grapheme cluster), since the length of the string is more than the number of
        visible position iterations needed to find the correct starting position for the range. As a result, we end up
        not replacing any characters, and when UIKit dictation code later calls `-insertText:` with the final dictation
        string, we end up duplicating the finalized dictation text.

        To address this issue, simply advance backwards by grapheme count instead of the raw string length to keep the
        starting visible position consistent with the start of the range that we're trying to replace.

        Test: UIWKInteractionViewProtocol.ReplaceDictatedTextContainingEmojis

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::replaceDictatedText):
        (WebKit::WebPage::applyAutocorrectionInternal):

        Also add a FIXME here around similar code that might also be susceptible to the same bug. However, in this case,
        we avoid the problem because of subsequent logic that adjusts the starting position to try and match the
        expected string. We may be able to remove or further limit this extra adjustment by using grapheme cluster count
        here instead of string length when finding the initial starting position.

2022-04-19  Chris Dumez  <cdumez@apple.com>

        Inline Element::shadowRoot()
        https://bugs.webkit.org/show_bug.cgi?id=239460

        Reviewed by Darin Adler.

        I moved findDataDetectionResultElementInImageOverlay() to WebCore since it only relies on WebCore
        things. This function relies on ElementRareData but ElementRareData.h is not currently exported
        from WebCore.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updateWithTextRecognitionResult):
        (WebKit::WebPage::findDataDetectionResultElementInImageOverlay): Deleted.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::dataDetectorImageOverlayPositionInformation):

2022-04-19  Sihui Liu  <sihui_liu@apple.com>

        Add logging for WebsiteDataStore data fetch and removal
        https://bugs.webkit.org/show_bug.cgi?id=239409

        Reviewed by Chris Dumez.

        This would help us debug issues like rdar://91422245.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::fetchWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteDataForOrigins):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        (WebKit::WebsiteDataStore::removeData):

2022-04-19  Kimmo Kinnunen  <kkinnunen@apple.com>

        ASSERTION FAILED: !m_isInitializingSendSource crashes on the bots
        https://bugs.webkit.org/show_bug.cgi?id=239399

        Reviewed by Chris Dumez.

        Avoid sending messages to IPC::Connection before the connection is open.
        There's multiple logic problems as well as a race to toggle m_isInitializingSendSource.

        Commit "RemoteRenderingBackend should have dedicated IPC::Connection for out-of-stream messages"
        would make RRBProxy in WP create the "server" IPC::Connection and send that to RRB in GPUP.
        This would cause RRB in GPUP to ASSERT(... || !m_isInitializingSendSource) fail in
        the IPC work queue.

        For "client" connection, IPC::Connection::open() will run in the calling queue, toggling
        m_isInitializingSendSource = true. The m_isInitializingSendSource = false will be toggled
        in the message send queue by the send source initialization callback.

        If the caller has already enqueued messages before calling open(), the callbacks the
        sendMessage() or open() schedules might run the functions which do not expect to be dispatched unless
        m_isInitializingSendSource == false.

        This commit just fixes the send vs open order, but does not fix the underlying problems.
        They are tracked in bug 239494, which should also add tests for the case.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::RemoteRenderingBackend):
        (WebKit::RemoteRenderingBackend::startListeningForIPC):
        * Platform/IPC/cocoa/ConnectionCocoa.mm:
        (IPC::Connection::sendOutgoingMessage):
        Expand one ASSERT(!a && !b) to individual assertions in order to catch the exact problem easier.

2022-04-19  Ada Chan  <adachan@apple.com>

        [WebXR] Update Device::initializeTrackingAndRendering() to take in more parameters regarding the session setup
        https://bugs.webkit.org/show_bug.cgi?id=239476

        Reviewed by Dean Jackson.

        Pass in document's origin and session features to Device::initializeTrackingAndRendering().

        * Shared/XR/XRDeviceProxy.cpp:
        (WebKit::XRDeviceProxy::initializeTrackingAndRendering):
        * Shared/XR/XRDeviceProxy.h:
        * UIProcess/XR/PlatformXRCoordinator.h:
        * UIProcess/XR/PlatformXRSystem.cpp:
        (WebKit::PlatformXRSystem::initializeTrackingAndRendering):
        * UIProcess/XR/PlatformXRSystem.h:
        * UIProcess/XR/PlatformXRSystem.messages.in:
        * WebProcess/XR/PlatformXRSystemProxy.cpp:
        (WebKit::PlatformXRSystemProxy::initializeTrackingAndRendering):
        * WebProcess/XR/PlatformXRSystemProxy.h:

2022-04-15  Antoine Quint  <graouts@apple.com>

        [model] ready promise does not work on iOS
        https://bugs.webkit.org/show_bug.cgi?id=239395
        rdar://91761135

        Reviewed by Dean Jackson.

        We actually never communicated success or failure when creating the ASVInlinePreview
        in the UI process on iOS in WKModelView. We now provide a reference to the WebPageProxy
        and a GraphicsLayer::PlatformLayerID when creating a WKModelView so that we can message
        the Web process and have WebPage look for the matching ARKitInlinePreviewModelPlayerIOS
        to notify of load success or failure via the ModelPlayerClient protocol which is already
        implemented by HTMLModelElement.

        * UIProcess/RemoteLayerTree/ios/RemoteLayerTreeHostIOS.mm:
        (WebKit::RemoteLayerTreeHost::makeNode):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::modelInlinePreviewDidLoad):
        (WebKit::WebPageProxy::modelInlinePreviewDidFailToLoad):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKModelView.h:
        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView initWithModel:layerID:page:]):
        (-[WKModelView createPreview]):
        (-[WKModelView initWithModel:]): Deleted.
        * WebProcess/Model/ios/ARKitInlinePreviewModelPlayerIOS.h:
        * WebProcess/Model/ios/ARKitInlinePreviewModelPlayerIOS.mm:
        (WebKit::ARKitInlinePreviewModelPlayerIOS::ARKitInlinePreviewModelPlayerIOS):
        (WebKit::ARKitInlinePreviewModelPlayerIOS::~ARKitInlinePreviewModelPlayerIOS):
        (WebKit::ARKitInlinePreviewModelPlayerIOS::modelPlayerForPageAndLayerID):
        (WebKit::ARKitInlinePreviewModelPlayerIOS::pageLoadedModelInlinePreview):
        (WebKit::ARKitInlinePreviewModelPlayerIOS::pageFailedToLoadModelInlinePreview):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::modelInlinePreviewDidLoad):
        (WebKit::WebPage::modelInlinePreviewDidFailToLoad):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-19  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Text selection flickers when inserting text using dictation
        https://bugs.webkit.org/show_bug.cgi?id=239467
        rdar://91895659

        Reviewed by Aditya Keerthi.

        Implement two new SPI methods on UIWKInteractionViewProtocol (to be added in rdar://91919121), which UIKit uses
        to encapsulate text input changes while inserting final dictation results (specifically, a call to
        `-replaceDictatedText:withText:`, followed by one or more calls to `-insertText:`).

        During this scope, we suppress all DOM selection changes from propagating to the client (thereby causing visible
        text selection updates) by creating and holding on to a `IgnoreSelectionChangeForScope` RAII object. At the end
        of this scope, we then schedule one final editor state update after resetting the scope, to ensure that the
        final selection state propagates to the UI process.

        Test: UIWKInteractionViewProtocol.SuppressSelectionChangesDuringDictation

        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView willInsertFinalDictationResult]):
        (-[WKContentView didInsertFinalDictationResult]):
        (-[WKContentView _updateChangedSelection:]):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::willInsertFinalDictationResult):
        (WebKit::WebPageProxy::didInsertFinalDictationResult):

        Plumb these method calls into the web process, through `WebPageProxy` and `WebPage`.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didCommitLoad):

        If (for any reason) we're committing a load while holding on to `m_ignoreSelectionChangeScopeForDictation`,
        forcibly call `Editor::setIgnoreSelectionChanges(false, RevealSelection::No)` and destroy the scoped object.

        * WebProcess/WebPage/WebPage.h:

        Add `m_ignoreSelectionChangeScopeForDictation`, which is set in `willInsertFinalDictationResult` and
        unset in `didInsertFinalDictationResult` below.

        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::replaceSelectedText):
        (WebKit::WebPage::replaceDictatedText):

        Deploy `IgnoreSelectionChangeForScope` here, so that if we're already ignoring selection changes due to
        `m_ignoreSelectionChangeScopeForDictation`, we won't prematurely revert "ignore selection change" state (this is
        because this RAII helper object consults the preexisting state of `document.editor().ignoreSelectionChanges()`
        before calling into `setIgnoreSelectionChanges`, and effectively becomes a no-op if the bit was already set).

        (WebKit::WebPage::willInsertFinalDictationResult):
        (WebKit::WebPage::didInsertFinalDictationResult):

2022-04-19  Simon Fraser  <simon.fraser@apple.com>

        Use ProcessTerminationReason::Unresponsive for unresponsive network processes
        https://bugs.webkit.org/show_bug.cgi?id=239401

        Reviewed by Chris Dumez.

        NetworkProcessProxy used ProcessTerminationReason::RequestedByClient for all callers
        of terminate(). Move the call to networkProcessDidTerminate() out to callers of
        terminate() so they can pass the correct reasons.

        Also use processTerminationReasonToString() in some more logs, and fix a log string
        typo introduced in the previous commit.

        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::gpuProcessExited):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::terminate):
        (WebKit::NetworkProcessProxy::didBecomeUnresponsive):
        (WebKit::NetworkProcessProxy::didReceiveInvalidMessage):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::resetStateAfterProcessTermination):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::gpuProcessExited):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::gpuProcessExited):
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):

2022-04-19  Antoine Quint  <graouts@apple.com>

        [model] set canonicalWebPageURL and urlFragment on ASVInlinePreview on iOS
        https://bugs.webkit.org/show_bug.cgi?id=239502
        rdar://87352281

        Reviewed by Dean Jackson.

        Set the `canonicalWebPageURL` and `urlFragment` properties on the ASVInlinePreview prior to
        entering fullscreen.

        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        (WebKit::ModelElementController::takeModelElementFullscreen):
        * UIProcess/ModelElementController.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::takeModelElementFullscreen):

2022-04-19  Zan Dobersek  <zdobersek@igalia.com>

        [GTK][WPE][GPUProcess] Add RemoteGraphicsContextGLGBM, RemoteGraphicsContextGLProxyGBM
        https://bugs.webkit.org/show_bug.cgi?id=239348

        Reviewed by Carlos Garcia Campos.

        Provide RemoteGraphicsContextGL and RemoteGraphicsContextGLProxy
        implementations guarded by and based on USE(LIBGBM) functionality,
        usable by the GTK and WPE ports when jointly enabled with ANGLE
        backing of WebGL execution.

        RemoteGraphicsContextGLGBM is the GPUProcess-side GL executor.
        Internally it spawns a GraphicsContextGLGBM instance, and once invoked,
        the PrepareForDisplay() IPC message returns the reply with the DMABuf
        object that was used as the rendering backing in that context instance.

        RemoteGraphicsContextGLProxyGBM is the WebProcess-side counterpart.
        Besides relaying the prepare-for-display request, it also manages the
        GraphicsLayerContentsDisplayDelegate object which handles presenting
        DMABuf objects arriving from the GPUProcess. That delegate is of the
        NicosiaDisplayDelegate type, a slim class also handling a
        Nicosia::ContentLayer object through which any arriving DMABuf is
        presented in the TextureMapper tree.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLGBM.cpp: Added.
        (WebKit::RemoteGraphicsContextGLGBM::RemoteGraphicsContextGLGBM):
        (WebKit::RemoteGraphicsContextGLGBM::platformWorkQueueInitialize):
        (WebKit::RemoteGraphicsContextGLGBM::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGL::create):
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * WebProcess/GPU/graphics/gbm/RemoteGraphicsContextGLProxyGBM.cpp: Added.
        (WebKit::NicosiaDisplayDelegate::NicosiaDisplayDelegate):
        (WebKit::NicosiaDisplayDelegate::~NicosiaDisplayDelegate):
        (WebKit::NicosiaDisplayDelegate::platformLayer const):
        (WebKit::NicosiaDisplayDelegate::swapBuffersIfNeeded):
        (WebKit::RemoteGraphicsContextGLProxyGBM::RemoteGraphicsContextGLProxyGBM):
        (WebKit::RemoteGraphicsContextGLProxyGBM::layerContentsDisplayDelegate):
        (WebKit::RemoteGraphicsContextGLProxyGBM::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGLProxy::create):

2022-04-18  Per Arne Vollan  <pvollan@apple.com>

        Block system calls in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=238935
        <rdar://47323426>

        Reviewed by Geoffrey Garen.

        Block unused system calls in the Network process on macOS and iOS. This is based on collected telemetry.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:

2022-04-18  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Add telemetry with backtrace for network related system calls
        https://bugs.webkit.org/show_bug.cgi?id=239465

        Reviewed by Darin Adler.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-04-18  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r292957.
        https://bugs.webkit.org/show_bug.cgi?id=239468

        Introduced crash

        Reverted changeset:

        "Block system calls in the Network process"
        https://bugs.webkit.org/show_bug.cgi?id=238935
        https://commits.webkit.org/r292957

2022-04-18  Brent Fulgham  <bfulgham@apple.com>

        Remove the deprecated CaptivePortal enablement key
        https://bugs.webkit.org/show_bug.cgi?id=239456

        Reviewed by Wenson Hsieh.

        This is a minor code cleanup to remove an old default key
        we used in the early experiments with this behavior.

        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        * UIProcess/API/Cocoa/_WKSystemPreferencesInternal.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::notifyPreferencesChanged):

2022-04-18  Per Arne Vollan  <pvollan@apple.com>

        Fix incorrect syscall name in sandboxes
        https://bugs.webkit.org/show_bug.cgi?id=239454

        Reviewed by Darin Adler.

        * GPUProcess/mac/com.apple.WebKit.GPUProcess.sb.in:
        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-04-18  Simon Fraser  <simon.fraser@apple.com>

        Allow C API clients to get the WKProcessTerminationReason in processDidCrash functions, and use in WebKitTestRunner
        https://bugs.webkit.org/show_bug.cgi?id=239400

        Reviewed by Sam Weinig.

        Introduce WKContextClientV4 with "did crash" functions that take a ProcessID and WKProcessTerminationReason.
        WebContextClient will call the new functions if registered, otherwise the old ones.

        Have WebProcessPool::networkProcessDidTerminate() and WebProcessPool::gpuProcessExited() call
        the client for more types of reasons; ExceededMemoryLimit and ExceededCPULimit only apply
        to the web process, so the behavior change here is to call m_client.networkProcessDidCrash()
        for ProcessTerminationReason::Unresponsive.

        * UIProcess/API/C/WKContext.h:
        * UIProcess/WebContextClient.cpp:
        (WebKit::WebContextClient::networkProcessDidCrash):
        (WebKit::WebContextClient::serviceWorkerProcessDidCrash):
        (WebKit::WebContextClient::gpuProcessDidCrash):
        * UIProcess/WebContextClient.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::shouldReportAuxiliaryProcessCrash):
        (WebKit::WebProcessPool::networkProcessDidTerminate):
        (WebKit::WebProcessPool::serviceWorkerProcessCrashed):
        (WebKit::WebProcessPool::gpuProcessExited):
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):

2022-04-18  Said Abou-Hallawa  <said@apple.com>

        REGRESSION(r288847): GPU Process crash under GPUProcess::canExitUnderMemoryPressure()
        https://bugs.webkit.org/show_bug.cgi?id=238558
        rdar://91052033

        Reviewed by Kimmo Kinnunen.

        Use the rendering resources request count to keep the GPU process alive.

        RemoteRenderingBackend updates it when active image buffers change.
        RemoteGraphicsContextGL updates it on creation and destruction.
        RemoteMediaPlayerProxy updates it on creation and destruction.

        Remove RemoterRenderingBackend::updateRenderingResourceRequest(), the
        count is now counted by RemoteImageBuffer creation, destruction.

        Remove RemoterRenderingBackend::allowsExitUnderMemoryPressure(), it was
        crashing due to race between the function and the work queue cleanup task.

        Remove RemoteMediaPlayerManagerProxy::allowsExitUnderMemoryPressure(),
        the count is already counted by RemoteMediaPlayerProxy creation, destruction.

        Based on the initial patch by Kimmo Kinnunen.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::allowsExitUnderMemoryPressure const):
        * GPUProcess/graphics/QualifiedResourceHeap.h:
        (WebKit::QualifiedResourceHeap::hasImageBuffer const): Deleted.
        (WebKit::QualifiedResourceHeap::hasNativeImage const): Deleted.
        (WebKit::QualifiedResourceHeap::hasFont const): Deleted.
        * GPUProcess/graphics/RemoteImageBuffer.h:
        (WebKit::RemoteImageBuffer::m_renderingResourcesRequest):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::createImageBufferWithQualifiedIdentifier):
        (WebKit::RemoteRenderingBackend::releaseRemoteResourceWithQualifiedIdentifier):
        (WebKit::RemoteRenderingBackend::updateRenderingResourceRequest): Deleted.
        (WebKit::RemoteRenderingBackend::allowsExitUnderMemoryPressure const): Deleted.
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteResourceCache.h:
        (WebKit::RemoteResourceCache::resourceHeap const): Deleted.
        (WebKit::RemoteResourceCache::hasActiveDrawables const): Deleted.
        * GPUProcess/graphics/ScopedRenderingResourcesRequest.h:
        (WebKit::hasOutstandingRenderingResourceUsage):
        * GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp:
        (WebKit::RemoteMediaPlayerManagerProxy::deleteMediaPlayer):
        (WebKit::RemoteMediaPlayerManagerProxy::allowsExitUnderMemoryPressure const): Deleted.
        * GPUProcess/media/RemoteMediaPlayerManagerProxy.h:

2022-04-18  Elliott Williams  <emw@apple.com>

        [XCBuild] Use XCBuild for all command-line and project builds
        https://bugs.webkit.org/show_bug.cgi?id=238916

        Reviewed by Alexey Proskuryakov.

        * WebKit.xcodeproj/project.pbxproj:

2022-04-18  Per Arne Vollan  <pvollan@apple.com>

        Block system calls in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=238935
        <rdar://47323426>

        Reviewed by Geoffrey Garen.

        Block unused system calls in the Network process on macOS and iOS. This is based on collected telemetry.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:

2022-04-18  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unreviewed, fix the internal watchOS engineering build

        In the case where `HAVE(UIKIT_WITH_MOUSE_SUPPORT)` is off, internal watchOS engineering builds fail due to
        `shouldEnableAlternativeMouseGestureRecognizers` being unused. Fix this, and do some minor cleanup in this code
        while we're here:

        - Remove extra space before `_alternateMouseGestureRecognizer.get()`.
        - Move * to the correct side for Objective-C instances.
        - Fix a typo: "alternativeMouseRecgnizer" => "alternativeMouseRecognizer".

        * UIProcess/ios/WKContentViewInteraction.mm:
        (shouldEnableAlternativeMouseGestureRecognizers):
        (-[WKContentView _configureMouseGestureRecognizer]):

2022-04-18  Wenson Hsieh  <wenson_hsieh@apple.com>

        Make the main video heuristic robust when video elements are added after entering fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=239438
        rdar://91867187

        Reviewed by Eric Carlson.

        Adjust the heuristic for identifying the most prominent video element in an element fullscreen container, such
        that it can detect video elements that are inserted into the document after we've already entered fullscreen
        mode. See below for more details.

        Exercised by a new internal API test.

        * WebProcess/FullScreen/WebFullScreenManager.cpp:
        (WebKit::WebFullScreenManager::setElement):

        Listen for several events (play, pause, loadedmetadata) that are bubbled up to the fullscreen container element,
        from any media element underneath the fullscreen container; in response to these events, we re-run the main
        fullscreen video element heuristic to update `m_mainVideoElement` (and cancel and reschedule the video
        extraction timer, if this main video element changed).

        (WebKit::WebFullScreenManager::enterFullScreenForElement):
        (WebKit::WebFullScreenManager::didEnterFullScreen):

        Pull existing logic for walking through the element fullscreen DOM in search of video elements out into a new
        helper method, `updateMainVideoElement`, that's invoked both when we finish entering fullscreen mode, and when
        observing any of the new events that bubble up to the fullscreen container.

        (WebKit::WebFullScreenManager::updateMainVideoElement):
        (WebKit::WebFullScreenManager::handleEvent):
        (WebKit::WebFullScreenManager::setMainVideoElement):
        * WebProcess/FullScreen/WebFullScreenManager.h:

2022-04-17  Chris Dumez  <cdumez@apple.com>

        Leverage StringView in more places
        https://bugs.webkit.org/show_bug.cgi?id=239426

        Reviewed by Sam Weinig.

        Leverage StringView in more places, to reduce the number of String allocations.

        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::dictionaryPopupInfoForRange):

2022-04-16  Chris Dumez  <cdumez@apple.com>

        Drop String::truncate() and use String::left() instead
        https://bugs.webkit.org/show_bug.cgi?id=239412

        Reviewed by Darin Adler.

        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::getUserDirectorySuffix):

2022-04-15  Chris Dumez  <cdumez@apple.com>

        Leverage StringView in more places to avoid some String allocations
        https://bugs.webkit.org/show_bug.cgi?id=239356

        Reviewed by Darin Adler.

        * Platform/cocoa/ImageAnalysisUtilities.mm:
        (WebKit::makeTextRecognitionResult):
        * UIProcess/Cocoa/MediaPermissionUtilities.mm:
        (WebKit::visibleDomain):
        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::performJavaScriptURLRequest):

2022-04-15  Wenson Hsieh  <wenson_hsieh@apple.com>

        Add a helper function to perform additional setup on VKCImageAnalysis(Interaction|OverlayView)
        https://bugs.webkit.org/show_bug.cgi?id=239391
        rdar://91466567

        Reviewed by Tim Horton.

        Add a helper function to ImageAnalysisUtilities, and call it on both iOS (WKContentView) and macOS
        (WebViewImpl).

        * Platform/cocoa/ImageAnalysisUtilities.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::installImageAnalysisOverlayView):
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _singleTapIdentified:]):
        (-[WKContentView installImageAnalysisInteraction:]):
        (-[WKContentView imageAnalysisInteraction:shouldBeginAtPoint:forAnalysisType:]):

        Add support for toggling the Live Text overlay when tapping on the image analysis button owned by the
        interaction. This custom handling is necessary, since the synthetic tap gesture recognizer does not recognize
        simultaneously alongside the tap gesture for VisionKit's UIButton, and we can't (easily) grab VisionKit's
        button's tap gesture to add failure requirements to our synthetic tap gesture.

2022-04-15  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] Remove VM& parameter from structure related code including jsDyamicCast
        https://bugs.webkit.org/show_bug.cgi?id=239362

        Reviewed by Darin Adler.

        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::setScriptObject):
        (WebKit::WebAutomationSessionProxy::elementForNodeHandle):
        * WebProcess/InjectedBundle/InjectedBundle.cpp:
        (WebKit::InjectedBundle::reportException):
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::encodeArgument):
        * WebProcess/WebPage/WebFrame.cpp:
        (WebKit::WebFrame::counterValue):

2022-04-15  Brent Fulgham  <bfulgham@apple.com>

        Add new dyld support sandbox rules 
        https://bugs.webkit.org/show_bug.cgi?id=238389
        <rdar://90593887>

        Reviewed by Eric Carlson.

        Update sandbox profiles to adopt a new dyld-related utility file
        on platforms where it exists.

        * GPUProcess/mac/com.apple.WebKit.GPUProcess.sb.in:
        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:
        * webpushd/mac/com.apple.WebKit.webpushd.sb.in:

2022-04-15  Brent Fulgham  <bfulgham@apple.com>

        REGRESSION (r291843): Broken Netflix and Amazon video playback
        https://bugs.webkit.org/show_bug.cgi?id=239397
        <rdar://91313460>

        Unreviewed revert of r291843.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal):

2022-04-15  Tim Horton  <timothy_horton@apple.com>

        Make it possible to adjust the final trait collection applied by LocalCurrentTraitCollection
        https://bugs.webkit.org/show_bug.cgi?id=239375
        rdar://problem/87115393

        Reviewed by Wenson Hsieh.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (scrollViewBackgroundColor):
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::contentViewBackgroundColor):

2022-04-15  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Implement getTransports() and getAuthenticatorData() on AuthenticatorAttestationResponse
        https://bugs.webkit.org/show_bug.cgi?id=238966
        rdar://problem/91449906

        This change implements the getTransports() and getAuthenticatorData() functions
        on AuthenticatorAttestationResponse. For security keys, the supported transports of
        the key are parsed from authenticatorGetInfo. For the local authenticator, the supported
        transports are specified according to which features are available. getAuthenticatorData()
        is a convenience method for RPs who want to avoid parsing CBOR.

        Reviewed by Brent Fulgham.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/API/Cocoa/_WKAuthenticatorAttestationResponse.h:
        * UIProcess/API/Cocoa/_WKAuthenticatorAttestationResponse.mm:
        (-[_WKAuthenticatorAttestationResponse initWithClientDataJSON:rawId:extensions:attestationObject:attachment:transports:]):
        (-[_WKAuthenticatorAttestationResponse initWithClientDataJSON:rawId:extensions:attestationObject:attachment:]): Deleted.
        * UIProcess/API/Cocoa/_WKAuthenticatorAttestationResponseInternal.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (wkExtensionsClientOutputs):
        (wkAuthenticatorAttestationResponse):
        (wkAuthenticatorAssertionResponse):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticatorInternal::transports):
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification):
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterAttested):
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::toASCDescriptor):
        (WebKit::toAuthenticatorTransports):
        (WebKit::continueAfterRequest):
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.cpp:
        (WebKit::CtapAuthenticator::continueMakeCredentialAfterResponseReceived):
        (WebKit::CtapAuthenticator::transports):
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.h:
        * UIProcess/WebAuthentication/fido/CtapDriver.h:
        (WebKit::CtapDriver::transport const):
        (WebKit::CtapDriver::protocol const):
        (WebKit::CtapDriver::CtapDriver):
        * UIProcess/WebAuthentication/fido/CtapHidDriver.cpp:
        (WebKit::CtapHidDriver::CtapHidDriver):
        * UIProcess/WebAuthentication/fido/CtapNfcDriver.cpp:
        (WebKit::CtapNfcDriver::CtapNfcDriver):
        * UIProcess/WebAuthentication/fido/U2fAuthenticator.cpp:
        (WebKit::U2fAuthenticator::continueRegisterCommandAfterResponseReceived):

2022-04-14  Simon Fraser  <simon.fraser@apple.com>

        Use the ProcessTerminationReason enum for all the process types
        https://bugs.webkit.org/show_bug.cgi?id=239372

        Reviewed by Chris Dumez.

        WebProcess, NetworkProcess and GPUProcess all had their own "termination reasons" enums.
        Use ProcessTerminationReason for all of them (noting values that only apply to the web process).
        Also provide a helper function to turn the reasons into a string.

        * Shared/ProcessTerminationReason.cpp: Copied from Source/WebKit/Shared/ProcessTerminationReason.h.
        (WebKit::processTerminationReasonToString):
        * Shared/ProcessTerminationReason.h:
        * Sources.txt:
        * UIProcess/API/C/WKAPICast.h:
        (WebKit::toAPI):
        * UIProcess/Cocoa/NavigationState.mm:
        (WebKit::wkProcessTerminationReason):
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::gpuProcessExited):
        (WebKit::GPUProcessProxy::processIsReadyToExit):
        (WebKit::GPUProcessProxy::didClose):
        (WebKit::GPUProcessProxy::didFinishLaunching):
        (WebKit::GPUProcessProxy::didBecomeUnresponsive):
        * UIProcess/GPU/GPUProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::terminate):
        (WebKit::NetworkProcessProxy::networkProcessDidTerminate):
        (WebKit::NetworkProcessProxy::didClose):
        (WebKit::NetworkProcessProxy::didFinishLaunching):
        (WebKit::NetworkProcessProxy::didExceedMemoryLimit):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::shouldReloadAfterProcessTermination):
        (WebKit::WebPageProxy::gpuProcessExited):
        (WebKit::processTerminationReasonToString): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::networkProcessDidTerminate):
        (WebKit::WebProcessPool::gpuProcessExited):
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::gpuProcessExited):
        * UIProcess/WebProcessProxy.h:
        * WebKit.xcodeproj/project.pbxproj:

2022-04-15  Youenn Fablet  <youenn@apple.com>

        ServiceWorker.postMessage() doesn't work from inside iframe
        https://bugs.webkit.org/show_bug.cgi?id=213984
        <rdar://problem/65203340>

        Reviewed by Chris Dumez.

        Pass the full ClientOrigin when registering a service worker client.
        Filter out clients that cannot be matched:
        - non HTTP/blob/about:blank clients
        - sandboxed HTTP clients

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.messages.in:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        * WebProcess/Storage/WebSWClientConnection.h:

2022-04-14  Claudio Saavedra  <csaavedra@igalia.com>

        [GTK] Default initialize GTK-specific print info in WebKit::PrintInfo
        https://bugs.webkit.org/show_bug.cgi?id=196542

        Reviewed by Adrian Perez de Castro.

        printInfoFromWKPrintInfo() will not initialize GTK-specific bits,
        leading to problems down the road with IPC encoders, so add default values.

        * Shared/PrintInfo.h:

2022-04-15  Zan Dobersek  <zdobersek@igalia.com>

        [GTK][WPE] Remove exclusive build guards around GPU process preferences, code
        https://bugs.webkit.org/show_bug.cgi?id=239331

        Reviewed by Philippe Normand.

        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGraphicsContextGL const):
        Remove restrictive guards around the check for remote-WebGL execution,
        only remaining guard being ENABLE(GPU_PROCESS).

2022-04-14  Antoine Quint  <graouts@apple.com>

        [model] ASVInlinePreview objects don't get cleared when the model source changes
        https://bugs.webkit.org/show_bug.cgi?id=239064
        <rdar://problem/90391037>

        Reviewed by Dean Jackson.

        We add a new ModelElementDestroyRemotePreview message going from the Web process to the
        UI process to notify that an ASVInlinePreview with a given UUID should be cleared. This
        message is sent via ~ARKitInlinePreviewModelPlayerMac since any unused resource will
        trigger the destruction of such objects. 

        For testing purposes, we also add a new ModelInlinePreviewUUIDs message going from the
        Web process to the UI process to retreive the list of UUIDs for the ASVInlinePreview
        objects currently loaded in the UI process. This will allow tests to check whether
        the UUID for a given <model> element is correctly removed from the UI process.

        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        (WebKit::ModelElementController::modelElementDestroyRemotePreview):
        (WebKit::ModelElementController::inlinePreviewUUIDs):
        * UIProcess/ModelElementController.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::modelElementDestroyRemotePreview):
        (WebKit::WebPageProxy::modelInlinePreviewUUIDs):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.h:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.mm:
        (WebKit::ARKitInlinePreviewModelPlayerMac::~ARKitInlinePreviewModelPlayerMac):
        (WebKit::ARKitInlinePreviewModelPlayerMac::inlinePreviewUUIDForTesting const):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::modelInlinePreviewUUIDs const):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.h:

2022-04-14  Wenson Hsieh  <wenson_hsieh@apple.com>

        Undo option after invoking "Markup Image" says "Undo Paste"
        https://bugs.webkit.org/show_bug.cgi?id=239351
        rdar://91647863

        Reviewed by Darin Adler.

        Rename `replaceWithPasteboardData` to the more specific `replaceImageWithMarkupResults`. This method was
        introduced (and is currently only used) to drive image replacement using "Markup Image"; giving this method a
        more specific name allows us to hard-code `EditAction::MarkupImage` when calling into Editor to carry out the
        replacement editing action in `WebPage::replaceImageWithMarkupResults`.

        See WebCore/ChangeLog for additional details.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::replaceImageWithMarkupResults):
        (WebKit::WebPageProxy::replaceWithPasteboardData): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView imageAnalysisMarkupMenu]):
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::applyMarkupToControlledImage):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::replaceImageWithMarkupResults):
        (WebKit::WebPage::replaceWithPasteboardData): Deleted.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-14  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unreviewed, fix the Catalyst build after r292888

        `MCProfileConnection` is not available on Mac Catalyst.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _dataOwnerForPasteboard:]):

2022-04-14  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] [WK2] Managed pasteboard should function for all managed domains
        https://bugs.webkit.org/show_bug.cgi?id=239319
        rdar://80059355

        Reviewed by Kate Cheney.

        Unless a WebKit client has specified a data owner for the web view that is not _UIDataOwnerUndefined, fall back
        to _UIDataOwnerEnterprise when the current domain of the WKWebView is managed (that is, `-[MCProfileConnection
        isURLManaged:]` returns YES for the web view's current URL). This allows managed pasteboard to work for all
        WebKit clients, if the current URL is managed.

        Test: UIPasteboardTests.PerformAsDataOwnerWithManagedURL

        * Platform/spi/ios/UIKitSPI.h:

        Drive-by fix: move the staged declarations of `-_dataOwnerForCopy` and `-_dataOwnerForPaste` out of the IPI
        section, and into the non-internal SDK section.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _dataOwnerForPasteboard:]):

2022-04-14  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Clean up WebAuthenticationModern and WebAuthnProcess
        https://bugs.webkit.org/show_bug.cgi?id=239073
        rdar://problem/91571030

        The WebAuthenticationModern flag and WebAuthnProcess are no longer used
        and can be removed. This patch removes all references to both the flag
        and the process.

        Reviewed by Brent Fulgham.

        Covered by existing tests and manual testing on macOS / iOS.

        * Configurations/WebAuthnService.xcconfig: Removed.
        * Configurations/WebKit.xcconfig:
        * DerivedSources.make:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebAuthn.sb.in: Removed.
        * Scripts/process-entitlements.sh:
        * Shared/Cocoa/DefaultWebBrowserChecks.mm:
        (WebKit::isInWebKitChildProcess):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceMain.mm:
        (WebKit::XPCServiceEventHandler):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::processStorageClass):
        (WebKit::sandboxDirectory):
        * Sources.txt:
        * SourcesCocoa.txt:
        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetWebAuthenticationModernEnabled): Deleted.
        (WKPreferencesGetWebAuthenticationModernEnabled): Deleted.
        * UIProcess/API/C/WKPreferencesRefPrivate.h:
        * UIProcess/API/Cocoa/WKProcessPool.mm:
        (+[WKProcessPool _webAuthnProcessIdentifier]): Deleted.
        * UIProcess/API/Cocoa/WKProcessPoolPrivate.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (+[_WKWebAuthenticationPanel importLocalAuthenticatorWithAccessGroup:credential:error:]):
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::getLaunchOptions):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::notifyPreferencesChanged):
        * UIProcess/Launcher/ProcessLauncher.h:
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::serviceName):
        (WebKit::shouldLeakBoost):
        * UIProcess/WebAuthentication/Authenticator.h:
        (WebKit::Authenticator::requestData const):
        (WebKit::Authenticator::setWebAuthenticationModernEnabled): Deleted.
        (WebKit::Authenticator::webAuthenticationModernEnabled const): Deleted.
        (): Deleted.
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::authenticatorAdded):
        (WebKit::AuthenticatorManager::enableModernWebAuthentication): Deleted.
        * UIProcess/WebAuthentication/AuthenticatorManager.h:
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::makeCredential):
        (WebKit::LocalAuthenticator::getAssertion):
        (WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected):
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.cpp: Removed.
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.h: Removed.
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.cpp:
        (WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived):
        (WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::getWebAuthnProcessConnection): Deleted.
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::getWebAuthnProcessConnection): Deleted.
        * UIProcess/WebProcessProxy.h:
        * UIProcess/WebProcessProxy.messages.in:
        * WebAuthnProcess/EntryPoint/Cocoa/XPCService/WebAuthnService/Info-OSX.plist: Removed.
        * WebAuthnProcess/EntryPoint/Cocoa/XPCService/WebAuthnService/Info-iOS.plist: Removed.
        * WebAuthnProcess/EntryPoint/Cocoa/XPCService/WebAuthnServiceEntryPoint.mm: Removed.
        * WebAuthnProcess/WebAuthnConnectionToWebProcess.cpp: Removed.
        * WebAuthnProcess/WebAuthnConnectionToWebProcess.h: Removed.
        * WebAuthnProcess/WebAuthnConnectionToWebProcess.messages.in: Removed.
        * WebAuthnProcess/WebAuthnProcess.cpp: Removed.
        * WebAuthnProcess/WebAuthnProcess.h: Removed.
        * WebAuthnProcess/WebAuthnProcess.messages.in: Removed.
        * WebAuthnProcess/WebAuthnProcessCreationParameters.cpp: Removed.
        * WebAuthnProcess/WebAuthnProcessCreationParameters.h: Removed.
        * WebAuthnProcess/ios/WebAuthnProcessIOS.mm: Removed.
        * WebAuthnProcess/mac/WebAuthnProcessMac.mm: Removed.
        * WebAuthnProcess/mac/com.apple.WebKit.WebAuthnProcess.sb.in: Removed.
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::makeCredential):
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        (WebKit::WebAuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable):
        * WebProcess/WebAuthentication/WebAuthnProcessConnection.cpp: Removed.
        * WebProcess/WebAuthentication/WebAuthnProcessConnection.h: Removed.
        * WebProcess/WebAuthentication/WebAuthnProcessConnection.messages.in: Removed.
        * WebProcess/WebAuthentication/WebAuthnProcessConnectionInfo.h: Removed.
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::setMockWebAuthenticationConfiguration):
        * WebProcess/WebProcess.cpp:
        (WebKit::getWebAuthnProcessConnection): Deleted.
        (WebKit::WebProcess::ensureWebAuthnProcessConnection): Deleted.
        (WebKit::WebProcess::webAuthnProcessConnectionClosed): Deleted.
        * WebProcess/WebProcess.h:
        (WebKit::WebProcess::existingWebAuthnProcessConnection): Deleted.

2022-04-14  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add support for find-and-replace keyboard shortcut
        https://bugs.webkit.org/show_bug.cgi?id=239320
        rdar://91537724

        Reviewed by Wenson Hsieh.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView canPerformActionForWebView:withSender:]):
        (-[WKContentView findAndReplaceForWebView:]):

2022-04-14  Chris Dumez  <cdumez@apple.com>

        Drop inefficient String::append() overloads
        https://bugs.webkit.org/show_bug.cgi?id=239289

        Reviewed by Sam Weinig.

        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::populateSandboxInitializationParameters):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::setSuggestedFilename):

2022-04-14  Justin Michaud  <justin_michaud@apple.com>

        [PGO] We should be able to build WebKit to collect PGO profiles easily
        https://bugs.webkit.org/show_bug.cgi?id=238776

        Reviewed by Wenson Hsieh.

        * Configurations/BaseTarget.xcconfig:
        * Configurations/WebKit.xcconfig:
        * GPUProcess/mac/GPUProcessMac.mm:
        (WebKit::GPUProcess::initializeProcess):
        * NetworkProcess/mac/NetworkProcessMac.mm:
        (WebKit::NetworkProcess::initializeProcess):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::m_appHighlightsVisible):

2022-04-14  Youenn Fablet  <youenn@apple.com>

        REGRESSION (249029@main): http/wpt/cache-storage/cache-storage-networkprocess-crash.html is a flaky CRASH with ASSERTION FAILED: m_pageMap.isEmpty()
        https://bugs.webkit.org/show_bug.cgi?id=239095
        <rdar://problem/91595784>

        Reviewed by Chris Dumez.

        We send the same IPC message to close WebSWContextManagerConnection from either network process or UIProcess.
        To prevent closing twice the same connection, we exit early if the connection is closed.

        Covered by existing tests.

        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSharedWorkerContextManagerConnection.cpp:

2022-04-14  Kate Cheney  <katherine_cheney@apple.com>

        WKWebView: navigator.serviceWorker.register method fails for a new version of an already registered service worker.
        https://bugs.webkit.org/show_bug.cgi?id=229554
        <rdar://problem/82388593>

        Reviewed by Brent Fulgham.

        Plumbing to override the max service worker registration count for
        test purposes. See WebCore changelog for details.

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::NetworkSession):
        (WebKit::NetworkSession::ensureSWServer):
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::overrideServiceWorkerRegistrationCountTestingValue const):
        * NetworkProcess/NetworkSessionCreationParameters.cpp:
        (WebKit::NetworkSessionCreationParameters::encode const):
        (WebKit::NetworkSessionCreationParameters::decode):
        * NetworkProcess/NetworkSessionCreationParameters.h:
        * UIProcess/API/Cocoa/_WKWebsiteDataStoreConfiguration.h:
        * UIProcess/API/Cocoa/_WKWebsiteDataStoreConfiguration.mm:
        (-[_WKWebsiteDataStoreConfiguration overrideServiceWorkerRegistrationCountTestingValue]):
        (-[_WKWebsiteDataStoreConfiguration setOverrideServiceWorkerRegistrationCountTestingValue:]):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.cpp:
        (WebKit::WebsiteDataStoreConfiguration::copy const):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.h:
        (WebKit::WebsiteDataStoreConfiguration::overrideServiceWorkerRegistrationCountTestingValue const):
        (WebKit::WebsiteDataStoreConfiguration::setOverrideServiceWorkerRegistrationCountTestingValue):

2022-04-14  Zan Dobersek  <zdobersek@igalia.com>

        [WK2] Enable more efficient encoding of synchronous-message reply arguments
        https://bugs.webkit.org/show_bug.cgi?id=238740
        <rdar://problem/91567779>

        Reviewed by Kimmo Kinnunen.

        Handling of synchronous messages requires construction of a
        CompletionHandler object that wraps a lambda function which handles
        logging of the passed-in reply arguments as well as subsequent encoding
        and dispatching of the reply into the IPC channel.

        Right now, for any given message the CompletionHandler type is generated
        from the IPC message specification, and it's essentially a function type
        with a void return value and const lvalue references for every
        non-builtin parameter type. This type is imposed onto the lambda handler
        and when invoked, all the reply arguments are passed on to the IPC
        encoding as lvalue references.

        This inhibits opportunities where the reply argument could instead be
        moved into the completion handler invocation, enabling a more efficient
        encoding of the passed-in value. For instance, if a Unix file descriptor
        was moved into the completion handler invocation, it could be trickled
        down into an IPC::Attachment object and dispatched over IPC without any
        problems. Instead, because the lvalue reference is imposed as the type,
        it will have to be duplicated even if the object itself is expiring or
        would be movable down the invocation.

        To cover these cases, the actual completion handler type is now deduced
        from the synchronous-message-handling method itself. This means that
        the completion handler parameter for the given handler method can now
        specify whether it wants to receive reply arguments by value or by
        either lvalue or rvalue reference. The completion handler lambda can
        combine these parameter types with std::forward() to pass down the
        actual arguments in the most optimal fashion.

        To avoid problems, each CompletionHandler specialization retrieved from
        the method siganture is validated against the CompletionHandler type
        generated from the IPC specification, requiring that the decayed
        parameter types match between the two. It's still possible to directly
        use the CompletionHandler type from the IPC specification as the
        completion handler type in the message-handling method.

        An rvalue reference variant of ArgumentCoder<T>::encode() is added.
        Generic implementation again casts the passed-in reference into an
        rvalue and calls the encode() on that object. If that type provides
        ref-qualified encode() methods, implementations of those methods can
        adjust and more aggressively move things into the encoder when the
        method is called on an rvalue. It would also be possible to delete the
        ref-qualified method covering lvalues, meaning encoding would be allowed
        only for objects that are moved into the completion handler.

        For types with custom specializations of ArgumentCoder<T>, those
        specializations would again have to provide rvalue variants of the
        encode() method and handle the passed-in values appropriately.

        The send() methods that were previously generated for every IPC message
        are removed in favor of encoding and calling Connection::sendSyncReply()
        in the completion-handler lambda. Missing std::forward() calls are added
        in parameter pack expansions as required.

        * GPUProcess/media/RemoteCDMProxy.cpp:
        (WebKit::RemoteCDMProxy::getSupportedConfiguration):
        * GPUProcess/media/RemoteCDMProxy.h:
        * GPUProcess/media/RemoteImageDecoderAVFProxy.cpp:
        (WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex):
        * GPUProcess/media/RemoteImageDecoderAVFProxy.h:
        * Platform/IPC/ArgumentCoder.h:
        (IPC::ArgumentCoder::encode):
        * Platform/IPC/HandleMessage.h:
        (IPC::C::):
        (IPC::CompletionHandlerValidation::matchingParameters):
        (IPC::CompletionHandlerValidation::matchingTypes):
        (IPC::handleMessageSynchronous):
        (IPC::handleMessageSynchronousWantsConnection):
        (IPC::handleMessageAsync):
        (IPC::handleMessageAsyncWantsConnection):
        * Platform/IPC/StreamServerConnection.h:
        (IPC::StreamServerConnection::sendSyncReply):
        * Scripts/webkit/messages.py:
        (message_to_struct_declaration):
        (generate_message_handler):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (Messages::TestWithCVPixelBuffer::ReceiveCVPixelBuffer::send): Deleted.
        * Scripts/webkit/tests/TestWithCVPixelBufferMessages.h:
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (Messages::TestWithImageData::ReceiveImageData::send): Deleted.
        * Scripts/webkit/tests/TestWithImageDataMessages.h:
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (Messages::TestWithLegacyReceiver::CreatePlugin::send): Deleted.
        (Messages::TestWithLegacyReceiver::RunJavaScriptAlert::send): Deleted.
        (Messages::TestWithLegacyReceiver::GetPlugins::send): Deleted.
        (Messages::TestWithLegacyReceiver::GetPluginProcessConnection::send): Deleted.
        (Messages::TestWithLegacyReceiver::TestMultipleAttributes::send): Deleted.
        (Messages::TestWithLegacyReceiver::InterpretKeyEvent::send): Deleted.
        * Scripts/webkit/tests/TestWithLegacyReceiverMessages.h:
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (Messages::TestWithSemaphore::ReceiveSemaphore::send): Deleted.
        * Scripts/webkit/tests/TestWithSemaphoreMessages.h:
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (Messages::TestWithSuperclass::TestAsyncMessage::send): Deleted.
        (Messages::TestWithSuperclass::TestAsyncMessageWithNoArguments::send): Deleted.
        (Messages::TestWithSuperclass::TestAsyncMessageWithMultipleArguments::send): Deleted.
        (Messages::TestWithSuperclass::TestAsyncMessageWithConnection::send): Deleted.
        (Messages::TestWithSuperclass::TestSyncMessage::send): Deleted.
        (Messages::TestWithSuperclass::TestSynchronousMessage::send): Deleted.
        * Scripts/webkit/tests/TestWithSuperclassMessages.h:
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (Messages::TestWithoutAttributes::CreatePlugin::send): Deleted.
        (Messages::TestWithoutAttributes::RunJavaScriptAlert::send): Deleted.
        (Messages::TestWithoutAttributes::GetPlugins::send): Deleted.
        (Messages::TestWithoutAttributes::GetPluginProcessConnection::send): Deleted.
        (Messages::TestWithoutAttributes::TestMultipleAttributes::send): Deleted.
        (Messages::TestWithoutAttributes::InterpretKeyEvent::send): Deleted.
        * Scripts/webkit/tests/TestWithoutAttributesMessages.h:
        * UIProcess/ProvisionalPageProxy.cpp:
        Add a missing include that brings in the definition of the
        WebBackForwardListCounts type along with its encode() method.

2022-04-14  Kimmo Kinnunen  <kkinnunen@apple.com>

        Some IPC related message forwarding functions use const lvalue references
        https://bugs.webkit.org/show_bug.cgi?id=238937

        Reviewed by Antti Koivisto.

        Passing the message as const lvalue reference prevents IPC messages to be
        changed to support move semantics for some message arguments.

        Fix by using universal references in the shell function signatures.
        Forward the messages from one shell function to other as rvalue references
        via WTFMove, since the messages are always such that they are forwarded so.
        This also catches most such errors in the future.

        No new tests, refactor.

        * Platform/IPC/MessageSender.h:
        (IPC::MessageSender::send):
        (IPC::MessageSender::sendSync):
        (IPC::MessageSender::sendWithAsyncReply):
        * WebProcess/WebPage/DrawingArea.h:
        (WebKit::DrawingArea::send):

2022-04-14  Youenn Fablet  <youenn@apple.com>

        Expose workers as service worker clients and implement registration matching for dedicated workers
        https://bugs.webkit.org/show_bug.cgi?id=239066

        Reviewed by Chris Dumez.

        Reuse the same strategy for DedicatedWorkers as for Documents to match registrations and control then:
        - Do matching in network process
        - If matching, send a message to WebProcess to set the matching registration data.
        Add specific handling for worker registration rematching in case of redirections:
        - If redirection comes from service worker (via respondWith), do rematching.
        - If redirection comes from network, do not do rematching.

        * NetworkProcess/NetworkResourceLoader.cpp:
        * NetworkProcess/ServiceWorker/ServiceWorkerFetchTask.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * WebProcess/Network/WebLoaderStrategy.cpp:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        * WebProcess/Storage/WebSWClientConnection.h:
        * WebProcess/Storage/WebSWClientConnection.messages.in:

2022-04-14  Youenn Fablet  <youenn@apple.com>

        A shared worker in a cached page should not allow the remote shared worker to continue executing
        https://bugs.webkit.org/show_bug.cgi?id=239286

        Reviewed by Chris Dumez.

        Store whether shared worker objects are suspended or resumed.
        If all objects are suspended, suspend the remote shared worker.
        Otherwise, keep the remote shared worker live.
        Add plumbing code to make this happen.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.messages.in:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * WebProcess/Storage/WebSharedWorkerContextManagerConnection.messages.in:
        * WebProcess/Storage/WebSharedWorkerObjectConnection.cpp:
        * WebProcess/Storage/WebSharedWorkerObjectConnection.h:

2022-04-13  Chris Dumez  <cdumez@apple.com>

        Replace calls to substring(0, x) with the more concise left(x)
        https://bugs.webkit.org/show_bug.cgi?id=239306

        Reviewed by Darin Adler.

        * NetworkProcess/WebStorage/LocalStorageDatabaseTracker.cpp:
        (WebKit::LocalStorageDatabaseTracker::origins const):
        * NetworkProcess/cache/NetworkCacheStorage.cpp:
        (WebKit::NetworkCache::traverseRecordsFiles):
        * NetworkProcess/storage/LocalStorageManager.cpp:
        (WebKit::fileNameToOrigin):
        * Shared/API/c/WKString.cpp:
        (WKStringGetCharacters):
        * UIProcess/API/glib/InputMethodFilter.cpp:
        (WebKit::InputMethodFilter::notifySurrounding):
        * UIProcess/gtk/GtkSettingsManager.cpp:
        (WebKit::GtkSettingsManager::themeName const):
        * UIProcess/gtk/TextCheckerGtk.cpp:
        (WebKit::TextChecker::checkTextOfParagraph):
        * UIProcess/win/WebProcessPoolWin.cpp:
        (WebKit::initializeRemoteInspectorServer):

2022-04-13  Alex Christensen  <achristensen@webkit.org>

        Adjust when _setPrivacyProxyFailClosedForUnreachableNonMainHosts is called
        https://bugs.webkit.org/show_bug.cgi?id=237735

        Reviewed by Geoff Garen.

        This is recommitting http://trac.webkit.org/r291598 but leaving the definition of PrivateRelayed::Yes and ::No
        based on whether metrics._privacyStance == nw_connection_privacy_stance_direct instead of nw_connection_privacy_stance_failed.
        It has flip flopped several times in the various related commits, but it needs to be nw_connection_privacy_stance_direct.
        I manually verified that this fixes <rdar://88965550> without reintroducing <rdar://90677955>.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-04-13  Elliott Williams  <emw@apple.com>

        [Xcode] Fix public watchOS workspace build by updating scheme and build settings
        https://bugs.webkit.org/show_bug.cgi?id=239301

        Reviewed by Alexey Proskuryakov.

        * Configurations/WebKit.xcconfig:

2022-04-13  Chris Dumez  <cdumez@apple.com>

        WebContent crashes with SIGTERM_TIMEOUT on macOS
        https://bugs.webkit.org/show_bug.cgi?id=239298
        <rdar://90665705>

        Reviewed by Darin Adler.

        To make sure that WebProcesses cannot use any CPU time while in the WebProcess cache on macOS, I recently tried to
        suspend these cached processes. However, since we haven't adopted RunningBoard on macOS yet, I was doing suspension
        and resuming manually via the SIGSTOP & SIGCONT signals. While this properly suspended our cached processes, this
        introduced SIGTERM_TIMEOUT crashes and potential delays when exiting Safari or logging out of macOS while Safari is
        running. This is because our cached & suspended processes are unable to process the SIGTERM signal they receive and
        thus don't cleanly exit. After a timeout, the system forcefully kills them and generates a crash log with
        SIGTERM_TIMEOUT to let us know.

        To address the issue, I am disabling the WebProcess suspension logic that I recently added. We can reconsider doing
        something like this once we adopt RunningBoard on macOS, assuming the same issue doesn't affect suspension via
        RunningBoard.

        * UIProcess/mac/WebProcessProxyMac.mm:
        (WebKit::WebProcessProxy::platformSuspendProcess):
        (WebKit::WebProcessProxy::platformResumeProcess):

2022-04-13  Michael Catanzaro  <mcatanzaro@redhat.com>

        Misc compiler warnings, April 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=239290

        Reviewed by Adrian Perez de Castro.

        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedPath):

2022-04-13  Simon Fraser  <simon.fraser@apple.com>

        [css-scroll-snap] scrollIntoView fails with scroll-snap-type on :root
        https://bugs.webkit.org/show_bug.cgi?id=239063
        <rdar://problem/91603363>

        Reviewed by Dean Jackson.

        Programmatic smooth scrolls on iframe documents were broken because
        ScrollingTreeFrameScrollingNodeRemoteIOS was overlooked when adding support (easily done
        since the main frame's scrolling is controlled via the WKWebView; some unification here
        would be beneficial). Implementing startAnimatedScrollToPosition() and stopAnimatedScroll()
        on ScrollingTreeFrameScrollingNodeRemoteIOS fixes this.

        However, this revealed an additional bug; RenderLayer::scrollRectToVisible() failed to clamp
        the target scroll position correctly, and nothing in the iOS-smooth scrolling code path
        clamped, so the scroll would go too far.

        Testing required getting UIHelper.waitForScrollCompletion() to work. This is based on the
        uiController.didEndScrollingCallback, but that was only hooked up for the main scroller. So
        make it work for all scrollers by plumbing ScrollingNodeIDs through
        scrollingNodeScrollViewDidScroll() and friends so that everything ends up in -[WKWebViewIOS
        _didFinishScrolling:] with a UIScrollView argument; to avoid any behavior change, this bails
        for non-main scroll views, but TestRunnerWKWebView overrides it to make testing work.

        Test: fast/scrolling/ios/constrain-scrollintoview-position.html

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _didFinishScrolling:]):
        (-[WKWebView scrollViewDidEndDragging:willDecelerate:]):
        (-[WKWebView scrollViewDidEndDecelerating:]):
        (-[WKWebView scrollViewDidScrollToTop:]):
        (-[WKWebView scrollViewDidEndScrollingAnimation:]):
        (-[WKWebView _didFinishScrolling]): Deleted.
        * UIProcess/PageClient.h:
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp:
        (WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeDidScroll):
        * UIProcess/RemoteLayerTree/ios/RemoteScrollingCoordinatorProxyIOS.mm:
        (WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeWillStartPanGesture):
        (WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeWillStartScroll):
        (WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeDidEndScroll):
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeFrameScrollingNodeRemoteIOS.h:
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeFrameScrollingNodeRemoteIOS.mm:
        (WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::startAnimatedScrollToPosition):
        (WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::stopAnimatedScroll):
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (-[WKScrollingNodeScrollViewDelegate scrollViewDidEndScrollingAnimation:]):
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/ios/PageClientImplIOS.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::scrollingNodeScrollViewWillStartPanGesture):
        (WebKit::PageClientImpl::scrollingNodeScrollViewDidScroll):
        (WebKit::PageClientImpl::scrollingNodeScrollWillStartScroll):
        (WebKit::PageClientImpl::scrollingNodeScrollDidEndScroll):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _scrollingNodeScrollingWillBegin:]):
        (-[WKContentView _scrollingNodeScrollingDidEnd:]):
        (-[WKContentView keyboardScrollViewAnimatorDidFinishScrolling:]):
        (-[WKContentView _scrollingNodeScrollingWillBegin]): Deleted.
        (-[WKContentView _scrollingNodeScrollingDidEnd]): Deleted.
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::scrollingNodeScrollViewWillStartPanGesture):
        (WebKit::WebPageProxy::scrollingNodeScrollViewDidScroll):
        (WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll):
        (WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll):
        * WebProcess/WebCoreSupport/ios/WebChromeClientIOS.mm:
        (WebKit::WebChromeClient::didStartOverflowScroll):
        (WebKit::WebChromeClient::didEndOverflowScroll):

2022-04-13  Chris Dumez  <cdumez@apple.com>

        Replace AtomString(const char*) with AtomString::fromLatin1(const char*)
        https://bugs.webkit.org/show_bug.cgi?id=239127

        Reviewed by Darin Adler.

        * WebProcess/Plugins/PDF/PDFPluginPasswordField.mm:
        (WebKit::PDFPluginPasswordField::createAnnotationElement):
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPC::messages):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::focusedElementInformation):

2022-04-13  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteRenderingBackend should have dedicated IPC::Connection for out-of-stream messages
        https://bugs.webkit.org/show_bug.cgi?id=238516

        Reviewed by Simon Fraser.

        Use dedicated IPC::Connection for RemoteRenderingBackend IPC stream connection instead
        of using the WP-GPUP main connection. RemoteDisplayListRecorder starts listening to
        its messages in the worker thread. At that point, some out-of-stream message for that
        id might already have been dispatched to main thread, causing missing message and assert.

        Instead, use dedicated connection and route all the messages to the StreamServerConnection
        in a "message queue". This way when each out-of-stream message marker is processed, the
        message will be, directly or eventually, found from the message queue.

        Remove workarounds:
         - Adding a listener to the main WP-GPUP connection for all RemoteDisplayListRecorder messages
           and routing them to particular StreamServerConnection. This was problematic since
           there are many RRB StreamServerConnection instances, one per Page, but only one WP-GPUP
           connection.
         - RELEASE_LOG in MessageReceiveQueueMap about warning for the above. Turn this back into an
           ASSERT.

        Since IPC::StreamClientConnection and IPC::StreamServerConnection are like IPC::Connection,
        add open() and invalidate() calls. These have same contract as with IPC::Connection:
        open() should be called if connection is to be used, invalidate() must be called if open() was called.
        These calls have an effect currently only with dedicated connections, but these are added to all
        IPC::Stream*Connection clients for consistency and future uses.

        Changes semantics of IPC::Connection slightly:
        Before, there was no untrusted holders of "server" IPC::Connection, e.g. the IPC::Connection instances
        were never instantiated by WP.
        After, untrusted WP instantiates these IPC stream dedicated connections.
        This is accounted in the case where IPC::Connection ensures that IPC::MessageNames::InitializeConnection
        message is not acted on twice.

        Tested by imported/w3c/web-platform-tests/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener.html
                  --child-processes=1 --experimental-feature=UseGPUProcessForDOMRenderingEnabled=true --iterations=100 --force --simulator

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::createRenderingBackend):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/GPUConnectionToWebProcess.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::initialize):
        (WebKit::RemoteGraphicsContextGL::stopListeningForIPC):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::create):
        (WebKit::RemoteRenderingBackend::RemoteRenderingBackend):
        (WebKit::RemoteRenderingBackend::startListeningForIPC):
        (WebKit::RemoteRenderingBackend::stopListeningForIPC):
        (WebKit::RemoteRenderingBackend::messageSenderConnection const):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::initialize):
        (WebKit::RemoteGPU::stopListeningForIPC):
        * Platform/IPC/MessageReceiveQueueMap.cpp:
        (IPC::MessageReceiveQueueMap::addImpl):
        (IPC::MessageReceiveQueueMap::remove):
        * Platform/IPC/StreamClientConnection.cpp:
        (IPC::StreamClientConnection::createWithDedicatedConnection):
        (IPC::StreamClientConnection::StreamClientConnection):
        (IPC::StreamClientConnection::~StreamClientConnection):
        (IPC::StreamClientConnection::open):
        (IPC::StreamClientConnection::invalidate):
        (IPC::StreamClientConnection::connectionForTesting):
        * Platform/IPC/StreamClientConnection.h:
        (IPC::StreamClientConnection::send):
        (IPC::StreamClientConnection::sendSync):
        (IPC::StreamClientConnection::waitForAndDispatchImmediately):
        (IPC::StreamClientConnection::trySendSyncStream):
        * Platform/IPC/StreamServerConnection.cpp:
        (IPC::StreamServerConnection::create):
        (IPC::StreamServerConnection::createWithDedicatedConnection):
        (IPC::StreamServerConnectionBase::StreamServerConnectionBase):
        (IPC::StreamServerConnectionBase::~StreamServerConnectionBase):
        (IPC::StreamServerConnectionBase::open):
        (IPC::StreamServerConnectionBase::invalidate):
        (IPC::StreamServerConnectionBase::startReceivingMessagesImpl):
        (IPC::StreamServerConnectionBase::stopReceivingMessagesImpl):
        * Platform/IPC/StreamServerConnection.h:
        * Shared/IPCStreamTester.cpp:
        (WebKit::IPCStreamTester::initialize):
        (WebKit::IPCStreamTester::stopListeningForIPC):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy):
        (WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection):
        (WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.cpp:
        (WebKit::RemoteGPUProxy::RemoteGPUProxy):
        (WebKit::RemoteGPUProxy::abandonGPUProcess):
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::sendMessage):
        (WebKit::IPCTestingAPI::JSIPCStreamClientConnection::sendSyncMessage):

2022-04-12  Wenson Hsieh  <wenson_hsieh@apple.com>

        Remove support for drawing cropped image overlays when hovering over "Copy Cropped Image"
        https://bugs.webkit.org/show_bug.cgi?id=239269

        Reviewed by Darin Adler.

        * Shared/ContextMenuContextData.cpp:
        (WebKit::ContextMenuContextData::ContextMenuContextData):
        (WebKit::ContextMenuContextData::encode const):
        (WebKit::ContextMenuContextData::decode):
        * Shared/ContextMenuContextData.h:
        (WebKit::ContextMenuContextData::hitTestedElementContext const): Deleted.
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didDismissContextMenu):
        (WebKit::WebPageProxy::resetStateAfterProcessExited):
        * UIProcess/WebPageProxy.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (-[WKMenuDelegate menu:willHighlightItem:]): Deleted.
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::handleContextMenuCopyCroppedImage):
        (WebKit::WebPageProxy::willHighlightContextMenuItem): Deleted.
        * WebProcess/WebPage/WebContextMenu.cpp:
        (WebKit::WebContextMenu::show):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didDismissContextMenu):
        (WebKit::WebPage::installCroppedImageOverlay): Deleted.
        (WebKit::WebPage::setCroppedImageOverlayVisibility): Deleted.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-12  Elliott Williams  <emw@apple.com>

        [Xcode] In open-source builds, disable bitcode in xcconfigs instead of build-webkit
        https://bugs.webkit.org/show_bug.cgi?id=239262

        Reviewed by Alexey Proskuryakov.

        * Configurations/Base.xcconfig:
        * SwiftOverlay/Configurations/Base.xcconfig:

2022-04-12  Tim Horton  <timothy_horton@apple.com>

        Adopt "version set"-based linked-on-or-after checks instead of platform-specific ones
        https://bugs.webkit.org/show_bug.cgi?id=239054
        <rdar://problem/83436715>

        Reviewed by Wenson Hsieh.

        * Shared/AuxiliaryProcess.h:
        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::AuxiliaryProcess::platformInitialize):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors):
        (WebKit::XPCServiceInitializerDelegate::getClientSDKVersion): Deleted.
        (WebKit::XPCServiceInitializerDelegate::getLinkedOnOrAfterOverride): Deleted.
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::ProcessLauncher::launchProcess):
        Instead of transmitting the SDK version and override state in the bootstrap
        message, just send the computed set of behaviors.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::configurationForSessionID):
        * Shared/Cocoa/CompletionHandlerCallChecker.mm:
        (WebKit::shouldThrowExceptionForDuplicateCompletionHandlerCall):
        * Shared/Cocoa/DefaultWebBrowserChecks.mm:
        (WebKit::determineITPState):
        * Shared/Cocoa/WebKit2InitializeCocoa.mm:
        (WebKit::InitializeWebKit2):
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultPassiveTouchListenersAsDefaultOnDocument):
        (WebKit::defaultCSSOMViewScrollingAPIEnabled):
        (WebKit::defaultPassiveWheelListenersAsDefaultOnDocument):
        (WebKit::defaultWheelEventGesturesBecomeNonBlocking):
        (WebKit::defaultOfflineWebApplicationCacheEnabled):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageReload):
        * UIProcess/API/Cocoa/WKProcessPool.mm:
        (+[WKProcessPool _setLinkedOnOrBeforeEverythingForTesting]):
        (+[WKProcessPool _setLinkedOnOrAfterEverything]):
        * UIProcess/API/Cocoa/WKWebView.mm:
        (shouldAllowPictureInPictureMediaPlayback):
        (shouldAllowSettingAnyXHRHeaderFromFileURLs):
        (shouldRequireUserGestureToLoadVideo):
        (shouldRestrictBaseURLSchemes):
        (-[WKWebView _initializeWithConfiguration:]):
        (-[WKWebView _setupPageConfiguration:]):
        (-[WKWebView reload]):
        (-[WKWebView takeSnapshotWithConfiguration:completionHandler:]):
        * UIProcess/API/Cocoa/WKWebViewConfiguration.mm:
        (defaultShouldDecidePolicyBeforeLoadingQuickLookPreview):
        (-[WKWebViewConfiguration init]):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore init]):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _computedObscuredInset]):
        * UIProcess/API/mac/WKWebViewMac.mm:
        (-[WKWebView _web_dragDestinationActionForDraggingInfo:]):
        * UIProcess/Inspector/mac/WKInspectorViewController.mm:
        (-[WKInspectorViewController inspectorWKWebViewReload:]):
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp:
        (WebKit::RemoteScrollingCoordinatorProxy::hasScrollableOrZoomedMainFrame const):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle):
        (WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::createWebPage):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::isMainThreadOrCheckDisabled):
        * UIProcess/ios/WKContentView.mm:
        (-[WKContentView _commonInitializationWithProcessPool:configuration:]):
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _shouldUseContextMenus]):
        (applicationIsKnownToIgnoreMouseEvents):
        * UIProcess/ios/WKScrollView.mm:
        (-[WKScrollView _systemContentInset]):
        * UIProcess/ios/WKStylusDeviceObserver.mm:
        (-[WKStylusDeviceObserver start]):
        (-[WKStylusDeviceObserver stop]):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::desktopClassBrowsingRecommended):
        Adopt the new naming.

2022-04-12  Elliott Williams  <emw@apple.com>

        Reland "[XCBuild] Enable dependency validation by default"
        https://bugs.webkit.org/show_bug.cgi?id=238901
        <rdar://problem/91379968>

        Reviewed by Alexey Proskuryakov.

        * Configurations/DebugRelease.xcconfig: In open-source builds, disable
        VALIDATE_DEPENDENCIES when there is no PRODUCT_TYPE (i.e. not building
        a native target).

2022-04-12  Jer Noble  <jer.noble@apple.com>

        Leak of MediaSourcePrivateAVFObjC and RemoteMediaSourceProxy
        https://bugs.webkit.org/show_bug.cgi?id=239088
        <rdar://90693094>

        Reviewed by Eric Carlson.

        Adopt changes to MediaSourcePrivateClient making it a CanMakeWeakPtr class.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::loadMediaSource):
        * GPUProcess/media/RemoteMediaSourceProxy.h:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::load):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:
        * WebProcess/GPU/media/MediaSourcePrivateRemote.cpp:
        (WebKit::MediaSourcePrivateRemote::create):
        (WebKit::MediaSourcePrivateRemote::MediaSourcePrivateRemote):
        (WebKit::MediaSourcePrivateRemote::seekToTime):
        * WebProcess/GPU/media/MediaSourcePrivateRemote.h:

2022-04-12  Ada Chan  <adachan@apple.com>

        [WebXR] Implement the WebXRFrame methods for getting joints' poses and radii
        https://bugs.webkit.org/show_bug.cgi?id=238968

        Reviewed by Dean Jackson.

        * Shared/XR/XRDeviceProxy.cpp:
        (WebKit::XRDeviceProxy::initializeTrackingAndRendering):
        Initialize input sources on session start.

2022-04-12  Youenn Fablet  <youenn@apple.com>

        Remove getsockopt from WebProcess sandboxes
        https://bugs.webkit.org/show_bug.cgi?id=239120
        <rdar://74988599>

        Reviewed by Anders Carlsson.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-04-12  Youenn Fablet  <youenn@apple.com>

        Add logging in case WebsiteDataStore is not found for persistent notification events
        https://bugs.webkit.org/show_bug.cgi?id=239111

        Reviewed by Chris Dumez.

        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        (WebKit::dispatchDidClickNotification):
        (WebKit::WebNotificationManagerProxy::providerDidCloseNotifications):

2022-04-12  Kimmo Kinnunen  <kkinnunen@apple.com>

        FunctionDispatcher should not be RefCounted
        https://bugs.webkit.org/show_bug.cgi?id=231940

        Reviewed by Chris Dumez.

        Remove ThreadSafeRefCounted from FunctionDispatcher. Make all existing
        function dispatchers refcounted.

        No new tests, refactor.

        * NetworkProcess/cache/NetworkCacheData.h:
        * Platform/IPC/StreamConnectionWorkQueue.h:

2022-04-11  Zan Dobersek  <zdobersek@igalia.com>

        [WK2] Simplify IPC encoding, decoding of tuples
        https://bugs.webkit.org/show_bug.cgi?id=239062

        Reviewed by Darin Adler.

        For encoding each element of a given tuple, an index sequence is used in
        combination with a fold expression calling ArgumentCoder<T>::encode().

        For decoding, std::tuple_cat() is used to concatenate a single-element
        tuple containing the current element with the tuple of the remaining
        decoded elements.

        No real change in behavior, sequence of encoding and decoding remains
        the same.

        * Platform/IPC/ArgumentCoders.h:
        (IPC::TupleEncoder::encode):
        (IPC::tupleFromTupleAndObject): Deleted.
        (IPC::TupleDecoderImpl::decode): Deleted.
        (IPC::TupleDecoderImpl<Type>::decode): Deleted.
        (IPC::TupleDecoder::decode): Deleted.
        (IPC::TupleDecoder<0>::decode): Deleted.

2022-04-11  Diego Pino Garcia  <dpino@igalia.com>

        [GLIB] Unreviewed, build fix for Debian Stable after r292251
        https://bugs.webkit.org/show_bug.cgi?id=239102

        * UIProcess/gtk/WaylandCompositor.cpp:
        (WebKit::WaylandCompositor::initializeEGL): Convert char* to String.

2022-04-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION: Web content process crashes when triggering Live Text in recoveryOS
        https://bugs.webkit.org/show_bug.cgi?id=239096
        rdar://91592943

        Reviewed by Tim Horton.

        Make encoding or decoding `RetainPtr<VKCImageAnalysis>` a no-op when the VisionKitCore framework is unavailable
        on Cocoa platforms, rather than crashing (due to `PAL::getVKCImageAnalysisClass()` returning nil).

        * Shared/Cocoa/WebCoreArgumentCodersCocoa.mm:
        (IPC::ArgumentCoder<RetainPtr<VKCImageAnalysis>>::encode):
        (IPC::ArgumentCoder<RetainPtr<VKCImageAnalysis>>::decode):

2022-04-11  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] Hook up device.queue to the IDL
        https://bugs.webkit.org/show_bug.cgi?id=239043

        Reviewed by Kimmo Kinnunen.

        * GPUProcess/graphics/WebGPU/RemoteAdapter.cpp:
        (WebKit::RemoteAdapter::requestDevice):
        * GPUProcess/graphics/WebGPU/RemoteAdapter.h:
        * GPUProcess/graphics/WebGPU/RemoteAdapter.messages.in:
        * GPUProcess/graphics/WebGPU/RemoteDevice.cpp:
        (WebKit::RemoteDevice::RemoteDevice):
        (WebKit::RemoteDevice::queue):
        * GPUProcess/graphics/WebGPU/RemoteDevice.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteAdapterProxy.cpp:
        (WebKit::WebGPU::RemoteAdapterProxy::requestDevice):
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.cpp:
        (WebKit::WebGPU::RemoteDeviceProxy::RemoteDeviceProxy):
        (WebKit::WebGPU::RemoteDeviceProxy::queue):
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.h:

2022-04-11  Alex Christensen  <achristensen@webkit.org>

        Use WebKit::blockedError instead of ResourceLoader::blockedError in WebLoaderStrategy::scheduleLoadFromNetworkProcess
        https://bugs.webkit.org/show_bug.cgi?id=239089
        <rdar://91295875>

        Reviewed by Chris Dumez.

        The latter dereferences the frame loader which can be null.

        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess):

2022-04-11  Simon Fraser  <simon.fraser@apple.com>

        Crash under ShareableBitmap::makeCGImageCopy()
        https://bugs.webkit.org/show_bug.cgi?id=239085
        <rdar://91073153>

        Reviewed by Wenson Hsieh.

        ShareableBitmap::create() can return null, so check it before calling makeCGImageCopy()
        on the result.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::applyBackingStoreToLayer):

2022-04-11  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Ignore find interaction deprecation warnings
        https://bugs.webkit.org/show_bug.cgi?id=239084

        Unreviewed, build fix.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _setFindInteractionEnabled:]):

2022-04-11  Jer Noble  <jer.noble@apple.com>

        REGRESSION(r292051-r292022): [ iOS ] media/video-object-fit.html is a constant image failure
        https://bugs.webkit.org/show_bug.cgi?id=238634
        <rdar://problem/91125776>

        Reviewed by Eric Carlson.

        Use an `std::<optional> bool` rather than `bool` to cache values sent to WebContent, so that
        when a new value is pushed in, it's sent to WebContent the first time regardless of the default
        value.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:

2022-04-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION (r289785): [iOS] Unable to double-click to select a word in a received email
        https://bugs.webkit.org/show_bug.cgi?id=239055
        rdar://90736710

        Reviewed by Tim Horton.

        Following r289785, double-clicking text in Mail message viewer on iOS (or more generally, any web view in an app
        that does not have the "UIApplicationSupportsIndirectInputEvents" application plist key set to `YES`) produces a
        selection that is immediately removed. This is because after double clicking, the synthetic click gesture fires
        and immediately clears the selection.

        In Safari (an application that sets UIApplicationSupportsIndirectInputEvents), the non-pointer gesture
        recognizers (e.g. synthetic taps) don't fire because the type of the `UITouch` is `UITouchTypeIndirectPointer`,
        which allows us to return `NO` from `-gestureRecognizer:shouldReceiveTouch:` for anything that is not the mouse
        gesture recognizer's current mouse touch.

        For apps that lack this plist key, the touch type remains `UITouchTypeDirect` to avoid breaking compatibility,
        even for events that are generated via a pointing device (i.e. trackpad). This means that we no longer route
        these events solely to the mouse gesture recognizer. To fix this, use `-_isPointerTouch` instead of
        `-[UITouch type]` here. Unlike the latter, the former isn't affected by the "supports indirect input" plist key.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView gestureRecognizer:shouldReceiveTouch:]):
        * UIProcess/ios/WKMouseGestureRecognizer.mm:
        (-[WKMouseGestureRecognizer _shouldReceiveTouch:forEvent:recognizerView:]):

        Also fix a similar bug here, where the check against `UITouchTypeIndirectPointer` instead of `-_isPointerEvent`
        causes apps without the UIApplicationSupportsIndirectInputEvents key to lose the ability to listen for mousedown
        and mouseup events when the user clicks via trackpad on iPad.

2022-04-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Ensure requestPin callback on main thread
        https://bugs.webkit.org/show_bug.cgi?id=238962
        rdar://problem/91446051

        Reviewed by Brent Fulgham.

        This callback gets called by a non-main thread when making calls via
        ASA. This patch uses ensureOnMainThread to ensure the completion handler
        is called on the main thread. It also upgrades the callback asserts to
        RELEASE_ASSERTs to avoid this issue in the future.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::getAssertion):
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticationPanelClient.mm:
        (WebKit::WebAuthenticationPanelClient::requestPin const):
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.cpp:
        (WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived):
        (WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement):

2022-04-10  Chris Dumez  <cdumez@apple.com>

        Unreviewed Windows build fix after r292696.

        * Platform/win/LoggingWin.cpp:
        (WebKit::logLevelString):

2022-04-10  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Child process happens to remain alive even after IPC::Connection is disconnected
        https://bugs.webkit.org/show_bug.cgi?id=204221

        Reviewed by Don Olmstead.

        After running layout tests, I observed some processes of
        WebKitWebProcess.exe and WebKitNetworkProcess.exe were still
        alive. These child processed should exit if the named pipe of
        IPC::Connection is broken.

        * Platform/IPC/win/ConnectionWin.cpp:
        (IPC::Connection::readEventHandler): Call connectionDidClose() in the case of ERROR_BROKEN_PIPE.

2022-04-09  Simon Fraser  <simon.fraser@apple.com>

        Put layer backing store buffers into the per-RemoteRenderingBackend IOSurfacePool
        https://bugs.webkit.org/show_bug.cgi?id=238972
        <rdar://83437978>

        Reviewed by Tim Horton.

        Give each RemoteRenderingBackend its own IOSurfacePool. RemoteImageBuffer gets surfaces
        from this pool, and RemoteRenderingBackend::willDestroyImageBuffer() puts surfaces in,
        if they are layer backing store surfaces.

        The low memory handler removes all surfaces from the pool.

        * GPUProcess/graphics/RemoteImageBuffer.h:
        (WebKit::RemoteImageBuffer::create):
        (WebKit::RemoteImageBuffer::~RemoteImageBuffer):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::RemoteRenderingBackend):
        (WebKit::RemoteRenderingBackend::willDestroyImageBuffer):
        (WebKit::RemoteRenderingBackend::lowMemoryHandler):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        (WebKit::RemoteRenderingBackend::ioSurfacePool const):

2022-04-09  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK][WPE] Missing inter-module documentation links
        https://bugs.webkit.org/show_bug.cgi?id=239016

        Reviewed by Michael Catanzaro.

        Add JS snippets to be used in the gi-docgen output to setup links to
        other modules. Take advantage of being able to compute the documentation
        API version suffix from the currently loaded page URL, which avoids having
        a number of templates depending on the API version and having to deal with
        the documentation API version being sometimes different than the actual API
        version of the library. The URLs for GTK3 vs. GTK4 documentation cannot be
        handled in the same way, and instead the JS snippet is also a template
        expanded by CMake to allows using the ${GTK_API_VERSION} variable there.

        * PlatformGTK.cmake: Set urlmap.js as documentation content template.
        * gtk/urlmap.js.in: Added.
        * gtk/webkit2gtk-webextension.toml.in: Use urlmap.js from added template.
        * gtk/webkit2gtk.toml.in: Ditto.
        * wpe/urlmap.js: Added.
        (const.baseURLApiLevelSuffix):
        * wpe/wpewebextension.toml.in: Use added urlmap.js file.
        * wpe/wpewebkit.toml.in: Ditto.

2022-04-09  Sihui Liu  <sihui_liu@apple.com>

        Move canAccessStorage() check from SecurityOrigin to ScriptExecutionContext
        https://bugs.webkit.org/show_bug.cgi?id=238524
        <rdar://problem/91318259>

        Reviewed by Chris Dumez.

        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::storageBlockingStateChanged):

2022-04-08  Chris Dumez  <cdumez@apple.com>

        Drop unused pluginReplacementScriptObject
        https://bugs.webkit.org/show_bug.cgi?id=239008

        Reviewed by Geoff Garen.

        Drop unused pluginReplacementScriptObject as it is always null.

        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::scriptObject): Deleted.
        * WebProcess/Plugins/PluginView.h:

2022-04-08  Elliott Williams  <emw@apple.com>

        [Xcode] Avoid targeting 32-bit iOS and Mac architectures
        https://bugs.webkit.org/show_bug.cgi?id=238971

        Reviewed by Alexey Proskuryakov.

        * Configurations/DebugRelease.xcconfig:

2022-04-08  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r292429.
        https://bugs.webkit.org/show_bug.cgi?id=239011

        Introduced Data Detectors regression in Mail

        Reverted changeset:

        "Unreviewed, reverting r291821."
        https://bugs.webkit.org/show_bug.cgi?id=238839
        https://commits.webkit.org/r292429

2022-04-08  Gavin Phillips  <gavin.p@apple.com>

        Remove unneeded CoreIPC messages and corresponding handlers related to StorageManagerSet
        https://bugs.webkit.org/show_bug.cgi?id=238938

        Reviewed by Chris Dumez.

        There are various CoreIPC messages related to StorageManagerSet which are no longer needed. This
        change removes them.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * NetworkProcess/NetworkProcess.cpp:
        * NetworkProcess/WebStorage/StorageManagerSet.cpp: Removed.
        * NetworkProcess/WebStorage/StorageManagerSet.h: Removed.
        * NetworkProcess/WebStorage/StorageManagerSet.messages.in: Removed.
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebStorage/StorageAreaMap.cpp:

2022-04-08  Jonathan Bedard  <jbedard@apple.com>

        [iOS 15.4] Fix embedded device build
        https://bugs.webkit.org/show_bug.cgi?id=239012
        <rdar://problem/91495761>

        Reviewed by Ryan Haddad.

        * Configurations/Base.xcconfig: Allow AdHoc codesigning.

2022-04-08  Philippe Normand  <pnormand@igalia.com>

        [WPE][2.36] Build with a11y disabled fails
        https://bugs.webkit.org/show_bug.cgi?id=239004

        Reviewed by Michael Catanzaro.

        Add accessibility build guards.

        * UIProcess/Launcher/glib/XDGDBusProxy.cpp:
        (WebKit::XDGDBusProxy::XDGDBusProxy):
        (WebKit::XDGDBusProxy::launch const):

2022-04-08  Elliott Williams  <emw@apple.com>

        Unreviewed, reverting r292591.

        Causing spurious EWS errors

        Reverted changeset:

        "[XCBuild] Enable dependency validation by default"
        https://bugs.webkit.org/show_bug.cgi?id=238901
        https://commits.webkit.org/r292591

2022-04-08  Gavin Phillips  <gavin.p@apple.com>

        Remove misc unused CoreIPC messages/handlers that have no instances of messages being dispatched to them
        https://bugs.webkit.org/show_bug.cgi?id=238996

        Reviewed by Chris Dumez.

        Remove misc unused CoreIPC messages/handlers that have no instances of messages being dispatched to them. This includes:
        WebPage::FrameBecameRemote, WebInspectorUIProxy::BringInspectedPageToFront, WebProcess::refreshPlugins, NetworkProcess::SetQOS
        WebPage::GetPositionInformation, WebPage::InvalidateMediaSessionCoordinator, RemoteCDMInstanceSessionProxy::DisplayIDChanged.

        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::displayIDChanged): Deleted.
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.h:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * NetworkProcess/NetworkProcess.messages.in:
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::bringInspectedPageToFront): Deleted.
        * UIProcess/Inspector/WebInspectorUIProxy.messages.in:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::createMediaSessionCoordinator):
        (WebKit::WebPage::frameBecameRemote): Deleted.
        (WebKit::WebPage::invalidateMediaSessionCoordinator): Deleted.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::isObscuredElement):
        (WebKit::WebPage::getPositionInformation): Deleted.
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::refreshPlugins): Deleted.
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:

2022-04-08  Simon Fraser  <simon.fraser@apple.com>

        Have GPU Process call lowMemoryHandler() on each RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=238967

        Reviewed by Tim Horton.

        Hook up RemoteRenderingBackend::lowMemoryHandler(), which doesn't do anything yet,
        but will clear the IOSurface pool.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::lowMemoryHandler):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::lowMemoryHandler):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::lowMemoryHandler):
        * GPUProcess/graphics/RemoteRenderingBackend.h:

2022-04-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] RemoteInspector: update target list page contents on change instead of reloading
        https://bugs.webkit.org/show_bug.cgi?id=238990

        Reviewed by Adrian Perez de Castro.

        We can use webkit_web_view_run_javascript() to replace the target list with the new one. This also fixes the race
        condition when loading inspector:// for the first time that target list is always empty. The web view HashSet is
        now a HashMap where the value is a pointer to the client to be able to associate web view with its client
        without having to check the host and port.

        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::~RemoteInspectorProtocolHandler): Disconnect web view signals.
        (WebKit::RemoteInspectorProtocolHandler::handleRequest): On new web view, connect to notify::uri and remove the
        web view if it's no longer showing an inspector page list.
        (WebKit::RemoteInspectorProtocolHandler::updateTargetList): Update the target list html.
        (WebKit::RemoteInspectorProtocolHandler::webViewLoadChanged): Call updateTargetList() when load finished.
        (WebKit::RemoteInspectorProtocolHandler::targetListChanged): Call updateTargetList() for web views that are not
        loading. For loading web view connect to load-event to update the target list once the load finishes.
        (WebKit::RemoteInspectorProtocolHandler::connectionClosed): Remove the associated web views.
        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.h:
        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::appendTargertList const): Append the target list html to the given GString.
        (WebKit::RemoteInspectorClient::buildTargetListPage const): Use appendTargertList() now.
        * UIProcess/Inspector/glib/RemoteInspectorClient.h:

2022-04-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        Web Inspector: Use computedStyleMap() instead of deprecated getPropertyCSSValue()
        https://bugs.webkit.org/show_bug.cgi?id=238661

        Reviewed by Devin Rousso.

        Ensure CSS Type OM is enabled in inspector frontend page.

        * WebProcess/Inspector/WebInspectorUI.cpp:
        (WebKit::WebInspectorUI::enableFrontendFeatures):

2022-04-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        Incorrect CORP/COEP check in 304 responses
        https://bugs.webkit.org/show_bug.cgi?id=238238
        <rdar://problem/90706510>

        Reviewed by Youenn Fablet.

        Add CORP header to the 304 response if previously set to avoid being blocked by load checker due to COEP.

        Test: imported/w3c/web-platform-tests/html/cross-origin-embedder-policy/require-corp-revalidated-images.https.html

        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::didReceiveResponse):

2022-04-07  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support all CTAP transports and remove gesture requirement for virtual authenticators
        https://bugs.webkit.org/show_bug.cgi?id=238814
        rdar://problem/91300515

        Reviewed by Brent Fulgham.

        This patch adds support for the other CTAP virtual authenticator transports and removes
        the user gesture requirement when using virtual authenticators. These changes are needed
        to run the webauthn web-platform-tests.

        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::WebCore::collectTransports):
        (WebKit::AuthenticatorManager::filterTransports const):
        * UIProcess/WebAuthentication/Mock/MockAuthenticatorManager.cpp:
        (WebKit::MockAuthenticatorManager::filterTransports const):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::createAuthenticator):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualLocalConnection.mm:
        (WebKit::VirtualLocalConnection::verifyUser):
        * UIProcess/WebAuthentication/Virtual/VirtualService.mm:
        (WebKit::VirtualService::startDiscoveryInternal):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::handleRequest):

2022-04-07  Elliott Williams  <emw@apple.com>

        [XCBuild] Enable dependency validation by default
        https://bugs.webkit.org/show_bug.cgi?id=238901
        <rdar://problem/91379968>

        Reviewed by Alexey Proskuryakov.

        * Configurations/DebugRelease.xcconfig:

2022-04-07  Stephan Szabo  <stephan.szabo@sony.com>

        [WinCairo] Fix DrawingAreaWC after r292557
        https://bugs.webkit.org/show_bug.cgi?id=238979

        Unreviewed build fix

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:

2022-04-07  Simon Fraser  <simon.fraser@apple.com>

        Fix the CG_DISPLAY_LIST_BACKED_IMAGE_BUFFER build (again)

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::ensureFrontBuffer):

2022-04-07  Chris Dumez  <cdumez@apple.com>

        Add PAL::TextEncoding() constructor that takes in a StringView
        https://bugs.webkit.org/show_bug.cgi?id=238905

        Reviewed by Darin Adler.

        This allows some call sites to be a bit more efficient.

        * NetworkProcess/soup/NetworkDataTaskSoup.cpp:
        (WebKit::NetworkDataTaskSoup::didRequestNextPart):
        (WebKit::NetworkDataTaskSoup::didGetFileInfo):
        * UIProcess/API/glib/WebKitURISchemeRequest.cpp:
        (webkitURISchemeRequestReadCallback):

2022-04-07  Chris Dumez  <cdumez@apple.com>

        Replace deprecated String(const char*) with String::fromLatin1() in more places
        https://bugs.webkit.org/show_bug.cgi?id=238925

        Reviewed by Darin Adler.

        * NetworkProcess/DatabaseUtilities.cpp:
        (WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue):
        * NetworkProcess/cache/NetworkCache.cpp:
        (WebKit::NetworkCache::Cache::dumpContentsToFile):
        * Scripts/PreferencesTemplates/WebPreferencesExperimentalFeatures.cpp.erb:
        * Scripts/PreferencesTemplates/WebPreferencesInternalDebugFeatures.cpp.erb:
        * Scripts/PreferencesTemplates/WebPreferencesStoreDefaultsMap.cpp.erb:
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (encodeObject):
        * Shared/API/Cocoa/_WKRemoteObjectRegistry.mm:
        (-[_WKRemoteObjectRegistry _sendInvocation:interface:]):
        * Shared/Cocoa/SandboxExtensionCocoa.mm:
        (WebKit::SandboxExtension::createHandleForTemporaryFile):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier):
        (WebKit::XPCServiceInitializerDelegate::getClientProcessName):
        (WebKit::XPCServiceInitializerDelegate::getExtraInitializationData):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceMain.mm:
        (WebKit::XPCServiceMain):
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (+[_WKWebAuthenticationPanel getAllLocalAuthenticatorCredentials]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::showSafeBrowsingWarning):
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::ProcessLauncher::launchProcess):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::clearAllCredentials):
        * UIProcess/WebAuthentication/Cocoa/LocalConnection.mm:
        (WebKit::LocalConnection::createCredentialPrivateKey const):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::pasteAccessCategoryForCommand):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::didReceiveInvalidMessage):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::pluginInfo):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::replaceSelectionPasteboardName):
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::createJSArrayForArgumentDescriptions):
        (WebKit::IPCTestingAPI::JSMessageListener::jsDescriptionFromDecoder):
        * webpushd/WebPushDaemonMain.mm:
        (WebKit::WebPushDaemonMain):

2022-04-07  Stephan Szabo  <stephan.szabo@sony.com>

        Build-fix for not ENABLE(SERVICE_WORKER) after r292539
        https://bugs.webkit.org/show_bug.cgi?id=238957

        Unreviewed build fix.

        * UIProcess/WebPageProxy.cpp:

2022-04-07  Simon Fraser  <simon.fraser@apple.com>

        Add a LayerBacking RenderingPurpose
        https://bugs.webkit.org/show_bug.cgi?id=238896

        Reviewed by Said Abou-Hallawa.

        Add RenderingPurpose::LayerBacking so the GPU Process knows which buffers are
        associated with layer backing.

        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::allocateBufferForBackingStore):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::allocateBufferForBackingStore):
        * Shared/WebCoreArgumentCoders.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::shouldUseRemoteRenderingFor):

2022-04-07  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Block kernel routines
        https://bugs.webkit.org/show_bug.cgi?id=238898

        Reviewed by Geoffrey Garen.

        Block kernel routines only used during launch of the WebContent process on iOS. This is based on collected telemetry.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-04-07  Simon Fraser  <simon.fraser@apple.com>

        Have ImageBuffer store the RenderingPurpose, and send it to the GPU process
        https://bugs.webkit.org/show_bug.cgi?id=238887

        Reviewed by Said Abou-Hallawa.
        
        Add RenderingPurpose to ImageBufferBackend::Parameters so it's stored on ImageBufferBackend/ImageBuffer,
        and propagate that to the GPU process.

        * GPUProcess/graphics/RemoteImageBuffer.h:
        (WebKit::RemoteImageBuffer::create):
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::createImageBuffer):
        (WebKit::RemoteRenderingBackend::createImageBufferWithQualifiedIdentifier):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        (headers_for_type):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::allocateBufferForBackingStore):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::allocateBufferForBackingStore):
        * Shared/WebCoreArgumentCoders.h:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::createImageBuffer const):
        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:
        (WebKit::RemoteImageBufferProxy::create):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer):
        (WebKit::RemoteRenderingBackendProxy::createImageBuffer):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createImageBuffer const):

2022-04-07  Youenn Fablet  <youenn@apple.com>

        Use the same callback mechanism for ServiceWorker openWindow and navigate in UIProcess
        https://bugs.webkit.org/show_bug.cgi?id=238924

        Reviewed by Chris Dumez.

        Reuse WebFrameProxy navigation delegate for openWindow once the main frame is created.
        This ensures we get the same behavior for both code paths and makes sure openWindow does not hang if a delegate cancels the load.

        Covered by API test.

        * UIProcess/WebFrameProxy.cpp:
        (WebKit::WebFrameProxy::transferNavigationCallbackToFrame):
        (WebKit::WebFrameProxy::setNavigationCallback):
        * UIProcess/WebFrameProxy.h:
        (WebKit::WebFrameProxy::transferNavigationCallbackToFrame): Deleted.
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didCreateMainFrame):
        (WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::openWindowFromServiceWorker):

2022-04-07  Chris Dumez  <cdumez@apple.com>

        Drop unused EditorClient::getAutoCorrectSuggestionForMisspelledWord()
        https://bugs.webkit.org/show_bug.cgi?id=238897

        Reviewed by Wenson Hsieh.

        * WebProcess/WebCoreSupport/WebEditorClient.cpp:
        (WebKit::WebEditorClient::getAutoCorrectSuggestionForMisspelledWord): Deleted.
        * WebProcess/WebCoreSupport/WebEditorClient.h:

2022-04-07  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC::Connection should support diverting all messages to a message queue in other thread
        https://bugs.webkit.org/show_bug.cgi?id=238608

        Reviewed by Simon Fraser.

        Previously, it was possible to divert all messages to certain ReceiverName to
        a message queue. This is used in IPC streams functionality.

        Add a possibility to divert all messages to a message queue. Instead of
        passing ReceiverName, id pair to Connection, pass new struct ReceiverMatcher.
        Use ReceiverMatcher instead of pair optional<ReceiverName>, optional<id>, since
        nullopt, id is not a valid case.
        This will be used in future patch for the case where IPC::Connection is created for
        the sole purpose of using it together with IPC stream connection.
        This also clarifies the overloaded use of destinationID 0 as a wildcard as well as
        a valid message destination.

        Also implement the possibility to divert all messages to particular ReceiverName,
        id 0. Previously this was signifying the destination ID wildcard.

        No new tests, refactor.

        * Platform/IPC/Connection.cpp:
        (IPC::Connection::SyncMessageState::enqueueMatchingMessages):
        (IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue):
        (IPC::Connection::addMessageReceiveQueue):
        (IPC::Connection::removeMessageReceiveQueue):
        (IPC::Connection::addWorkQueueMessageReceiver):
        (IPC::Connection::removeWorkQueueMessageReceiver):
        (IPC::Connection::addThreadMessageReceiver):
        (IPC::Connection::removeThreadMessageReceiver):
        * Platform/IPC/Connection.h:
        * Platform/IPC/Decoder.h:
        (IPC::Decoder::matches const):
        * Platform/IPC/MessageReceiveQueueMap.cpp:
        (IPC::MessageReceiveQueueMap::addImpl):
        (IPC::MessageReceiveQueueMap::remove):
        (IPC::MessageReceiveQueueMap::get const):
        * Platform/IPC/MessageReceiveQueueMap.h:
        (IPC::MessageReceiveQueueMap::add):
        * Platform/IPC/ReceiverMatcher.h: Copied from Source/WebKit/Platform/IPC/MessageReceiveQueueMap.h.
        (IPC::ReceiverMatcher::ReceiverMatcher):
        (IPC::ReceiverMatcher::createForLegacyAPI):
        (IPC::ReceiverMatcher::matches const):
        * Platform/IPC/StreamServerConnection.cpp:
        (IPC::StreamServerConnectionBase::startReceivingMessagesImpl):
        (IPC::StreamServerConnectionBase::stopReceivingMessagesImpl):
        * WebKit.xcodeproj/project.pbxproj:

2022-04-07  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix GTK build after r292506

        * WebProcess/InjectedBundle/API/gtk/DOM/WebKitDOMMediaList.cpp:
        (webkit_dom_media_list_set_media_text):
        * WebProcess/InjectedBundle/API/gtk/DOM/WebKitDOMNodeGtk.cpp:
        (webkit_dom_node_set_node_value):
        (webkit_dom_node_set_text_content):

2022-04-07  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] RemoteInspector add support for IPv6
        https://bugs.webkit.org/show_bug.cgi?id=238797

        Reviewed by Adrian Perez de Castro.

        Make it possible to connect to remote inspector server using IPv6 address.

        * UIProcess/API/glib/WebKitInitialize.cpp:
        (WebKit::initializeRemoteInspectorServer): Parse IPv6 address and build GSocketAddress to pass to inspector ot
        HTTP server.
        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::handleRequest): RemoteInspectorClient now expects host and port in a
        single String.
        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::RemoteInspectorClient): Receive the host and port in a String.
        * UIProcess/Inspector/glib/RemoteInspectorClient.h:
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.cpp:
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.h:

2022-04-06  Chris Dumez  <cdumez@apple.com>

        Improve API::SerializedScriptValue::deserialize to not allocate a new JSContext every second
        https://bugs.webkit.org/show_bug.cgi?id=210920

        Reviewed by Geoffrey Garen.

        Instead of forcing the lifetime of the shared JSContext to 1 second, we now use a hysteresis
        logic so that it can stay alive as long as it is used at least every 10 seconds.

        * UIProcess/API/Cocoa/APISerializedScriptValueCocoa.mm:
        (API::SharedJSContext::SharedJSContext):
        (API::SharedJSContext::ensureContext):
        (API::SharedJSContext::releaseContextIfNecessary):
        (API::SharedJSContext::releaseContext): Deleted.

2022-04-06  Chris Dumez  <cdumez@apple.com>

        Reduce number of conversions from StringView to String
        https://bugs.webkit.org/show_bug.cgi?id=238841

        Reviewed by Geoffrey Garen.

        * NetworkProcess/NetworkSchemeRegistry.cpp:
        (WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled):
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::updateVaryInformation):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::proxyDictionary):
        * NetworkProcess/soup/NetworkDataTaskSoup.cpp:
        (WebKit::NetworkDataTaskSoup::shouldAllowHSTSPolicySetting const):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::tryLoadingUsingURLSchemeHandler):
        (WebKit::WebLoaderStrategy::tryLoadingSynchronouslyUsingURLSchemeHandler):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::representationExistsForURLScheme const):
        (WebKit::WebFrameLoaderClient::generatedMIMETypeForURLScheme const):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.h:
        * WebProcess/WebPage/WebCookieCache.cpp:
        (WebKit::WebCookieCache::cookiesForDOM):
        (WebKit::WebCookieCache::setCookiesFromDOM):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::canHandleRequest):
        (WebKit::WebPage::urlSchemeHandlerForScheme):
        * WebProcess/WebPage/WebPage.h:

2022-04-06  Kimmo Kinnunen  <kkinnunen@apple.com>

        ServiceWorkerDownloadTask starts listening for IPC in constructor
        https://bugs.webkit.org/show_bug.cgi?id=238860

        Reviewed by Youenn Fablet.

        IPC messages will start to be delivered after connection->addThreadMessageReceiver(..., this, ..) from
        the message receive queue. This function cannot be called in the constructor, since the
        virtual function table of the `this` object has not been constructed fully yet. This means
        that if a message arrives during the constructor, it is dispatched via incorrect virtual function pointer.

        Initiate the listening from a separate function that is called from ServiceWorkerDownloadTask::create().

        No new tests, not testable.

        * NetworkProcess/ServiceWorker/ServiceWorkerDownloadTask.cpp:
        (WebKit::ServiceWorkerDownloadTask::startListeningForIPC):
        (WebKit::ServiceWorkerDownloadTask::close):
        * NetworkProcess/ServiceWorker/ServiceWorkerDownloadTask.h:
        (WebKit::ServiceWorkerDownloadTask::create):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::registerDownload):
        (WebKit::WebSWServerToContextConnection::unregisterDownload):

2022-04-06  Youenn Fablet  <youenn@apple.com>

        In case of COOP-based process swap, we need to make sure the document gets controlled by its matching service worker registration
        https://bugs.webkit.org/show_bug.cgi?id=238800
        <rdar://problem/91288849>

        Reviewed by Chris Dumez.

        Make sure in case loader is transferred to call controlClient in the new WebProcess.
        To do so, we also update page and frame IDs.
        Covered by API test.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        * NetworkProcess/NetworkLoadParameters.h:
        * NetworkProcess/NetworkResourceLoadParameters.h:
        * NetworkProcess/NetworkResourceLoader.cpp:
        * NetworkProcess/NetworkResourceLoader.h:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:

2022-04-06  Kimmo Kinnunen  <kkinnunen@apple.com>

        Media and WebRTC code uses ThreadMessageReceiverRefCounted with WorkQueues
        https://bugs.webkit.org/show_bug.cgi?id=238858

        Reviewed by Youenn Fablet.

        Media and WebRTC code uses IPC::Connection::ThreadMessageReceiverRefCounted
        to submit work to a WorkQueue. For this use-case, IPC::Connection has
        IPC::Connection::WorkQueueMessageReceiver, which does the same.

        This is work towards simplifying IPC::Connection by removing
        ThreadMessageReceiverRefCounted.

        No new tests, refactor.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::stopListeningForIPC):
        (WebKit::LibWebRTCCodecsProxy::initialize):
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayerManager.cpp:
        (WebKit::RemoteSampleBufferDisplayLayerManager::startListeningForIPC):
        (WebKit::RemoteSampleBufferDisplayLayerManager::close):
        (WebKit::RemoteSampleBufferDisplayLayerManager::createLayer):
        (WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer):
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayerManager.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock):
        (WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread):
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::stopListeningForIPC):
        (WebKit::RemoteCaptureSampleManager::setConnection):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:

2022-04-06  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix GTK build after r292458

        * UIProcess/API/gtk/PageClientImpl.cpp:
        (WebKit::PageClientImpl::hostFileDescriptor):

2022-04-06  Youenn Fablet  <youenn@apple.com>

        Implement ServiceWorkerWindowClient.navigate
        https://bugs.webkit.org/show_bug.cgi?id=238738

        Reviewed by Chris Dumez.

        When receiving a request to navigate a client, send message to UIProcess.
        UIProcess locates the WebFrameProxy which will send an IPC message to the WebProcess to do navigation.
        We keep track of the navigation within WebFrameProxy.
        In case of process swapping, we make sure to transfer the WebFrameProxy callback.
        In case of policy decision to stop loads, we resolve the promise with an empty client.
        A follow-up patch may reject the promise once the expected behavior will be clarified.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/ProvisionalPageProxy.cpp:
        * UIProcess/WebFrameProxy.cpp:
        * UIProcess/WebFrameProxy.h:
        * UIProcess/WebPageProxy.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.h:
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        * WebProcess/WebPage/WebPage.cpp:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-06  Zan Dobersek  <zdobersek@igalia.com>

        [Unix] Adopt UnixFileDescriptor in IPC::Attachment
        https://bugs.webkit.org/show_bug.cgi?id=238801

        Reviewed by Carlos Garcia Campos.

        Adopt WTF::UnixFileDescriptor for usage in IPC::Attachment, in place of
        a raw integer value. This simplifies move operations and destruction of
        this value.

        The two relevant constructors are changed to expect a UnixFileDescriptor
        rvalue, and they're also made explicit. The file descriptor object is
        accessible through both a const and a non-const getter, which allows the
        user to read or release the file descriptor contained there. There's
        also a release method that returns the contained UnixFileDescriptor.

        The releaseFileDescriptor() and fileDescriptor() methods, previously
        releasing or returning the contained integer value of the descriptor.
        Call sites for these methods as well as the old-form constructors are
        adjusted to the new variants.

        * Platform/IPC/Attachment.h:
        (IPC::Attachment::isNull const):
        (IPC::Attachment::fd const):
        (IPC::Attachment::release):
        (IPC::Attachment::releaseFileDescriptor): Deleted.
        (IPC::Attachment::fileDescriptor const): Deleted.
        * Platform/IPC/unix/AttachmentUnix.cpp:
        (IPC::Attachment::Attachment):
        (IPC::Attachment::operator=):
        (IPC::Attachment::~Attachment): Deleted.
        * Platform/IPC/unix/ConnectionUnix.cpp:
        (IPC::Connection::processMessage):
        (IPC::Connection::sendOutputMessage):
        (IPC::Connection::createConnectionIdentifierPair):
        * Platform/unix/SharedMemoryUnix.cpp:
        (WebKit::SharedMemory::Handle::isNull const):
        (WebKit::SharedMemory::map):
        (WebKit::SharedMemory::createHandle):
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<UnixFileDescriptor>::encode):
        (IPC::ArgumentCoder<UnixFileDescriptor>::decode):
        * Shared/glib/UserMessage.cpp:
        (WebKit::UserMessage::encode const):
        (WebKit::UserMessage::decode):
        * UIProcess/API/wpe/PageClientImpl.cpp:
        (WebKit::PageClientImpl::hostFileDescriptor):
        * UIProcess/glib/WebProcessPoolGLib.cpp:
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * WebProcess/GPU/GPUProcessConnectionInfo.h:
        (WebKit::GPUProcessConnectionInfo::identifier const):
        (WebKit::GPUProcessConnectionInfo::releaseIdentifier):
        * WebProcess/Inspector/WebInspector.cpp:
        (WebKit::WebInspector::setFrontendConnection):
        * WebProcess/Network/NetworkProcessConnectionInfo.h:
        (WebKit::NetworkProcessConnectionInfo::identifier const):
        (WebKit::NetworkProcessConnectionInfo::releaseIdentifier):
        * WebProcess/WebPage/WebPage.h:
        (WebKit::WebPage::hostFileDescriptor const):
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::platformInitializeWebProcess):

2022-04-06  Youenn Fablet  <youenn@apple.com>

        ServiceWorkerClients.openWindow should not need to get all clients asynchronously to resolve its promise
        https://bugs.webkit.org/show_bug.cgi?id=238503

        Reviewed by Chris Dumez.

        Add logic to get the client from its page ID.
        In case of internal error case, trigger promise rejection instead of promise resolution with null.

        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.h:

2022-04-06  Youenn Fablet  <youenn@apple.com>

        Remove Notification::m_relatedNotificationIdentifier
        https://bugs.webkit.org/show_bug.cgi?id=238603

        Reviewed by Brady Eidson.

        Directly use identifier now that we correctly reuse them when needed.
        We no longer store persistent notifications in the map since we do not use the map for click/close events.

        * WebProcess/Notifications/WebNotificationManager.cpp:
        * WebProcess/Notifications/WebNotificationManager.h:

2022-04-05  Ada Chan  <adachan@apple.com>

        [WebXR] Add a new enum type to represent session features
        https://bugs.webkit.org/show_bug.cgi?id=238837

        Reviewed by Dean Jackson.

        Add a new _WKXRSessionFeatureFlags entry for hand-tracking.

        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        (headers_for_type):
        * Shared/XR/XRDeviceProxy.cpp:
        (WebKit::XRDeviceProxy::XRDeviceProxy):
        * UIProcess/API/Cocoa/WKUIDelegatePrivate.h:
        * UIProcess/Cocoa/UIDelegate.mm:
        (WebKit::toWKXRSessionFeatureFlags):
        (WebKit::toPlatformXRFeatures):
        * UIProcess/XR/PlatformXRSystem.cpp:
        (WebKit::PlatformXRSystem::requestPermissionOnSessionFeatures):
        * UIProcess/XR/PlatformXRSystem.h:
        * UIProcess/XR/PlatformXRSystem.messages.in:

2022-04-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Update the context menu item glyph for visual look up
        https://bugs.webkit.org/show_bug.cgi?id=238853

        Reviewed by Devin Rousso.

        Switch from `info.circle` to the (private) symbol `info.circle.and.sparkles`, for the icon next to the Look Up
        item when long pressing images that have visual look up results.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/Cocoa/_WKElementAction.mm:
        (+[_WKElementAction imageForElementActionType:]):

2022-04-05  Stephan Szabo  <stephan.szabo@sony.com>

        [PlayStation[ Fix build break after r292408
        https://bugs.webkit.org/show_bug.cgi?id=238840

        Unreviewed build fix.

        * UIProcess/API/C/playstation/WKPagePrivatePlayStation.cpp:

2022-04-05  Alex Christensen  <achristensen@webkit.org>

        Revert r291598
        https://bugs.webkit.org/show_bug.cgi?id=238842
        <rdar://90677955>

        Reviewed by Geoff Garen.

        It caused some problems and needs further analysis.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-04-05  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291821.
        https://bugs.webkit.org/show_bug.cgi?id=238839

        Invalid fix.

        Reverted changeset:

        "REGRESSION(r286590): Links with URL schemes are not clickable
        in Mail"
        https://bugs.webkit.org/show_bug.cgi?id=238262
        https://commits.webkit.org/r291821

2022-04-05  Sihui Liu  <sihui_liu@apple.com>

        Verify generalStorageDirectory is not in use when creating WebsiteDataStore
        https://bugs.webkit.org/show_bug.cgi?id=238686
        rdar://90808910

        Reviewed by Chris Dumez.

        In r290739, we added assertion to verify that no two sessions share the same general storage directory. The
        assertion is hit on macOS as shown in rdar://90808910. However, because we checked the directories when 
        launching new network process, not when creating WebsiteDataStore, the backtraces do not give much information 
        about when the problematic WebsiteDataStore (using the generalStorageDirectory that's already used by another
        WebsiteDataStore) is created. To help debug the issue, let's move the assertion to the constructor of 
        WebsiteDataStore.

        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::activeGeneralStorageDirectories):
        (WebKit::WebsiteDataStore::WebsiteDataStore):
        (WebKit::WebsiteDataStore::~WebsiteDataStore):

2022-04-05  Chris Dumez  <cdumez@apple.com>

        Unreviewed GTK build fix after r292408.

        * Platform/unix/LoggingUnix.cpp:
        (WebKit::logLevelString):

2022-04-05  Chris Dumez  <cdumez@apple.com>

        Unreviewed build fix after r292408.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::removeNetworkWebsiteData):

2022-04-05  Chris Dumez  <cdumez@apple.com>

        Mark String(const char*) constructor as explicit
        https://bugs.webkit.org/show_bug.cgi?id=238693

        Reviewed by Geoffrey Garen.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (stringForSSLProtocol):
        * NetworkProcess/curl/NetworkDataTaskCurl.cpp:
        (WebKit::NetworkDataTaskCurl::willPerformHTTPRedirection):
        * NetworkProcess/soup/NetworkDataTaskSoup.cpp:
        (WebKit::NetworkDataTaskSoup::continueHTTPRedirection):
        (WebKit::NetworkDataTaskSoup::readCallback):
        (WebKit::NetworkDataTaskSoup::didRequestNextPart):
        (WebKit::NetworkDataTaskSoup::download):
        (WebKit::NetworkDataTaskSoup::writeDownloadCallback):
        (WebKit::NetworkDataTaskSoup::didFinishDownload):
        (WebKit::NetworkDataTaskSoup::didGetFileInfo):
        (WebKit::NetworkDataTaskSoup::readFileCallback):
        (WebKit::NetworkDataTaskSoup::enumerateFileChildrenCallback):
        * NetworkProcess/soup/WebSocketTaskSoup.cpp:
        (WebKit::WebSocketTask::didConnect):
        * Shared/API/Cocoa/WKRemoteObjectCoder.h:
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (WebKit::methodSignaturesAreCompatible):
        (decodeInvocation):
        * Shared/API/Cocoa/_WKRemoteObjectRegistry.mm:
        (replyBlockSignature):
        (-[_WKRemoteObjectRegistry _invokeMethod:]):
        * Shared/API/glib/WebKitURIRequest.cpp:
        (webkit_uri_request_set_uri):
        * Shared/gtk/WebErrorsGtk.cpp:
        (WebKit::printerNotFoundError):
        (WebKit::invalidPageRangeToPrint):
        * UIProcess/API/glib/WebKitAutomationSession.cpp:
        (webkitAutomationSessionGetBrowserName):
        * UIProcess/API/glib/WebKitCredential.cpp:
        (webkit_credential_new_for_certificate_pin):
        * UIProcess/API/glib/WebKitInjectedBundleClient.cpp:
        * UIProcess/API/glib/WebKitProtocolHandler.cpp:
        (WebKit::WebKitProtocolHandler::handleRequest):
        * UIProcess/API/glib/WebKitSettings.cpp:
        (_WebKitSettingsPrivate::_WebKitSettingsPrivate):
        (webkit_settings_set_user_agent):
        * UIProcess/API/glib/WebKitURISchemeRequest.cpp:
        (webkitURISchemeRequestReadCallback):
        (webkit_uri_scheme_request_finish_error):
        * UIProcess/API/gtk/DragSourceGtk4.cpp:
        (WebKit::DragSource::begin):
        * UIProcess/API/gtk/DropTargetGtk3.cpp:
        (WebKit::DropTarget::DropTarget):
        * UIProcess/API/gtk/DropTargetGtk4.cpp:
        (WebKit::DropTarget::DropTarget):
        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::~RemoteInspectorProtocolHandler):
        (WebKit::RemoteInspectorProtocolHandler::handleRequest):
        (WebKit::RemoteInspectorProtocolHandler::targetListChanged):
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseEnterFullScreen):
        * UIProcess/API/wpe/WebKitColor.cpp:
        (webkit_color_parse):
        * UIProcess/Cocoa/SafeBrowsingWarningCocoa.mm:
        (WebKit::malwareDetailsBase):
        (WebKit::reportAnErrorBase):
        * UIProcess/Cocoa/SystemPreviewControllerCocoa.mm:
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformCreateFrontendPageAndWindow):
        (WebKit::remoteFileReplaceContentsCallback):
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformCreateFrontendPage):
        (WebKit::fileReplaceContentsCallback):
        * UIProcess/Inspector/socket/RemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::platformStartTask):
        * UIProcess/Inspector/win/RemoteWebInspectorUIProxyWin.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformCreateFrontendPageAndWindow):
        * UIProcess/Inspector/win/WebInspectorUIProxyWin.cpp:
        (WebKit::WebInspectorUIProxy::platformCreateFrontendPage):
        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindSymlinksRealPath):
        (WebKit::bubblewrapSpawn):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.cpp:
        (WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration):
        * UIProcess/glib/WebProcessPoolGLib.cpp:
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformGetLaunchOptions):
        * UIProcess/glib/WebsiteDataStoreGLib.cpp:
        * UIProcess/gtk/ClipboardGtk3.cpp:
        (WebKit::Clipboard::write):
        * UIProcess/gtk/ClipboardGtk4.cpp:
        (WebKit::Clipboard::write):
        * UIProcess/gtk/KeyBindingTranslator.cpp:
        * UIProcess/win/WebProcessPoolWin.cpp:
        (WebKit::backendCommandsPath):
        * UIProcess/win/WebView.cpp:
        (WebKit::WebView::WebView):
        * WebProcess/InjectedBundle/API/glib/WebKitWebPage.cpp:
        (webkitWebPageDidReceiveMessage):
        * WebProcess/InjectedBundle/API/gtk/DOM/WebKitDOMDocumentGtk.cpp:
        (webkit_dom_document_get_visibility_state):
        * WebProcess/WebCoreSupport/wpe/WebEditorClientWPE.cpp:
        (WebKit::handleKeyPress):
        (WebKit::handleKeyDown):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::runJavaScript):
        * WebProcess/WebPage/glib/WebPageGLib.cpp:
        (WebKit::WebPage::getPlatformEditorState const):
        * WebProcess/WebPage/gtk/WebPrintOperationGtk.cpp:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::generateSyntheticEditingCommand):
        (WebKit::WebPage::platformUserAgent const):
        * WebProcess/WebPage/win/WebPageWin.cpp:
        (WebKit::WebPage::handleEditingKeyboardEvent):
        * webpushd/PushClientConnection.mm:
        (WebPushD::ClientConnection::hostAppCodeSigningIdentifier):

2022-04-05  Tim Horton  <timothy_horton@apple.com>

        Fix the CG_DISPLAY_LIST_BACKED_IMAGE_BUFFER build

        * Shared/RemoteLayerTree/CGDisplayListImageBufferBackend.h:

2022-04-05  Yury Semikhatsky  <yurys@chromium.org>

        Do not create network process in ~WebsiteDataStore destructor
        https://bugs.webkit.org/show_bug.cgi?id=238570

        Reviewed by Chris Dumez.

        Check if m_networkProcess is initialized before removing session
        from it instead, otherwise WebsiteDataStore::networkProcess() lazily
        creates the process and it will keep running after WebsiteDataStore
        is destroyed.

        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::~WebsiteDataStore):

2022-04-05  Eric Carlson  <eric.carlson@apple.com>

        5 Media API tests are flakily timing out on iOS14
        https://bugs.webkit.org/show_bug.cgi?id=230321
        <rdar://problem/83168970>

        Reviewed by Jer Noble.

        Un-skipped API test WKWebViewPausePlayingAudioTests.OutOfWindow

        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::applicationWillEnterForegroundForMedia): Log the correct name.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::applicationDidEnterBackgroundForMedia): Call PlatformMediaSessionManager.
        (WebKit::WebPage::applicationWillEnterForegroundForMedia): Ditto.

2022-04-05  Simon Fraser  <simon.fraser@apple.com>

        Pass an IOSurfacePool to ImageBuffer::releaseBufferToPool()
        https://bugs.webkit.org/show_bug.cgi?id=238768

        Reviewed by Said Abou-Hallawa.

        In order to move away from a singleton IOSurfacePool, we need to pass the pool
        which the IOSurface will be added to.

        For RemoteLayerBackingStore, pass the singleton WebProcess pool
        (this is the non-GPU Process code path).

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::Buffer::discard):

2022-04-05  Zan Dobersek  <zdobersek@igalia.com>

        [Unix] Add UnixFileDescriptor, use it in IPC::Semaphore
        https://bugs.webkit.org/show_bug.cgi?id=238726

        Reviewed by Carlos Garcia Campos.

        Use WTF::UnixFileDescriptor in IPC::Semaphore in place of a raw integer
        value. This also simplifies other things, e.g. the move constructor and
        assignment operator can now both be defaulted.

        The IPC encoding and decoding of the semaphore object is also simpler,
        leaning into the custom ArgumentCoder specialization for objects of the
        WTF::UnixFileDescriptor type. The encoding and decoding is done by
        chaperoning the file descriptor through IPC::Attachment.

        * Platform/IPC/IPCSemaphore.h:
        (IPC::Semaphore::operator bool const):
        * Platform/IPC/unix/IPCSemaphoreUnix.cpp:
        (IPC::Semaphore::Semaphore):
        (IPC::Semaphore::signal):
        (IPC::Semaphore::wait):
        (IPC::Semaphore::waitFor):
        (IPC::Semaphore::encode const):
        (IPC::Semaphore::decode):
        (IPC::Semaphore::destroy):
        (IPC::Semaphore::operator=): Deleted.
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<WTF::UnixFileDescriptor>::encode):
        (IPC::ArgumentCoder<WTF::UnixFileDescriptor>::decode):
        * Shared/WebCoreArgumentCoders.h:

2022-04-05  Megan Gardner  <megan_gardner@apple.com>

        Expand autocorrect context for more accurate results.
        https://bugs.webkit.org/show_bug.cgi?id=237990

        Reviewed by Wenson Hsieh.

        Covered by existing tests.

        Expand autocorrect context to at least 10 words instead of 3, and with a min/max length of 40/100 
        instead of 12/30 and start context at the beginning of sentences to help with having more accurate 
        autocorrect suggestions.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::autocorrectionContext):

2022-04-05  Tim Horton  <timothy_horton@apple.com>

        Remove system feature flags implementation
        https://bugs.webkit.org/show_bug.cgi?id=238791

        Reviewed by Megan Gardner.

        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        (WebKit::isFeatureFlagEnabled): Deleted.
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::isFeatureFlagEnabled): Deleted.
        * Shared/WebPreferencesDefaultValues.h:
        * Shared/win/WebPreferencesDefaultValuesWin.cpp: Removed.

2022-04-05  Adrian Perez de Castro  <aperez@igalia.com>

        [WPE] Mark "backend" parameters of web view constructors not nullable
        https://bugs.webkit.org/show_bug.cgi?id=238734

        Reviewed by Martin Robinson.

        No new tests needed.

        * UIProcess/API/wpe/WebKitWebViewWPE.cpp: Annotate web view constructors with (not nullable)
        and while at it, fix documentation links, and improve the wording to better follow gi-docgen
        copywriting style. Remove the mentions to the single process model, which is deprecated anyway.

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Stop generating WebKit system feature flags plists
        https://bugs.webkit.org/show_bug.cgi?id=238784

        Reviewed by Wenson Hsieh.

        * FeatureFlags/WebKit-appletvos.plist: Removed.
        * FeatureFlags/WebKit-ios.plist: Removed.
        * FeatureFlags/WebKit-macos.plist: Removed.
        * FeatureFlags/WebKit-watchos.plist: Removed.
        * Scripts/combine-feature-flags-plist.py: Removed.
        * Scripts/generate-feature-flags-plist.sh: Removed.
        * WebKit.xcodeproj/project.pbxproj:

2022-04-04  Saam Barati  <sbarati@apple.com>

        Turn off LLInt ICs in captive portal mode
        https://bugs.webkit.org/show_bug.cgi?id=238778
        <rdar://84830873>

        Reviewed by Yusuke Suzuki.

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):

2022-04-04  Adrian Perez de Castro  <aperez@igalia.com>

        [WPE][GTK] Fix code examples in reference documentation
        https://bugs.webkit.org/show_bug.cgi?id=238770

        Reviewed by Michael Catanzaro.

        Replace DocBook SGML tags containing code examples with Markdown fenced code blocks
        as consumed by gi-docgen.

        * UIProcess/API/glib/WebKitSettings.cpp:
        * UIProcess/API/glib/WebKitUserContentManager.cpp:
        * UIProcess/API/glib/WebKitWebContext.cpp:
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webkit_web_view_class_init):
        * UIProcess/API/glib/WebKitWebsitePolicies.cpp:
        * UIProcess/API/gtk/WebKitWebInspector.cpp:
        * UIProcess/API/gtk/WebKitWebViewGtk.cpp:
        * WebProcess/InjectedBundle/API/glib/WebKitWebExtension.cpp:

2022-04-04  Simon Fraser  <simon.fraser@apple.com>

        Fix the CG_DISPLAY_LIST_BACKED_IMAGE_BUFFER build
        https://bugs.webkit.org/show_bug.cgi?id=238783

        Unreviewed build fix.

        ConcreteImageBuffer<>::create() needs a default CreationContext argument.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::ensureFrontBuffer):

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove GPU process system feature flags
        https://bugs.webkit.org/show_bug.cgi?id=238766

        Reviewed by Simon Fraser.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultCaptureAudioInGPUProcessEnabled):
        (WebKit::defaultUseGPUProcessForCanvasRenderingEnabled): Deleted.
        (WebKit::defaultUseGPUProcessForDOMRenderingEnabled): Deleted.
        (WebKit::defaultUseGPUProcessForMediaEnabled): Deleted.
        (WebKit::defaultUseGPUProcessForWebGLEnabled): Deleted.
        (WebKit::defaultCaptureVideoInGPUProcessEnabled): Deleted.
        (WebKit::defaultWebRTCCodecsInGPUProcess): Deleted.
        * Shared/WebPreferencesDefaultValues.h:

2022-04-04  Simon Fraser  <simon.fraser@apple.com>

        Remove lots of WebCore:: in RemoteLayerBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=238765

        Reviewed by Wenson Hsieh.

        Add a `using namespace WebCore` to RemoteLayerBackingStore. WebCore::IOSurface still needs qualification.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::ensureBackingStore):
        (WebKit::RemoteLayerBackingStore::encode const):
        (WebKit::RemoteLayerBackingStore::setNeedsDisplay):
        (WebKit::RemoteLayerBackingStore::pixelFormat const):
        (WebKit::RemoteLayerBackingStore::bytesPerPixel const):
        (WebKit::RemoteLayerBackingStore::swapToValidFrontBuffer):
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::dirtyRepaintCounterIfNecessary):
        (WebKit::RemoteLayerBackingStore::ensureFrontBuffer):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        (WebKit::RemoteLayerBackingStore::paintContents):
        (WebKit::RemoteLayerBackingStore::drawInContext):
        (WebKit::RemoteLayerBackingStore::enumerateRectsBeingDrawn):
        (WebKit::RemoteLayerBackingStore::applyBackingStoreToLayer):
        (WebKit::RemoteLayerBackingStore::takePendingFlushers):
        (WebKit::RemoteLayerBackingStore::setBufferVolatile):
        (WebKit::RemoteLayerBackingStore::setBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::setFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::bufferForType const):

2022-04-04  Simon Fraser  <simon.fraser@apple.com>

        Remove lots of WebCore:: in RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=238763

        Reviewed by Wenson Hsieh.

        RemoteRenderingBackend already has a `using namespace WebCore` so remove the explicit namespacing.

        Also clean up some includes in the header.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::getPixelBufferForImageBuffer):
        (WebKit::RemoteRenderingBackend::getPixelBufferForImageBufferWithNewMemory):
        (WebKit::RemoteRenderingBackend::putPixelBufferForImageBuffer):
        (WebKit::RemoteRenderingBackend::getDataURLForImageBuffer):
        (WebKit::RemoteRenderingBackend::getDataURLForImageBufferWithQualifiedIdentifier):
        (WebKit::RemoteRenderingBackend::getDataForImageBuffer):
        (WebKit::RemoteRenderingBackend::getShareableBitmapForImageBuffer):
        (WebKit::RemoteRenderingBackend::getShareableBitmapForImageBufferWithQualifiedIdentifier):
        (WebKit::RemoteRenderingBackend::cacheFont):
        (WebKit::handleFromBuffer):
        (WebKit::RemoteRenderingBackend::markSurfacesVolatile):
        * GPUProcess/graphics/RemoteRenderingBackend.h:

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove VP8/9 and WebM-related system feature flags
        https://bugs.webkit.org/show_bug.cgi?id=238757

        Reviewed by Eric Carlson.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultWebMFormatReaderEnabled): Deleted.
        (WebKit::defaultVP8DecoderEnabled): Deleted.
        (WebKit::defaultVP9DecoderEnabled): Deleted.
        (WebKit::defaultWebMParserEnabled): Deleted.
        * Shared/WebPreferencesDefaultValues.h:

2022-04-04  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] [WK2] Add plumbing to extract video frames in element fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238715
        rdar://91216152

        Reviewed by Tim Horton.

        Implement (begin|cancel)ElementFullscreenVideoExtraction on macOS, leaving empty stubs for non-internal builds.

        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::beginElementFullscreenVideoExtraction):
        (WebKit::WebViewImpl::cancelElementFullscreenVideoExtraction):
        * UIProcess/mac/PageClientImplMac.h:
        * UIProcess/mac/PageClientImplMac.mm:
        (WebKit::PageClientImpl::beginElementFullscreenVideoExtraction):
        (WebKit::PageClientImpl::cancelElementFullscreenVideoExtraction):

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove the 'general_directory_for_storage' system feature flag
        https://bugs.webkit.org/show_bug.cgi?id=238762

        Reviewed by Sihui Liu.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove the 'sw_vp9_decoder_on_battery' system feature flag
        https://bugs.webkit.org/show_bug.cgi?id=238761

        Reviewed by Eric Carlson.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultVP9SWDecoderEnabledOnBattery): Deleted.

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove the 'async frame and overflow scrolling' system feature flag
        https://bugs.webkit.org/show_bug.cgi?id=238758

        Reviewed by Simon Fraser.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultAsyncFrameAndOverflowScrollingEnabled): Deleted.
        (WebKit::defaultAsyncFrameScrollingEnabled): Deleted.
        (WebKit::defaultAsyncOverflowScrollingEnabled): Deleted.
        * Shared/WebPreferencesDefaultValues.h:

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove the incremental_pdf system feature flag
        https://bugs.webkit.org/show_bug.cgi?id=238754

        Reviewed by Wenson Hsieh.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        * Shared/WebPreferencesDefaultValues.h:
        (WebKit::defaultIncrementalPDFEnabled): Deleted.
        Remove the incremental_pdf system feature flag in favor of a traditional WebKit preference.

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove the 'RB_full_manage_WK_jetsam' system feature flag and simplify adjacent logic
        https://bugs.webkit.org/show_bug.cgi?id=238760

        Reviewed by Chris Dumez.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::shouldLeakBoost):

2022-04-04  Tim Horton  <timothy_horton@apple.com>

        Remove some unused system feature flags
        https://bugs.webkit.org/show_bug.cgi?id=238755

        Reviewed by Wenson Hsieh.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        Neither of these flags is read anywhere, so they don't need to be in the plist.

2022-04-04  Cameron McCormack  <heycam@apple.com>

        Remove display list map entry before remote resource
        https://bugs.webkit.org/show_bug.cgi?id=238764

        Reviewed by Simon Fraser.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::clearImageBufferReference):
        * GPUProcess/graphics/RemoteDisplayListRecorder.h:
        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::releaseRemoteResourceWithQualifiedIdentifier):

2022-04-04  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] Add helper methods to install and uninstall VKCImageAnalysisOverlayView
        https://bugs.webkit.org/show_bug.cgi?id=238714

        Reviewed by Tim Horton.

        Add helper methods for adding and removing a temporary VKCImageAnalysisOverlayView as a subview of WKWebView.
        See below for more details. No change in behavior (yet).

        * UIProcess/Cocoa/WebViewImpl.h:
        (WebKit::WebViewImpl::imageAnalysisInteractionBounds const):
        (WebKit::WebViewImpl::imageAnalysisOverlayView const):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::processImageAnalyzerRequest):

        Pull logic for processing an image analyzer request and invoking the completion handler on the main thread (via
        `callOnMainRunLoop`) out into a separate helper method (to be used in a subsequent patch).

        (WebKit::WebViewImpl::requestTextRecognition):
        (-[WKImageAnalysisOverlayViewDelegate initWithWebViewImpl:]):

        Add an Objective-C object that acts as a delegate for the image analysis overlay view. This is done to correctly
        position the overlay, but also for a couple of additonal reasons below.

        (-[WKImageAnalysisOverlayViewDelegate dealloc]):
        (-[WKImageAnalysisOverlayViewDelegate observeValueForKeyPath:ofObject:change:context:]):

        Add logic to steal first responder status away from VKCImageAnalysisOverlayView's internal text selection view
        and restore it to the web view when there is no longer an active text selection in the overlay. This ensures
        that key events are only routed to the image analysis overlay view in the case where the overlay actually
        contains a text selection.

        (-[WKImageAnalysisOverlayViewDelegate firstResponderIsInsideImageOverlay]):
        (-[WKImageAnalysisOverlayViewDelegate imageAnalysisOverlay:shouldHandleKeyDownEvent:]):

        Never allow the image overlay view to override Escape key handling.

        (-[WKImageAnalysisOverlayViewDelegate contentsRectForImageAnalysisOverlayView:]):
        (WebKit::WebViewImpl::installImageAnalysisOverlayView):
        (WebKit::WebViewImpl::uninstallImageAnalysisOverlayView):
        (WebKit::WebViewImpl::imageAnalysisOverlayViewHasCursorAtPoint const):

        Allow the image analysis overlay view to set the mouse cursor when the mouse is over interactable content.

        * UIProcess/mac/PageClientImplMac.mm:
        (WebKit::PageClientImpl::setCursor):

2022-04-04  Youenn Fablet  <youenn@apple.com>

        Service-Worker-Navigation-Preload header not being sent when Navigation Preload is enabled.
        https://bugs.webkit.org/show_bug.cgi?id=238564

        Reviewed by Alex Christensen.

        We were cancelling the preload as soon as receiving a response through FetchEvent.respondWith.
        But it is possible to answer with a synthetic response and then use the preload to fill the synthetic response body.
        To allow this, we no longer cancel the preload when receiving a response in case of enabled navigation preload.

        Test: http/wpt/service-workers/service-worker-iframe-preload-after-response.https.html

        * NetworkProcess/ServiceWorker/ServiceWorkerFetchTask.cpp:

2022-04-04  Elliott Williams  <emw@apple.com>

        [XCBuild] WebKitLegacy's "Migrated headers" script does not emit task information
        https://bugs.webkit.org/show_bug.cgi?id=238409
        <rdar://problem/90869551>

        Reviewed by Alexey Proskuryakov.

        * WebKit.xcodeproj/project.pbxproj: Small build rule fix to prevent "no rule to process
        file" warnings on every generated forwarding header. This happened because the build rule
        that generates these temporary forwarding headers looked like it was supposed to _process_
        those headers, too.

2022-04-04  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteRenderingBackendProxy fails to maintain correct state when gpu process crashes and upon deletion
        https://bugs.webkit.org/show_bug.cgi?id=238618

        Reviewed by Simon Fraser.

        RemoteRenderingBackendProxy::m_needsWakeUpSemaphoreForDisplayListStream
        was not reset when proxy would connect to a new gpu process after a crash.
        RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy() would not
        remove the GPUConnection::Client registration.

        * Platform/IPC/MessageReceiveQueueMap.cpp:
        (IPC::MessageReceiveQueueMap::remove):
        * Platform/IPC/StreamClientConnection.h:
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy):
        (WebKit::RemoteRenderingBackendProxy::gpuProcessConnectionDidClose):
        (WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess):
        (WebKit::RemoteRenderingBackendProxy::streamConnection):
        (WebKit::RemoteRenderingBackendProxy::didCreateWakeUpSemaphoreForDisplayListStream):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-04-04  Kimmo Kinnunen  <kkinnunen@apple.com>

        StreamClientConnection should have waitForAndDispatchImmediately
        https://bugs.webkit.org/show_bug.cgi?id=238622

        Reviewed by Simon Fraser.

        IPC::StreamClientConnection should have the same communication methods
        as the IPC::Connection. The stream connection will forward
        the calls to underlying IPC::Connection, if needed.
        Add missing IPC::StreamClientConnection::waitForAndDispatchImmediately()
        and use it.
        Remove conveinence accessor methods for the IPC::Connection, as that should be
        accessed by accessing the stream connection in the respective classes.

        No new tests, refactor.

        * Platform/IPC/StreamClientConnection.h:
        (IPC::StreamClientConnection::waitForAndDispatchImmediately):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy):
        (WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        (WebKit::RemoteGraphicsContextGLProxy::sendSync):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::waitForDidCreateImageBufferBackend):
        (WebKit::RemoteRenderingBackendProxy::waitForDidFlush):
        (WebKit::RemoteRenderingBackendProxy::streamConnection):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.cpp:
        (WebKit::RemoteGPUProxy::RemoteGPUProxy):
        (WebKit::RemoteGPUProxy::waitUntilInitialized):

2022-04-04  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC::StreamServerConnectionBase has only one subclass, it should be removed
        https://bugs.webkit.org/show_bug.cgi?id=238676

        Reviewed by Wenson Hsieh.

        Merge IPC::StreamServerConnectionBase and IPC::StreamServerConnection.
        The base was useful when the concrete classes were templates per message receiver.
        The concrete class was changed to use multiple message receivers, and the templating
        was replaced with id lookup.

        No new tests, refactor.

        * GPUProcess/graphics/RemoteDisplayListRecorder.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteAdapter.h:
        * GPUProcess/graphics/WebGPU/RemoteBindGroup.h:
        * GPUProcess/graphics/WebGPU/RemoteBindGroupLayout.h:
        * GPUProcess/graphics/WebGPU/RemoteBuffer.h:
        * GPUProcess/graphics/WebGPU/RemoteCommandBuffer.h:
        * GPUProcess/graphics/WebGPU/RemoteCommandEncoder.h:
        * GPUProcess/graphics/WebGPU/RemoteComputePassEncoder.h:
        * GPUProcess/graphics/WebGPU/RemoteComputePipeline.h:
        * GPUProcess/graphics/WebGPU/RemoteDevice.h:
        * GPUProcess/graphics/WebGPU/RemoteExternalTexture.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/graphics/WebGPU/RemotePipelineLayout.h:
        * GPUProcess/graphics/WebGPU/RemoteQuerySet.h:
        * GPUProcess/graphics/WebGPU/RemoteQueue.h:
        * GPUProcess/graphics/WebGPU/RemoteRenderBundle.h:
        * GPUProcess/graphics/WebGPU/RemoteRenderBundleEncoder.h:
        * GPUProcess/graphics/WebGPU/RemoteRenderPassEncoder.h:
        * GPUProcess/graphics/WebGPU/RemoteRenderPipeline.h:
        * GPUProcess/graphics/WebGPU/RemoteSampler.h:
        * GPUProcess/graphics/WebGPU/RemoteShaderModule.h:
        * GPUProcess/graphics/WebGPU/RemoteTexture.h:
        * GPUProcess/graphics/WebGPU/RemoteTextureView.h:
        * Platform/IPC/HandleMessage.h:
        (IPC::handleMessageSynchronous):
        * Platform/IPC/StreamConnectionWorkQueue.cpp:
        (IPC::StreamConnectionWorkQueue::addStreamConnection):
        (IPC::StreamConnectionWorkQueue::removeStreamConnection):
        (IPC::StreamConnectionWorkQueue::processStreams):
        * Platform/IPC/StreamConnectionWorkQueue.h:
        * Platform/IPC/StreamMessageReceiver.h:
        * Platform/IPC/StreamServerConnection.cpp:
        (IPC::StreamServerConnection::StreamServerConnection):
        (IPC::StreamServerConnection::startReceivingMessages):
        (IPC::StreamServerConnection::stopReceivingMessages):
        (IPC::StreamServerConnection::enqueueMessage):
        (IPC::StreamServerConnection::tryAcquire):
        (IPC::StreamServerConnection::acquireAll):
        (IPC::StreamServerConnection::release):
        (IPC::StreamServerConnection::releaseAll):
        (IPC::StreamServerConnection::alignedSpan):
        (IPC::StreamServerConnection::size):
        (IPC::StreamServerConnection::clampedLimit const):
        (IPC::StreamServerConnection::dispatchStreamMessages):
        * Platform/IPC/StreamServerConnection.h:
        (IPC::StreamServerConnection::sendSyncReply):
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (WebKit::TestWithStream::didReceiveStreamMessage):
        * Shared/IPCStreamTester.h:

2022-04-03  Tim Horton  <timothy_horton@apple.com>

        _WKDataTask doesn't work in macCatalyst
        https://bugs.webkit.org/show_bug.cgi?id=238655

        Reviewed by Alexey Proskuryakov.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:]): Deleted.

2022-04-02  Simon Fraser  <simon.fraser@apple.com>

        Plumb the IOSurfacePool through to ImageBufferBackend creation via ImageBuffer::CreationContext
        https://bugs.webkit.org/show_bug.cgi?id=238695

        Reviewed by Said Abou-Hallawa.

        Wrap the existing HostWindow* and a new IOSurfacePool* pointers into a ImageBuffer::CreationContext
        struct, and replace the HostWindow* argument with it in buffer creation functions.

        RemoteLayerBackingStoreCollection::allocateBufferForBackingStore() passes the singleton IOSurfacePool
        which is thus used in the non-GPU Process code path (DOM rendering disabled).

        * Shared/RemoteLayerTree/CGDisplayListImageBufferBackend.cpp:
        (WebKit::CGDisplayListImageBufferBackend::create):
        * Shared/RemoteLayerTree/CGDisplayListImageBufferBackend.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::ensureFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::allocateBufferForBackingStore):
        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.cpp:
        (WebKit::ImageBufferShareableBitmapBackend::create):
        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.h:
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.cpp:
        (WebKit::ImageBufferShareableMappedIOSurfaceBackend::create):
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.h:

2022-04-02  Chris Dumez  <cdumez@apple.com>

        Add default constructor to ASCIILiteral
        https://bugs.webkit.org/show_bug.cgi?id=238700

        Reviewed by Geoffrey Garen.

        Add default constructor to ASCIILiteral, to replace the more verbose ASCIILiteral::null().

        * NetworkProcess/WebStorage/LocalStorageDatabase.cpp:
        (WebKit::LocalStorageDatabase::migrateItemTableIfNeeded):
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::sendMessage):
        * WebProcess/Inspector/WebInspectorUI.cpp:
        (WebKit::WebInspectorUI::setDockSide):

2022-04-02  Myles C. Maxfield  <mmaxfield@apple.com>

        [Cocoa] semaphore_timedwait() can return KERN_ABORTED
        https://bugs.webkit.org/show_bug.cgi?id=238694

        Reviewed by Geoffrey Garen.

        I was hitting this assert while debugging WebKit today.

        * Platform/IPC/darwin/IPCSemaphoreDarwin.cpp:
        (IPC::Semaphore::waitFor):

2022-04-02  Yury Semikhatsky  <yurys@chromium.org>

        GTK doesn't compile with ENABLE_ACCESSIBILITY=0
        https://bugs.webkit.org/show_bug.cgi?id=238669

        Reviewed by Michael Catanzaro.

        Fix GTK compilation with ENABLE_ACCESSIBILITY=0

        No new tests.

        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseDispose):
        (webkit_web_view_base_class_init):

2022-04-02  Andres Gonzalez  <andresg_22@apple.com>

        Expose AXObjectCache::treeData to the UI process.
        https://bugs.webkit.org/show_bug.cgi?id=238563
        <rdar://problem/91057915>

        Reviewed by Chris Fleizach.

        Exposed Page::accessibilityTreeData so that it can be invoked from the UI
        process. This will be used to log a textual representation of the AX
        trees from the browser process.

        * UIProcess/API/Cocoa/WKWebView.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView retrieveAccessibilityTreeData:]):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::getAccessibilityTreeData):
        * UIProcess/WebPageProxy.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::getAccessibilityTreeData):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-02  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK] Replace gtk-doc with gi-docgen
        https://bugs.webkit.org/show_bug.cgi?id=226662

        Reviewed by Michael Catanzaro.

        Import two new CMake modules which define commands to easy setup of GObject-Introspection
        and gi-docgen. These in turn allow to remove a bunch of duplicated CMake code, reuse
        the same for both the WPE and GTK ports, and remove the gnarly DocBook templates and
        other auxiliary files previously used by gtk-doc (which amount to a sizeable amount of
        code).

        While at it, do a quick pass to fix the most egregious issues reported by gi-docgen's
        linting mode and that all public symbols end up with at least some documentation in
        the generated output. Follow-up patches will be needed to keep adapting to the style
        encouraged by gi-docgen, fix linking between documented entities, make code examples
        display properly, and a few other things.

        * PlatformGTK.cmake: Adapt to use the new CMake modules.
        * PlatformWPE.cmake: Ditto.
        * Shared/API/glib/WebKitContextMenu.cpp: Fix documentation comments.
        * Shared/API/glib/WebKitContextMenuItem.cpp: Ditto.
        * Shared/API/glib/WebKitHitTestResult.cpp: Ditto.
        * Shared/API/glib/WebKitURIRequest.cpp: Ditto.
        * Shared/API/glib/WebKitURIResponse.cpp: Ditto.
        * Shared/API/glib/WebKitUserMessage.cpp: Ditto.
        * UIProcess/API/glib/WebKitApplicationInfo.cpp: Ditto.
        * UIProcess/API/glib/WebKitAuthenticationRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitAutomationSession.cpp: Ditto.
        * UIProcess/API/glib/WebKitBackForwardList.cpp: Ditto.
        * UIProcess/API/glib/WebKitBackForwardListItem.cpp: Ditto.
        * UIProcess/API/glib/WebKitCookieManager.cpp: Ditto.
        * UIProcess/API/glib/WebKitCredential.cpp: Ditto.
        * UIProcess/API/glib/WebKitDeviceInfoPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitDownload.cpp: Ditto.
        * UIProcess/API/glib/WebKitEditorState.cpp: Ditto.
        * UIProcess/API/glib/WebKitError.cpp: Ditto.
        * UIProcess/API/glib/WebKitFaviconDatabase.cpp: Ditto.
        * UIProcess/API/glib/WebKitFileChooserRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitFindController.cpp: Ditto.
        * UIProcess/API/glib/WebKitFormSubmissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitGeolocationManager.cpp: Ditto.
        * UIProcess/API/glib/WebKitGeolocationPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitInputMethodContext.cpp: Ditto.
        (webkit_input_method_context_class_init): Ditto.
        * UIProcess/API/glib/WebKitInstallMissingMediaPluginsPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitJavascriptResult.cpp: Ditto.
        * UIProcess/API/glib/WebKitMediaKeySystemPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitMemoryPressureSettings.cpp: Ditto.
        * UIProcess/API/glib/WebKitMimeInfo.cpp: Ditto.
        * UIProcess/API/glib/WebKitNavigationAction.cpp: Ditto.
        * UIProcess/API/glib/WebKitNavigationPolicyDecision.cpp: Ditto.
        * UIProcess/API/glib/WebKitNetworkProxySettings.cpp: Ditto.
        * UIProcess/API/glib/WebKitNotification.cpp: Ditto.
        * UIProcess/API/glib/WebKitNotificationPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitOptionMenu.cpp: Ditto.
        * UIProcess/API/glib/WebKitOptionMenuItem.cpp: Ditto.
        * UIProcess/API/glib/WebKitPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitPlugin.cpp: Ditto.
        * UIProcess/API/glib/WebKitPointerLockPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitPolicyDecision.cpp: Ditto.
        * UIProcess/API/glib/WebKitResponsePolicyDecision.cpp: Ditto.
        * UIProcess/API/glib/WebKitScriptDialog.cpp: Ditto.
        * UIProcess/API/glib/WebKitSecurityManager.cpp: Ditto.
        * UIProcess/API/glib/WebKitSecurityOrigin.cpp: Ditto.
        * UIProcess/API/glib/WebKitSettings.cpp: Ditto.
        * UIProcess/API/glib/WebKitURISchemeRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitURISchemeResponse.cpp: Ditto.
        (webkit_uri_scheme_response_class_init): Ditto.
        * UIProcess/API/glib/WebKitURIUtilities.cpp: Ditto.
        * UIProcess/API/glib/WebKitUserContent.cpp: Ditto.
        * UIProcess/API/glib/WebKitUserContentFilterStore.cpp: Ditto.
        * UIProcess/API/glib/WebKitUserContentManager.cpp: Ditto.
        * UIProcess/API/glib/WebKitUserMediaPermissionRequest.cpp: Ditto.
        (webkit_user_media_permission_request_class_init): Ditto.
        * UIProcess/API/glib/WebKitVersion.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebContext.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebResource.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebView.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebViewSessionState.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebsiteData.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebsiteDataAccessPermissionRequest.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebsiteDataManager.cpp: Ditto.
        * UIProcess/API/glib/WebKitWebsitePolicies.cpp: Ditto.
        * UIProcess/API/glib/WebKitWindowProperties.cpp: Ditto.
        (webkit_window_properties_class_init): Ditto.
        * UIProcess/API/gtk/WebKitAuthenticationDialog.h: Ditto.
        * UIProcess/API/gtk/WebKitAuthenticationRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitAutomationSession.h: Ditto.
        * UIProcess/API/gtk/WebKitBackForwardList.h: Ditto.
        * UIProcess/API/gtk/WebKitBackForwardListItem.h: Ditto.
        * UIProcess/API/gtk/WebKitColorChooserRequest.cpp: Ditto.
        (webkit_color_chooser_request_class_init): Ditto.
        * UIProcess/API/gtk/WebKitContextMenu.h: Ditto.
        * UIProcess/API/gtk/WebKitCookieManager.h: Ditto.
        * UIProcess/API/gtk/WebKitDefines.h: Ditto.
        * UIProcess/API/gtk/WebKitDeviceInfoPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitDownload.h: Ditto.
        * UIProcess/API/gtk/WebKitEditorState.h: Ditto.
        * UIProcess/API/gtk/WebKitError.h: Ditto.
        * UIProcess/API/gtk/WebKitFaviconDatabase.h: Ditto.
        * UIProcess/API/gtk/WebKitFileChooserRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitFindController.h: Ditto.
        * UIProcess/API/gtk/WebKitFormSubmissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitGeolocationManager.h: Ditto.
        * UIProcess/API/gtk/WebKitGeolocationPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitHitTestResult.h: Ditto.
        * UIProcess/API/gtk/WebKitInstallMissingMediaPluginsPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitMediaKeySystemPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitNavigationPolicyDecision.h: Ditto.
        * UIProcess/API/gtk/WebKitNotification.h: Ditto.
        * UIProcess/API/gtk/WebKitOptionMenu.h: Ditto.
        * UIProcess/API/gtk/WebKitPlugin.h: Ditto.
        * UIProcess/API/gtk/WebKitPointerLockPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitPolicyDecision.h: Ditto.
        * UIProcess/API/gtk/WebKitPrintCustomWidget.cpp: Ditto.
        * UIProcess/API/gtk/WebKitPrintCustomWidget.h: Ditto.
        * UIProcess/API/gtk/WebKitPrintOperation.cpp: Ditto.
        * UIProcess/API/gtk/WebKitPrintOperation.h: Ditto.
        * UIProcess/API/gtk/WebKitResponsePolicyDecision.h: Ditto.
        * UIProcess/API/gtk/WebKitSecurityManager.h: Ditto.
        * UIProcess/API/gtk/WebKitSettings.h: Ditto.
        * UIProcess/API/gtk/WebKitURIRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitURIResponse.h: Ditto.
        * UIProcess/API/gtk/WebKitURISchemeRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitURISchemeResponse.h: Ditto.
        * UIProcess/API/gtk/WebKitUserContentFilterStore.h: Ditto.
        * UIProcess/API/gtk/WebKitUserContentManager.h: Ditto.
        * UIProcess/API/gtk/WebKitUserMediaPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitUserMessage.h: Ditto.
        * UIProcess/API/gtk/WebKitVersion.h.in: Ditto.
        * UIProcess/API/gtk/WebKitWebContext.h: Ditto.
        * UIProcess/API/gtk/WebKitWebInspector.cpp: Ditto.
        * UIProcess/API/gtk/WebKitWebInspector.h: Ditto.
        * UIProcess/API/gtk/WebKitWebResource.h: Ditto.
        * UIProcess/API/gtk/WebKitWebView.h: Ditto.
        * UIProcess/API/gtk/WebKitWebViewBase.cpp: Ditto.
        * UIProcess/API/gtk/WebKitWebViewDialog.h: Ditto.
        * UIProcess/API/gtk/WebKitWebsiteDataAccessPermissionRequest.h: Ditto.
        * UIProcess/API/gtk/WebKitWebsiteDataManager.h: Ditto.
        * UIProcess/API/gtk/WebKitWebsitePolicies.h: Ditto.
        * UIProcess/API/gtk/WebKitWindowProperties.h: Ditto.
        * UIProcess/API/gtk/docs/webkit2gtk-4.0-sections.txt: Removed.
        * UIProcess/API/gtk/docs/webkit2gtk-4.0.types: Removed.
        * UIProcess/API/gtk/docs/webkit2gtk-docs.sgml: Removed.
        * UIProcess/API/wpe/WebKitAuthenticationRequest.h: Fix documentation comments.
        * UIProcess/API/wpe/WebKitAutomationSession.h: Ditto.
        * UIProcess/API/wpe/WebKitBackForwardList.h: Ditto.
        * UIProcess/API/wpe/WebKitBackForwardListItem.h: Ditto.
        * UIProcess/API/wpe/WebKitColor.cpp: Ditto.
        * UIProcess/API/wpe/WebKitColor.h: Ditto.
        * UIProcess/API/wpe/WebKitContextMenu.h: Ditto.
        * UIProcess/API/wpe/WebKitContextMenuItem.h: Ditto.
        * UIProcess/API/wpe/WebKitCookieManager.h: Ditto.
        * UIProcess/API/wpe/WebKitDefines.h: Ditto.
        * UIProcess/API/wpe/WebKitDeviceInfoPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitDownload.h: Ditto.
        * UIProcess/API/wpe/WebKitEditorState.h: Ditto.
        * UIProcess/API/wpe/WebKitError.h: Ditto.
        * UIProcess/API/wpe/WebKitFaviconDatabase.h: Ditto.
        * UIProcess/API/wpe/WebKitFileChooserRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitFindController.h: Ditto.
        * UIProcess/API/wpe/WebKitFormSubmissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitGeolocationManager.h: Ditto.
        * UIProcess/API/wpe/WebKitGeolocationPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitHitTestResult.h: Ditto.
        * UIProcess/API/wpe/WebKitInputMethodContext.h: Ditto.
        * UIProcess/API/wpe/WebKitInstallMissingMediaPluginsPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitMediaKeySystemPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitNavigationPolicyDecision.h: Ditto.
        * UIProcess/API/wpe/WebKitNotification.h: Ditto.
        * UIProcess/API/wpe/WebKitOptionMenu.h: Ditto.
        * UIProcess/API/wpe/WebKitPlugin.h: Ditto.
        * UIProcess/API/wpe/WebKitPolicyDecision.h: Ditto.
        * UIProcess/API/wpe/WebKitRectangle.cpp: Ditto.
        * UIProcess/API/wpe/WebKitRectangle.h: Ditto.
        * UIProcess/API/wpe/WebKitResponsePolicyDecision.h: Ditto.
        * UIProcess/API/wpe/WebKitSecurityManager.h: Ditto.
        * UIProcess/API/wpe/WebKitSettings.h: Ditto.
        * UIProcess/API/wpe/WebKitURIRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitURIResponse.h: Ditto.
        * UIProcess/API/wpe/WebKitURISchemeRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitURISchemeResponse.h: Ditto.
        * UIProcess/API/wpe/WebKitUserContentFilterStore.h: Ditto.
        * UIProcess/API/wpe/WebKitUserContentManager.h: Ditto.
        * UIProcess/API/wpe/WebKitUserMediaPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitUserMessage.h: Ditto.
        * UIProcess/API/wpe/WebKitVersion.h.in: Ditto.
        * UIProcess/API/wpe/WebKitWebContext.h: Ditto.
        * UIProcess/API/wpe/WebKitWebResource.h: Ditto.
        * UIProcess/API/wpe/WebKitWebView.h: Ditto.
        * UIProcess/API/wpe/WebKitWebViewBackend.cpp: Ditto.
        * UIProcess/API/wpe/WebKitWebViewWPE.cpp: Ditto.
        * UIProcess/API/wpe/WebKitWebsiteDataAccessPermissionRequest.h: Ditto.
        * UIProcess/API/wpe/WebKitWebsiteDataManager.h: Ditto.
        * UIProcess/API/wpe/WebKitWebsitePolicies.h: Ditto.
        * UIProcess/API/wpe/WebKitWindowProperties.h: Ditto.
        * UIProcess/API/wpe/docs/wpe-1.0-sections.txt: Removed.
        * UIProcess/API/wpe/docs/wpe-docs.sgml: Removed.
        * WebProcess/InjectedBundle/API/glib/WebKitFrame.cpp: Fix documentation comments.
        * WebProcess/InjectedBundle/API/glib/WebKitWebEditor.cpp: Ditto.
        * WebProcess/InjectedBundle/API/glib/WebKitWebExtension.cpp: Ditto.
        * WebProcess/InjectedBundle/API/glib/WebKitWebHitTestResult.cpp: Ditto.
        * WebProcess/InjectedBundle/API/glib/WebKitWebPage.cpp: Ditto.
        * WebProcess/InjectedBundle/API/gtk/DOM/docs/webkitdomgtk-4.0-sections.txt: Removed.
        * WebProcess/InjectedBundle/API/gtk/DOM/docs/webkitdomgtk-docs.sgml: Removed.
        * WebProcess/InjectedBundle/API/gtk/WebKitFrame.h: Fix documentation comments.
        * WebProcess/InjectedBundle/API/gtk/WebKitWebPage.h: Ditto.
        * WebProcess/InjectedBundle/API/wpe/WebKitFrame.h: Ditto.
        * WebProcess/InjectedBundle/API/wpe/WebKitWebPage.h: Ditto.
        * WebProcess/InjectedBundle/API/wpe/docs/wpe-webextensions-1.0-sections.txt: Removed.
        * WebProcess/InjectedBundle/API/wpe/docs/wpe-webextensions-docs.sgml: Removed.
        * gtk/webkit2gtk-webextension.toml.in: Added.
        * gtk/webkit2gtk.toml.in: Added.
        * wpe/wpewebextension.toml.in: Added.
        * wpe/wpewebkit.toml.in: Added.

2022-04-02  Youenn Fablet  <youenn@apple.com>

        Remove notifications from notification list when notification gets closed
        https://bugs.webkit.org/show_bug.cgi?id=238665

        Reviewed by Darin Adler.

        Cancelling a notification should trigger the close steps, which means removing the notification from the notification list.

        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        (WebKit::WebNotificationManagerProxy::cancel):
        (WebKit::WebNotificationManagerProxy::didDestroyNotification):

2022-04-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] WKFullScreenWindowController's UIViewController leaks after entering element fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238684

        Reviewed by Eric Carlson.

        The window controller's `_rootViewController` is a `RetainPtr`, but we're missing an `adoptNS` when creating a
        new view controller. Fix the leak by using `adoptNS` to prevent the redundant `-retain` when constructing
        `RetainPtr`.

        * UIProcess/ios/fullscreen/WKFullScreenWindowControllerIOS.mm:
        (-[WKFullScreenWindowController enterFullScreen]):

2022-04-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Several tests in media/modern-media-controls crash in -[WKActionSheetAssistant _uiMenuElementsForMediaControlContextMenuItems:]
        https://bugs.webkit.org/show_bug.cgi?id=238687

        Reviewed by Tim Horton.

        Fixes several debug assertions that are hit when running layout tests in media/modern-media-controls, due to
        exercising undefined behavior in the case where there is only one item. This is because we currently use
        Vector's move assignment operator to set `items` to `items[0].children`; however, this move assignment operator
        starts by calling the destructor on the contents of `item`, which puts the first item's vector of children in an
        invalid state.

        Instead, simply add a new temporary variable, and move into the temporary variable instead.

        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant _uiMenuElementsForMediaControlContextMenuItems:]):
        (-[WKActionSheetAssistant showMediaControlsContextMenu:items:completionHandler:]):

2022-04-01  Michael Saboff  <msaboff@apple.com>

        Stop copying StagedFrameworks to the secondary path by default
        https://bugs.webkit.org/show_bug.cgi?id=238688

        Reviewed by Saam Barati.

        Decoupled COPY_STAGED_FRAMEWORKS_TO_SECONDARY_PATH from USE_SYSTEM_CONTENT_PATH so we won't
        always copy frameworks to the secondary path on macOS.  Instead, the build configuration can set
        COPY_STAGED_FRAMEWORKS_TO_SECONDARY_PATH as appropriate.

        * Configurations/Base.xcconfig:

2022-04-01  Diego Pino Garcia  <dpino@igalia.com>

        Unreviewed, fix non-unified build after r292225

        * Platform/IPC/unix/IPCSemaphoreUnix.cpp: Add poll.h and remove
        duplicated Decoder.h and Encoder.h headers.

2022-04-01  Sihui Liu  <sihui_liu@apple.com>

        Avoid initializing default WKWebsiteDataStore in -[WKWebViewConfiguration copyWithZone]
        https://bugs.webkit.org/show_bug.cgi?id=238531
        rdar://90628101

        Reviewed by Tim Horton.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _initializeWithConfiguration:]):
        * UIProcess/API/Cocoa/WKWebViewConfiguration.mm:
        (-[WKWebViewConfiguration copyWithZone:]):

2022-04-01  Jeff Miller  <jeffm@apple.com>

        WKBundlePageUIClient console message support should include source URL, column number, and console messages with arguments
        https://bugs.webkit.org/show_bug.cgi?id=238032

        Reviewed by Alex Christensen.

        Add a new ChromeClient addMessageWithArgumentsToConsole() member function for adding a console
        message that includes formatted arguments. I left the existing behavior of addMessageToConsole()
        unchanged since layout tests expect to get the console message without these arguments.

        * Shared/API/APIArray.cpp:
        (API::Array::createStringArray):
        Added, creates an array from a Span.
        
        * Shared/API/APIArray.h:
        * WebProcess/InjectedBundle/API/APIInjectedBundlePageUIClient.h:
        (API::InjectedBundle::PageUIClient::willAddMessageWithArgumentsToConsole):
        Added.
        
        * WebProcess/InjectedBundle/API/c/WKBundlePageUIClient.h:
        Add WKBundlePageUIClientV5 with a new willAddMessageWithDetailsToConsole callback. This callback is
        similar to the existing willAddMessageToConsole callback, but includes any message arguments, the
        column number, and source URL.

        * WebProcess/InjectedBundle/InjectedBundlePageUIClient.cpp:
        (WebKit::InjectedBundlePageUIClient::willAddMessageWithArgumentsToConsole):
        Added, invokes the new willAddMessageWithDetailsToConsole callback.

        * WebProcess/InjectedBundle/InjectedBundlePageUIClient.h:
        Add a new bundle page UI client version.

        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::addMessageWithArgumentsToConsole):
        Added.

        * WebProcess/WebCoreSupport/WebChromeClient.h:
        Added addMessageWithArgumentsToConsole().

2022-04-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] [WK2] Add plumbing for extracting video frames in element fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238607
        rdar://91102888

        Reviewed by Eric Carlson.

        Add WebKit2 client layer plumbing for triggering video extraction for the prominent video in element fullscreen.
        See below for more details.

        * UIProcess/PageClient.h:
        (WebKit::PageClient::beginElementFullscreenVideoExtraction):
        (WebKit::PageClient::cancelElementFullscreenVideoExtraction):

        Add new PageClient hooks to start and cancel video element extraction in element fullscreen. We only implement
        these on iOS, for now.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::extractVideoInElementFullScreen):
        (WebKit::WebPageProxy::cancelVideoExtractionInElementFullScreen):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:

        Add IPC plumbing from WebPage to WebPageProxy for starting and canceling video element extraction.

        * UIProcess/ios/PageClientImplIOS.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::beginElementFullscreenVideoExtraction):
        (WebKit::PageClientImpl::cancelElementFullscreenVideoExtraction):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView beginElementFullscreenVideoExtraction:bounds:]):
        (-[WKContentView cancelElementFullscreenVideoExtraction]):

        Add method stubs for non-internal builds.

        * WebProcess/FullScreen/WebFullScreenManager.cpp:
        (WebKit::WebFullScreenManager::mainVideoElementExtractionTimerFired):
        (WebKit::WebFullScreenManager::endMainVideoElementExtractionIfNeeded):

        Remove the FIXMEs and call into the new helper methods on WebPage to start and cancel video element extraction.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::extractVideoInElementFullScreen):
        (WebKit::WebPage::cancelVideoExtractionInElementFullScreen):
        * WebProcess/WebPage/WebPage.h:

2022-04-01  Simon Fraser  <simon.fraser@apple.com>

        Hoist the IOSurfacePool out of IOSurface
        https://bugs.webkit.org/show_bug.cgi?id=238675

        Reviewed by Tim Horton.

        A future patch will break the assumption that there is a singleton IOSurfacePool per
        process, so we can't have IOSurface::create() consult the pool internally. Instead,
        pass the pool to the create() functions, and to the moveToPool() function.

        Callers in the web process pass IOSurfacePool::sharedPool(); those in the UI process
        pass nullptr to avoid pool creation there.

        * GPUProcess/media/RemoteImageDecoderAVFProxy.cpp:
        (WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex):
        * GPUProcess/media/cocoa/RemoteMediaPlayerProxyCocoa.mm:
        (WebKit::RemoteMediaPlayerProxy::nativeImageForCurrentTime):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _takeViewSnapshot]):
        (-[WKWebView _snapshotRectAfterScreenUpdates:rectInViewCoordinates:intoImageOfWidth:completionHandler:]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::takeViewSnapshot):
        * WebProcess/GPU/graphics/cocoa/ImageBufferShareableMappedIOSurfaceBackend.cpp:
        (WebKit::ImageBufferShareableMappedIOSurfaceBackend::create):

2022-04-01  Jigen Zhou  <jigen.zhou@sony.com>

        Fix build break after r292225 for Playstation.
        https://bugs.webkit.org/show_bug.cgi?id=238683

        Reviewed by Don Olmstead.

        Unreviewed build fix after 292225 for Playstation build.

        * Platform/IPC/unix/IPCSemaphoreUnix.cpp:

2022-04-01  Diego Pino Garcia  <dpino@igalia.com>

        Unreviewed, fix non-unified build after r292218

        * Platform/IPC/unix/IPCSemaphoreUnix.cpp:
        * UIProcess/Notifications/WebNotificationManagerProxy.h:

2022-04-01  Tusooa Zhu  <tusooa@kazv.moe>

        Expose WebKitWebView from WPEQtView
        https://bugs.webkit.org/show_bug.cgi?id=236746

        Reviewed by Adrian Perez de Castro.

        WPEQtView currently does not allow manipulating the underlying WebKitWebView.
        This patch allows retrieving the WebKitWebView from the WPEQtView.

        No tests needed, as this patch only adds a trivial getter.

        * UIProcess/API/wpe/qt/WPEQtView.cpp:
        (WPEQtView::webView const):
        * UIProcess/API/wpe/qt/WPEQtView.h:

2022-04-01  Ben Nham  <nham@apple.com>

        Add more push-related logging
        https://bugs.webkit.org/show_bug.cgi?id=238591

        Reviewed by Youenn Fablet.

        Add logging to help diagnose Push API errors. We currently log very little, which is making
        it hard for us to diagnose bug reports.

         - Log when we try to fetch or process push messages in NetworkProcess.
         - Log when we enqueue, start, and finish a PushServiceRequest. This helps catch issues such
           as a queued request never running because the OS push daemon never completing a request.
         - Log if we failed trying to wake up the browser to process a push message.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processPushMessage):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _getPendingPushMessages:]):
        (-[WKWebsiteDataStore _processPushMessage:completionHandler:]):
        * webpushd/PushService.mm:
        (WebPushD::PushService::create):
        (WebPushD::PushServiceRequestImpl::fulfill):
        (WebPushD::PushServiceRequestImpl::reject):
        (WebPushD::SubscribeRequest::startImpl):
        (WebPushD::UnsubscribeRequest::startInternal):
        (WebPushD::PushService::enqueuePushServiceRequest):
        (WebPushD::PushService::incrementSilentPushCount):
        (WebPushD::PushService::removeRecordsImpl):
        (WebPushD::makeRawPushMessage):
        (WebPushD::PushService::didReceivePushMessage):
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::injectEncryptedPushMessageForTesting):
        (WebPushD::Daemon::notifyClientPushMessageIsAvailable):
        (WebPushD::Daemon::getPendingPushMessages):

2022-04-01  Chris Dumez  <cdumez@apple.com>

        REGRESSION(r292197): 3 TestWebKitAPI.ContentRuleList API tests are constant failures/timeout
        https://bugs.webkit.org/show_bug.cgi?id=238678
        <rdar://91173297>

        Unreviewed, in r292197, I made a last minute mistake when applying some of Darin's review comments.
        I converted a few calls to `NSURL.absoluteURL.fileSystemRepresentation` to
        `NSURL.absoluteString` instead of `NSURL.absoluteURL.path`. As a result, the file://
        prefix was still present and some characters may still be URL-encoded.

        No new tests, covered by existing API tests failing on the bots.

        * UIProcess/API/Cocoa/WKContentRuleListStore.mm:
        (+[WKContentRuleListStore storeWithURL:]):
        (+[WKContentRuleListStore storeWithURLAndLegacyFilename:]):

2022-04-01  Zan Dobersek  <zdobersek@igalia.com>

        [Linux] Implement IPC::Semaphore
        https://bugs.webkit.org/show_bug.cgi?id=238596

        Reviewed by Adrian Perez de Castro.

        Provide a Linux implementation for IPC::Semaphore that's based on
        eventfd mechanics.

        The IPC::Semaphore class now has a UNIX-specific file descriptor member
        variable. For Linux, this file descriptor is an eventfd with semaphore
        semantics (eventfd being Linux-specific). Signalling and waiting on
        such semaphore is done through the read() and write() functions.
        Non-Linux platforms are expected to provide something equivalent, if
        possible.

        For encoding and decoding that's necessary to move these semaphores
        across process boundaries, IPC::Attachment is used. For encoding the
        eventfd is simply duplicated and pushed into the Attachment, and for
        decoding the Attachment's file descriptor is taken and adopted by the
        Semaphore object.

        * Platform/IPC/IPCSemaphore.h:
        (IPC::Semaphore::operator bool const):
        * Platform/IPC/unix/IPCSemaphoreUnix.cpp:
        (IPC::Semaphore::Semaphore):
        (IPC::Semaphore::~Semaphore):
        (IPC::Semaphore::operator=):
        (IPC::Semaphore::signal):
        (IPC::waitImpl):
        (IPC::Semaphore::wait):
        (IPC::Semaphore::waitFor):
        (IPC::Semaphore::encode const):
        (IPC::Semaphore::decode):
        (IPC::Semaphore::destroy):

2022-04-01  Youenn Fablet  <youenn@apple.com>

        ServiceWorkerRegistration.getNotifications should list all persistent notifications
        https://bugs.webkit.org/show_bug.cgi?id=238544

        Reviewed by Darin Adler.

        Go from WebProcess to UIProcess to read the notification map through IPC messaging.
        Filter out the notifications according tag, origin and session.
        Sort the notifications according creationTime with UIProcess identifier as tie breaker.

        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        * UIProcess/Notifications/WebNotificationManagerProxy.h:
        * UIProcess/WebProcessProxy.cpp:
        * UIProcess/WebProcessProxy.h:
        * UIProcess/WebProcessProxy.messages.in:
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        * WebProcess/Notifications/WebNotificationManager.cpp:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        * WebProcess/Storage/WebSWClientConnection.h:

2022-04-01  Carlos Garcia Campos  <cgarcia@igalia.com>

        REGRESSION(r290360): [GLX] Crash on process exit
        https://bugs.webkit.org/show_bug.cgi?id=238494

        Reviewed by Michael Catanzaro.

        * WebProcess/gtk/WaylandCompositorDisplay.cpp:
        (WebKit::WaylandCompositorDisplay::WaylandCompositorDisplay):

2022-04-01  Tim Horton  <timothy_horton@apple.com>

        Translated applications cannot use remote methods with BOOL arguments
        https://bugs.webkit.org/show_bug.cgi?id=238651
        <rdar://90509457>

        Reviewed by Geoffrey Garen.

        Propagate the fix from r261155 to WKRemoteObjectCoder's method-signature-equality test as well,
        so that BOOL arguments correctly compare as equal between a Rosetta application and its
        native ARM Web Content process.

        * Shared/API/Cocoa/WKRemoteObjectCoder.h:
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (WebKit::methodSignaturesAreCompatible):
        (decodeInvocation):
        Relax argument signature validation slightly, considering signed char and BOOL,
        which are equivalent and sometimes substituted for each other, to be equal.

        * Shared/API/Cocoa/_WKRemoteObjectRegistry.mm:
        (-[_WKRemoteObjectRegistry _invokeMethod:]):
        (blockSignaturesAreCompatible): Deleted.

2022-04-01  Tim Horton  <timothy_horton@apple.com>

        Add a debug overlay for interaction regions
        https://bugs.webkit.org/show_bug.cgi?id=238187

        Reviewed by Wenson Hsieh.

        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        Unified source fixes.

        * UIProcess/API/Cocoa/WKPreferencesPrivate.h:
        Add plumbing for a new debug overlay.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::interactionRegions):
        (WebKit::WebPageProxy::interactableRegionsInRootViewCoordinates): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView interactionRegionsForHoverPlatter:inRect:completionHandler:]):
        (-[WKContentView interactableRegionsForHoverPlatter:inRect:completionHandler:]): Deleted.
        * UIProcess/ios/WKHoverPlatter.h:
        * UIProcess/ios/WKHoverPlatter.mm:
        (-[WKHoverPlatter updateDebugIndicator]):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::interactionRegions):
        Move interactionRegions() from WebPage to WebCore::InteractionRegion.

        (WebKit::WebPage::interactableRegionsInRootViewCoordinates): Deleted.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-04-01  Youenn Fablet  <youenn@apple.com>

        Persistent notifications should work in document scopes as well as service worker global scopes
        https://bugs.webkit.org/show_bug.cgi?id=238601

        Reviewed by Brady Eidson.

        In case of notification message coming from a WebPage, check whether the notification is persistent or not.
        If persistent, go to ServiceWorkerNotificationHandler, otherwise use the current code path through WebPageProxy.

        * UIProcess/Notifications/ServiceWorkerNotificationHandler.h:
        * UIProcess/Notifications/WebNotificationManagerMessageHandler.cpp:
        (WebKit::WebNotificationManagerMessageHandler::showNotification):
        (WebKit::WebNotificationManagerMessageHandler::cancelNotification):
        (WebKit::WebNotificationManagerMessageHandler::clearNotifications):
        (WebKit::WebNotificationManagerMessageHandler::didDestroyNotification):

2022-03-31  Wenson Hsieh  <wenson_hsieh@apple.com>

        Add a heuristic to identify and extract the prominent video element in element fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238579

        Reviewed by Jer Noble.

        Add a heuristic to WebFullScreenManager that identifies and keeps track of the largest, rendered video element
        in element fullscreen mode (that is, the video element with the largest area that's inside of the subtree of the
        fullscreen container element). We couple this with a mechanism to detect when such a video has been paused for a
        short (250 ms) delay.

        These mechanisms will be used in a future patch to support "video extraction" in element fullscreen. See below
        for more details.

        * WebProcess/FullScreen/WebFullScreenManager.cpp:

        Turn WebFullScreenManager into an EventListener subclass, so that we can observe the "playing", "pause", and
        "seeking" events on the main video element (if it exists). See `handleEvent` below for more information.

        (WebKit::WebFullScreenManager::WebFullScreenManager):
        (WebKit::WebFullScreenManager::exitFullScreenForElement):

        Clear out the main video element upon exiting fullscreen.

        (WebKit::WebFullScreenManager::didEnterFullScreen):

        After we've finished entering element fullsreen, traverse the DOM in search of the largest video element (area-
        wise). If the container for element fullscreen is, itself, a video element, then automatically treat that
        element as the main video.

        (WebKit::WebFullScreenManager::mainVideoElementExtractionTimerFired):
        (WebKit::WebFullScreenManager::scheduleMainVideoElementExtraction):
        (WebKit::WebFullScreenManager::endMainVideoElementExtractionIfNeeded):

        For now, these are essentially no-ops; add FIXME's to call into WebPage to begin or cancel video extraction.
        These will be implemented in an upcoming patch, that connects this element fullscreen code to a more generic
        fullscreen video extraction mechanism implemented entirely in the client layer.

        (WebKit::WebFullScreenManager::setMainVideoElement):

        Add a helper method to set the main video element, adding or removing event listeners as needed.

        (WebKit::WebFullScreenManager::handleEvent):

        When observing any of the "playing", "pause", and "seeking" events, update the main video extraction timer;
        that is, if the main video element is paused, restart the timer; otherwise, stop it entirely.

        * WebProcess/FullScreen/WebFullScreenManager.h:

2022-03-31  Chris Dumez  <cdumez@apple.com>

        Prepare WebKit/ & WebKitLegacy/ for making the String(const char*) constructor explicit
        https://bugs.webkit.org/show_bug.cgi?id=238525

        Reviewed by Darin Adler.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::appendBoolean):
        (WebKit::ResourceLoadStatisticsDatabaseStore::getSubStatisticStatement const):
        (WebKit::ResourceLoadStatisticsDatabaseStore::appendSubStatisticList const):
        (WebKit::ResourceLoadStatisticsDatabaseStore::resourceToString const):
        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.h:
        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::cookiesForDOM):
        (WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM):
        * NetworkProcess/NetworkDataTaskBlob.cpp:
        (WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::deletePushAndNotificationRegistration):
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::logCookieInformation const):
        (WebKit::logBlockedCookieInformation):
        (WebKit::logCookieInformationInternal):
        (WebKit::NetworkResourceLoader::logCookieInformation):
        * NetworkProcess/NetworkResourceLoader.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDatabase.cpp:
        (WebKit::PCM::Database::clearPrivateClickMeasurement):
        (WebKit::PCM::Database::addDestinationTokenColumnsIfNecessary):
        (WebKit::PCM::Database::columnsForTable):
        (WebKit::PCM::Database::addMissingColumnToTable):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDatabase.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManager.cpp:
        (WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination):
        (WebKit::PrivateClickMeasurementManager::handleAttribution):
        * NetworkProcess/WebStorage/LocalStorageDatabaseTracker.cpp:
        (WebKit::LocalStorageDatabaseTracker::databasePath const):
        * NetworkProcess/WebStorage/LocalStorageDatabaseTracker.h:
        * NetworkProcess/cache/NetworkCacheBlobStorage.cpp:
        (WebKit::NetworkCache::BlobStorage::get):
        * NetworkProcess/cache/NetworkCacheData.cpp:
        (WebKit::NetworkCache::mapFile):
        * NetworkProcess/cache/NetworkCacheData.h:
        * NetworkProcess/cocoa/LaunchServicesDatabaseObserver.mm:
        (WebKit::LaunchServicesDatabaseObserver::handleEvent):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::createTableIfNecessary):
        * Platform/IPC/JSIPCBinding.cpp:
        (IPC::jsValueForDecodedArgumentValue):
        * Scripts/PreferencesTemplates/WebPreferencesExperimentalFeatures.cpp.erb:
        * Scripts/PreferencesTemplates/WebPreferencesInternalDebugFeatures.cpp.erb:
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (encodeObject):
        * Shared/API/Cocoa/_WKRemoteObjectRegistry.mm:
        (-[_WKRemoteObjectRegistry _sendInvocation:interface:]):
        (replyBlockSignature):
        (-[_WKRemoteObjectRegistry _invokeMethod:]):
        * Shared/Cocoa/SandboxExtensionCocoa.mm:
        (WebKit::stringByResolvingSymlinksInPath):
        (WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension):
        (WebKit::resolvePathForSandboxExtension):
        (WebKit::SandboxExtension::createHandleWithoutResolvingPath):
        (WebKit::SandboxExtension::createHandle):
        (WebKit::SandboxExtension::createHandleForReadWriteDirectory):
        (WebKit::SandboxExtension::createHandleForTemporaryFile):
        (WebKit::SandboxExtension::createHandleForReadByAuditToken):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::XPCServiceInitializerDelegate::getClientIdentifier):
        (WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier):
        (WebKit::XPCServiceInitializerDelegate::getClientProcessName):
        (WebKit::XPCServiceInitializerDelegate::getExtraInitializationData):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceMain.mm:
        (WebKit::XPCServiceMain):
        * Shared/IPCTester.cpp:
        (WebKit::messageTestDriver):
        * Shared/InspectorExtensionTypes.cpp:
        (Inspector::extensionErrorToString):
        * Shared/SandboxExtension.h:
        (WebKit::SandboxExtension::createHandle):
        (WebKit::SandboxExtension::createHandleWithoutResolvingPath):
        (WebKit::SandboxExtension::createHandleForReadWriteDirectory):
        (WebKit::SandboxExtension::createHandleForTemporaryFile):
        (WebKit::stringByResolvingSymlinksInPath):
        (WebKit::resolvePathForSandboxExtension):
        (WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::sandboxDataVaultParentDirectory):
        (WebKit::getUserDirectorySuffix):
        (WebKit::populateSandboxInitializationParameters):
        * Shared/mac/WebEventFactory.mm:
        (WebKit::WebEventFactory::createWebKeyboardEvent):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::openAndMapContentRuleList):
        * UIProcess/API/C/WKDownloadRef.cpp:
        (WKDownloadSetClient):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageGetSessionHistoryURLValueType):
        (WKPageGetSessionBackForwardListItemValueType):
        (WKPageSetPageUIClient):
        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesCreate):
        (WKPreferencesCreateWithIdentifier):
        * UIProcess/API/Cocoa/APIContentRuleListStoreCocoa.mm:
        (API::ContentRuleListStore::defaultStorePath):
        * UIProcess/API/Cocoa/WKContentRuleListStore.mm:
        (+[WKContentRuleListStore storeWithURL:]):
        (+[WKContentRuleListStore storeWithURLAndLegacyFilename:]):
        * UIProcess/API/Cocoa/WKPreferences.mm:
        (-[WKPreferences init]):
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::getLaunchOptions):
        * UIProcess/Cocoa/SOAuthorization/SubFrameSOAuthorizationSession.mm:
        (WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame):
        * UIProcess/Cocoa/WebKitSwiftSoftLink.mm:
        (WebKit::WebKitSwiftLibrary):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformResolvePathsForSandboxExtensions):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (-[WKTextTouchBarItemController _wkChangeTextStyle:]):
        (-[WKTextTouchBarItemController _wkChangeTextAlignment:]):
        (-[WKTextTouchBarItemController _wkChangeColor:]):
        (WebKit::WebViewImpl::insertText):
        * UIProcess/DeviceIdHashSaltStorage.cpp:
        (WebKit::getSecurityOriginData):
        (WebKit::DeviceIdHashSaltStorage::getDataFromDecoder const):
        (WebKit::DeviceIdHashSaltStorage::createEncoderFromData const):
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::ProcessLauncher::launchProcess):
        * UIProcess/Network/NetworkProcessProxyCocoa.mm:
        (WebKit::NetworkProcessProxy::XPCEventHandler::handleXPCEvent const):
        * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
        (WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest):
        * UIProcess/ViewGestureController.cpp:
        (WebKit::ViewGestureController::SnapshotRemovalTracker::log const):
        (WebKit::ViewGestureController::SnapshotRemovalTracker::reset):
        (WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent):
        (WebKit::ViewGestureController::SnapshotRemovalTracker::eventOccurred):
        (WebKit::ViewGestureController::SnapshotRemovalTracker::cancelOutstandingEvent):
        (WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackIfPossible):
        (WebKit::stopWaitingForEvent): Deleted.
        * UIProcess/ViewGestureController.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.mm:
        (WebKit::base64PrivateKey):
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.cpp:
        (WebKit::VirtualHidConnection::parseRequest):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::handleRequest):
        * UIProcess/WebPageGroup.cpp:
        (WebKit::WebPageGroup::WebPageGroup):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::createRealtimeMediaSourceForSpeechRecognition):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::didReceiveInvalidMessage):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::notifyPageStatisticsAndDataRecordsProcessed):
        (WebKit::WebProcessProxy::notifyWebsiteDataScanForRegistrableDomainsFinished):
        (WebKit::WebProcessProxy::notifyWebsiteDataDeletionForRegistrableDomainsFinished):
        (WebKit::WebProcessProxy::createSpeechRecognitionServer):
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultApplicationCacheDirectory):
        (WebKit::WebsiteDataStore::defaultCacheStorageDirectory):
        (WebKit::WebsiteDataStore::defaultGeneralStorageDirectory):
        (WebKit::WebsiteDataStore::defaultNetworkCacheDirectory):
        (WebKit::WebsiteDataStore::defaultAlternativeServicesDirectory):
        (WebKit::WebsiteDataStore::defaultMediaCacheDirectory):
        (WebKit::WebsiteDataStore::defaultIndexedDBDatabaseDirectory):
        (WebKit::WebsiteDataStore::defaultServiceWorkerRegistrationDirectory):
        (WebKit::WebsiteDataStore::defaultLocalStorageDirectory):
        (WebKit::WebsiteDataStore::defaultMediaKeysStorageDirectory):
        (WebKit::WebsiteDataStore::defaultDeviceIdHashSaltsStorageDirectory):
        (WebKit::WebsiteDataStore::defaultWebSQLDatabaseDirectory):
        (WebKit::WebsiteDataStore::defaultResourceLoadStatisticsDirectory):
        (WebKit::WebsiteDataStore::defaultJavaScriptConfigurationDirectory):
        (WebKit::WebsiteDataStore::defaultModelElementCacheDirectory):
        (WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation):
        (WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation):
        (WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::formatNameFromWebRTCCodecType):
        * WebProcess/InjectedBundle/API/c/WKBundlePage.cpp:
        (WKBundlePageSetComposition):
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::increaseBufferedAmount):
        * WebProcess/Network/WebSocketStream.cpp:
        (WebKit::WebSocketStream::networkProcessCrashed):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::receivedNonLinearizedPDFSentinel):
        (WebKit::PDFPlugin::threadEntry):
        (WebKit::PDFPlugin::adoptBackgroundThreadDocument):
        (WebKit::PDFPlugin::pluginInfo):
        (WebKit::PDFPlugin::addArchiveResource):
        (WebKit::PDFPlugin::setSuggestedFilename):
        (WebKit::PDFPlugin::initialize):
        * WebProcess/Plugins/PDF/PDFPluginTextAnnotation.mm:
        (WebKit::cssAlignmentValueForNSTextAlignment):
        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::loadURL):
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::makeCredential):
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        * WebProcess/WebCoreSupport/WebFileSystemStorageConnection.cpp:
        (WebKit::WebFileSystemStorageConnection::isSameEntry):
        (WebKit::WebFileSystemStorageConnection::getFileHandle):
        (WebKit::WebFileSystemStorageConnection::getDirectoryHandle):
        (WebKit::WebFileSystemStorageConnection::removeEntry):
        (WebKit::WebFileSystemStorageConnection::resolve):
        (WebKit::WebFileSystemStorageConnection::getFile):
        (WebKit::WebFileSystemStorageConnection::createSyncAccessHandle):
        (WebKit::WebFileSystemStorageConnection::closeSyncAccessHandle):
        (WebKit::WebFileSystemStorageConnection::getHandleNames):
        (WebKit::WebFileSystemStorageConnection::getHandle):
        (WebKit::WebFileSystemStorageConnection::move):
        * WebProcess/WebCoreSupport/WebSpeechSynthesisClient.cpp:
        (WebKit::WebSpeechSynthesisClient::speak):
        * WebProcess/WebCoreSupport/mac/WebEditorClientMac.mm:
        (WebKit::changeWordCase):
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSMessageListener::jsDescriptionFromDecoder):
        (IPC::jsValueForDecodedArgumentValue):
        * WebProcess/WebPage/WebFrame.cpp:
        (WebKit::WebFrame::layerTreeAsText const):
        * WebProcess/WebPage/mac/TiledCoreAnimationDrawingArea.mm:
        (WebKit::transientZoomSnapAnimationForKeyPath):
        (WebKit::TiledCoreAnimationDrawingArea::commitTransientZoom):
        * WebProcess/cocoa/LaunchServicesDatabaseManager.mm:
        (WebKit::LaunchServicesDatabaseManager::handleEvent):
        * webpushd/AppBundleRequest.mm:
        (WebPushD::AppBundleDeletionRequest::didDeleteExistingBundleWithError):
        * webpushd/PushClientConnection.h:
        * webpushd/PushClientConnection.mm:
        (WebPushD::ClientConnection::broadcastDebugMessage):
        (WebPushD::ClientConnection::sendDebugMessage):
        * webpushd/WebPushDaemon.h:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::broadcastDebugMessage):
        (WebPushD::Daemon::deletePushAndNotificationRegistration):
        * webpushd/WebPushDaemonMain.mm:
        (WebKit::WebPushDaemonMain):

2022-03-31  Jean-Yves Avenard  <jya@apple.com>

        Player window shouldn't have black bar when going into fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238592
        rdar://91085981

        Reviewed by Tim Horton.

        Set the window size to the video element size when going fullscreen and
        restore the original window size when coming out of it.

        Manually tested.

        * UIProcess/ios/fullscreen/WKFullScreenWindowControllerIOS.mm:
        (-[WKFullScreenWindowController beganEnterFullScreenWithInitialFrame:finalFrame:]):
        (-[WKFullScreenWindowController beganExitFullScreenWithInitialFrame:finalFrame:]):

2022-03-31  Chris Dumez  <cdumez@apple.com>

        Adopt Identifier::fromString(ASCIILiteral) more broadly
        https://bugs.webkit.org/show_bug.cgi?id=238574

        Reviewed by Darin Adler.

        Adopt Identifier::fromString(ASCIILiteral) more broadly, now that it is very efficient.

        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::jsResultFromReplyDecoder):
        (WebKit::IPCTestingAPI::createJSArrayForArgumentDescriptions):
        (WebKit::IPCTestingAPI::JSIPC::messages):
        (WebKit::IPCTestingAPI::JSMessageListener::jsDescriptionFromDecoder):
        (WebKit::IPCTestingAPI::inject):

2022-03-31  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] [iOS] Text decoration is always drawn with solid stroke style
        https://bugs.webkit.org/show_bug.cgi?id=236909
        rdar://89196615

        Reviewed by Simon Fraser.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::recordDrawLinesForText):
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-31  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r292183.
        https://bugs.webkit.org/show_bug.cgi?id=238639

        Broke the Big Sur build

        Reverted changeset:

        "[XCBuild] WebKitLegacy's "Migrated headers" script does not
        emit task information"
        https://bugs.webkit.org/show_bug.cgi?id=238409
        https://commits.webkit.org/r292183

2022-03-31  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r292119.
        https://bugs.webkit.org/show_bug.cgi?id=238638

        New API test is flaky

        Reverted changeset:

        "Avoid initializing default WKWebsiteDataStore in
        -[WKWebViewConfiguration copyWithZone]"
        https://bugs.webkit.org/show_bug.cgi?id=238531
        https://commits.webkit.org/r292119

2022-03-31  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for temporarily installing VKCImageAnalysisInteraction on WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=238582

        Reviewed by Tim Horton.

        Add helper methods for temporarily creating and installing an image analysis interaction on the root view. See
        below for more details.

        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView hasSelectablePositionAtPoint:]):
        (-[WKContentView pointIsNearMarkedText:]):
        (-[WKContentView textInteractionGesture:shouldBeginAtPoint:]):

        If Live Text exists at the given location, suppress default WebKit text selection behaviors in favor of Live
        Text instead.

        (-[WKContentView _singleTapRecognized:]):

        Since we only allow the image analysis interaction to begin when interacting directly with regions of the
        content view that contain Live Text, we need to (manually) clear the native text selection here when handling a
        tap over other parts of the web view that are not covered by Live Text.

        (-[WKContentView _didCommitLoadForMainFrame]):

        Uninstall the interaction when loading a new page.

        (-[WKContentView gestureRecognizer:shouldIgnoreWebTouchWithEvent:]):
        (-[WKContentView deferringGestureRecognizer:willBeginTouchesWithEvent:]):

        Don't allow touch events to even begin, if the gesture starts over a region of Live Text.

        (-[WKContentView _tearDownImageAnalysis]):

        Uninstall the interaction when the web process terminates or swaps.

        (-[WKContentView installImageAnalysisInteraction:]):
        (-[WKContentView uninstallImageAnalysisInteraction]):

        These are the two main helper methods for adding or removing the image analysis interaction.

        (-[WKContentView contentsRectForImageAnalysisInteraction:]):
        (-[WKContentView imageAnalysisInteraction:shouldBeginAtPoint:forAnalysisType:]):

        Only allow Live Text interaction gestures to begin if there's interactable content at the given location. The
        only reason why this isn't default behavior already is that the image analysis interaction handles taps that
        happen outside of Live Text by clearing any active selection; to ensure that this continues to work, we handle
        the tap ourselves, and clear the native selection directly (see `-_singleTapRecognized:` above).

2022-03-31  Elliott Williams  <emw@apple.com>

        [XCBuild] WebKitLegacy's "Migrated headers" script does not emit task information
        https://bugs.webkit.org/show_bug.cgi?id=238409
        <rdar://problem/90869551>

        Reviewed by Alexey Proskuryakov.

        * WebKit.xcodeproj/project.pbxproj: Small build rule fix to prevent "no rule to process
        file" warnings on every generated forwarding header. This happened because the build rule
        that generates these temporary forwarding headers looked like it was supposed to _process_
        those headers, too.

2022-03-31  Alex Christensen  <achristensen@webkit.org>

        null check page in API::DataTask constructor
        https://bugs.webkit.org/show_bug.cgi?id=238632
        <rdar://90936679>

        Reviewed by Tim Horton.

        If the page is deallocated between the request to make a data task and the completion providing
        the data task to the API client, we don't want to crash.

        * UIProcess/API/APIDataTask.cpp:
        (API::DataTask::cancel):
        (API::DataTask::DataTask):
        (API::m_sessionID):
        * UIProcess/API/APIDataTask.h:

2022-03-31  Alex Christensen  <achristensen@webkit.org>

        Expand adattributiond sandbox slightly to avoid sandbox crashes
        https://bugs.webkit.org/show_bug.cgi?id=238609
        <rdar://91073280>

        Reviewed by Per Arne Vollan.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb.in:

2022-03-31  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WK2] fast/events/wheel/wheelevent-basic.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=238590

        Reviewed by Don Olmstead.

        This issue happened only if SPI_GETWHEELSCROLLLINES was less than
        3. If I changed "Choose how many lines to scroll each time" to 1
        or 2 in Windows Settings, this test passed.

        * Shared/win/WebEventFactory.cpp:
        (WebKit::WebEventFactory::createWebWheelEvent): Changed local
        variables to float not to truncate the wheel delta.

2022-03-31  Brent Fulgham  <bfulgham@apple.com>

        Add a placeholder for some additional Captive Portal mode settings
        https://bugs.webkit.org/show_bug.cgi?id=238573
        <rdar://problem/91064718>

        Reviewed by Wenson Hsieh.

        SSIA.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal): Call new placeholder helper function.

2022-03-31  Ben Nham  <nham@apple.com>

        Remove push subscriptions when permissions are reset
        https://bugs.webkit.org/show_bug.cgi?id=238068

        Reviewed by Youenn Fablet.

        When the notification permission for an origin is reset (i.e. is in the prompt state), we
        should delete any push subscriptions associated with that origin. We do this by having the
        providerDidRemoveNotificationPolicies API call deletePushAndNotificationRegistration in
        webpushd.

        We also do this when processing a push message, since it's possible for the state to get out
        of sync due to the number of processes involved. For instance, removing the policy from
        System Preferences rather than the browser's notification preference pane can result in the
        providerDidRemoveNotificationPolicies call in the browser to be delayed or dropped.

        Note that we don't delete the subscription if the permission is simply toggled off (i.e. the
        permission is in the Denied state). In that case, the user can easily toggle the permission
        back on. We want the subscription object to stay the same after the preference is toggled
        back on so that the server can still send pushes to that push endpoint. In a future patch
        we'll add subscriptions in this state to the ignored topics list in webpushd, which will
        prevent pushes for those subscriptions from being delivered to the device without actually
        unsubscribing.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processPushMessage):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::processPushMessage):
        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        (WebKit::removePushSubscriptionsForOrigins):
        (WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies):
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::deletePushAndNotificationRegistration):

2022-03-31  Alex Christensen  <achristensen@webkit.org>

        Remove EXPERIMENTAL_FEATURES flag on Cocoa platforms
        https://bugs.webkit.org/show_bug.cgi?id=238565

        Reviewed by Darin Adler.

        * Configurations/BaseTarget.xcconfig:

2022-03-31  Zan Dobersek  <zdobersek@igalia.com>

        [GTK][WPE][GPUProcess] Switch GPUProcessGStreamer.cpp, GPUProcessMainGStreamer.cpp to the GLib flavor
        https://bugs.webkit.org/show_bug.cgi?id=238597

        Reviewed by Adrian Perez de Castro.

        Move the GStreamer implementations for the platform-specific GPUProcess
        methods and entrypoint into GLib-flavored files. This fits better the
        purpose of the GPUProcess since it's been extended beyond just media
        playback. Instead of USE(GSTREAMER), the code in these files is now
        guarded by (PLATFORM(GTK) || PLATFORM(WPE)), the two ports depending
        on the GLib library.

        The GPUProcessMain entrypoint, since it's unconditionally exported in
        the library, is now also unconditionally defined, but with the internal
        implementation launching the GPUProcess logic if ENABLE(GPU_PROCESS) is
        enabled and simply returning 0 otherwise.

        * GPUProcess/glib/GPUProcessGLib.cpp: Renamed from Source/WebKit/GPUProcess/gstreamer/GPUProcessGStreamer.cpp.
        (WebKit::GPUProcess::initializeProcess):
        (WebKit::GPUProcess::initializeProcessName):
        (WebKit::GPUProcess::initializeSandbox):
        * GPUProcess/glib/GPUProcessMainGLib.cpp: Renamed from Source/WebKit/GPUProcess/gstreamer/GPUProcessMainGStreamer.cpp.
        (WebKit::GPUProcessMain):
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * webkitglib-symbols.map:

2022-03-31  Ben Nham  <nham@apple.com>

        Fix null string crashes in PushService
        https://bugs.webkit.org/show_bug.cgi?id=238585

        Reviewed by Darin Adler.

        We've seen a few webpushd crashes due to some PushService routines being passed null string
        arguments. Guard against this with isEmpty checks.

        This also shouldn't be possible--we shouldn't be sending these requests to webpushd in the
        first place. Add some logs to help us catch what's going on.

        * webpushd/PushService.mm:
        (WebPushD::PushService::getSubscription):
        (WebPushD::PushService::subscribe):
        (WebPushD::PushService::unsubscribe):
        (WebPushD::PushService::incrementSilentPushCount):
        (WebPushD::PushService::removeRecordsImpl):

2022-03-31  Diego Pino Garcia  <dpino@igalia.com>

        [WPE] Unreviewed, fix non-unified build after r290343

        * Platform/IPC/ArgumentCoder.h:

2022-03-31  Zan Dobersek  <zdobersek@igalia.com>

        [GTK][WPE] Make ENABLE(GPU_PROCESS) code buildable
        https://bugs.webkit.org/show_bug.cgi?id=238595

        Reviewed by Adrian Perez de Castro.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::setCaptureAttributionString):
        Adjust the setCaptureAttributionString() method definition for non-Cocoa
        platforms.
        * GPUProcess/webrtc/RemoteAudioMediaStreamTrackRendererInternalUnitManager.cpp:
        * GPUProcess/webrtc/RemoteAudioMediaStreamTrackRendererInternalUnitManager.h:
        * GPUProcess/webrtc/RemoteAudioMediaStreamTrackRendererInternalUnitManager.messages.in:
        Guard the RemoteAudioMediaStreamTrackRendererInternalUnitManager class
        with PLATFORM(COCOA) since all its uses are guarded the same way, and
        the implementation unconditionally uses Cocoa-specific classes from
        WebCore. The class can be refactored later if it ends up required for
        any other platform.

2022-03-31  Per Arne Vollan  <pvollan@apple.com>

        Add runtime flag for blocking IOKit resources in the WebContent process' sandbox
        https://bugs.webkit.org/show_bug.cgi?id=238528

        Reviewed by Simon Fraser.

        This flag will trigger a set of sandbox rules in the WebContent process which will block graphics
        related IOKit classes and the Metal compiler service.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/WebPage/WebPage.cpp:

2022-03-30  Simon Fraser  <simon.fraser@apple.com>

        Crash the WebContent process if the RemoteRenderingBackend::PrepareBuffersForDisplay IPC fails
        https://bugs.webkit.org/show_bug.cgi?id=238569

        Reviewed by Kimmo Kinnunen.

        We can't sensibly recover from RemoteRenderingBackend::PrepareBuffersForDisplay IPC failing,
        which can happen when the GPU process crashes, so just crash the WebContent process.

        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::prepareBuffersForDisplay):

2022-03-30  Sihui Liu  <sihui_liu@apple.com>

        Regression: WebsiteDataStore fails to read experimental feature values from NSUserDefaults
        https://bugs.webkit.org/show_bug.cgi?id=238486

        Reviewed by Alex Christensen.

        From rdar://46352542, Safari no longer uses "Experimental" as prefix for experimental features.

        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::internalFeatureEnabled):
        (WebKit::experimentalFeatureEnabled):
        (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode const):
        (WebKit::WebsiteDataStore::platformSetNetworkParameters):

2022-03-30  Kate Cheney  <katherine_cheney@apple.com>

        Migrate manifest version content security policy filtering for extensions into WebKit
        https://bugs.webkit.org/show_bug.cgi?id=238230
        <rdar://problem/60081492>

        Reviewed by Timothy Hatcher.

        Add an SPI for Safari to specify when we are loading a WebView for an extension,
        and which manifest version the extension has.

        * Shared/WebPageCreationParameters.cpp:
        (WebKit::WebPageCreationParameters::encode const):
        (WebKit::WebPageCreationParameters::decode):
        * Shared/WebPageCreationParameters.h:
        * UIProcess/API/APIPageConfiguration.cpp:
        (API::PageConfiguration::copy const):
        * UIProcess/API/APIPageConfiguration.h:
        (API::PageConfiguration::setContentSecurityPolicyModeForExtension):
        (API::PageConfiguration::contentSecurityPolicyModeForExtension const):
        * UIProcess/API/Cocoa/WKWebViewConfiguration.mm:
        (-[WKWebViewConfiguration _setContentSecurityPolicyModeForExtension:]):
        (-[WKWebViewConfiguration _contentSecurityPolicyModeForExtension]):
        * UIProcess/API/Cocoa/WKWebViewConfigurationPrivate.h:
        * UIProcess/Cocoa/CSPExtensionUtilities.h: Added.
        * UIProcess/Cocoa/CSPExtensionUtilities.mm: Added.
        (WebKit::toWKContentSecurityPolicyModeForExtension):
        (WebKit::toContentSecurityPolicyModeForExtension):
        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::creationParameters):
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/WebPage.cpp:

2022-03-30  Chris Dumez  <cdumez@apple.com>

        Use dispatch_source_create(DISPATCH_SOURCE_TYPE_SIGNAL, SIGTERM) in setOSTransaction()
        https://bugs.webkit.org/show_bug.cgi?id=238559

        Reviewed by Darin Adler.

        Use dispatch_source_create(DISPATCH_SOURCE_TYPE_SIGNAL, SIGTERM) in setOSTransaction() instead of a
        low-level signal(SIGTERM) handler, as recommended by the XPC team.

        This is better becomes it has less limitations about what you can do in the handler. It is also
        possible to set several handlers this way, in different parts of the code (i.e. also not worry about
        some other code overriding our handler).

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::setOSTransaction):

2022-03-30  Sihui Liu  <sihui_liu@apple.com>

        Remove -[WKWebsiteDataStore _indexedDBDatabaseDirectory]
        https://bugs.webkit.org/show_bug.cgi?id=238487

        Reviewed by Alex Christensen.

        This is not used by SPI clients, and we have -[_WKWebsiteDataStoreConfiguration _indexedDBDatabaseDirectory].

        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _indexedDBDatabaseDirectory]): Deleted.
        * UIProcess/API/Cocoa/WKWebsiteDataStorePrivate.h:

2022-03-30  Devin Rousso  <drousso@apple.com>

        Web Inspector: Sources: the mapped file URL of a Response Local Override should be clickable
        https://bugs.webkit.org/show_bug.cgi?id=238533

        Reviewed by Patrick Angle.

        * WebProcess/Inspector/RemoteWebInspectorUI.h:
        * WebProcess/Inspector/RemoteWebInspectorUI.cpp:
        (WebKit::RemoteWebInspectorUI::revealFileExternally): Added.
        * WebProcess/Inspector/WebInspectorUI.h:
        * WebProcess/Inspector/WebInspectorUI.cpp:
        (WebKit::WebInspectorUI::revealFileExternally): Added.
        * UIProcess/Inspector/WebInspectorUIProxy.messages.in:
        * UIProcess/Inspector/WebInspectorUIProxy.h:
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::revealFileExternally): Added.
        (WebKit::WebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.mm:
        (WebKit::WebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/mac/WebInspectorUIProxyMac.mm:
        (WebKit::WebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/win/WebInspectorUIProxyWin.mm:
        (WebKit::WebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.messages.in:
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.h:
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::revealFileExternally): Added.
        (WebKit::RemoteWebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/mac/RemoteWebInspectorUIProxyMac.mm:
        (WebKit::RemoteWebInspectorUIProxy::platformRevealFileExternally): Added.
        * UIProcess/Inspector/win/RemoteWebInspectorUIProxyWin.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformRevealFileExternally): Added.
        Add a helper for selecting a file in the system file explorer.

2022-03-30  Sihui Liu  <sihui_liu@apple.com>

        Avoid initializing default WKWebsiteDataStore in -[WKWebViewConfiguration copyWithZone]
        https://bugs.webkit.org/show_bug.cgi?id=238531
        rdar://90628101

        Reviewed by Tim Horton.

        API test: WKWebsiteDataStore.DoNotCreateDefaultDataStore

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _initializeWithConfiguration:]):
        * UIProcess/API/Cocoa/WKWebViewConfiguration.mm:
        (-[WKWebViewConfiguration copyWithZone:]):

2022-03-30  Youenn Fablet  <youenn@apple.com>

        Implement persistent notification handling
        https://bugs.webkit.org/show_bug.cgi?id=238498

        Reviewed by Brady Eidson.

        When receiving an update for a notification, check if the notification is tied to a service worker registration.
        If so, go to network process to fire a functional event, as per https://notifications.spec.whatwg.org/#activating-a-notification
        and https://notifications.spec.whatwg.org/#ref-for-fire-a-service-worker-notification-event①
        UIProcess sends the corresponding NotficationData to NetworkProcess.
        NetworkProcess gets the service worker registration, runs the service worker as needed and fires the functional event.
        Add IPC plumbing code to support this flow.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processNotificationEvent):
        (WebKit::NetworkProcess::processPushMessage):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::firePushEvent):
        (WebKit::WebSWServerToContextConnection::fireNotificationEvent):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::processNotificationEvent):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Notifications/WebNotification.cpp:
        (WebKit::WebNotification::WebNotification):
        * UIProcess/Notifications/WebNotification.h:
        (WebKit::WebNotification::title const):
        (WebKit::WebNotification::body const):
        (WebKit::WebNotification::iconURL const):
        (WebKit::WebNotification::tag const):
        (WebKit::WebNotification::lang const):
        (WebKit::WebNotification::dir const):
        (WebKit::WebNotification::coreNotificationID const):
        (WebKit::WebNotification::sessionID const):
        (WebKit::WebNotification::data const):
        (WebKit::WebNotification::isPersistentNotification const):
        (WebKit::WebNotification::notificationID const):
        * UIProcess/Notifications/WebNotificationManagerProxy.cpp:
        (WebKit::dispatchDidClickNotification):
        (WebKit::WebNotificationManagerProxy::providerDidCloseNotifications):
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::WebSWContextManagerConnection::fireNotificationEvent):
        * WebProcess/Storage/WebSWContextManagerConnection.h:
        * WebProcess/Storage/WebSWContextManagerConnection.messages.in:

2022-03-30  Chris Dumez  <cdumez@apple.com>

        Add HashTranslator for ASCIILiteral for faster lookup in HashMaps / HashSets
        https://bugs.webkit.org/show_bug.cgi?id=238521

        Reviewed by Geoffrey Garen.

        Add HashTranslator for ASCIILiteral for faster lookup in HashMaps / HashSets using an ASCIILiteral,
        without the need for allocating a String.

        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::getUserDirectorySuffix):
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::getLaunchOptions):
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::ProcessLauncher::launchProcess):
        * UIProcess/Launcher/glib/ProcessLauncherGLib.cpp:
        (WebKit::ProcessLauncher::launchProcess):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::getLaunchOptions):
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformGetLaunchOptions):
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::platformInitializeProcess):

2022-03-30  Youenn Fablet  <youenn@apple.com>

        Implement ServiceWorker WindowClient.ancestorOrigins
        https://bugs.webkit.org/show_bug.cgi?id=238441

        Reviewed by Chris Dumez.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::controlClient):

2022-03-30  Kimmo Kinnunen  <kkinnunen@apple.com>

        Move AuxiliaryProcess::createIPCConnectionPair to IPC::Connection
        https://bugs.webkit.org/show_bug.cgi?id=238504

        Reviewed by Chris Dumez.

        Move connection port/socket/pipe pair creation function from AuxiliaryProcess
        to IPC::Connection. This way other components than AuxiliaryProcess subclasses
        can create and send new connections.

        No new tests, refactor.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::createGPUConnectionToWebProcess):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::createNetworkConnectionToWebProcess):
        * Platform/IPC/Connection.cpp:
        (IPC::Connection::createConnectionIdentifierPair):
        * Platform/IPC/Connection.h:
        * Platform/IPC/cocoa/ConnectionCocoa.mm:
        (IPC::Connection::createConnectionIdentifierPair):
        * Platform/IPC/unix/ConnectionUnix.cpp:
        (IPC::Connection::createConnectionIdentifierPair):
        * Platform/IPC/win/ConnectionWin.cpp:
        (IPC::Connection::createConnectionIdentifierPair):
        * Shared/AuxiliaryProcess.cpp:
        * Shared/AuxiliaryProcess.h:
        * WebAuthnProcess/WebAuthnProcess.cpp:
        (WebKit::WebAuthnProcess::createWebAuthnConnectionToWebProcess):
        * WebProcess/Inspector/WebInspectorUI.cpp:
        (WebKit::WebInspectorUI::updateConnection):

2022-03-30  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] Exit cleanly if Connection to UIProcess severed. Regression (r214307)
        https://bugs.webkit.org/show_bug.cgi?id=235224

        This patch reverts the WPE and GTK specific code removed in '[WK2] Make
        establishing a connection between the WebProcess and the Network process more
        robust' (r12345):

        GTK+ and WPE ports don't exit on send sync message failure. In those particular
        cases, the network process can be terminated by the UI process while the
        Web process is still initializing, so we always want to exit instead of crashing. This can
        happen when the WebView is created and then destroyed quickly.
        See https://bugs.webkit.org/show_bug.cgi?id=183348.

        Reviewed by Carlos Garcia Campos.

        * WebProcess/WebProcess.cpp:
        (WebKit::getNetworkProcessConnection):
        (WebKit::WebProcess::getGPUProcessConnection):
        (WebKit::getWebAuthnProcessConnection):

2022-03-30  Jean-Yves Avenard  <jya@apple.com>

        Window is too small after entering and exiting video/element fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238488
        rdar://89363964

        Reviewed by Tim Horton.

        Don't change the size of the window to the size of the element.

        * UIProcess/ios/fullscreen/WKFullScreenWindowControllerIOS.mm:
        (-[WKFullScreenWindowController beganEnterFullScreenWithInitialFrame:finalFrame:]):

2022-03-29  Devin Rousso  <drousso@apple.com>

        Web Inspector: Sources: allow Response Local Overrides to map to a file on disk
        https://bugs.webkit.org/show_bug.cgi?id=238236
        <rdar://problem/59009154>

        Reviewed by Patrick Angle.

        This makes Response Local Overrides even more powerful by allowing developers to map the
        contents of the (Local Override) resource to a file on disk (e.g. a local copy of the file),
        meaning that they can use their preferred editor of choice (and all the tools that may come
        with it) to make changes instead of having to stay within Web Inspector.

        * WebProcess/Inspector/WebInspectorUI.h:
        * WebProcess/Inspector/WebInspectorUI.cpp:
        (WebKit::WebInspectorUI::load): Added.
        (WebKit::WebInspectorUI::canLoad): Added.
        * WebProcess/Inspector/gtk/WebInspectorUIGtk.cpp:
        (WebKit::WebInspectorUI::canLoad): Added.
        * WebProcess/Inspector/mac/WebInspectorUIMac.mm:
        (WebKit::WebInspectorUI::canLoad): Added.
        * WebProcess/Inspector/win/WebInspectorUIWin.cpp:
        (WebKit::WebInspectorUI::canLoad): Added.
        * WebProcess/Inspector/RemoteWebInspectorUI.h:
        * WebProcess/Inspector/RemoteWebInspectorUI.cpp:
        (WebKit::RemoteWebInspectorUI::load): Added.
        * UIProcess/Inspector/WebInspectorUIProxy.messages.in:
        * UIProcess/Inspector/WebInspectorUIProxy.h:
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::load): Added.
        (WebKit::WebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/mac/WebInspectorUIProxyMac.mm:
        (WebKit::WebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/win/WebInspectorUIProxyWin.cpp:
        (WebKit::WebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.messages.in:
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.h:
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::initialize): Renamed from `load`.
        (WebKit::RemoteWebInspectorUIProxy::reopen):
        (WebKit::RemoteWebInspectorUIProxy::load): Added.
        (WebKit::RemoteWebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/mac/RemoteWebInspectorUIProxyMac.mm:
        (WebKit::RemoteWebInspectorUIProxy::platformLoad): Added.
        * UIProcess/Inspector/win/RemoteWebInspectorUIProxyWin.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformLoad): Added.
        Add helpers for loading the contents of a file on disk.

        * UIProcess/API/Cocoa/_WKRemoteWebInspectorViewController.mm:
        (-[_WKRemoteWebInspectorViewController loadForDebuggable:backendCommandsURL:]):
        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorProxy::initialize): Renamed from `load`.
        (WebKit::RemoteInspectorClient::inspect):
        * UIProcess/Inspector/socket/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorProxy::initialize): Renamed from `load`.
        (WebKit::RemoteInspectorClient::inspect):
        Use renamed `WebKit::RemoteWebInspectorUIProxy::initialize`.

2022-03-29  Jigen Zhou  <jigen.zhou@sony.com>

        [Playstation] Fix build break after r292041 when ENABLE_SERVICE_WORKER is off
        https://bugs.webkit.org/show_bug.cgi?id=238520

        Reviewed by Darin Adler.

        Unreviewed build fix after r292041 / r291979 for Playsation platform builds. 

        * UIProcess/WebsiteData/WebsiteDataStore.cpp:

2022-03-29  Alex Christensen  <achristensen@webkit.org>

        Don't create directories on iOS if we are only using ephemeral storages
        https://bugs.webkit.org/show_bug.cgi?id=238402
        <rdar://79639418>

        Reviewed by Chris Dumez.

        Since we have been giving access to those directories as long as WebKit2 has been on iOS,
        this is a conservative change to only give access to the directories when using persistent storage.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        * NetworkProcess/NetworkProcessCreationParameters.cpp:
        (WebKit::NetworkProcessCreationParameters::encode const):
        (WebKit::NetworkProcessCreationParameters::decode):
        * NetworkProcess/NetworkProcessCreationParameters.h:
        * NetworkProcess/cocoa/NetworkProcessCocoa.mm:
        (WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa):
        * Shared/WebsiteDataStoreParameters.cpp:
        (WebKit::WebsiteDataStoreParameters::encode const):
        (WebKit::WebsiteDataStoreParameters::decode):
        * Shared/WebsiteDataStoreParameters.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformResolvePathsForSandboxExtensions):
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):

2022-03-29  Alex Christensen  <achristensen@webkit.org>

        Navigation Timing data is corrupt in WebView (UIWebView/WKWebView)
        https://bugs.webkit.org/show_bug.cgi?id=186919
        <rdar://41393423>

        Reviewed by Simon Fraser.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didFinishCollectingMetrics:]):

2022-03-29  C Lopez  <clopez1@apple.com>

        Add Captive Portal alert to WKWebView
        https://bugs.webkit.org/show_bug.cgi?id=238326

        Reviewed by Geoffrey Garen and Brent Fulgham

        When WkWebView on iOS is initialized, we call `_presentCaptivePortalModeAlertIfNeeded` which checks whether an alert needs to be presented or not.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _presentCaptivePortalModeAlertIfNeeded]):
        (-[WKWebView didMoveToWindow]):

2022-03-29  Don Olmstead  <don.olmstead@sony.com>

        [LibWPE] Guard libxkbcommon code with WPE_ENABLE_XKB
        https://bugs.webkit.org/show_bug.cgi?id=238510

        Reviewed by Adrian Perez de Castro.

        Guard libwpe xkb code with WPE_ENABLE_XKB.

        * UIProcess/Automation/libwpe/WebAutomationSessionLibWPE.cpp:
        (WebKit::doKeyStrokeEvent):

2022-03-29  Sihui Liu  <sihui_liu@apple.com>

        Unreviewed test fix after r292024.
        https://bugs.webkit.org/show_bug.cgi?id=238082
        <rdar://problem/90844775>

        Correcting an if condition.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processDidResume):

2022-03-29  Eric Carlson  <eric.carlson@apple.com>

        [macOS] Muted video is sometimes paused when entering fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=238462
        rdar://89104216

        Reviewed by Jer Noble.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::setPageIsVisible): Track visibility and do
        nothing when it doesn't change.
        (WebKit::MediaPlayerPrivateRemote::setShouldMaintainAspectRatio): Ditto for aspect
        ratio.
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:

2022-03-29  Eric Carlson  <eric.carlson@apple.com>

        Don't send sync RemoteMediaPlayerProxy messages that we know will fail
        https://bugs.webkit.org/show_bug.cgi?id=238467
        rdar://86662565

        Reviewed by Jer Noble.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime): Return early if
        readyState is less than HaveCurrentData, or if the first frame is not available.

        * WebProcess/GPU/media/cocoa/MediaPlayerPrivateRemoteCocoa.mm:
        (WebKit::MediaPlayerPrivateRemote::nativeImageForCurrentTime): Ditto.
        (WebKit::MediaPlayerPrivateRemote::colorSpace): Ditto.

2022-03-29  Devin Rousso  <drousso@apple.com>

        Unreviewed, fix UAF after r291980

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::transitionToCommittedForNewPage):
        Expose `OverrideViewportSize` so that we can copy those members specifically instead of
        having to keep alive the old `FrameView` when transitioning to a new page.

2022-03-29  Jigen Zhou  <jigen.zhou@sony.com>

        [Playstation] Fix build break after r291979 if ENABLE_SERVICE_WORKER is off
        https://bugs.webkit.org/show_bug.cgi?id=238471

        Reviewed by Don Olmstead.

        Build fix for playstation platform after r291979 to support ServiceWorkerClients.openWindow. 
        This patch resolves compiling errors occurs in WebPageProxy::callLoadCompletionHandlersIfNecessary 
        if ENABLE_SERVICE_WORKER is off.

        * UIProcess/WebPageProxy.cpp:

2022-03-29  Patrick Angle  <pangle@apple.com>

        Web Inspector: [Cocoa] Indicate a request was sent through proxy/private relay in Network tab
        https://bugs.webkit.org/show_bug.cgi?id=233202

        Reviewed by Devin Rousso.

        Add plumbing for the new `isProxyConnection` network metric.

        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didFinishCollectingMetrics:]):

2022-03-28  Simon Fraser  <simon.fraser@apple.com>

        [iOS GPUProcess] Image decoding should not trigger IOSurface usage in the web process
        https://bugs.webkit.org/show_bug.cgi?id=238489
        <rdar://88717577>

        Reviewed by Per Arne Vollan.

        When useGPUProcessForDOMRendering is true, disable hardware image decoding since
        we need to avoid IOSurface access in the web process.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::setUseGPUProcessForDOMRendering):

2022-03-29  Don Olmstead  <don.olmstead@sony.com>

        Share WebAutomationSession among USE(LIBWPE) ports
        https://bugs.webkit.org/show_bug.cgi?id=238470

        Reviewed by Adrian Perez de Castro.

        Rename WebAutomationSessionWPE.cpp to WebAutomationSessionLibWPE since its just using the
        libWPE API. Remove glib specific code in WebAutomationSession::platformSimulateKeySequence
        to use a StringView::codePoints. The same code was in GTK so replace that as well.

        * SourcesWPE.txt:
        * UIProcess/Automation/gtk/WebAutomationSessionGtk.cpp:
        (WebKit::WebAutomationSession::platformSimulateKeySequence):
        * UIProcess/Automation/libwpe/WebAutomationSessionLibWPE.cpp: Renamed from Source/WebKit/UIProcess/Automation/wpe/WebAutomationSessionWPE.cpp.
        (WebKit::WebAutomationSession::platformSimulateKeySequence):

2022-03-29  Youenn Fablet  <youenn@apple.com>

        RealtimeMediaSource::Type::Video is misleading as it is actually referring to camera sources
        https://bugs.webkit.org/show_bug.cgi?id=238449

        Reviewed by Eric Carlson.

        * Shared/WebCoreArgumentCoders.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        (WebKit::UserMediaCaptureManagerProxy::SourceProxy::SourceProxy):
        (WebKit::UserMediaCaptureManagerProxy::SourceProxy::~SourceProxy):
        * WebProcess/cocoa/RemoteRealtimeMediaSource.cpp:
        (WebKit::toSourceType):

2022-03-28  Sihui Liu  <sihui_liu@apple.com>

        Add logging about process entering background to NetworkProcess::processDidResume
        https://bugs.webkit.org/show_bug.cgi?id=238082
        <rdar://problem/90844775>

        Reviewed by Chris Dumez.

        In rdar://82412733, we found network process can be suspended right after it receives processDidResume message. 
        For network process, processDidResume means process is not suspended and it is safe to perform database 
        operations. Let's add logging to check when and why processDidResume message is sent. If the logging confirms
        that processDidResume message can be received when process is close to assertion timeout, we probably want to 
        ignore such message and resume database operations when application actually enters foreground.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::prepareToSuspend):
        (WebKit::NetworkProcess::applicationDidEnterBackground):
        (WebKit::NetworkProcess::applicationWillEnterForeground):
        (WebKit::NetworkProcess::processDidResume):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/ios/NetworkProcessIOS.mm:
        * UIProcess/API/Cocoa/WKWebViewTesting.mm:
        (-[WKWebView _processDidResumeForTesting]):
        * UIProcess/Cocoa/DownloadProxyMapCocoa.mm:
        (WebKit::DownloadProxyMap::platformCreate):
        (WebKit::DownloadProxyMap::platformDestroy):
        * UIProcess/Downloads/DownloadProxyMap.cpp:
        (WebKit::DownloadProxyMap::applicationDidEnterBackground): Deleted.
        (WebKit::DownloadProxyMap::applicationWillEnterForeground): Deleted.
        * UIProcess/Downloads/DownloadProxyMap.h:
        (WebKit::DownloadProxyMap::isEmpty const):
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::sendProcessDidResume):
        * UIProcess/GPU/GPUProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::NetworkProcessProxy):
        (WebKit::NetworkProcessProxy::~NetworkProcessProxy):
        (WebKit::NetworkProcessProxy::synthesizeAppIsBackground):
        (WebKit::NetworkProcessProxy::sendProcessDidResume):
        (WebKit::NetworkProcessProxy::applicationDidEnterBackground):
        (WebKit::NetworkProcessProxy::applicationWillEnterForeground):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxyCocoa.mm:
        (WebKit::NetworkProcessProxy::addBackgroundStateObservers):
        (WebKit::NetworkProcessProxy::removeBackgroundStateObservers):
        * UIProcess/ProcessThrottler.cpp:
        (WebKit::ProcessThrottler::updateAssertionIfNeeded):
        * UIProcess/ProcessThrottlerClient.h:
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::sendProcessDidResume):
        * UIProcess/WebProcessProxy.h:
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::sendNetworkProcessDidResume):

2022-03-28  Sihui Liu  <sihui_liu@apple.com>

        Disable custom storage paths for IndexedDB and LocalStorage by default
        https://bugs.webkit.org/show_bug.cgi?id=236977
        <rdar://problem/89559929>

        Reviewed by Geoffrey Garen.

        Developers can enable them by disabling "general directory for storage" via internal debug feature or system 
        feature flag.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::internalFeatureEnabled):
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):

2022-03-28  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291728.
        https://bugs.webkit.org/show_bug.cgi?id=238476

        causing crashes in tests

        Reverted changeset:

        "Expand autocorrect context for more accurate results."
        https://bugs.webkit.org/show_bug.cgi?id=237990
        https://commits.webkit.org/r291728

2022-03-28  Devin Rousso  <drousso@apple.com>

        [macOS] Add `WKWebView` API to control CSS "small viewport" `sv*` and "large viewport" `lv*` units
        https://bugs.webkit.org/show_bug.cgi?id=238173
        <rdar://problem/90602918>

        Reviewed by Wenson Hsieh.

        See <https://webkit.org/b/237979> for information about this API. This change just also
        enables it on macOS (the other change was iOS-only).

        * UIProcess/API/Cocoa/WKWebView.h:
        * UIProcess/API/Cocoa/WKWebViewInternal.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        * UIProcess/API/mac/WKWebViewMac.mm:
        (-[WKWebView setFrameSize:]):
        Remove the `#if PLATFORM(IOS_FAMILY)` around all things related to `-[WKWebview setMinimumViewportInset:maximumViewportInset:]`.

2022-03-28  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION (r290794): [ iOS Debug ] 4 editing/selection/* tests are constant timeouts
        https://bugs.webkit.org/show_bug.cgi?id=238155
        rdar://90593957

        Reviewed by Aditya Keerthi.

        After the changes in r290794, we now preemptively compute and send an excessive amount of autocorrection
        contexts to the UI process when an element gains focus, such that the UI process is capable of immediately
        responding to calls to `-requestAutocorrectionContextWithCompletionHandler:` without relying on synchronous IPC
        to the web process. This made several (already-fairly-slow) tests in editing/selection time out, due to WebKit
        computing and sending an excessive amount of this contextual information.

        To mitigate this, only perform this preemptive autocorrection context computation if the focused element is
        actually changing (i.e., we're not refocusing the same element). Covered by removing several [ Slow ] test
        expectations that should no longer be needed.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::elementDidFocus):

2022-03-28  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Block access to IOKit class
        https://bugs.webkit.org/show_bug.cgi?id=238457

        Reviewed by Geoffrey Garen.

        Block access to IOKit class AGPMClient on macOS. We already block all messages for this class.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-28  Fujii Hironori  <Hironori.Fujii@sony.com>

        Unreviewed build fix after 291979 for WinCairo and PlayStation Debug builds
        https://bugs.webkit.org/show_bug.cgi?id=238400

        > WebNotificationManager.cpp(153): error C2027: use of undefined type 'WebCore::Notification'

        * WebProcess/Notifications/WebNotificationManager.cpp:
        (WebKit::WebNotificationManager::show): Guarded the LOG with ENABLE(NOTIFICATIONS).

2022-03-28  Chris Dumez  <cdumez@apple.com>

        Prepare WebCore for making the String(const char*) constructor explicit
        https://bugs.webkit.org/show_bug.cgi?id=238408

        Reviewed by Geoff Garen.

        Prepare WebCore for making the String(const char*) constructor explicit.
        Making this constructor explicit helps findings cases where a String is constructed
        from a literal without the ""_s suffix.

        * NetworkProcess/NetworkDataTaskBlob.cpp:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didCreateSleepDisabler):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess):

2022-03-28  J Pascoe  <j_pascoe@apple.com>

        Adopt ASCPublicKeyCredentialCreationOptions's residentKeyPreference 
        https://bugs.webkit.org/show_bug.cgi?id=238387
        rdar://problem/90845393

        Reviewed by Brent Fulgham.

        This patch passes along the residentKeyPreference to ASA, so it can  be passed
        back via _WKAuthenticatorSelectionCriteria.residentKey.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::toASCResidentKeyPreference):
        (WebKit::configureRegistrationRequestContext):

2022-03-28  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Fix sandbox violation related to Network content filtering
        https://bugs.webkit.org/show_bug.cgi?id=238458
        <rdar://90927474>
 
        Reviewed by Brent Fulgham.

        After enabling Network content filtering in the Network process, a related sandbox rule should
        be moved to the Network process' sandbox.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-28  Devin Rousso  <drousso@apple.com>

        [iOS] Add `WKWebView` API to control CSS "small viewport" `sv*` and "large viewport" `lv*` units
        https://bugs.webkit.org/show_bug.cgi?id=237979
        <rdar://problem/89434696>

        Reviewed by Tim Horton.

        Recently the W3C CSS working group added [some new unit types to CSS](https://drafts.csswg.org/css-values-4/#viewport-variants)
        with the goal of helping web developers better deal with browsers that have dynamic UI
        elements that change apperance/size/etc. based on user actions (e.g. the URL bar
        collapsing/"squishing" and expanding/"unsquishing" depending on whether the user has most
        recently scrolled/swiped down the page).

        These new units come in three categories:
        - the "large viewport" units (`lvw`, `lvh`, etc.) each represent 1% of one dimension of the
          size of the visual area of the page when all browser UI elements are in their smallest
          state (e.g. when the URL bar is collapsed/"squished")
        - the "small viewport" units (`svw`, `svh`, etc.) each represent 1% of one dimension of the
          size of the visual area of the page when all browser UI elements are in their largest
          state (e.g. when the URL bar is expanded/"unsquished")
        - the "dynamic viewport" units (`dvw`, `dvh`, etc.) each represent 1% of one dimension of
          the size of the current visual area of the page, which depends on the current state of all
          browser UI elements

        This way, developer could use `100svh` to ensure that no matter what state the browser UI
        elements are in the entire element will always be visible on the screen, or use `100dvh` to
        respond to browser UI element changes by automatically resizing various elements to always
        fully take advantage of the available space.

        Nothing needs to be added to support "dynamic viewport" `dv*` units as there already exists
        other methods to adjust the visual area of the `WKWebView` without adjusting its `frame`
        (e.g. `-[WKWebView setBounds:]`, `-[UIScrollView setContentInset:]`, etc.).

        But for "small viewport" `sv*` units and "large viewport" `lv*` units, however, there is
        unfortunately no way to tell a `WKWebView` anything like "this is the smallest/largest that
        this `WKWebView` will ever be", so there's no way to know ahead of time what the size of the
        visual area would be when all browser UI elements are in their smallest/largest state. As
        such, this patch adds a new API to allow for `WKWebView` clients to tell WebKit this
        information ahead of time.

        Note that there already exists the concept of "default viewport" units (`vw`, `vh`, etc.)
        that each represent 1% of one dimension of the size of the visual area of the page when all
        browser UI elements are in their default state. The behavior of these units remain the same,
        and the value can be changed via the existing `-[WKWebView setFrame:]`.

        Tests: CSSViewportUnits.NegativeMinimumViewportInset
               CSSViewportUnits.NegativeMaximumViewportInset
               CSSViewportUnits.MinimumViewportInsetLargerThanMaximumViewportInset
               CSSViewportUnits.MinimumViewportInsetLargerThanFrame
               CSSViewportUnits.MaximumViewportInsetLargerThanFrame
               CSSViewportUnits.MinimumViewportInset
               CSSViewportUnits.MaximumViewportInset
               CSSViewportUnits.MinimumViewportInsetWithZoom
               CSSViewportUnits.MaximumViewportInsetWithZoom
               CSSViewportUnits.MinimumViewportInsetWithWritingMode
               CSSViewportUnits.MaximumViewportInsetWithWritingMode
               CSSViewportUnits.MinimumViewportInsetWithFrame
               CSSViewportUnits.MaximumViewportInsetWithFrame
               CSSViewportUnits.MinimumViewportInsetWithBounds
               CSSViewportUnits.MaximumViewportInsetWithBounds
               CSSViewportUnits.MinimumViewportInsetWithContentInset
               CSSViewportUnits.MaximumViewportInsetWithContentInset
               CSSViewportUnits.MinimumViewportInsetWithSafeAreaInsets
               CSSViewportUnits.MaximumViewportInsetWithSafeAreaInsets
               CSSViewportUnits.UnobscuredSizeOverridesIgnoreMaximumViewportInsetAPI

        * UIProcess/API/Cocoa/WKWebViewInternal.h:
        * UIProcess/API/Cocoa/WKWebView.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _recalculateViewportSizesWithMinimumViewportInset:maximumViewportInset:throwOnInvalidInput:]): Added.
        (-[WKWebView setMinimumViewportInset:maximumViewportInset:]): Added.
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _processWillSwapOrDidExit]):
        (-[WKWebView _frameOrBoundsChanged]):
        (-[WKWebView _didCompleteAnimatedResize]):
        (-[WKWebView _setMinimumUnobscuredSizeOverride:]):
        (-[WKWebView _setMaximumUnobscuredSizeOverride:]):
        (-[WKWebView _beginAnimatedResizeWithUpdates:]):
        (-[WKWebView _dispatchSetMinimumUnobscuredSize:]): Deleted.
        (-[WKWebView _dispatchSetMaximumUnobscuredSize:]): Deleted.
        Recalculate the size for CSS "small viewport" `sv*` units whenever the `frame` changes. Also
        move the deduplication logic that prevents the same value from being sent to the WebProcess
        more than once to the setter methods on `WebPageProxy` so that it can be used by more than
        just iOS-only codepaths.

        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::setDefaultUnobscuredSize): Added.
        (WebKit::WebPageProxy::setMinimumUnobscuredSize): Added.
        (WebKit::WebPageProxy::setMaximumUnobscuredSize): Added.
        (WebKit::WebPageProxy::creationParameters):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::dynamicViewportSizeUpdate):
        (WebKit::WebPageProxy::setMinimumUnobscuredSize): Deleted.
        (WebKit::WebPageProxy::setMaximumUnobscuredSize): Deleted.
        * Shared/WebPageCreationParameters.h:
        * Shared/WebPageCreationParameters.cpp:
        (WebKit::WebPageCreationParameters::encode const):
        (WebKit::WebPageCreationParameters::decode):
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::WebPage):
        (WebKit::WebPage::setViewportSizeForCSSViewportUnits):
        (WebKit::WebPage::setDefaultUnobscuredSize): Added.
        (WebKit::WebPage::setMinimumUnobscuredSize): Added.
        (WebKit::WebPage::setMaximumUnobscuredSize): Added.
        (WebKit::WebPage::updateSizeForCSSDefaultViewportUnits): Added.
        (WebKit::WebPage::updateSizeForCSSSmallViewportUnits): Added.
        (WebKit::WebPage::updateSizeForCSSLargeViewportUnits): Added.
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::viewportConfigurationChanged):
        (WebKit::WebPage::setMinimumUnobscuredSize): Deleted.
        (WebKit::WebPage::setMaximumUnobscuredSize): Deleted.
        (WebKit::WebPage::updateViewportSizeForCSSViewportUnits): Deleted.
        Add all the various methods for getting/setting/overriding/clearing an override value for
        CSS "default viewport" `v*` units. This allows for `WKWebView` clients to preserve existing
        behavior (where CSS "default viewport" `v*` units match the size of the `WKWebView`) while
        adding supporting CSS "small viewport" `sv*` units and CSS "large viewport" `lv*` units.
        Move iOS-only code to be for all platforms.

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::transitionToCommittedForNewPage):
        Propagate all viewport size overrides when a new `FrameView` is created.

2022-03-28  Brady Eidson  <beidson@apple.com>

        Support ServiceWorkerClients.openWindow.
        <rdar://90616651> and https://bugs.webkit.org/show_bug.cgi?id=238400

        Reviewed by Youenn Fablet.
        
        This API asks the browser to asynchronously open a new tab to a URL then resolve
        a promise with the new WindowClient representing that tab.
            
        From a WebCore/WebKit standpoint, implementing this was mostly straightforward.
        1 - A plumbing exercise (thread hopping and IPC'ing the message and its reply around)
        2 - Implmenting a new delegate method for the hosting app to create the requested WKWebView
        
        The delegate method was interesting. Normally this is the type of thing that'd go to the
        WKUIDelegate but that requires there to be a WKWebView, and service workers can be running
        without any web views.
        
        Fortunately we already had a WKWebsiteDataStore delegate SPI, and service workers *do* always
        have an associated website data store they're running under.
        
        Once the app gives the new web view back to WebKit, we record its PageIdentifier in the reply.
        
        Once the reply makes its way all the way back to the ServiceWorker process and on the 
        ServiceWorker thread, we do a client match and cross check with that PageIdentifier to make
        sure we're resolving the promise with the correct WindowClient.
        
        If there's no matched clients, then the view is either already gone or it has navigated away
        to a non-applicable URL.
        
        Same if there are matched clients, but they don't match the specified PageIdentifier.

        A straight forward layouttest completes the task.
        
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::controlClient):
        
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::openWindow):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore set_delegate:]):
        * UIProcess/API/Cocoa/_WKWebsiteDataStoreDelegate.h:
        
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::openWindowFromServiceWorker):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary):
        (WebKit::WebPageProxy::didFinishLoadForFrame):
        (WebKit::WebPageProxy::didFailLoadForFrame):
        (WebKit::WebPageProxy::resetState):
        (WebKit::WebPageProxy::callServiceWorkerLaunchCompletionHandlerIfNecessary): Deleted.
        * UIProcess/WebPageProxy.h:

        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::openWindowFromServiceWorker):
        * UIProcess/WebsiteData/WebsiteDataStore.h:

        * UIProcess/WebsiteData/WebsiteDataStoreClient.h:
        (WebKit::WebsiteDataStoreClient::openWindowFromServiceWorker):

        * WebProcess/Notifications/WebNotificationManager.cpp:
        (WebKit::WebNotificationManager::show):
        (WebKit::WebNotificationManager::didShowNotification):
        (WebKit::WebNotificationManager::didClickNotification):

        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::WebSWContextManagerConnection::openWindow):
        * WebProcess/Storage/WebSWContextManagerConnection.h:

2022-03-28  Youenn Fablet  <youenn@apple.com>

        Share more code between RemoteRealtimeAudioSource and RemoteRealtimeVideoSource
        https://bugs.webkit.org/show_bug.cgi?id=237704
        <rdar://problem/90424679>

        Reviewed by Eric Carlson.

        Introduce RemoteRealtimeMediaSource as a common class for RemoteRealtimeAudioSource and RemoteRealtimeVideoSource.

        * SourcesCocoa.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSource.cpp: Added.
        * WebProcess/cocoa/RemoteRealtimeMediaSource.h: Added.
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:

2022-03-27  Lauro Moura  <lmoura@igalia.com>

        Unreviewed, non-unified buildfix
        https://bugs.webkit.org/show_bug.cgi?id=238436

        * WebProcess/Storage/WebSWClientConnection.cpp:

2022-03-26  Yusuke Suzuki  <ysuzuki@apple.com>

        Use static_assert instead of COMPILE_ASSERT
        https://bugs.webkit.org/show_bug.cgi?id=238417

        Reviewed by Mark Lam.

        * Platform/IPC/Connection.h:
        (IPC::Connection::send):
        (IPC::Connection::sendWithAsyncReply):
        (IPC::Connection::sendSync):
        * Platform/IPC/MessageSender.h:
        * Platform/IPC/unix/ConnectionUnix.cpp:
        (IPC::Connection::sendOutgoingMessage):
        * UIProcess/AuxiliaryProcessProxy.h:
        (WebKit::AuxiliaryProcessProxy::send):
        (WebKit::AuxiliaryProcessProxy::sendSync):
        (WebKit::AuxiliaryProcessProxy::sendWithAsyncReply):

2022-03-26  David Quesada  <david_quesada@apple.com>

        Update the check in the sandbox profiles to guard the system content path rules
        https://bugs.webkit.org/show_bug.cgi?id=238419
        rdar://90878560

        Reviewed by Per Arne Vollan.

        Replace `USE(SYSTEM_CONTENT_PATH)` in the sandbox profiles with a different feature flag
        so that we can enable these rules independently even if WebKit itself isn't using the
        system content path.

        * GPUProcess/mac/com.apple.WebKit.GPUProcess.sb.in:
        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebAuthn.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb.in:
        * WebAuthnProcess/mac/com.apple.WebKit.WebAuthnProcess.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-26  David Quesada  <david_quesada@apple.com>

        REGRESSION(r291814): WebAuthn sandbox profile is missing
        https://bugs.webkit.org/show_bug.cgi?id=238418
        rdar://90878872

        Reviewed by Per Arne Vollan.

        Fix a typo in the script phase that copies the embedded sandbox profiles. We want to copy
        com.apple.WebKit.WebAuthn.sb, not com.apple.WebKit.WebAuth.sb.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-26  Sihui Liu  <sihui_liu@apple.com>

        Unreviewed, reverting r291909.

        Found a better way to eanble the feature

        Reverted changeset:

        "Disable custom storage paths for IndexedDB and LocalStorage
        by default"
        https://bugs.webkit.org/show_bug.cgi?id=236977
        https://commits.webkit.org/r291909

2022-03-26  Youenn Fablet  <youenn@apple.com>

        Implement ServiceWorkerWindowClient.focus
        https://bugs.webkit.org/show_bug.cgi?id=238319
        <rdar://90616490>

        Reviewed by Brady Eidson.

        Support new IPC message flow to focus from a service worker to network process to service worker client process to UIProcess.
        Introduce a new delegate _focusWebViewFromServiceWorker as the scope is specific to service worker and usage is different from existing _focusWebView and other delegates.

        The overall flow is like this:
        - ServiceWorker process to NetworkProcess to Client WebProcess process to UIProcess (do the actual focus) to NetworkProcess to ServiceWorker process
        We might want to directly go from NetworkProcess to UIProcess but we need to handle potential race conditions in that case.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * UIProcess/API/APIUIClient.h:
        * UIProcess/API/Cocoa/WKUIDelegatePrivate.h:
        * UIProcess/Cocoa/UIDelegate.h:
        * UIProcess/Cocoa/UIDelegate.mm:
        * UIProcess/WebPageProxy.cpp:
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        * WebProcess/Storage/WebSWClientConnection.h:
        * WebProcess/Storage/WebSWClientConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.h:

2022-03-26  Yusuke Suzuki  <ysuzuki@apple.com>

        Use unary static_assert
        https://bugs.webkit.org/show_bug.cgi?id=238412

        Reviewed by Mark Lam.

        * Shared/API/c/WKContextMenuItem.cpp:
        * UIProcess/mac/LegacySessionStateCoding.cpp:
        (WebKit::HistoryEntryDataEncoder::encodeArithmeticType):
        (WebKit::HistoryEntryDataDecoder::decodeArithmeticType):

2022-03-25  Simon Fraser  <simon.fraser@apple.com>

        Temporarily disable assertion in MessageReceiveQueueMap::addImpl()
        https://bugs.webkit.org/show_bug.cgi?id=238397

        Unreviewed followup: similarly change the assertion in remove() into a log.

        * Platform/IPC/MessageReceiveQueueMap.cpp:
        (IPC::MessageReceiveQueueMap::remove):

2022-03-25  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291884.
        https://bugs.webkit.org/show_bug.cgi?id=238405

        Broke the internal iOS build

        Reverted changeset:

        "Add Captive Portal alert to WKWebView"
        https://bugs.webkit.org/show_bug.cgi?id=238326
        https://commits.webkit.org/r291884

2022-03-25  Simon Fraser  <simon.fraser@apple.com>

        Temporarily disable assertion in MessageReceiveQueueMap::addImpl()
        https://bugs.webkit.org/show_bug.cgi?id=238397

        Reviewed by Wenson Hsieh.

        Enabling DOM Rendering in the GPU Process has exposed an issue (webkit.org/b/237674, webkit.org/b/238391).
        Temporarily convert this assertion to logging to reduce test failures.

        * Platform/IPC/MessageReceiveQueueMap.cpp:
        (IPC::MessageReceiveQueueMap::addImpl):

2022-03-25  Sihui Liu  <sihui_liu@apple.com>

        Disable custom storage paths for IndexedDB and LocalStorage by default
        https://bugs.webkit.org/show_bug.cgi?id=236977

        Reviewed by Geoffrey Garen.
        <rdar://problem/89559929>

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):

2022-03-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] [iOS] Enable GPU Process for DOM rendering on iOS
        https://bugs.webkit.org/show_bug.cgi?id=236508
        rdar://83437844

        Reviewed by Jon Lee.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultUseGPUProcessForDOMRenderingEnabled):

2022-03-25  Chris Dumez  <cdumez@apple.com>

        Use StringView::split() instead of String::split() in more places
        https://bugs.webkit.org/show_bug.cgi?id=238362

        Reviewed by Geoffrey Garen.

        Use StringView::split() instead of String::split() where suitable and more efficient.

        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::parseOSVersion):
        (WebKit::populateSandboxInitializationParameters):
        * UIProcess/Launcher/cocoa/ProcessLauncherCocoa.mm:
        (WebKit::ProcessLauncher::launchProcess):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::initialize):

2022-03-25  Elliott Williams  <emw@apple.com>

        [Big Sur] WK2 failing to build with `error: reference to 'WebDocumentView' is ambiguous`
        https://bugs.webkit.org/show_bug.cgi?id=238384

        Reviewed by Alexey Proskuryakov.

        Build fix, see rdar://90844690.

        Create forwarding headers in WebKit's temporary directory which cause imports of any
        migrated header to be imported using WebKit's header map. For example,

            #import <WebKit/WebDocument.h>
            #import <WebKitLegacy/WebDocument.h>

        ...both resolve to the same header.

        Also, clean up project file references to files which were deleted in r291809.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Enable PGO when building for release and production
        https://bugs.webkit.org/show_bug.cgi?id=238119
        rdar://90182309

        Reviewed by Alexey Proskuryakov and Geoff Garen.

        See WebCore/ChangeLog for more information.

        * Configurations/Base.xcconfig:
        * Configurations/BaseTarget.xcconfig:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-25  Simon Fraser  <simon.fraser@apple.com>

        Add some generated sources to the WebKit project
        https://bugs.webkit.org/show_bug.cgi?id=238363

        Reviewed by Alexey Proskuryakov.

        There are many generated files which haven't been added to the project (they get built via
        Sources.txt). Here, I add a few that I like to be able to find code in, particularly
        MessageNames.h.

        com.apple.WebKit.plugin-common.sb was deleted so is removed from the project.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-25  C Lopez  <clopez1@apple.com>

        Add Captive Portal alert to WKWebView
        https://bugs.webkit.org/show_bug.cgi?id=238326

        Reviewed by Geoffrey Garen.

        When WkWebView on iOS is initialized, we call `_presentCaptivePortalModeAlertIfNeeded` which checks whether an alert needs to be presented or not.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _presentCaptivePortalModeAlertIfNeeded]):
        (-[WKWebView didMoveToWindow]):

2022-03-25  J Pascoe  <j_pascoe@apple.com>
        [WebAuthn] Maintain last modification time separate from last used time for platform credentials
        https://bugs.webkit.org/show_bug.cgi?id=238293
        rdar://90655676

        Reviewed by Brent Fulgham.

        This patch splits a key returned from [_WKWebAuthenticationPanel getAllLocalAuthenticatorCredentials...],
        _WKLocalAuthenticatorCredentialLastModificationDateKey, which previously signified the last time a
        credential was modified or used in an assertion, to just the last time the credential was modified.

        A new key, _WKLocalAuthenticatorCredentialLastUsedDateKey represents the old definition, the last
        time a key was used or modified.

        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (getAllLocalAuthenticatorCredentialsImpl):
        (+[_WKWebAuthenticationPanel setUsernameForLocalCredentialWithGroupAndID:credential:username:]):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification):

2022-03-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] RemoteRenderingBackend::stopListeningForIPC() should not change the RemoteResourceCache on the main thread 
        https://bugs.webkit.org/show_bug.cgi?id=238298
        rdar://90731372

        Reviewed by Simon Fraser.

        To release the RemoteResourceCache and the rendering resource request on
        the WorkQueue thread, RemoteRenderingBackend::stopListeningForIPC() dispatches
        an empty lambda to its WorkQueue but m_renderingResourcesRequest and
        m_remoteResourceCache are captured by-move to initializers to this lambda.

        But this means m_remoteResourceCache is changed on the main thread while
        the WorkQueue thread may be accessing it to get a cached remote resource.
        The EWS crashes showed that, RemoteRenderingBackend::stopListeningForIPC()
        on the main thread is waiting its WorkQueue to stop and complete all its
        work including the dispatched empty lambda. And the WorkQueue thread is
        getting wrong resource counters from the RemoteResourceCache. This would
        happen if the HashMaps of RemoteResourceCache were emptied on the main
        thread while the counters had outdated values.

        To fix this thread safety issue, the RemoteResourceCache should not ever
        be changed on the main thread. Since capturing by-move is kind of change,
        we will capture m_renderingResourcesRequest and m_remoteResourceCache by
        reference and we let the dispatched lambda explicitly releases them on
        the WorkQueue thread.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::stopListeningForIPC):

2022-03-25  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Remove unused sandbox extension rule
        https://bugs.webkit.org/show_bug.cgi?id=238377

        Reviewed by Geoffrey Garen.

        Remove unused sandbox extension rule for RootDomainUserClient.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-25  Michael Saboff  <msaboff@apple.com>

        Unreviewed, fix the internal iOS build after r291814
        rdar://90848250

        Removed extraneous double quote (") in com.apple.WebKit.WebContent.sb.in.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-25  Chris Dumez  <cdumez@apple.com>

        Start preparing WebCore for making the String(const char*) constructor explicit
        https://bugs.webkit.org/show_bug.cgi?id=238336

        Reviewed by Geoffrey Garen.

        Start preparing WebCore for making the String(const char*) constructor explicit.
        Making this constructor explicit helps catch at compile time cases where the ""_s
        prefix is missing on String literals.

        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::setPromisedDataForImage):
        (WebKit::WebViewImpl::requestDOMPasteAccess):

2022-03-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unreviewed, fix the internal iOS build after r291842
        https://bugs.webkit.org/show_bug.cgi?id=238344

        Apply a similar adjustment to `WKModelView.mm`, as in `ARKitInlinePreviewModelPlayerMac.mm`, when generating a
        usdz file path.

        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView createFileForModel:]):

2022-03-25  Sihui Liu  <sihui_liu@apple.com>

        Introduce an SPI to get website data directory for origin and use it in API tests
        https://bugs.webkit.org/show_bug.cgi?id=238269

        Reviewed by Alex Christensen.

        There are a few tests using hardcoded website data paths to check if files are correcly modified by API.
        Everytime we migrate website data (for example, if we start using general storage directory for IndexedDB 
        storage), we need to update these tests with new paths, otherwise the tests will check the wrong paths. Let's 
        just add an SPI so these tests can get the paths in use dynamically, which would avoid test breakage when
        we do website data migration.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::websiteDataOriginDirectoryForTesting):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::moveData):
        (WebKit::NetworkStorageManager::getOriginDirectory):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::toStorageType const):
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedPath):
        (WebKit::OriginStorageManager::resolvedPath):
        (WebKit::OriginStorageManager::resolvedLocalStoragePath): Deleted.
        (WebKit::OriginStorageManager::resolvedIDBStoragePath): Deleted.
        * NetworkProcess/storage/OriginStorageManager.h:
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _originDirectoryForTesting:topOrigin:type:completionHandler:]):
        * UIProcess/API/Cocoa/WKWebsiteDataStorePrivate.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::websiteDataOriginDirectoryForTesting):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::originDirectoryForTesting):
        * UIProcess/WebsiteData/WebsiteDataStore.h:

2022-03-24  Don Olmstead  <don.olmstead@sony.com>

        Non-unified build fixes, late March 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=238358

        Unreviewed non-unified build fixes.

        * GPUProcess/GPUProcess.cpp:
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:

2022-03-24  Chris Dumez  <cdumez@apple.com>

        String::split() should take in a StringView instead of a String
        https://bugs.webkit.org/show_bug.cgi?id=238355

        Reviewed by Geoffrey Garen.

        * UIProcess/Inspector/socket/RemoteInspectorProtocolHandler.cpp:
        Optimize by calling StringView::split() instead of String::split().

2022-03-24  Brent Fulgham  <bfulgham@apple.com>

        Require click-to-play for media in Captive Portals 
        https://bugs.webkit.org/show_bug.cgi?id=238353
        <rdar://90575996>

        Reviewed by Chris Dumez.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal): Disable auto-play for media for
        Captive Portals.

2022-03-24  Chris Dumez  <cdumez@apple.com>

        FileSystem::pathByAppendingComponent() should take in StringViews instead of Strings
        https://bugs.webkit.org/show_bug.cgi?id=238344

        Reviewed by Geoff Garen.

        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::ResourceLoadStatisticsDatabaseStore::ResourceLoadStatisticsDatabaseStore):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDatabase.cpp:
        (WebKit::PCM::Database::Database):
        * NetworkProcess/cache/CacheStorageEngine.cpp:
        (WebKit::CacheStorage::Engine::storagePath):
        (WebKit::CacheStorage::Engine::initialize):
        * NetworkProcess/cache/CacheStorageEngineCaches.cpp:
        (WebKit::CacheStorage::cachesListFilename):
        (WebKit::CacheStorage::cachesOriginFilename):
        (WebKit::CacheStorage::Caches::cachesSizeFilename):
        * NetworkProcess/cache/NetworkCacheBlobStorage.cpp:
        (WebKit::NetworkCache::BlobStorage::blobPathForHash const):
        * NetworkProcess/cache/NetworkCacheStorage.cpp:
        (WebKit::NetworkCache::makeCachePath):
        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):
        * UIProcess/Inspector/win/InspectorResourceURLSchemeHandler.cpp:
        (WebKit::InspectorResourceURLSchemeHandler::platformStartTask):

2022-03-24  Don Olmstead  <don.olmstead@sony.com>

        [GLib] Add user directories to WTF::FileSystem
        https://bugs.webkit.org/show_bug.cgi?id=238348

        Reviewed by Adrian Perez de Castro.

        Use the new FileSystem APIs instead of calling glib directly.

        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::inspectorWebsiteDataStore):
        * UIProcess/glib/WebsiteDataStoreGLib.cpp:
        (WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation):
        (WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation):

2022-03-24  Devin Rousso  <drousso@apple.com>

        [iOS] make `WKMouseGestureRecognizer` officially conform to `_UIHoverEventRespondable`
        https://bugs.webkit.org/show_bug.cgi?id=238242
        <rdar://problem/88828903>

        Reviewed by Tim Horton.

        * UIProcess/ios/WKMouseGestureRecognizer.h:
        * UIProcess/ios/WKMouseGestureRecognizer.mm:

        * Platform/spi/ios/UIKitSPI.h:

2022-03-24  Michael Saboff  <msaboff@apple.com>

        After r291814, we need to create the INSTALL_PATH for the iOS sandbox files
        https://bugs.webkit.org/show_bug.cgi?id=238351

        Reviewed by Saam Barati.

        We need to create the $(INSTALL_PATH) for the preprocessed iOS sandbox files.
        Before r291814, the built-in Xcode copy step used ditto when copying the .sb
        files thus creating $(INSTALL_PATH) and its intermediate directories.
        That change set made it so that all WebKit iOS sandbox profile files are preprocessed
        thus eliminating the Xcode copy step.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-24  Patrick Angle  <pangle@apple.com>

        REGRESSION(STP142): "A JavaScript exception occured: Can't find variable: utils" from SafariDriver
        https://bugs.webkit.org/show_bug.cgi?id=238335

        Reviewed by Devin Rousso.

        Following r289467, we can't just copy the WebDriver atom scripts to the build products, since they now need to
        have `utils.js` in any script that uses the `utils` namespace. The `WebKit.framework` copy of these scripts are
        later used while building safaridriver, so they need to include the scripts as well.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-24  Per Arne Vollan  <pvollan@apple.com>

        REGRESSION(r286590): Links with URL schemes are not clickable in Mail
        https://bugs.webkit.org/show_bug.cgi?id=238262
        <rdar://89145552>

        Reviewed by Geoffrey Garen.

        This feature requires access to the Launch Services daemon in Mail and other apps on iOS.
        This patch is a partial revert of r286590.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::nonBrowserServices):
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::platformInitializeWebProcess):

2022-03-24  Brent Fulgham  <bfulgham@apple.com>

        Disable RTCRtpScriptTransform in CaptivePortal mode
        https://bugs.webkit.org/show_bug.cgi?id=238340
        <rdar://87821636>

        Reviewed by Chris Dumez.

        When displaying content in a captive portal, we should make sure we disable
        WebRTCEncodedTransform.

        Tests: TestWebKitAPI

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal): Disable WebRTCEncodedTransform.

2022-03-24  Antoine Quint  <graouts@webkit.org>

        DOM GPUP: paintSystemPreviewBadge (AR QuickLook element badge)
        https://bugs.webkit.org/show_bug.cgi?id=238295
        rdar://83580608

        Reviewed by Dean Jackson.

        Make sure we restore the Image on the ARKitBadgeSystemImage before we attempt to draw it.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::drawSystemImage):
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<Ref<SystemImage>>::encode):
        (IPC::ArgumentCoder<Ref<SystemImage>>::decode):

2022-03-24  Michael Saboff  <msaboff@apple.com>

        Update Sandbox profiles for system content path
        https://bugs.webkit.org/show_bug.cgi?id=238255

        Reviewed by Per Arne Vollan.

        Updated WebKit sandbox profiles to include system content path rule files when building with the system content path.
        Changed the iOS profiles to be preprocessed to make these changes.

        * DerivedSources-input.xcfilelist
        * DerivedSources-output.xcfilelist
        * DerivedSources.make:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb: Removed.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb.in: Copied from Source/WebKit/Resources/SandboxProfiles/ios/com.apple.WebKit.GPU.sb.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb: Removed.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.in: Copied from Source/WebKit/Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebAuthn.sb: Removed.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebAuthn.sb.in: Copied from Source/WebKit/Resources/SandboxProfiles/ios/com.apple.WebKit.WebAuthn.sb.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb: Removed.
        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb.in: Copied from Source/WebKit/Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb.
        * Shared/Sandbox/preferences.sb:
        * WebAuthnProcess/mac/com.apple.WebKit.WebAuthnProcess.sb.in:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-24  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] WCTileGrid should create tiles only for the inside of layer area
        https://bugs.webkit.org/show_bug.cgi?id=238317

        Reviewed by Don Olmstead.

        The coverage rect returned by computeVisibleAndCoverageRect may be
        bigger than the layer rect. Tiles should be paved only for the
        intersection of the coverage rect and the layer rect.

        * WebProcess/WebPage/wc/WCTileGrid.cpp:
        (WebKit::WCTileGrid::tileRectFromPixelRect): Take the intersection
        with the layer rect. Return an empty rect if the intersection is
        empty.

2022-03-24  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Disable unneeded code when content filtering is running in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=238332

        Reviewed by Geoffrey Garen.

        * Shared/Cocoa/LoadParametersCocoa.mm:
        (WebKit::LoadParameters::platformEncode const):
        (WebKit::LoadParameters::platformDecode):
        * Shared/LoadParameters.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addPlatformLoadParameters):
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::platformDidReceiveLoadParameters):

2022-03-24  Elliott Williams  <emw@apple.com>

        [XCBuild] WebKit: Use native headers + build rules for migrated headers
        https://bugs.webkit.org/show_bug.cgi?id=238213
        <rdar://problem/90172142>

        Reviewed by Alexey Proskuryakov.

        Replace the Make-based header migration script phase with a native project-based
        representation in WebKit.xcodeproj.

        The project now contains a 'Migrated Headers' group which lists the headers from
        WebKitLegacy and WebCore that are copied to WebKit.framework during the build process. This
        group must be kept in sync with the actual headers in WebKitLegacy, but since new headers
        shouldn't really be added to WebKitLegacy this will be low-friction.

        The preexisting postprocess-header-rule build rule is refactored to handle the
        transformations needed for Migrated headers, which previous came from WebKitLegacy's
        `postprocess-header-rule` script or from one of the MigrateHeaders*.make files.

        * Configurations/WebKit.xcconfig: Use EXCLUDED_SOURCE_FILE_NAMES to customize migrated
        headers on mac vs. non-mac platforms.
        * Scripts/postprocess-header-rule: Refactored to incorporate WebKitLegacy's postprocessing
        steps, and to do less disk I/O, now that it's always invoked as a build rule and can do less
        in-place editing. Local testing shows a ~15% speedup.
        * Shared/API/Cocoa/WebKitLegacy.h: Added. Xcode's header maps forbid a header's name from
        changing during the copy process, so we have to duplicate WebKitLegacy's umbrella header
        instead of renaming it WebKit.h -> WebKitLegacy.h during the build.
        * WebKit.xcodeproj/project.pbxproj: Added 'Migrated Headers' group and build rule.
        Configured headers to always copy using XCBuild. Removed legacy-only header script phases.
        * WebProcess/WebCoreSupport/ios/WebFrameLoaderClientIOS.mm: This file used unqualified
        <HEADER.h> imports, which are not supported by Xcode's headermaps. Replaced with "HEADER.h".
        * mac/MigrateHeadersFromWebKitLegacy.make: Removed, logic now lives in
        mingrate-headers-rule.sh.
        * mac/postprocess-framework-headers.sh: Removed.
        * mac/replace-webkit-additions-includes.py: Refactored to use stdin and stdout rather than
        editing in-place. Corresponds to refactors in postprocess-header-rule.

2022-03-24  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Remove reports for some sandbox violations on process launch
        https://bugs.webkit.org/show_bug.cgi?id=238324

        Reviewed by Geoffrey Garen.

        Remove reports for some sandbox violations on process launch on macOS. These violations are not critical,
        and are slowing down process launch. This patch also adds access to a mach syscall observed being in use.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-24  Chris Dumez  <cdumez@apple.com>

        String's find() / reverseFind() / replace() should take in a StringView instead of a String
        https://bugs.webkit.org/show_bug.cgi?id=238287

        Reviewed by Darin Adler.

        * WebProcess/WebCoreSupport/WebContextMenuClient.cpp:
        (WebKit::WebContextMenuClient::searchWithGoogle):

2022-03-24  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK] REGRESSION(r291613): Build broken with USE_GTK4 + ENABLE_ACCESSIBILITY
        https://bugs.webkit.org/show_bug.cgi?id=238320

        Reviewed by Carlos Garcia Campos.

        Guard remaning uses of ATK when building with GTK4, where ATK is not used at all.

        * UIProcess/API/glib/WebKitWebViewAccessible.cpp:
        * UIProcess/API/glib/WebKitWebViewAccessible.h:
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseDispose):

2022-03-23  Sihui Liu  <sihui_liu@apple.com>

        Add logging for LocalStorage and IndexedDB data migration
        https://bugs.webkit.org/show_bug.cgi?id=238169

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginDataImpl):
        (WebKit::IDBStorageManager::migrateOriginData):
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):

2022-03-23  Simon Fraser  <simon.fraser@apple.com>

        Have MiniBrowser shows the GPU Process pid in its title bar
        https://bugs.webkit.org/show_bug.cgi?id=238286

        Reviewed by Tim Horton.

        Expose _gpuProcessIdentifier on WKWebView as SPI. In order to support KVO for this, we need
        to pass gpuProcessDidFinishLaunching() all the way from
        GPUProcessProxy::didFinishLaunching() to PageClientImplCocoa. This KVO isn't accurate (the
        "willChange" fires after the new pid is available) but for SPI it's good enough.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _gpuProcessIdentifier]):
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/Cocoa/PageClientImplCocoa.h:
        * UIProcess/Cocoa/PageClientImplCocoa.mm:
        (WebKit::PageClientImplCocoa::gpuProcessDidFinishLaunching):
        (WebKit::PageClientImplCocoa::gpuProcessDidExit):
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::didFinishLaunching):
        * UIProcess/PageClient.h:
        (WebKit::PageClient::gpuProcessDidFinishLaunching):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::gpuProcessIdentifier const):
        (WebKit::WebPageProxy::gpuProcessDidFinishLaunching):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::gpuProcessDidFinishLaunching):
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::gpuProcessDidFinishLaunching):
        * UIProcess/WebProcessProxy.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::gpuProcessDidExit):

2022-03-23  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (248692@main?): [iOS] ASSERTION FAILED: m_layer->owner()->platformCALayerDelegatesDisplay(m_layer) in WebKit::RemoteLayerBackingStore::paintContents()
        https://bugs.webkit.org/show_bug.cgi?id=238277
        <rdar://problem/90715046>

        Reviewed by Tim Horton.

        Empty backing store (height or width of zero) never need display; ImageBuffer allocation
        with empty sizes always returns null anyway.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::needsDisplay const):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::backingStoreNeedsDisplay):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::backingStoreNeedsDisplay):

2022-03-23  Sihui Liu  <sihui_liu@apple.com>

        [ BigSur+ Debug wk2 EWS ] imported/w3c/web-platform-tests/html/webappapis/dynamic-markup-insertion/opening-the-input-stream/quirks.window.html is a flaky crash
        https://bugs.webkit.org/show_bug.cgi?id=237165
        <rdar://problem/89443602>

        Reviewed by Chris Dumez.

        The test is hitting an assertion in StorageAreaBase::addListener. The assertion is used to verify that one
        connection will not be added to a StorageArea twice, i.e. one web process will not have two StorageAreaMaps
        pointing to the same StorageArea in network process. With our current implementation, there is an edge case that 
        we load a.com, navigate to b.com and go back to a.com. In this case, we would create a StorageAreaMap for a.com, 
        destroy it on navigation, and create another StorageAreaMap for a.com on going back. Because we don't remove 
        listener during destruction of StorageAreaMap (we do it when web process receives reply from network process), 
        the assertion is hit for two StorageAreaMaps from one connection pointing to the same StorageArea. We can fix
        it by sending a cancelConnectToStorage message to remove listener during destruction.

        The edge case is a bit hard to reproduce with auto test since we need to ensure web process sends the second 
        ConnectionToStorageArea message before receiving the reply of the first ConnectionToStorageArea message, so I 
        manually tested it by adding delay in NetworkStorageManager::connectToStorageArea.

        * NetworkProcess/storage/LocalStorageManager.cpp:
        (WebKit::LocalStorageManager::cancelConnectToLocalStorageArea):
        (WebKit::LocalStorageManager::cancelConnectToTransientLocalStorageArea):
        * NetworkProcess/storage/LocalStorageManager.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::cancelConnectToStorageArea):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/NetworkStorageManager.messages.in:
        * NetworkProcess/storage/SessionStorageManager.cpp:
        (WebKit::SessionStorageManager::cancelConnectToSessionStorageArea):
        * NetworkProcess/storage/SessionStorageManager.h:
        * WebProcess/WebStorage/StorageAreaMap.cpp:
        (WebKit::StorageAreaMap::computeStorageType const):
        (WebKit::StorageAreaMap::clientOrigin const):
        (WebKit::StorageAreaMap::sendConnectMessage):
        (WebKit::StorageAreaMap::didConnect):
        (WebKit::StorageAreaMap::disconnect):
        * WebProcess/WebStorage/StorageAreaMap.h:

2022-03-23  Eric Carlson  <eric.carlson@apple.com>

        [Cocoa] Adopt new AVCapture SPI
        https://bugs.webkit.org/show_bug.cgi?id=238289
        rdar://90576101

        Reviewed by Jer Noble.

        Call AVCapture SPI once the GPU process sandbox has been expanded to allow capture.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::updateSandboxAccess):
        * GPUProcess/GPUProcess.h:
        * GPUProcess/cocoa/GPUProcessCocoa.mm:
        (WebKit::GPUProcess::dispatchSimulatedNotificationsForPreferenceChange):
        (WebKit::GPUProcess::sandboxWasUpatedForCapture):

2022-03-23  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Mail compose web view no longer scrolls to reveal selection upon showing the keyboard
        https://bugs.webkit.org/show_bug.cgi?id=238271
        rdar://89821087

        Reviewed by Tim Horton.

        When a certain UIKit feature is enabled on certain builds of iOS, Mail compose no longer scrolls to reveal the
        selection range or caret. This is because we have logic to defer scrolling/zooming to reveal the selection after
        focusing the body element, for reasons outlined in trac.webkit.org/r288178. However, when the feature flag is
        enabled, UIKeyboardWillShowNotification is no longer fired synchronously underneath the call to
        `-reloadInputViews`, which means that `isKeyboardAnimatingIn()` will (most of the time) return false upon
        calling `-_zoomToRevealFocusedElement` when receiving the next post-layout editor state update.

        To mitigate this, add a new boolean flag, `_waitingForKeyboardToStartAnimatingInAfterElementFocus`, that's set
        right before we reload input views when focusing an element that requires the keyboard (either software or
        hardware), and unset when we observe the "WillShow" notification. In addition to checking
        `_page->isKeyboardAnimatingIn()` when determining whether to defer zooming, we check this new flag as well.

        Covered by an existing layout test (which currently fails when the aforementioned UIKit feature is enabled):
        editing/selection/ios/scroll-to-reveal-selection-with-keyboard-avoidance-disabled.html

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _keyboardWillShow:]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView cleanUpInteraction]):
        (-[WKContentView _keyboardWillShow]):
        (-[WKContentView _zoomToRevealFocusedElement]):
        (-[WKContentView _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]):
        (-[WKContentView _elementDidBlur]):

2022-03-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Specify correct ASCPublicKeyCredentialKind in configureAssertionOptions
        https://bugs.webkit.org/show_bug.cgi?id=238272
        rdar://problem/90710080

        Reviewed by Brent Fulgham.

        There was a typo when refactoring code into this method. The kind passed to the function
        should be used, instead of always ASCPublicKeyCredentialKindPlatform.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureAssertionOptions):

2022-03-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        After losing context due to too many contexts, getError() does not return CONTEXT_LOST_WEBGL
        https://bugs.webkit.org/show_bug.cgi?id=236965

        Reviewed by Kenneth Russell.

        Remove recording of synthetic webgl context lost error from the proxy.
        This is now recorded in the WebGLRenderingContextBase.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::synthesizeGLError):
        (WebKit::RemoteGraphicsContextGLProxy::getError):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:

2022-03-23  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Unreviewed build fix after r291733

        * WebProcess/GPU/graphics/PrepareBackingStoreBuffersData.h:

2022-03-22  Alex Christensen  <achristensen@webkit.org>

        Implement PCM to SKAdNetwork bridge
        https://bugs.webkit.org/show_bug.cgi?id=237969
        <rdar://82988054>

        Reviewed by John Wilander.

        The WebKit parts of this just introduce a new information flow to SKAdNetwork to send the app purchase attribution
        kind of like WebKit sends a PCM attribution report 24-48 hours after a non-app-purchase click with attribution.

        * Configurations/WebKit.xcconfig:
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::storePrivateClickMeasurement):
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::donateToSKAdNetwork):
        * NetworkProcess/cocoa/AppStoreDaemonSPI.h: Added.
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::donateToSKAdNetwork):
        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb:
        * Scripts/process-entitlements.sh:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-22  Simon Fraser  <simon.fraser@apple.com>

        Swap all RemoteLayerBackingStore buffers in a single IPC
        https://bugs.webkit.org/show_bug.cgi?id=238210

        Reviewed by Tim Horton.

        PrepareBuffersForDisplay is a sync IPC (since we need the result before painting), and sync
        IPC per-layer has performance impact. So group all the swapping into a single IPC with the
        GPU Process.

        The PrepareBuffersForDisplay message now takes a vector of
        PrepareBackingStoreBuffersInputData, and returns a vector of
        PrepareBackingStoreBuffersOutputData. Swapped buffers are applied to the
        RemoteLayerBackingStore as before, with a minor change in the place that setNeedsDisplay()
        is called in the case where we need a full display.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::prepareBuffersForDisplay):
        (WebKit::RemoteRenderingBackend::prepareLayerBuffersForDisplay):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Scripts/webkit/messages.py:
        (headers_for_type):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::ensureFrontBuffer):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        (WebKit::operator<<): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoreBuffers): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoresForDisplay):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers): Deleted.
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/graphics/PrepareBackingStoreBuffersData.h: Added.
        (WebKit::PrepareBackingStoreBuffersInputData::encode const):
        (WebKit::PrepareBackingStoreBuffersInputData::decode):
        (WebKit::PrepareBackingStoreBuffersOutputData::encode const):
        (WebKit::PrepareBackingStoreBuffersOutputData::decode):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::prepareBuffersForDisplay):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-03-22  Sihui Liu  <sihui_liu@apple.com>

        REGRESSION (248499@main): [iOS] ASSERTION FAILED: Completion handler should always be called under WebKit::NetworkProcess::prepareToSuspend()
        https://bugs.webkit.org/show_bug.cgi?id=238234
        <rdar://problem/90665237>

        Reviewed by Chris Dumez.

        Invoke completion handler on early return.

        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::suspend):

2022-03-22  Megan Gardner  <megan_gardner@apple.com>

        Expand autocorrect context for more accurate results. 
        https://bugs.webkit.org/show_bug.cgi?id=237990
        rdar://87353381

        Expand autocorrect context to at least 10 words instead of 3, and with a min/max length of 40/100 instead of 12/30
        and start context at the beginning of sentences to help with having more accurate autocorrect suggestions.

        Reviewed by Tim Horton.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::autocorrectionContext):

2022-03-22  Tyler Wilcock  <tyler_w@apple.com>

        Expose the AX tree of PDFs loaded via iframes on the Mac
        https://bugs.webkit.org/show_bug.cgi?id=238168

        Reviewed by Chris Fleizach.

        Given this markup:

        <iframe src="/path/to/paystub.pdf">

        An accessibility tree is built for paystub.pdf, but we don't expose it
        to AX clients, making the PDF entirely inaccessible.

        This happens because we were setting the AX parent to be the webpage
        for full-frame PDF plugins (which an iframe with this markup is).
        This behavior is correct only for main-frame (i.e. not iframe)
        full-frame plugins, so this patch adds an extra condition to that logic.

        Test: accessibility/mac/iframe-pdf.html

        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::PDFPlugin):

2022-03-22  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] RemoteGraphicsContextGL.h(78): error C2027: use of undefined type 'WebCore::GraphicsContextGL'
        https://bugs.webkit.org/show_bug.cgi?id=238223

        Unreviewed build fix.
        r291610 renamed GraphicsContextGLTextureMapper to GraphicsContextGLTextureMapperANGLE.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGLWin.cpp:
        (WebKit::RemoteGraphicsContextGLWin::platformWorkQueueInitialize):

2022-03-22  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Make GraphicsContextState a class
        https://bugs.webkit.org/show_bug.cgi?id=238192

        Reviewed by Simon Fraser.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::setState):
        * Shared/cairo/ShareableBitmapCairo.cpp:
        (WebKit::ShareableBitmap::paint):
        * WebProcess/WebCoreSupport/gtk/WebDragClientGtk.cpp:
        (WebKit::convertCairoSurfaceToShareableBitmap):

2022-03-22  Tim Horton  <timothy_horton@apple.com>

        Prefer WK_EXTERN to WK_EXPORT in Cocoa API headers
        https://bugs.webkit.org/show_bug.cgi?id=238129

        Reviewed by Wenson Hsieh.

        * UIProcess/API/Cocoa/WKBrowsingContextPolicyDelegate.h:
        * UIProcess/API/Cocoa/WKMenuItemIdentifiersPrivate.h:
        * UIProcess/API/Cocoa/_WKElementAction.h:
        * UIProcess/API/Cocoa/_WKErrorRecoveryAttempting.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.h:
        WK_EXPORT comes from WKDeclarationSpecifiers.h, which is a legacy C SPI header.
        WK_EXTERN comes from WKFoundation.h, part of the modern public API.
        We should prefer the modern version in Cocoa-only headers (even in private headers).

2022-03-22  Chris Dumez  <cdumez@apple.com>

        REGRESSION (iOS 15.1 / r280824) QuickLook - model not loading when passing extra parameters
        https://bugs.webkit.org/show_bug.cgi?id=236069
        <rdar://problem/88461772>

        Reviewed by Darin Adler.

        Fix theoretical blob data leak. A WebContent process could create several BlobURLHandles for
        the same blob URL. This would result in several calls to NetworkConnectionToWebProcess::registerBlobURLHandle()
        for the same URL and several calls to to BlobRegistryImpl::registerBlobURLHandle() for the
        same URL as well. BlobRegistryImpl is using a HashCountedSet for m_blobReferences in order
        to deal with this fact. However, NetworkConnectionToWebProcess was using a simple HashSet
        for m_blobURLHandles. As a result, if the WebContent process would exit and didClose()
        would get called, the NetworkConnectionToWebProcess may call BlobRegistryImpl::unregisterBlobURLHandle()
        only once even though the WebContent process had several handles for this URL, which would
        not fully remove the URL from BlobRegistryImpl's HashCountedSet. To address the issue,
        NetworkConnectionToWebProcess::m_blobURLHandles is now a HashCountedSet too and we call
        BlobRegistryImpl::unregisterBlobURLHandle() as many times as needed in didClose().

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::didClose):
        * NetworkProcess/NetworkConnectionToWebProcess.h:

2022-03-22  Youenn Fablet  <youenn@apple.com>

        LibWebRTCCodecsProxy.mm and SharedVideoFrame.cpp do not need to be built as part of WebContent executable
        https://bugs.webkit.org/show_bug.cgi?id=238002

        Reviewed by Eric Carlson.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        Enable content filtering in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=238156

        Reviewed by Geoffrey Garen.

        Remove code associated with Network extension sandbox extensions.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Shared/Cocoa/LoadParametersCocoa.mm:
        (WebKit::LoadParameters::platformEncode const):
        (WebKit::LoadParameters::platformDecode):
        * Shared/LoadParameters.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addPlatformLoadParameters):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::reloadAfterUnblockedContentFilter): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared):
        (WebKit::WebPageProxy::decidePolicyForNewWindowAction):
        (WebKit::WebPageProxy::decidePolicyForResponseShared):
        * UIProcess/WebPageProxy.h:
        * WebProcess/Network/WebResourceLoader.cpp:
        (WebKit::WebResourceLoader::contentFilterDidBlockLoad):
        (WebKit::WebResourceLoader::cancelMainResourceLoadForContentFilter): Deleted.
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::platformDidReceiveLoadParameters):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didReceivePolicyDecision):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add telemetry for syscalls used during launch
        https://bugs.webkit.org/show_bug.cgi?id=235865
        <rdar://problem/88228583>

        Reviewed by Brent Fulgham.

        Add telemetry in the WebContent process' sandbox on macOS to determine which syscalls are used only during launch.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Pass along timeout to ASA and ignore timeout for conditional mediation requests
        https://bugs.webkit.org/show_bug.cgi?id=238147
        rdar://90509464

        Reviewed by Brent Fulgham.

        Currently we don't pass the timeout from the rp into ASA, so the default timeout is always used.
        This patch starts passing along the timeout to ASA, and creates a place for ASA to specify the
        mediation of the request, so we can ignore the timeout for requests using conditional mediation.

        Modified API test.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (toWebCore):
        (-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel makeCredentialWithClientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel getAssertionWithClientDataHash:options:completionHandler:]):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::respondReceived):
        (WebKit::AuthenticatorManager::initTimeOutTimer):
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureRegistrationRequestContext):
        (WebKit::configureAssertionOptions):

2022-03-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support getAssertion for virtual HID authenticators
        https://bugs.webkit.org/show_bug.cgi?id=238154
        rdar://problem/90593150

        Reviewed by Brent Fulgham.

        Virtual authenticators for WebAuthn support different transports: nfc, usb, internal,
        and ble. Currently, we only fully support the internal transport and makeCredential for
        usb-transport. The default transport for web-platform-tests is usb. This patch implements
        getAssertion for hid-based virtual authneticators.

        Tested via manually creating virtual authenticator and performing create / get.

        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::addCredential):
        (WebKit::VirtualAuthenticatorManager::credentialsMatchingList):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.mm:
        (WebKit::privateKeyFromBase64):
        (WebKit::signatureForPrivateKey):
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.cpp:
        (WebKit::VirtualHidConnection::parseRequest):

2022-03-22  Jer Noble  <jer.noble@apple.com>

        Fetching a Blob URL with an unbounded Range header do not generate a Content-Range response header
        https://bugs.webkit.org/show_bug.cgi?id=238170

        Reviewed by Eric Carlson.

        Handle the case where the request contains an unbounded range, and property calculate the rangeEnd
        to pass into ParsedContentRange.

        * NetworkProcess/NetworkDataTaskBlob.cpp:
        (WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse):

2022-03-22  Miguel Gomez  <magomez@igalia.com>

        Ensure that proxies are invalidated before destroying them.
        https://bugs.webkit.org/show_bug.cgi?id=237187

        Reviewed by Carlos Garcia Campos.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsScene.cpp:
        (WebKit::CoordinatedGraphicsScene::updateSceneState):

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        Ensure there is a Network process after launching the WebContent process
        https://bugs.webkit.org/show_bug.cgi?id=238080
        <rdar://88933565>

        Reviewed by Chris Dumez.

        After the WebContent process has finished launching, ensure there is a Network process
        which will provide the WebContent process with the Launch Services database.

        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didFinishLaunching):

2022-03-22  Wenson Hsieh  <wenson_hsieh@apple.com>

        -[WKWebView _spellCheckerDocumentTag] is inconsistent with the document tag passed into NSSpellChecker
        https://bugs.webkit.org/show_bug.cgi?id=238186
        rdar://90591883

        Reviewed by Tim Horton.

        Currently, WebViewImpl and WebPageProxy both maintain separate spellchecking document tag values, both of which
        are derived from `-[NSSpellChecker uniqueSpellDocumentTag]`. While the former is used for autocorrection as well
        as the WKWebView SPI `-_spellCheckerDocumentTag`, the latter is passed into NSSpellChecker API when performing
        spellchecking.

        For various reasons, Mail compose (using WebKit2) requires `-_spellCheckerDocumentTag` to be consistent with the
        value of the spell checker document tag passed into `-checkString:range:…:inSpellDocumentWithTag:orthography:`.
        Address this by simply having WebViewImpl call through into WebPageProxy's `spellDocumentTag`, such that the two
        now share the same value.

        Test: SpellCheckerDocumentTag.SpellCheckerDocumentTagWhenCheckingString

        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::spellCheckerDocumentTag):

2022-03-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Remove the ATK implementation
        https://bugs.webkit.org/show_bug.cgi?id=238198

        Reviewed by Adrian Perez de Castro.

        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/atk/WebKitWebPageAccessibilityObject.cpp: Removed.
        (coreRootObjectWrapperDetachedCallback): Deleted.
        (rootWebAreaWrapper): Deleted.
        (accessibilityRootObjectWrapper): Deleted.
        (webkitWebPageAccessibilityObjectInitialize): Deleted.
        (webkitWebPageAccessibilityObjectGetIndexInParent): Deleted.
        (webkitWebPageAccessibilityObjectGetNChildren): Deleted.
        (webkitWebPageAccessibilityObjectRefChild): Deleted.
        (webkitWebPageAccessibilityObjectRefStateSet): Deleted.
        (webkit_web_page_accessibility_object_class_init): Deleted.
        (webkitWebPageAccessibilityObjectNew): Deleted.
        * WebProcess/WebPage/atk/WebKitWebPageAccessibilityObject.h: Removed.
        * WebProcess/WebPage/glib/WebPageGLib.cpp:
        (WebKit::WebPage::platformInitialize):
        * WebProcess/wpe/WebProcessMainWPE.cpp:
        (WebKit::initializeAccessibility): Deleted.

2022-03-22  Youenn Fablet  <youenn@apple.com>

        Move RealtimeMediaSource::VideoSampleObserver::videoSampleAvailable to VideoFrame
        https://bugs.webkit.org/show_bug.cgi?id=237884

        Reviewed by Eric Carlson.

        Move from using MediaSample to VideoFrame directly.

        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:

2022-03-22  Diego Pino Garcia  <dpino@igalia.com>

        Unreviewed, fix non-unified build after r291589

        * NetworkProcess/NetworkBroadcastChannelRegistry.cpp:

2022-03-22  Youenn Fablet  <youenn@apple.com>

        Website policies are not respected when doing COOP based process swap
        https://bugs.webkit.org/show_bug.cgi?id=238036
        <rdar://89616625>

        Reviewed by Chris Dumez.

        In case of normal process swap, we make use of website policies so everything is fine.
        For COOP based process swap, this happens later on, at a point where we lost website policies.
        To overcome this, we store the website policies used by a navigation inside the API::Navigation object.
        It is used by continueNavigationInNewProcess to correctly initialize the new WebPage website policies.
        We then set the website policies in the navigation object just before continuing the load in the same process,
        as process swap may happen later when inspecting the response.
        Minor refactoring in continueNavigationInNewProcess to get the policies directly from the given Navigation object.
        Minor refactoring in receivedNavigationPolicyDecision to make the code doing process swap clearer.

        Covered by API test.

        * UIProcess/API/APINavigation.h:
        (API::Navigation::setWebsitePoliciesForProcessSwap):
        (API::Navigation::takeWebsitePoliciesForProcessSwap):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::receivedPolicyDecision):
        (WebKit::WebPageProxy::continueNavigationInNewProcess):
        (WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation):
        * UIProcess/WebPageProxy.h:

2022-03-21  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Make GraphicsContextState keep track of changes till they are applied
        https://bugs.webkit.org/show_bug.cgi?id=238066
        rdar://90585183

        Reviewed by Simon Fraser.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::setState):
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::recordSetState):
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-21  Simon Fraser  <simon.fraser@apple.com>

        Do all RemoteLayerBackingStore buffer swapping in one batch
        https://bugs.webkit.org/show_bug.cgi?id=238161

        Reviewed by Tim Horton.

        Previously, RemoteLayerBackingStore buffer swapping happened per-layer in
        PlatformCALayerRemote::recursiveBuildTransaction().

        To prepare for a single IPC for all buffer swapping, batch all the swapping under
        prepareBackingStoresForDisplay() which is called from
        RemoteLayerTreeContext::buildTransaction().
        
        RemoteLayerBackingStoreCollection tracks m_backingStoresNeedingDisplay, and
        RemoteLayerBackingStore implements needsDisplay() so we only add backing stores to this hash
        set that need any buffer swapping.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::layerWillBeDisplayed):
        (WebKit::RemoteLayerBackingStore::needsDisplay const):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::paintContents):
        (WebKit::RemoteLayerBackingStore::takePendingFlushers):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::backingStoreNeedsDisplay):
        (WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoresForDisplay):
        (WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents):
        (WebKit::RemoteLayerBackingStoreCollection::willFlushLayers):
        (WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::backingStoreNeedsDisplay):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers):
        * WebProcess/WebPage/RemoteLayerTree/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::recursiveBuildTransaction):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeContext.mm:
        (WebKit::RemoteLayerTreeContext::buildTransaction):

2022-03-21  Alex Christensen  <achristensen@webkit.org>

        Adjust when _setPrivacyProxyFailClosedForUnreachableNonMainHosts is called
        https://bugs.webkit.org/show_bug.cgi?id=237735

        Reviewed by Geoff Garen.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-03-21  Aditya Keerthi  <akeerthi@apple.com>

        Unreviewed, address post-landing feedback on r291445

        * UIProcess/ios/WKPDFView.mm:
        (-[WKPDFView compareFoundRange:toRange:inDocument:]):

        Subtraction to determine ordering is an anti-pattern, due to the
        possibility of overflow. Use comparison operators.

2022-03-21  Chris Dumez  <cdumez@apple.com>

        BroadcastChannel instances in distinct opaque origins can communicate
        https://bugs.webkit.org/show_bug.cgi?id=238090
        <rdar://problem/90511155>

        Reviewed by Alex Christensen.

        The issue is that we would use a ClientOrigin to distinguish origins for BroadcastChannel,
        which relies on SecurityOriginData internally. A unique/opaque SecurityOrigin becomes an empty
        SecurityOriginData upon conversion. As a result, when comparing ClientOrigin objects from
        unique SecurityOrigins, they would compare as equal.

        To address the issue, I introduced a new PartitionedSecurityOrigin type which is similar
        to ClientOrigin but stores SecurityOrigin objects internally, instead of SecurityOriginData
        objects. PartitionedSecurityOrigin's operator==() is such that different SecurityOrigins
        would not be equal but the same unique SecurityOrigin would be. I then used this new
        PartitionedSecurityOrigin type as key in our HashMap on the WebProcess side instead of
        ClientOrigin. This allows communication between several BroadcastChannels from the same
        unique origin, while preventing communication between distinct opaque origins.

        When the PartitionedSecurityOrigin contains an opaque security origin, we don't involve
        the Network Process at all since the destination can only be in the same WebProcess.

        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.cpp:
        (WebKit::toClientOrigin):
        (WebKit::WebBroadcastChannelRegistry::registerChannel):
        (WebKit::WebBroadcastChannelRegistry::unregisterChannel):
        (WebKit::WebBroadcastChannelRegistry::postMessage):
        (WebKit::WebBroadcastChannelRegistry::postMessageLocally):
        (WebKit::WebBroadcastChannelRegistry::postMessageToRemote):
        (WebKit::WebBroadcastChannelRegistry::networkProcessCrashed):
        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.h:

2022-03-21  Brent Fulgham  <bfulgham@apple.com>

        Disable the <model> element in Captive Portal mode.
        https://bugs.webkit.org/show_bug.cgi?id=238148
        <rdar://90562002>

        Reviewed by Chris Dumez.

        When displaying content in a captive portal, we should make sure the experimental
        <model> element is unavailable.

        Tests: TestWebKitAPI

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal): Added. Also turn off <model> support.
        (WebKit::WebPage::updatePreferences): Call new helper function.

2022-03-21  Per Arne Vollan  <pvollan@apple.com>

        [watchOS] Add required syscall
        https://bugs.webkit.org/show_bug.cgi?id=238117
        <rdar://89964344>

        Reviewed by Brent Fulgham.

        Add rarely used syscall on watchOS.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-21  Youenn Fablet  <youenn@apple.com>

        Remove unneeded quotes in capture attribution string
        https://bugs.webkit.org/show_bug.cgi?id=238132
        <rdar://88794701>

        Reviewed by Eric Carlson.

        Quotes are unneeded and made it less clear to read.

        * GPUProcess/cocoa/GPUConnectionToWebProcessCocoa.mm:
        (WebKit::GPUConnectionToWebProcess::setCaptureAttributionString):

2022-03-21  Tim Horton  <timothy_horton@apple.com>

        Add an addition point for system background color
        https://bugs.webkit.org/show_bug.cgi?id=238108
        <rdar://problem/90463946>

        Reviewed by Aditya Keerthi.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (scrollViewBackgroundColor):
        Adopt systemBackgroundColor().

        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::contentViewBackgroundColor):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::platformUnderPageBackgroundColor const):
        Move the fallback to systemBackgroundColor into PageClientImpl
        so that it can realize the web view's trait collection.

2022-03-21  Adam Mazander  <mazander@apple.com>

        Sandbox: Remove telemetry in Network Process sandbox macOS
        https://bugs.webkit.org/show_bug.cgi?id=238041

        Reviewed by Brent Fulgham.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:

2022-03-21  Alex Christensen  <achristensen@webkit.org>

        Dust off Mac CMake build
        https://bugs.webkit.org/show_bug.cgi?id=238121

        Reviewed by Yusuke Suzuki.

        * PlatformMac.cmake:

2022-03-21  Jonathan Bedard  <jbedard@apple.com>

        Unreviewed, reverting r291558.

        Exceeded GitHub file size limit

        Reverted changeset:

        "Enable PGO when building for release and production"
        https://bugs.webkit.org/show_bug.cgi?id=238119
        https://commits.webkit.org/r291558

2022-03-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        Enable PGO when building for release and production
        https://bugs.webkit.org/show_bug.cgi?id=238119
        rdar://90182309

        Reviewed by Saam Barati.

        See WebCore/ChangeLog for more details.

        * Configurations/Base.xcconfig:
        * Configurations/WebKit.xcconfig:
        * Profiling/WebKit.profdata: Added.

2022-03-21  Youenn Fablet  <youenn@apple.com>

        Remove use of MediaSampleAVFObjC from WebRTC pipelines
        https://bugs.webkit.org/show_bug.cgi?id=237706
        <rdar://problem/90425391>

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:

2022-03-19  Tim Horton  <timothy_horton@apple.com>

        Fix the build (hopefully)

        * Shared/Cocoa/ArgumentCodersCocoa.mm:

2022-03-18  Myles C. Maxfield  <mmaxfield@apple.com>

        [Cocoa] Teach WebKit how to serialize CGColors
        https://bugs.webkit.org/show_bug.cgi?id=238069
        <rdar://problem/90124325>

        Reviewed by Dean Jackson and Tim Horton.

        We have 2 ways of serializing Cocoa objects: NS type handling in ArgumentCodersCocoa.mm,
        and CF type handling in ArgumentCodersCF.mm. CGColors are CF types, so this patch adds
        direct support in ArgumentCodersCF to serialize them, by round-tripping them through
        WebCore::Colors. However, NS containers (like font descriptor attribute dictionaries)
        can contain CGColors, so this patch also teaches ArgumentCodersCocoa that there may be
        CF types inside NS containers. If one is present, ArgumentCodersCocoa has to call into
        ArgumentCodersCF to serialize it.

        This patch doesn't add support for the reverse path, where an NS object is contained
        within a CF container. I intentionally omitted implementing this because I wasn't sure
        if it would be a layering violation; ArgumentCodersCococa.mm already #includes
        ArgumentCodersCF.h, but ArgumentCodersCF.mm doesn't #include ArgumentCodersCocoa.h.
        This path isn't actually necessary to solve my problem at hand, so someone else can
        add support if necessary in the future. I also added a comment at the site where the
        code would fail, describing what the problem is and a potential workaround.

        This patch also adds support for our NSSecureCoding implementation for CGColors. This
        is necessary because sometimes we want to serialize things like NSAttributedStrings,
        which we don't have direct support for, so we use NSSecureCoding to serialize them
        instead. NSAttributedStrings can contain fonts whose descriptor dictionaries contain
        CGColors, so this path needs to work with CGColors too. Support is implemented using
        NSKeyedArchiverDelegate and NSKeyedUnarchiverDelegate.

        Test: IPCTestingAPI.CGColorInNSSecureCoding
              The non-NSSecureCoding parts of this patch are tested by our regular LayoutTests
              when DOM GPU Process rendering is enabled.

        * Shared/Cocoa/ArgumentCodersCocoa.mm:
        (-[WKSecureCodingArchivingDelegate archiver:willEncodeObject:]):
        (-[WKSecureCodingArchivingDelegate unarchiver:didDecodeObject:]):
        (-[WKSecureCodingCGColorWrapper wrappedColor]):
        (+[WKSecureCodingCGColorWrapper supportsSecureCoding]):
        (-[WKSecureCodingCGColorWrapper encodeWithCoder:]):
        (-[WKSecureCodingCGColorWrapper initWithCoder:]):
        (-[WKSecureCodingCGColorWrapper initWithCGColor:]):
        (IPC::typeFromObject):
        (IPC::decodeSecureCodingInternal):
        (IPC::encodeCFInternal):
        (IPC::decodeCFInternal):
        (IPC::encodeObject):
        (IPC::decodeObject):
        * Shared/cf/ArgumentCodersCF.cpp:
        (IPC::typeFromCFTypeRef):
        (IPC::ArgumentCoder<CFTypeRef>::encode):
        (IPC::ArgumentCoder<RetainPtr<CFTypeRef>>::decode):
        (IPC::ArgumentCoder<CGColorRef>::encode):
        (IPC::ArgumentCoder<RetainPtr<CGColorRef>>::decode):
        * Shared/cf/ArgumentCodersCF.h:

2022-03-18  Gavin Phillips  <gavin.p@apple.com>

        Update preference location used for CaptivePortal testing. 
        https://bugs.webkit.org/show_bug.cgi?id=237970
        <rdar://problem/88897735>

        Reviewed by Brent Fulgham.

        Update the location of the setting used to determine whether we should ignore CaptivePortal requests for testing 
        as well as group the various iterations of preference checking into a single location. 

        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        (+[_WKSystemPreferences setCaptivePortalModeEnabled:]):
        (+[_WKSystemPreferences isCaptivePortalModeIgnored:]):
        (+[_WKSystemPreferences setCaptivePortalModeIgnored:ignore:]):
        * UIProcess/API/Cocoa/_WKSystemPreferencesInternal.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::isCaptivePortalModeEnabledBySystemIgnoringCaching):

2022-03-18  Jonathan Bedard  <jbedard@apple.com>

        [iOS 15.4] Fix unused variables
        https://bugs.webkit.org/show_bug.cgi?id=238089
        <rdar://problem/90498642>

        Reviewed by Alexey Proskuryakov and Chris Dumez.

        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess): Declare isSafari as unused for Mac and Catalyst.
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (-[WKScrollingNodeScrollViewDelegate scrollViewWillEndDragging:withVelocity:targetContentOffset:]):
        Remove canPanX and canPanY, since they are unused.
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant _createSheetWithElementActions:defaultTitle:showLinkTitle:]): Remove titleIsURL.

2022-03-18  Per Arne Vollan  <pvollan@apple.com>

        Fix test failures when enabling content filtering in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=237217

        Reviewed by Brent Fulgham.

        Add a WebMockContentFilterManager in the WebContent process, which will be notified
        when mock content filter settings are changed from JavaScript, and then send the new
        settings to the Network process and install the mock content filter. The other
        changes are addressing layout and API test failures.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::installMockContentFilter):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::start):
        (WebKit::NetworkResourceLoader::startContentFiltering):
        (WebKit::NetworkResourceLoader::didFinishLoading):
        (WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal):
        (WebKit::NetworkResourceLoader::contentFilterDidBlock):
        (WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter):
        (WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter):
        * NetworkProcess/NetworkResourceLoader.h:
        * Shared/WebCoreArgumentCoders.h:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/Network/WebMockContentFilterManager.cpp: Added.
        (WebKit::WebMockContentFilterManager::singleton):
        (WebKit::WebMockContentFilterManager::startObservingSettings):
        (WebKit::WebMockContentFilterManager::mockContentFilterSettingsChanged):
        * WebProcess/Network/WebMockContentFilterManager.h: Added.
        * WebProcess/Network/WebResourceLoader.cpp:
        (WebKit::WebResourceLoader::contentFilterDidBlockLoad):
        (WebKit::WebResourceLoader::cancelMainResourceLoadForContentFilter):
        (WebKit::WebResourceLoader::handleProvisionalLoadFailureFromContentFilter): Deleted.
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:
        * WebProcess/WebProcess.cpp:

2022-03-18  Chris Dumez  <cdumez@apple.com>

        Avoid calls to [CLLocationManager authorizationStatus] & [CLLocationManager locationServicesEnabled]
        https://bugs.webkit.org/show_bug.cgi?id=237933
        <rdar://89931043>

        Reviewed by Geoffrey Garen.

        Minor changes to reflect API changes for our CoreLocation location manager.

        * UIProcess/WebGeolocationManagerProxy.cpp:
        (WebKit::WebGeolocationManagerProxy::providerStartUpdating):
        (WebKit::WebGeolocationManagerProxy::providerStopUpdating):

2022-03-18  Ben Nham  <nham@apple.com>

        Remove push subscriptions when associated service worker registrations are removed
        https://bugs.webkit.org/show_bug.cgi?id=237983

        Reviewed by Youenn Fablet.

        When a ServiceWorkerRegistration is removed, we also need to remove its associated
        PushSubscription. This can occur when:

          1. The application calls ServiceWorkerRegistration.unregister. This is implemented by
             having resolveUnregistrationJobInClient call unsubscribeFromPushService in webpushd.
             The identifier passed to unsubscribeFromPushService is now optional; if the identifier
             is not present, then we delete whatever PushSubscription is associated with the given
             scope URL.

          2. The user clears website data for a particular origin. This is implemented by having
             deleteWebsiteDataForOrigins invoke removePushSubscriptionsForOrigin in webpushd.

          3. The user clears all website data. This is implemented by having deleteWebsiteData
             invoke removeAllPushSubscriptions in webpushd.

        Covered by new API tests.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::deleteWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteDataForOrigins):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::hasPushSubscriptionForTesting):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::unsubscribeFromPushService):
        (WebKit::NetworkNotificationManager::removeAllPushSubscriptions):
        (WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin):
        * NetworkProcess/Notifications/NetworkNotificationManager.h:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::resolveUnregistrationJobInClient):
        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::messageTypeSendsReply):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _scopeURL:hasPushSubscriptionForTesting:]):
        * UIProcess/API/Cocoa/WKWebsiteDataStorePrivate.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::hasPushSubscriptionForTesting):
        * UIProcess/Network/NetworkProcessProxy.h:
        * webpushd/PushService.h:
        * webpushd/PushService.mm:
        (WebPushD::UnsubscribeRequest::UnsubscribeRequest):
        (WebPushD::UnsubscribeRequest::startInternal):
        (WebPushD::PushService::unsubscribe):
        (WebPushD::PushService::incrementSilentPushCount):
        (WebPushD::PushService::removeRecordsForBundleIdentifier):
        (WebPushD::PushService::removeRecordsForBundleIdentifierAndOrigin):
        (WebPushD::PushService::removeRecordsImpl):
        * webpushd/WebPushDaemon.h:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::MessageInfo::removeAllPushSubscriptions::encodeReply):
        (WebPushD::MessageInfo::removePushSubscriptionsForOrigin::encodeReply):
        (WebPushD::Daemon::decodeAndHandleMessage):
        (WebPushD::Daemon::unsubscribeFromPushService):
        (WebPushD::Daemon::removeAllPushSubscriptions):
        (WebPushD::Daemon::removePushSubscriptionsForOrigin):

2022-03-18  J Pascoe  <j_pascoe@apple.com>

        Trigger PDF download in captive portal mode instead of using PDF viewer
        https://bugs.webkit.org/show_bug.cgi?id=237245
        rdar://problem/89525531

        Reviewed by Chris Dumez.

        This is a stopgap solution since PDF.js needs more cycles to polish.

        Added API test WKDownload.CaptivePortalPDF.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::decidePolicyForResponseShared):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):

2022-03-18  Kimmo Kinnunen  <kkinnunen@apple.com>

        Recycling a webgl context when it has been lost and restored causes a crash
        https://bugs.webkit.org/show_bug.cgi?id=238024

        Reviewed by Geoffrey Garen.

        Remove GraphicsContextGL::getGraphicsResetStatusARB(), it's unused now.

        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (getActiveUniformBlockiv):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintRenderingResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::markContextLost):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        [WPE][GTK] Fix a crash after r290360
        https://bugs.webkit.org/show_bug.cgi?id=237917

        Reviewed by Youenn Fablet.

        When AuxiliaryProcess::shutDown is called for the WebProcess there might be pages not closed yet, for example
        when swapping process on navigation, the close message is sent to the page after the shutdown. In the case of
        GTK and WPE ports the pages are closed before stopping the run loop to ensure associated resources (like GPU
        resources) are released. Closing the last page makes the process termination allowed, which ends up calling
        AuxiliaryProcess::terminate again. Also, when the shutdown message is received we don't want to ask again the UI
        process whether the process can be terminated, since the UI process asked it.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::enableTermination): Return early if m_isInShutDown is true.
        (WebKit::AuxiliaryProcess::shutDown): Set m_isInShutDown for the scope.
        * Shared/AuxiliaryProcess.h:

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        Add a public build option for PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=238023

        Reviewed by Michael Catanzaro.

        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoad):
        * WebProcess/Network/WebLoaderStrategy.h:
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):
        (WebKit::WebPage::canShowMIMEType const):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        Remove AuxiliaryProcess termination timeout
        https://bugs.webkit.org/show_bug.cgi?id=238012

        Reviewed by Chris Dumez.

        It was only used by the plugin process, now it's always set to 0 for all processes, so it's useless.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::AuxiliaryProcess):
        (WebKit::AuxiliaryProcess::disableTermination):
        (WebKit::AuxiliaryProcess::enableTermination):
        (WebKit::AuxiliaryProcess::terminationTimerFired): Deleted.
        * Shared/AuxiliaryProcess.h:
        (WebKit::AuxiliaryProcess::setTerminationTimeout): Deleted.
        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess):

2022-03-18  Youenn Fablet  <youenn@apple.com>

        Remove MediaSample usage from canvas capture code
        https://bugs.webkit.org/show_bug.cgi?id=238015

        Reviewed by Eric Carlson.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToVideoFrame):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample): Deleted.
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToVideoFrame):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToMediaSample): Deleted.
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:

2022-03-18  Youenn Fablet  <youenn@apple.com>

        Keep service workers alive when they are inspected even though they should be terminated
        https://bugs.webkit.org/show_bug.cgi?id=237827
        <rdar://88313935>

        Reviewed by Alex Christensen.

        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.h:

2022-03-17  Alex Christensen  <achristensen@webkit.org>

        Call doDailyActivityInManager on main thread in adattributiond
        https://bugs.webkit.org/show_bug.cgi?id=238059
        <rdar://90335028>

        Reviewed by Tim Horton.

        It turns out that xpc activities don't happen on the main thread.
        Everything else in adattributiond happens on the main thread (except database operations)
        and to be thread safe this also needs to happen on the main thread.

        * Shared/EntryPointUtilities/Cocoa/Daemon/PCMDaemonEntryPoint.mm:
        (WebKit::registerScheduledActivityHandler):

2022-03-17  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Support PDF search when using a find interaction
        https://bugs.webkit.org/show_bug.cgi?id=237408
        rdar://89437334

        Reviewed by Wenson Hsieh.

        Ensure that PDFs can be searched when using a _UIFindInteraction by
        making WKPDFView conform to _UITextSearching.

        The implementation is a thin wrapper around existing find SPI on
        PDFHostViewController. Found ranges in PDFs are uniquely identified
        by an index, as more detailed range information is not exposed. Unlike
        web content, there is currently no requirement to support restorable
        found ranges for PDFs, making indexes safe to use.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:

        Use WKPDFView or WKContentView as the searchable object, depending on
        the loaded content.

        (-[WKWebView _didCommitLoadForMainFrame]):
        (-[WKWebView _searchableObject]):
        (-[WKWebView _setFindInteractionEnabled:]):
        * UIProcess/ios/WKPDFView.mm:
        (+[WKPDFFoundTextRange foundTextRangeWithIndex:]):
        (-[WKPDFFoundTextRange start]):
        (-[WKPDFFoundTextRange end]):
        (-[WKPDFFoundTextRange isEmpty]):
        (+[WKPDFFoundTextPosition textPositionWithIndex:]):
        (-[WKPDFView dealloc]):
        (-[WKPDFView pdfHostViewController:findStringUpdate:done:]):
        (-[WKPDFView selectedTextRange]):
        (-[WKPDFView compareFoundRange:toRange:inDocument:]):
        (-[WKPDFView performTextSearchWithQueryString:usingOptions:resultAggregator:]):
        (-[WKPDFView decorateFoundTextRange:inDocument:usingStyle:]):
        (-[WKPDFView clearAllDecoratedFoundText]):

2022-03-17  Brent Fulgham  <bfulgham@apple.com>

        Disable push features in CaptivePortal mode 
        https://bugs.webkit.org/show_bug.cgi?id=237981
        <rdar://88897228>

        Reviewed by Chris Dumez.

        We should not support push features when running in a Captive Portal.

        Tests: TestWebKitAPI

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):

2022-03-17  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290835.
        https://bugs.webkit.org/show_bug.cgi?id=238044

        Disruptive change

        Reverted changeset:

        "[iOS] Hard link AVPictureInPictureController"
        https://bugs.webkit.org/show_bug.cgi?id=237227
        https://commits.webkit.org/r290835

2022-03-17  Adam Mazander  <mazander@apple.com>

        Removed telemetry from Networking.sb
        https://bugs.webkit.org/show_bug.cgi?id=238026

        Reviewed by Per Arne Vollan.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb:

2022-03-17  Antoine Quint  <graouts@webkit.org>

        [model] loading spinner doesn't show on iOS
        https://bugs.webkit.org/show_bug.cgi?id=238029
        rdar://89698998

        Reviewed by Dean Jackson.

        We must wait until a WKModelView has non-zero bounds to create the backing ASVInlinePreview
        so that the ARQL views are all sized to display the loading spinner correctly.

        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView initWithModel:]):
        (-[WKModelView createPreview]):
        (-[WKModelView layoutSubviews]):
        (-[WKModelView updateBounds]):

2022-03-17  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291352.
        https://bugs.webkit.org/show_bug.cgi?id=238039

        Disruptive change

        Reverted changeset:

        "Incorrect header name used in __has_include"
        https://bugs.webkit.org/show_bug.cgi?id=237914
        https://commits.webkit.org/r291352

2022-03-17  Simon Lewis  <simon.lewis@apple.com>

        Add read and write methods to JSIPCStreamConnectionBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237730
        rdar://problem/89676460

        Reviewed by Kimmo Kinnunen.

        When using IPCTestingAPI, this change enables the underlying bytes
        of a StreamClientConnection buffer to be modified.

        Test: ipc/stream-buffer-read-write.html

        * Platform/IPC/StreamClientConnection.cpp:
        (IPC::StreamClientConnection::bufferForTesting):
        * Platform/IPC/StreamClientConnection.h:
        * Platform/IPC/StreamConnectionBuffer.cpp:
        (IPC::StreamConnectionBuffer::headerForTesting):
        (IPC::StreamConnectionBuffer::dataForTesting):
        * Platform/IPC/StreamConnectionBuffer.h:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readHeaderBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readDataBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeHeaderBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeDataBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeBytes):

2022-03-17  Simon Fraser  <simon.fraser@apple.com>

        Fix the build when LOG_DISABLED is 0 in release builds
        https://bugs.webkit.org/show_bug.cgi?id=237999

        Reviewed by Tim Horton.

        * WebProcess/Plugins/PDF/PDFPlugin.h:

2022-03-17  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support makeCredential for virtual HID authenticators
        https://bugs.webkit.org/show_bug.cgi?id=237984
        rdar://problem/90393676

        Reviewed by Brent Fulgham.

        Virtual authenticators for WebAuthn supports different transports: nfc,usb,internal,ble.
        Currently, we support the internal transport, but the default transport used in web platform
        tests is usb. This patch implements makeCredential for hid-based virtual authenticators. Virtual
        credential information is stored in the VirtualCredential struct as suggested by the spec.

        Tested manually via creating virtual authenticator and performing create and via wpt tests.

        * UIProcess/WebAuthentication/Mock/MockHidConnection.cpp:
        (WebKit::MockHidConnection::parseRequest):
        (WebKit::MockHidConnection::feedReports):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::createAuthenticator):
        (WebKit::VirtualAuthenticatorManager::addCredential):
        (WebKit::VirtualAuthenticatorManager::createService const):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualService.h.
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.mm: Added.
        (WebKit::flagsForConfig):
        (WebKit::createPrivateKey):
        (WebKit::credentialIdAndCosePubKeyForPrivateKey):
        (WebKit::base64PrivateKey):
        * UIProcess/WebAuthentication/Virtual/VirtualCredential.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualService.h.
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.cpp: Added.
        (WebKit::VirtualHidConnection::VirtualHidConnection):
        (WebKit::VirtualHidConnection::initialize):
        (WebKit::VirtualHidConnection::terminate):
        (WebKit::VirtualHidConnection::sendSync):
        (WebKit::VirtualHidConnection::send):
        (WebKit::VirtualHidConnection::assembleRequest):
        (WebKit::VirtualHidConnection::receiveHidMessage):
        (WebKit::VirtualHidConnection::recieveResponseCode):
        (WebKit::VirtualHidConnection::parseRequest):
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h.
        * UIProcess/WebAuthentication/Virtual/VirtualService.h:
        * UIProcess/WebAuthentication/Virtual/VirtualService.mm:
        (WebKit::VirtualService::VirtualService):
        (WebKit::VirtualService::createVirtual):
        (WebKit::authenticatorInfoForConfig):
        (WebKit::VirtualService::startDiscoveryInternal):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-17  Youenn Fablet  <youenn@apple.com>

        Make SharedVideoFrameReader use VideoFrameCV instead of MediaSample
        https://bugs.webkit.org/show_bug.cgi?id=237596

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-17  Ben Nham  <nham@apple.com>

        Allow push preference to be set programatically
        https://bugs.webkit.org/show_bug.cgi?id=238003

        Reviewed by Geoffrey Garen.

        This exposes the PushAPIEnabled experimental preference through WKPreferences so it can be
        enabled programatically by API clients.

        * UIProcess/API/Cocoa/WKPreferences.mm:
        (-[WKPreferences _pushAPIEnabled]):
        (-[WKPreferences _setPushAPIEnabled:]):
        * UIProcess/API/Cocoa/WKPreferencesPrivate.h:

2022-03-17  Kate Cheney  <katherine_cheney@apple.com>

        Calls to print can result in unresponsive print modal
        https://bugs.webkit.org/show_bug.cgi?id=237940
        <rdar://problem/88257828>

        Reviewed by Chris Dumez.

        Calls to print were hanging in the case of the client asynchronously
        handling the completion handler passed to the delegate. To fix this
        we can adjust all printing IPC to have the option
        DispatchMessageEvenWhenWaitingForUnboundedSyncReply which allows IPC
        messages when waiting for a sync reply in the case where the receiver
        of the message is not guranteed to call the completion handler at the
        end of the runloop.

        * UIProcess/API/Cocoa/WKWebViewPrivateForTesting.h:
        * UIProcess/API/Cocoa/WKWebViewTesting.mm:
        (-[WKWebView _computePagesForPrinting:completionHandler:]):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::printingSendOptions):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::print):

2022-03-17  Nikolas Zimmermann  <nzimmermann@igalia.com>

        Build broken on macOS Monterey 12.3 - PassKitSPI related error
        https://bugs.webkit.org/show_bug.cgi?id=238010
        <rdar://problem/90417687>

        Reviewed by Antoine Quint.

        Unbreak the macOS 12.3 build: assure that 'PKShippingMethod' is declared before used
        in the 'PKShippingMethods' interface. Fix various unused variable warnings.

        No new tests. No change in functionality.

        * Shared/cf/ArgumentCodersCF.cpp:
        (IPC::ArgumentCoder<CFStringRef>::encode):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::compileAndCacheSandboxProfile):

2022-03-17  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL context lost event is not sent again for contexts that are lost and restored
        https://bugs.webkit.org/show_bug.cgi?id=237952

        Reviewed by Antti Koivisto.

        Adjust after GraphicsContextGL::addClient() was renamed setClient().

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::wasLost):
        (WebKit::RemoteGraphicsContextGLProxy::wasChanged):
        (WebKit::RemoteGraphicsContextGLProxy::markContextLost):

2022-03-16  Antoine Quint  <graouts@webkit.org>

        [model] -[ASVInlinePreview setRemoteContext:] should be called inside the -[ASVInlinePreview setupRemoteConnectionWithCompletionHandler:] callback
        https://bugs.webkit.org/show_bug.cgi?id=237959
        rdar://87832635

        Reviewed by Dean Jackson.

        We need to split the code that creates a remote ASVInlinePreview on macOS in two. The first step is to create the remote ASVInlinePreview
        and obtain its remote context id from the UIProcess, setting it on the WebProcess ASVInlinePreview in the callback.

        The second step is to load the file in the remote ASVInlinePreview.

        For these two steps, we now have two separate WebProxy messages: ModelElementCreateRemotePreview and ModelElementLoadRemotePreview.

        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        (WebKit::ModelElementController::modelElementCreateRemotePreview):
        (WebKit::ModelElementController::modelElementLoadRemotePreview):
        (WebKit::ModelElementController::modelElementDidCreatePreview): Deleted.
        * UIProcess/ModelElementController.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::modelElementCreateRemotePreview):
        (WebKit::WebPageProxy::modelElementLoadRemotePreview):
        (WebKit::WebPageProxy::modelElementDidCreatePreview): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.h:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.mm:
        (WebKit::ARKitInlinePreviewModelPlayerMac::load):
        (WebKit::ARKitInlinePreviewModelPlayerMac::createPreviewsForModelWithURL):
        (WebKit::ARKitInlinePreviewModelPlayerMac::didCreateRemotePreviewForModelWithURL):

2022-03-17  Youenn Fablet  <youenn@apple.com>

        AudioContext is suspended on iOS when page is backgrounded
        https://bugs.webkit.org/show_bug.cgi?id=237878

        Reviewed by Eric Carlson.

        Expose private SPI for testing purposes.

        * UIProcess/API/Cocoa/WKProcessPool.mm:
        * UIProcess/API/Cocoa/WKProcessPoolPrivate.h:
        * UIProcess/WebProcessPool.h:

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Always update assertion state for existing default network process
        https://bugs.webkit.org/show_bug.cgi?id=237965

        Reviewed by Chris Dumez.

        In our current implementation, we only update process assertion state for network process if it's being used by
        some WebsiteDataStore. An problematic case with this impelmentation found by Tim: when a network process is 
        created for some WebsiteDataStore, and the WebsiteDataStore is gone (WebView gets destroyed), then network 
        process will get suspended. At this time, if a new WebsiteDataStore is created, some activities happen and we 
        update assertion state, we don't resume the network process, since it's not actively being used (the new 
        WebsiteDataStore has not invoked networkProcess() yet). Later on if the WebsiteDataStore starts to use network
        process (it reuses existing process as network process is a singleton on Cocoa platforms), the network process
        will be numb and not respond any message because it is suspended.

        To fix this issue, let's always update assertion state for existing network process.

        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::updateProcessAssertions):

2022-03-16  Chris Dumez  <cdumez@apple.com>

        Don't build WebPageProxy::writePromisedAttachmentToPasteboard() and its IPC on macOS
        https://bugs.webkit.org/show_bug.cgi?id=237986

        Reviewed by Brent Fulgham.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::writePromisedAttachmentToPasteboard):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:

2022-03-16  Brent Fulgham  <bfulgham@apple.com>

        CoreIPC Hardening: Add user gesture check when saving images
        https://bugs.webkit.org/show_bug.cgi?id=237839
        <rdar://72058321>

        Reviewed by Chris Dumez.

        Add check to confirm that attempts to store images in the user's Photo
        Library and attempts to store data in the pasteboard were triggered by
        a user gesture.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::writePromisedAttachmentToPasteboard): Message check the authorization token before
        performing the write.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken const): Added.
        (WebKit::WebPageProxy::performActionOnElement): Added.
        (WebKit::WebPageProxy::saveImageToLibrary): Message check the authorization token before
        performing the save.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::performActionOnElement):

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Do not suspend NetworkStorageManager if it is used for ephemeral session
        https://bugs.webkit.org/show_bug.cgi?id=237943

        Reviewed by Chris Dumez.

        The reason we need to suspend NetworkStorageManager when process is suspended, is that it might hold file lock 
        during its operations. NetworkStorageManager of ephemeral sessions will not hold file lock; suspending its 
        WorkQueue will only delay storage operations.

        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::suspend):
        (WebKit::NetworkStorageManager::resume):

2022-03-16  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WebGL] Crash in WebKit::WCContentBuffer::platformLayerWillBeDestroyed()
        https://bugs.webkit.org/show_bug.cgi?id=237819

        Reviewed by Don Olmstead.

        WinCairo WTR was randomly crashing in
        WCContentBuffer::platformLayerWillBeDestroyed(). It accessed a
        stale pointer of WCScene::Layer.

        * GPUProcess/graphics/wc/WCScene.cpp:
        (WebKit::WCScene::Layer::~Layer): Clear the client of
        WCContentBuffer.
        (WebKit::WCScene::update):

2022-03-16  Eric Carlson  <eric.carlson@apple.com>

        [iOS] WebAVMediaSelectionOption should implement -mediaType
        https://bugs.webkit.org/show_bug.cgi?id=237966
        rdar://89934589

        Reviewed by Jer Noble.

        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<MediaSelectionOption>::encode): Deleted.
        (IPC::ArgumentCoder<MediaSelectionOption>::decode): Deleted.
        * Shared/WebCoreArgumentCoders.h:

2022-03-16  Per Arne Vollan  <pvollan@apple.com>

        Incorrect header name used in __has_include
        https://bugs.webkit.org/show_bug.cgi?id=237914
        <rdar://90271228>

        Reviewed by Geoffrey Garen.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-16  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Refactor some position information hit-testing logic related to data detectors in Live Text
        https://bugs.webkit.org/show_bug.cgi?id=237927

        Reviewed by Tim Horton.

        Pull the call to `dataDetectorImageOverlayPositionInformation()` out from `elementPositionInformation()`, and
        into the top level in `WebPage::positionInformation()`. Since `dataDetectorImageOverlayPositionInformation` only
        depends on the hit-tested inner node (rather than the element responding to click events), it doesn't make sense
        to only populate the data detector results array only when we find an element that responds to clicks.

        Test: fast/images/text-recognition/ios/show-data-detector-context-menu.html

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::elementPositionInformation):
        (WebKit::WebPage::positionInformation):

2022-03-16  Youenn Fablet  <youenn@apple.com>

        Make MIMETypeRegistry::mimeTypeForPath take a StringView
        https://bugs.webkit.org/show_bug.cgi?id=236441
        <rdar://problem/89084526>

        Reviewed by Chris Dumez.

        * UIProcess/API/Cocoa/APIAttachmentCocoa.mm:
        (API::mimeTypeInferredFromFileExtension):
        (API::Attachment::setFileWrapperAndUpdateContentType):
        * UIProcess/Inspector/mac/WKInspectorResourceURLSchemeHandler.mm:
        (-[WKInspectorResourceURLSchemeHandler webView:startURLSchemeTask:]):
        * UIProcess/ios/forms/WKFileUploadPanel.mm:
        (-[WKFileUploadPanel presentWithParameters:resultListener:]):

2022-03-16  Youenn Fablet  <youenn@apple.com>

        redirectCount returns 0 when using a Service Worker
        https://bugs.webkit.org/show_bug.cgi?id=235710
        <rdar://problem/88432190>

        Reviewed by Chris Dumez.

        Pass an optional NetworkLoadMetrics when sending the response to web process.
        Include the redirectCount value computed by NetworkResourceLoader.
        Make service worker redirections go through NetworkResourceLoader to set the redirectCount value and for correctness.

        Covered by updated test.

        * NetworkProcess/NetworkResourceLoader.cpp:
        * NetworkProcess/ServiceWorker/ServiceWorkerFetchTask.cpp:
        (WebKit::ServiceWorkerFetchTask::processRedirectResponse):
        * WebProcess/Network/WebResourceLoader.cpp:
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:

2022-03-16  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] Crash during the WebPage::close() related to GL resources destruction
        https://bugs.webkit.org/show_bug.cgi?id=237588

        Reviewed by Carlos Garcia Campos.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsScene.h:
        * Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.cpp:
        (WebKit::ThreadedCompositor::invalidate):
        (WebKit::ThreadedCompositor::updateSceneWithoutRendering):
        * Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.h:

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Suspend newly created NetworkStorageManager if network process is or will be suspended
        https://bugs.webkit.org/show_bug.cgi?id=237915

        Reviewed by Chris Dumez.

        When network process receives prepareToSuspend message, we suspend existing NetworkStorageManagers (so no more
        database operation can be performed). We should do the same thing for new NetworkStorageManager created between
        prepareToSuspend and processDidResume messages.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::prepareToSuspend):
        (WebKit::NetworkProcess::processDidResume):
        (WebKit::NetworkProcess::resume): Deleted.
        * NetworkProcess/NetworkProcess.h:

2022-03-15  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r291191): [iOS] ASSERTION FAILED: m_contentsBufferHandle in WebKit::RemoteLayerBackingStore::paintContents()
        https://bugs.webkit.org/show_bug.cgi?id=237922

        Reviewed by Geoffrey Garen.

        The assertion added in r291191 is incorrect. With that change, we end up calling
        RemoteLayerBackingStore::paintContents() on WebGL layers (which use delegated display)
        when we used to just early return from display(). So it's OK for m_frontBuffer.imageBuffer
        to be null on these layers.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::paintContents):

2022-03-15  Eric Carlson  <eric.carlson@apple.com>

        Video poster disappears prematurely on play, leaving transparent video element.
        https://bugs.webkit.org/show_bug.cgi?id=226960
        <rdar://problem/79315114>

        Reviewed by Jer Noble.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote): Always log.
        (WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote): Ditto.
        (WebKit::MediaPlayerPrivateRemote::prepareForPlayback): Pass the player's content
        rect box to createVideoLayerRemote so it can be sized correctly even before it
        becomes visible.
        (WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable): Always log.
        (WebKit::MediaPlayerPrivateRemote::renderingModeChanged): Ditto.
        * WebProcess/GPU/media/VideoLayerRemote.h:

        * WebProcess/GPU/media/cocoa/VideoLayerRemoteCocoa.mm:
        (WebKit::createVideoLayerRemote): Set the new layer's frame so its children will
        be positioned correctly when the are made visible.

2022-03-15  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] Migrate from WTF::Function to WTF::CompletionHandler
        https://bugs.webkit.org/show_bug.cgi?id=237925

        Reviewed by Geoffrey Garen.

        * GPUProcess/graphics/WebGPU/RemoteAdapter.cpp:
        (WebKit::RemoteAdapter::requestDevice):
        * GPUProcess/graphics/WebGPU/RemoteAdapter.h:
        * GPUProcess/graphics/WebGPU/RemoteBuffer.cpp:
        (WebKit::RemoteBuffer::mapAsync):
        * GPUProcess/graphics/WebGPU/RemoteBuffer.h:
        * GPUProcess/graphics/WebGPU/RemoteDevice.cpp:
        (WebKit::RemoteDevice::createComputePipelineAsync):
        (WebKit::RemoteDevice::createRenderPipelineAsync):
        (WebKit::RemoteDevice::popErrorScope):
        * GPUProcess/graphics/WebGPU/RemoteDevice.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/graphics/WebGPU/RemoteQueue.cpp:
        (WebKit::RemoteQueue::onSubmittedWorkDone):
        * GPUProcess/graphics/WebGPU/RemoteQueue.h:
        * GPUProcess/graphics/WebGPU/RemoteShaderModule.cpp:
        (WebKit::RemoteShaderModule::compilationInfo):
        * GPUProcess/graphics/WebGPU/RemoteShaderModule.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteAdapterProxy.cpp:
        (WebKit::WebGPU::RemoteAdapterProxy::requestDevice):
        * WebProcess/GPU/graphics/WebGPU/RemoteAdapterProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteBufferProxy.cpp:
        (WebKit::WebGPU::RemoteBufferProxy::mapAsync):
        * WebProcess/GPU/graphics/WebGPU/RemoteBufferProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.cpp:
        (WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync):
        (WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync):
        (WebKit::WebGPU::RemoteDeviceProxy::popErrorScope):
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.cpp:
        (WebKit::RemoteGPUProxy::requestAdapter):
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteQueueProxy.cpp:
        (WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone):
        * WebProcess/GPU/graphics/WebGPU/RemoteQueueProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteShaderModuleProxy.cpp:
        (WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo):
        * WebProcess/GPU/graphics/WebGPU/RemoteShaderModuleProxy.h:

2022-03-15  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Mock UI interactions whenever virtual authenticators are in use.
        https://bugs.webkit.org/show_bug.cgi?id=237856
        rdar://problem/90274854

        Reviewed by Brent Fulgham.

        Tested by wpt's webauthn tests.

        * UIProcess/WebAuthentication/AuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::runPanel):
        (WebKit::VirtualAuthenticatorManager::selectAssertionResponse):
        (WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:

2022-03-15  Chris Dumez  <cdumez@apple.com>

        Make it clearer in the loading logging when it is for the main frame or not
        https://bugs.webkit.org/show_bug.cgi?id=237913

        Reviewed by Alex Christensen.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::willPerformClientRedirectForFrame):
        (WebKit::WebPageProxy::didCancelClientRedirectForFrame):
        (WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::didFinishDocumentLoadForFrame):
        (WebKit::WebPageProxy::didFinishLoadForFrame):
        (WebKit::WebPageProxy::didFailLoadForFrame):
        (WebKit::WebPageProxy::didSameDocumentNavigationForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::didPerformClientRedirectShared):

2022-03-15  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteGraphicsContextGLProxy omits context lost checks for back and front buffer access functions
        https://bugs.webkit.org/show_bug.cgi?id=237891

        Reviewed by Myles Maxfield.

        Add missing isContextLost() checks to RemoteGraphicsContextGLProxy functions.
        WebGLRenderingContextBase would call as follows:
        void WebGLRenderingContextBase::paintRenderingResultsToCanvas()
        {
            if (isContextLostOrPending())
                return;
            ...
            m_context->prepareForDisplay();
            ...
            m_context->paintCompositedResultsToCanvas();
        }

        The context may be ok during the first check but then fail later,
        and so all the context functions need to check for validity.

        No new tests, testing hooks need non-trivial implementation.
        This is tracked in bug 237891.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintRenderingResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia):

2022-03-15  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] Allow for scheduling asynchronous work
        https://bugs.webkit.org/show_bug.cgi?id=237755

        Reviewed by Kimmo Kinnunen.

        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGPUForWebGPU const):

2022-03-15  Chris Dumez  <cdumez@apple.com>

        Fix logging in GPUProcessProxy::didCreateContextForVisibilityPropagation()
        https://bugs.webkit.org/show_bug.cgi?id=237907

        Reviewed by Simon Fraser.

        LayerHostingContextID is a uint32_t. The current printing ends up logging negative values:
        `GPUProcessProxy::didCreateContextForVisibilityPropagation: webPageProxyID: 7, pagePID: 79, contextID: -2041854761`

        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation):

2022-03-15  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Indefinite hang when printing using a UIPrintPageRenderer
        https://bugs.webkit.org/show_bug.cgi?id=237835
        rdar://90002387

        Reviewed by Devin Rousso.

        r290186 adopted UIKit API to support printing web content on a
        background thread, to avoid blocking the main thread while waiting
        on PDF data from the web process. However, the changes made the
        assumption that, with the new API, all printing would be performed on
        a background thread. While this is the case when using
        UIPrintInteractionController, clients can also print using
        UIPrintPageRenderer on the main thread. The background thread logic
        waits on a semaphore, until PDF data is received on the main thread.
        However, if the logic runs on the main thread, it will wait on the
        semaphore indefinitely.

        To fix, restore the original sync IPC codepath when performing printing
        on the main thread. Additionally, make the BinarySemaphore a
        unique_ptr, so that it can be signalled and reset in failure scenarios,
        regardless of whether a thread was waiting on the semaphore. This
        change also allows us to avoid creating the BinarySemaphore unless it
        is actually needed.

        All uses of HAVE(UIKIT_BACKGROUND_THREAD_PRINTING) are removed, as the
        API adoption only involves a method override, which is harmless in
        builds that lack support for the new API.

        * UIProcess/WebPageProxy.h:
        * UIProcess/_WKWebViewPrintFormatter.mm:
        * UIProcess/_WKWebViewPrintFormatterInternal.h:
        * UIProcess/ios/WKContentView.mm:
        (-[WKContentView _processDidExit]):
        (-[WKContentView _wk_pageCountForPrintFormatter:]):
        (-[WKContentView _waitForDrawToPDFCallbackIfNeeded]):
        (-[WKContentView _wk_printedDocument]):
        * UIProcess/ios/WKPDFView.mm:
        * UIProcess/ios/WebPageProxyIOS.mm:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:

2022-03-15  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add required syscall
        https://bugs.webkit.org/show_bug.cgi?id=237846
        <rdar://90249455>

        Reviewed by Brent Fulgham.

        Add required syscall to the WebContent process' sandbox on macOS.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-15  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Adopt AVAssetPrefersSandboxedParsingOptionKey
        https://bugs.webkit.org/show_bug.cgi?id=237832
        <rdar://89029829>

        Reviewed by Eric Carlson.

        Propogate the `prefersSandboxedParsing()` property across to the GPU process.

        * GPUProcess/media/RemoteMediaPlayerProxy.h:
        * GPUProcess/media/RemoteMediaPlayerProxyConfiguration.h:
        (WebKit::RemoteMediaPlayerProxyConfiguration::encode const):
        (WebKit::RemoteMediaPlayerProxyConfiguration::decode):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):

2022-03-15  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] Tooltip no longer disappears after leaving hovered element
        https://bugs.webkit.org/show_bug.cgi?id=237815
        rdar://90187247

        Reviewed by Tim Horton.

        On certain versions of macOS, AppKit's tooltip management system installs tracking areas (NSTrackingArea) using
        `-addTrackingArea:` instead of tracking rects. This breaks our existing mechanism for keeping track of the
        current tracking rect owner by overriding `-addTrackingRect:owner:userData:assumeInside:` (which assumes that
        the only client that adds tracking rects is the tooltip manager). Since `-addTrackingRect:` isn't called,
        `m_trackingRectOwner` remains nil, which causes both `sendToolTipMouseExited()` and `sendToolTipMouseEntered()`
        to be no-ops.

        To fix this, in the case where `m_trackingRectOwner` is nil, we instead fall back on `-[WKWebView trackingAreas]`
        and look for an NSTrackingArea that's owned by AppKit's NSToolTipManager. We then send fake mouse enter/exit
        events to this owner, the same way as we currently do.

        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::addTrackingRect):
        (WebKit::WebViewImpl::addTrackingRectWithTrackingNum):
        (WebKit::WebViewImpl::addTrackingRectsWithTrackingNums):
        (WebKit::WebViewImpl::toolTipTrackingAreaOwner const):
        (WebKit::WebViewImpl::sendToolTipMouseExited):
        (WebKit::WebViewImpl::sendToolTipMouseEntered):

2022-03-15  Youenn Fablet  <youenn@apple.com>

        Mark permission as denied if system forbids access to camera and/or microphone
        https://bugs.webkit.org/show_bug.cgi?id=237823

        Reviewed by Eric Carlson.

        If application has not set the camera/microphone usage string, we do not need to call ther permission delegate.
        Ditto if TCC prompt is denied. Instead, we can return deny if possible or prompt otherwise.
        Covered by API test.

        * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
        * UIProcess/UserMediaPermissionRequestManagerProxy.h:
        * UIProcess/WebPageProxy.cpp:

2022-03-15  Youenn Fablet  <youenn@apple.com>

        Rename VideoSampleMetadata to VideoFrameTimeMetadata
        https://bugs.webkit.org/show_bug.cgi?id=237593

        Reviewed by Eric Carlson.

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailable):
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV):
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoFrameAvailable):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        (WebKit::RemoteRealtimeVideoSource::videoSampleAvailable):
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:

2022-03-14  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Mail Compose] Spelling and grammar context menu items need custom identifiers
        https://bugs.webkit.org/show_bug.cgi?id=237804
        rdar://90124049

        Reviewed by Aditya Keerthi.

        Introduce several new context menu item identifier strings that correspond to the default spelling and grammar
        menu items that appear when showing the context menu for editable content, such that Mail can replace or
        customize behaviors around these items in compose, via WKUIDelegate.

        Test: ContextMenuTests.ProposedMenuContainsSpellingMenu

        * UIProcess/API/Cocoa/WKMenuItemIdentifiers.mm:
        * UIProcess/API/Cocoa/WKMenuItemIdentifiersPrivate.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::menuItemIdentifier):

2022-03-14  Antoine Quint  <graouts@webkit.org>

        [model] <model interactive> doesn't allow model to be rotated on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237831
        rdar://89698247

        Reviewed by Simon Fraser.

        Remove the call to set userInteractionEnabled on the WKModelView when created. This property
        is now set via the layer tree application code from the GraphicsLayer::userInteractionEnabled()
        value.

        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView initWithModel:]):

2022-03-14  Simon Fraser  <simon.fraser@apple.com>

        Do a single IPC for MarkSurfaceNonVolatile and SwapToValidFrontBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237814

        Reviewed by Tim Horton.

        Now that we know how to group the calls to markSurfaceNonVolatile() followed by
        swapToValidFrontBuffer(), we can do them with a single sync IPC to the GPU process, passing
        supportsPartialRepaint and hasEmptyDirtyRegion.

        RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers() takes
        care to avoid IPCs for layers which don't need display, which is important for performance.

        Introduce the SwapBuffersDisplayRequirement enum which is returned, and used to know if
        we have to do a full repaint.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::prepareBuffersForDisplay):
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile): Deleted.
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer): Deleted.
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        (WebKit::RemoteLayerBackingStore::hasEmptyDirtyRegion const):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::operator<<):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoreBuffers):
        (WebKit::RemoteLayerBackingStoreCollection::makeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerBackingStoreCollection::swapToValidFrontBuffer): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::swapToValidFrontBuffer): Deleted.
        * Shared/RemoteLayerTree/SwapBuffersDisplayRequirement.h: Added.
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::prepareBuffersForDisplay):
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer): Deleted.
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile): Deleted.
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-03-14  Alex Christensen  <achristensen@webkit.org>

        Revert r290659
        https://bugs.webkit.org/show_bug.cgi?id=237296

        It caused a performance regression.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-03-14  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291206.
        https://bugs.webkit.org/show_bug.cgi?id=237829

        Introduced perf regression

        Reverted changeset:

        "Adjust when
        _setPrivacyProxyFailClosedForUnreachableNonMainHosts is
        called"
        https://bugs.webkit.org/show_bug.cgi?id=237735
        https://commits.webkit.org/r291206

2022-03-14  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL context should use discrete gpu if the context is created when the window is on external monitor, ANGLE Metal backend
        https://bugs.webkit.org/show_bug.cgi?id=236487

        Reviewed by Kenneth Russell.

        Before, the ChromeClient passed PlatformDisplayID to the createGraphicsContextGL. This was ignored.
        After, pass the PlatformGPUID as part of GraphicsContextGLAttributes. 

        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGraphicsContextGL const):
        * WebProcess/WebCoreSupport/WebChromeClient.h:

2022-03-12  Simon Fraser  <simon.fraser@apple.com>

        In RemoteLayerBackingStore, group makeFrontBufferNonVolatile() and swapToValidFrontBuffer() into a single function
        https://bugs.webkit.org/show_bug.cgi?id=237806

        Reviewed by Tim Horton.

        As a step towards reducing the number of sync IPC calls when displaying layers, refactor
        code in RemoteLayerBackingStore so that we can do the makeFrontBufferNonVolatile()
        and swapToValidFrontBuffer() in a single function. Its return value indicates whether
        we need to do any display, or a full display.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::operator<<):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        (WebKit::RemoteLayerBackingStore::paintContents): Fix an assertion that fired for WebGL.
        (WebKit::RemoteLayerBackingStore::swapBuffers): Deleted.

2022-03-12  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291209.
        https://bugs.webkit.org/show_bug.cgi?id=237811

        Re-land 290754 due to mis-blaming

        Reverted changeset:

        "Unreviewed, reverting r290754."
        https://bugs.webkit.org/show_bug.cgi?id=237808
        https://commits.webkit.org/r291209

2022-03-12  Tim Horton  <timothy_horton@apple.com>

        Adopt FALLBACK_PLATFORM_NAME in place of FALLBACK_PLATFORM
        https://bugs.webkit.org/show_bug.cgi?id=237809

        Reviewed by Per Arne Vollan.

        * Configurations/SDKVariant.xcconfig:

2022-03-12  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290754.
        https://bugs.webkit.org/show_bug.cgi?id=237808

        Introduced launch regression

        Reverted changeset:

        "[iOS] Seatbelt sandbox profile entitlement is deprecated"
        https://bugs.webkit.org/show_bug.cgi?id=237374
        https://commits.webkit.org/r290754

2022-03-11  Alex Christensen  <achristensen@webkit.org>

        Adjust when _setPrivacyProxyFailClosedForUnreachableNonMainHosts is called
        https://bugs.webkit.org/show_bug.cgi?id=237735
        <rdar://89972004>

        Reviewed by Geoff Garen.

        It was originally being called differently between main resources and subresources on the same domain,
        causing them to use connections with different properties, so we couldn't share connections any more.
        This will make it so that more connections are shared, which should fix the performance regression from
        no longer sharing connections to the same domain.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Unreviewed logging removal.

        Revert an ALWAYS_LOG_WITH_STREAM() that I inadvertently committed back to a
        LOG_WITH_STREAM().

        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):

2022-03-11  Chris Dumez  <cdumez@apple.com>

        IPC thread's QOS should match the sending thread's QOS when calling sendSync()
        https://bugs.webkit.org/show_bug.cgi?id=237800
        <rdar://problem/90061548>

        Reviewed by Geoffrey Garen.

        IPC thread's QOS should match the sending thread's QOS when calling sendSync(), since it blocks the calling thread.

        * Platform/IPC/Connection.cpp:
        (IPC::Connection::sendSyncMessage):

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Move RemoteLayerBackingStore flusher creation into RemoteLayerBackingStoreCollection
        https://bugs.webkit.org/show_bug.cgi?id=237798

        Reviewed by Tim Horton.

        Move the code that creates layer flushers from RemoteLayerTreeDrawingArea into
        RemoteLayerBackingStoreCollection, per the FIXME.

        RemoteLayerBackingStoreCollection::didFlushLayers() then becomes internal, and gets renamed
        to updateUnreachableBackingStores(). Now we only need to schedule the volatility timer from
        one place.

        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::didFlushLayers):
        (WebKit::RemoteLayerBackingStoreCollection::updateUnreachableBackingStores):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::updateRendering):

2022-03-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        Refactor the filter block in DocumentMarkerController::filterMarkers() to return an enum type
        https://bugs.webkit.org/show_bug.cgi?id=237794

        Reviewed by Megan Gardner.

        Drive-by fix: only remove the spellchecking document marker in `removeAnnotationRelativeToSelection` if the
        annotation string of the marker matches the given annotation string to the method.

        * WebProcess/WebPage/Cocoa/TextCheckingControllerProxy.mm:
        (WebKit::TextCheckingControllerProxy::removeAnnotationRelativeToSelection):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::clearDictationAlternatives):

2022-03-11  Alex Christensen  <achristensen@webkit.org>

        Finish implementing modify-headers actions for WKContentRuleList SPI
        https://bugs.webkit.org/show_bug.cgi?id=237784
        <rdar://72433048>

        Reviewed by Tim Hatcher.

        * UIProcess/API/APIContentRuleListStore.h:

2022-03-11  Nikolaos Mouchtaris  <nmouchtaris@apple.com>

        [iOS] Fix ovserscroll-behavior for main document
        https://bugs.webkit.org/show_bug.cgi?id=237696

        Reviewed by Simon Fraser.

        Get value of over scroll behavior from root scrolling node to set whether root 
        UIScrollView should rubber band or not. Add new UIScrollView SPI.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _updateScrollViewForTransaction:]):
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp:
        (WebKit::RemoteScrollingCoordinatorProxy::rootNode const):
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.h:
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.h:
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior):
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren):

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Unreviewed build fix after r291177
        https://bugs.webkit.org/show_bug.cgi?id=237797
        rdar://problem/90183881

        Remove unused move that is breaking iOS build

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Do buffer swapping on all RemoteLayerBackingStores before painting all of them
        https://bugs.webkit.org/show_bug.cgi?id=237752

        Reviewed by Tim Horton.

        Buffer swapping requires sync IPC with the GPU Process, but painting can be asynchronous, so
        do all the sync IPC before all the async IPC to avoid serializing everything.

        During the recursive PlatformCALayerRemote::recursiveBuildTransaction() we now call
        prepareToDisplay() which does the buffer swapping, and then we paint all the reachable
        backing stores via RemoteLayerTreeContext::buildTransaction().

        This is a 9% perf improvement on the "Images" MotionMark subtest.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::display): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents):
        (WebKit::RemoteLayerBackingStoreCollection::didFlushLayers): The local variables can
        be pointers, rather than using references to pointers.
        (WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile): Ditto
        * WebProcess/WebPage/RemoteLayerTree/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::recursiveBuildTransaction):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeContext.mm:
        (WebKit::RemoteLayerTreeContext::buildTransaction):

2022-03-11  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Image decoders should be restricted for Mail
        https://bugs.webkit.org/show_bug.cgi?id=237717
        <rdar://89827733>

        Reviewed by Geoffrey Garen.

        We already restrict image decoders for Mail on iOS. We should do so on macOS too.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::platformInitializeWebProcess):
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-11  Chris Dumez  <cdumez@apple.com>

        Delay responsiveness checks for the Network Process until it has finished initialization
        https://bugs.webkit.org/show_bug.cgi?id=237782
        <rdar://88226412>

        Reviewed by Geoffrey Garen.

        Delay responsiveness checks for the Network Process until it has finished initialization.
        Network process initialization can be slow but we have evidence that it is not truly
        hung since we see network process terminations right as the network process is initiating
        the WebProcess connection later on.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::initializeNetworkProcess):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::didFinishLaunching):
        (WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks):
        (WebKit::AuxiliaryProcessProxy::startResponsivenessTimer):
        * UIProcess/AuxiliaryProcessProxy.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::didFinishLaunching):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.cpp:
        (WebKit::WebAuthnProcessProxy::didFinishLaunching):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didFinishLaunching):

2022-03-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for -[UITextInput removeEmojiAlternatives] on WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=237742
        rdar://89647018

        Reviewed by Kate Cheney.

        Add support for `-removeEmojiAlternatives`, which removes all dictation alternatives at the current selection,
        whose text alternative strings only contain emojis. See below for more details.

        * Platform/spi/ios/TextInputSPI.h:
        * UIProcess/Cocoa/PageClientImplCocoa.h:
        * UIProcess/Cocoa/PageClientImplCocoa.mm:
        (WebKit::PageClientImplCocoa::replaceDictationAlternatives):

        Add PageClient plumbing to the new AlternativeTextUIController methods in WebCore to replace an existing
        dictation context's text alternatives.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::dictationAlternativesAtSelection):

        We expand the selection range by one character here since `DocumentMarkerController::markersInRange()` does not
        include document markers that end exactly at the given range.

        (WebKit::WebPageProxy::clearDictationAlternatives):

        Add two helper methods on WebPageProxy: one to query all dictation alternative identifiers that intersect with
        the current selection range, and another to remove all dictation alternative document markers whose
        DictationContext matches an identifier in a given list of identifiers.

        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView removeEmojiAlternatives]):

        Implement the new SPI method with a two-step process:

        1.  Request the list of dictation context IDs at the selection; for each ID, we either (a) replace the text
            alternatives for that context ID with a new NSTextAlternatives object that doesn't have any of the emoji-
            only alternatives that appear in the original NSTextAlternatives, or (b) remove the NSTextAlternatives and
            dictation context ID mapping entirely, if all the alternatives only contain emojis.

        2.  For all the text alternatives that were removed in step 1 (due to only containing emojis), clear out all
            document markers corresponding to those text alternatives in the document.

        * WebProcess/WebPage/Cocoa/TextCheckingControllerProxy.mm:
        (WebKit::TextCheckingControllerProxy::removeAnnotationRelativeToSelection):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::dictationAlternativesAtSelection):
        (WebKit::WebPage::clearDictationAlternatives):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Some minor refactoring in RemoteLayerBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=237749

        Reviewed by Tim Horton.

        Simplify RemoteLayerBackingStore a little, primarily to push the setNeedsDisplay() calls
        when swapToValidFrontBuffer() returns WebCore::SetNonVolatileResult::Empty out to the
        callers, so it's clearer when m_dirtyRegion gets mutated.

        In order to pass SetNonVolatileResult around more, change setBufferVolatility(bool) into
        setBufferVolatile() and setFrontBufferNonVolatile(), which makes it clear that we only ever
        set the front buffer to non-volatile.

        Also move the call to clearBackendHandle() into
        RemoteLayerWithRemoteRenderingBackingStoreCollection, since it's about GPU process.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::swapToValidFrontBuffer):
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::swapBuffers):
        (WebKit::RemoteLayerBackingStore::setContents):
        (WebKit::RemoteLayerBackingStore::display):
        (WebKit::RemoteLayerBackingStore::paintContents):
        (WebKit::RemoteLayerBackingStore::setBufferVolatile):
        (WebKit::RemoteLayerBackingStore::setFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::willMakeBufferVolatile): Deleted.
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerBackingStore::setBufferVolatility): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStoreCollection::swapToValidFrontBuffer):
        (WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatile):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::swapToValidFrontBuffer):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::collectBackingStoreBufferIdentifiersToMarkVolatile):

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Cancel running operations in ASA on navigation
        https://bugs.webkit.org/show_bug.cgi?id=237452
        rdar://problem/89781990

        Reviewed by Brent Fulgham.

        Pre-ASA WebAuthn calls cancel requests on navigation via calling authenticatorManager.cancelRequest
        in WebPageProxy. In WebAuthn calls that go through ASA, the authenticatorManager lives in the ASA
        process, so calls won't be cancelled on navigation.

        This patch attempts to cancel ongoing operations whenever a WebAuthenticatorCoordinatorProxy that
        uses ASA is destroyed, effectively cancelling requests on reload or navigation.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support authenticatorSelection.residentKey ResidentKeyRequirement
        https://bugs.webkit.org/show_bug.cgi?id=237567
        rdar://89788378

        Reviewed by Brent Fulgham and Chris Dumez.

        In Web Authentication level one, relying parties can specify authenticatorSelection.residentKeyRequired,
        to signify they require a client-side discoverable credential. However, if the authenticator does not
        support client-side discoverable credentials, the rp has no way to clarify they want a client-side
        discoverable credential only if available.

        This patch implements authenticatorSelection.residentKeyRequired introduced in level 2, which has three
        values 'Preferred', 'Required', and 'Discouraged'. This allows RPs to create a client-side discoverable
        credential if possible.

        * UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.h:
        * UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.mm:
        (-[_WKAuthenticatorSelectionCriteria init]):
        * UIProcess/API/Cocoa/_WKResidentKeyRequirement.h: Copied from Source/WebKit/UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.mm.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (residentKey):
        (authenticatorSelectionCriteria):
        (+[_WKWebAuthenticationPanel encodeMakeCredentialCommandWithClientDataJSON:options:userVerificationAvailability:]):
        (+[_WKWebAuthenticationPanel encodeMakeCredentialCommandWithClientDataHash:options:userVerificationAvailability:]):
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.cpp:
        (WebKit::CtapAuthenticator::makeCredential):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-11  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] DrawingAreaWC::sendUpdateAC should keep a WeakPtr of this for the reply handler
        https://bugs.webkit.org/show_bug.cgi?id=237757

        Reviewed by Don Olmstead.

        WinCairo Release was crashing by visiting some random web sites
        for several minutes. The reply handler in
        DrawingAreaWC::sendUpdateAC should check that `this` object is
        still alive with `weakThis`.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::sendUpdateAC): Capture weakThis for the
        reply handler and check it.

2022-03-11  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add required sys call to sandbox
        https://bugs.webkit.org/show_bug.cgi?id=237739

        Reviewed by Chris Dumez.

        Add a rarely used, but required syscall, to the WebContent process sandbox on macOS.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-11  Youenn Fablet  <youenn@apple.com>

        Do capture video frame downsampling in GPUProcess
        https://bugs.webkit.org/show_bug.cgi?id=237316
        <rdar://problem/89959777>

        Reviewed by Eric Carlson.

        Instead of cloning within WebProcess, we know clone in GPUProcess for camera tracks.
        This allows to keep using IOSurfaces when several tracks are using the same device with different resolutions.
        Since display tracks are already cloned remotely, we can merge RemoteRealtimeDisplaySource and RemoteRealtimeVideoSource.

        We no longer need to stop the source in ~SourceProxy given we are removing ourselves from observing the source.
        We rename UserMediaCaptureManagerProxy end to remove  and requestToEnd to endProducingData.

        * SourcesCocoa.txt:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.cpp: Removed.
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h: Removed.
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:

2022-03-10  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Add a unit tests to check the remote inspector HTTP server
        https://bugs.webkit.org/show_bug.cgi?id=237708

        Reviewed by Michael Catanzaro.

        Ensure we close the socket if it's still open when the remote inspector client is destroyed.

        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::~RemoteInspectorClient):

2022-03-11  Diego Pino Garcia  <dpino@igalia.com>

        [GLIB] Debian Stable & Ubuntu LTS build is failing after r291093
        https://bugs.webkit.org/show_bug.cgi?id=237756

        Reviewed by Carlos Garcia Campos.

        Use `soup_websocket_connection_send_message` when SOUP < 2.67.3.

        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.cpp:

2022-03-11  Tim Horton  <timothy_horton@apple.com>

        Disable WebGL and DOM GPU process when some dependencies are unavailable
        https://bugs.webkit.org/show_bug.cgi?id=237700
        <rdar://problem/88735051>

        Reviewed by Eric Carlson.

        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultUseGPUProcessForDOMRenderingEnabled):
        (WebKit::defaultUseGPUProcessForWebGLEnabled):

2022-03-10  Sihui Liu  <sihui_liu@apple.com>

        Abandoned memory in NetworkStorageManager::m_temporaryBlobPathsByConnection
        https://bugs.webkit.org/show_bug.cgi?id=237734

        Reviewed by Chris Dumez.

        Remove items from m_temporaryBlobPathsByConnection when connection is closed.

        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::stopReceivingMessageFromConnection):

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Fix naming in NetworkProcessProxy::registerRemoteWorkerClientProcess()
        https://bugs.webkit.org/show_bug.cgi?id=237737

        Reviewed by Geoffrey Garen.

        Fix naming in NetworkProcessProxy::registerRemoteWorkerClientProcess() to store referring to
        shared workers and add logging.

        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess):
        (WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:

2022-03-10  Michael Saboff  <msaboff@apple.com>

        Catalyst JavaScriptCore, WebCore, WebKitLegacy, and WebKit shouldn't be copied to the Secondary Path
        https://bugs.webkit.org/show_bug.cgi?id=237748

        Reviewed by Mark Lam.

        Updated the configuration to exclude copying Catalyst build products to the secondary path.

        * Configurations/Base.xcconfig:

2022-03-10  Chris Dumez  <cdumez@apple.com>

        [macOS] WebContent processes crash with XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out
        https://bugs.webkit.org/show_bug.cgi?id=237398
        <rdar://88940229>

        Reviewed by Alexey Proskuryakov.

        Because we don't use RunningBoard on macOS, we leak an OS transaction to control the lifetime of our XPC
        services ourselves. However, one of the side effects of leaking this transaction is that the default SIGTERM
        handler doesn't cleanly exit our XPC services when logging out or rebooting. This led to crashes with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT as termination reason (rdar://88940229).

        To address the issue, we now set our own SIGTERM handler that calls _exit(0) to exit cleanly. In the future,
        we should likely adopt RunningBoard on macOS and control our lifetime via process assertions instead of
        leaking this OS transaction.

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::setOSTransaction):
        (WebKit::XPCServiceExit):
        (WebKit::osTransaction): Deleted.

2022-03-10  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for -[UITextInput addTextAlternatives:] on WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=237691
        rdar://89647018

        Reviewed by Aditya Keerthi.

        Work towards refactoring support for dictation alternatives on iOS; this patch adds support for an optional,
        private UITextInput protocol method on WKContentView, which clients can use to directly insert
        NSTextAlternatives for a given string of matching text (i.e., if the given string matches text at or before the
        current selection range).

        Tests:  TextAlternatives.AddTextAlternativesWithMatch
                TextAlternatives.AddTextAlternativesWithSelectedMatch
                TextAlternatives.AddTextAlternativesWithoutMatch

        * Scripts/webkit/messages.py:
        (headers_for_type):

        Add support for sending WebCore::DictationContext as an IPC message argument.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addDictationAlternative):

        Register the dictation alternative (NSTextAlternative) on the page client, and send a message to the web process
        to try and insert document markers corresponding to this dictation alternative. If, for whatever reason, we fail
        to map dictation alternatives to an editable DOM range, make sure we automatically unregister this text
        alternative as well.

        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView addTextAlternatives:]):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::addDictationAlternative):

        Given a string to match and a dictation alternative identifier context, try to search for the matching string
        before (or in) the selection; if found, install the dictation alternatives in the match range, as a document
        marker.

        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-10  Jean-Yves Avenard  <jya@apple.com>

        MediaSampleCursor should iterate over the samples contained in the MediaSamplesBlock
        https://bugs.webkit.org/show_bug.cgi?id=237677
        rdar://80869041

        Reviewed by Eric Carlson.

        No change in observable behaviour for now, as the current code can't
        produce MediaSamplesBlock with more than one sub-sample.
        Tests will be added in bug 236754.

        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h:
        * Shared/mac/MediaFormatReader/MediaSampleCursor.cpp:
        (WebKit::stepIterator):
        (WebKit::MediaSampleCursor::MediaSampleCursor):
        (WebKit::MediaSampleCursor::locateIterator const):
        (WebKit::MediaSampleCursor::setLocator const):
        (WebKit::MediaSampleCursor::locateMediaSample const):
        (WebKit::MediaSampleCursor::locateTiming const):
        (WebKit::MediaSampleCursor::stepInOrderedMap):
        (WebKit::MediaSampleCursor::stepInPresentationTime):
        (WebKit::MediaSampleCursor::getMediaSample const):
        (WebKit::MediaSampleCursor::getSyncInfo const):
        (WebKit::MediaSampleCursor::copyFormatDescription const):
        (WebKit::MediaSampleCursor::copySampleLocation const):
        * Shared/mac/MediaFormatReader/MediaSampleCursor.h: The Locator type and
        the templated code making use of it makes use of strong assumptions that
        the iterator can only be made of one type or the other.
        As such, the originally obvious solution to expand the Locator type with
        a MediaSamplesBlock iterator ended up being overly complex.
        So instead we define an additional member m_currentEntry
        and will add all the logic handling in the stepIterator method.
        It should be noted that while the MediaSampleCursor implements all the
        methods of MTPluginSampleCursor; in practice only the following appear used:
        - stepInDecodeOrderAndReportStepsTaken
        - getSampleTiming
        - getSyncInfo
        - copyFormatDescription

2022-03-10  Kate Cheney  <katherine_cheney@apple.com>

        Markup dropdown menu not working in Mail compose
        https://bugs.webkit.org/show_bug.cgi?id=237726
        <rdar://problem/89777983>

        Reviewed by Wenson Hsieh.

        Partial revert of r290103. No need for standardShareMenu in the
        services menu case.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

2022-03-10  Chris Fleizach  <cfleizach@apple.com>

        AX: Support updated WebSpeech API
        https://bugs.webkit.org/show_bug.cgi?id=237614
        <rdar://problem/89981851>

        Reviewed by Andres Gonzalez.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::boundaryEventOccurred):
        * UIProcess/WebPageProxy.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::boundaryEventOccurred):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Optimize further the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237695

        Reviewed by Geoffrey Garen.

        Optimize further the passing of data across threads by leveraging the optimized
        version of isolatedCopy() on r-value references whenever possible.

        * NetworkProcess/NetworkSocketChannel.cpp:
        (WebKit::NetworkSocketChannel::didReceiveMessageError):
        * NetworkProcess/NetworkSocketChannel.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::fileSystemGetDirectory):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::dispatchMessageFromRemote):
        * UIProcess/Automation/WebAutomationSession.h:
        * UIProcess/Inspector/WebPageDebuggable.cpp:
        (WebKit::WebPageDebuggable::dispatchMessageFromRemote):
        * UIProcess/Inspector/WebPageDebuggable.h:
        * WebProcess/Cache/WebCacheStorageConnection.cpp:
        (WebKit::WebCacheStorageConnection::retrieveRecords):
        * WebProcess/Cache/WebCacheStorageConnection.h:
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::fail):
        (WebKit::WebSocketChannel::didReceiveText):
        (WebKit::WebSocketChannel::didReceiveMessageError):
        * WebProcess/Network/WebSocketChannel.h:
        * WebProcess/WebCoreSupport/WebStorageConnection.cpp:
        (WebKit::WebStorageConnection::getPersisted):
        (WebKit::WebStorageConnection::fileSystemGetDirectory):
        * WebProcess/WebCoreSupport/WebStorageConnection.h:

2022-03-10  Sihui Liu  <sihui_liu@apple.com>

        IndexedDB: free memory used by database connection on low-memory warning
        https://bugs.webkit.org/show_bug.cgi?id=237673

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::IDBStorageManager::handleLowMemoryWarning):
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::handleLowMemoryWarning):

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Unreviewed, reverting r290795.

        Caused crashes <rdar://problem/89970722>

        Reverted changeset:

        "[macOS] WebContent processes crash with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out"
        https://bugs.webkit.org/show_bug.cgi?id=237398
        https://commits.webkit.org/r290795

2022-03-10  Youenn Fablet  <youenn@apple.com>

        Remove RemoteVideoSample
        https://bugs.webkit.org/show_bug.cgi?id=237592

        Reviewed by Eric Carlson.

        Send RemoteVideoSample data directly as IPC message parameters instead of inside RemoteVideoSample.
        Fix timeStampNs by sending them back to WebProcess and divide them by 1000 to put them as milliseconds, as expected by libwebrtc backend.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailable):
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV):
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailable): Deleted.
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailableCV): Deleted.
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoSampleAvailable): Deleted.
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:

2022-03-10  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Add initial support for PDF documents using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237513

        Reviewed by Michael Catanzaro.

        Build PDF.js resources into the library.

        * PdfJSGResources.cmake: Added.
        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::canShowMIMEType): Claim to support PDF documents when PDF.js is enabled.
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::canShowMIMEType const): Ditto.

2022-03-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Web Inspector: make it possible to use the remote inspector from other browsers
        https://bugs.webkit.org/show_bug.cgi?id=237601

        Reviewed by Michael Catanzaro.

        This is no longer possible since we switched to the new remote inspector. We don't want to bring the legacy
        remote inspector back, but it should be possible to use a mixed approach, using a WebSocket for the inspector
        protocol communication, but still using the new remote inspector code. This patch adds a simple HTTP browser to
        server the inspector resources and open WebSocket connection to the inspector. It pretends to be a remote
        inspector client, so we don't need any change in the current remote inspector implementation. The server is only
        started when the env var WEBKIT_INSPECTOR_HTTP_SERVER is present, and the inspector server is started for the
        same host but using a free port.

        * PlatformWPE.cmake:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * UIProcess/API/glib/WebKitInitialize.cpp:
        (WebKit::initializeRemoteInspectorServer): Start the HTTP server if the env var WEBKIT_INSPECTOR_HTTP_SERVER is present.
        (WebKit::webkitInitialize): Just call initializeRemoteInspectorServer().
        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::handleRequest): Use RemoteInspectorClient::buildTargetListPage().
        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::inspect): Only call RemoteInspectorProxy::load() for UI inspector type.
        (WebKit::RemoteInspectorClient::buildTargetListPage const): Build the target list page, using message handlers
        for UI inspector and window.open for the HTTP inspector.
        * UIProcess/Inspector/glib/RemoteInspectorClient.h:
        (WebKit::RemoteInspectorClient::targets const): Deleted.
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.cpp: Added.
        (WebKit::RemoteInspectorHTTPServer::singleton):
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.h: Added.

2022-03-09  Megan Gardner  <megan_gardner@apple.com>

        Combine Lookup and Define.
        https://bugs.webkit.org/show_bug.cgi?id=237627
        rdar://26205225

        Reviewed by Tim Horton.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _defineForWebView:]):

2022-03-09  Per Arne Vollan  <pvollan@apple.com>

        The accessibility library should be soft linked optionally
        https://bugs.webkit.org/show_bug.cgi?id=236513

        Reviewed by Geoffrey Garen.

        The accessibility library should be soft linked optionally, since it is not always present.

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::handleAXPreferenceChange):
        (WebKit::AuxiliaryProcess::handlePreferenceChange):

2022-03-09  Don Olmstead  <don.olmstead@sony.com>

        [CMake] Associate platform specific configuration with WinCairo
        https://bugs.webkit.org/show_bug.cgi?id=237668

        Reviewed by Basuke Suzuki.

        Move all cairo and curl platform configuration under a check for WinCairo. This arranges
        platform config in a consistent manner.

        * PlatformWin.cmake:

2022-03-09  Sihui Liu  <sihui_liu@apple.com>

        File System Access: disallows names that are not permitted by underlying file system
        https://bugs.webkit.org/show_bug.cgi?id=237635
        rdar://89291566

        We use FileSystem::fileSystemRepresentation to convert input name to a name that is permitted in current file 
        system. This patch makes File System Access API to throw error if the input name does not match the converted 
        name. 

        Reviewed by Youenn Fablet.

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::isValidFileName):
        (WebKit::FileSystemStorageHandle::requestCreateHandle):
        (WebKit::FileSystemStorageHandle::removeEntry):
        (WebKit::FileSystemStorageHandle::move):

2022-03-09  Jon Lee  <jonlee@apple.com>

        Update feature flags for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237666
        rdar://problem/90040981

        Reviewed by Geoffrey Garen.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-watchos.plist:

2022-03-09  Simon Fraser  <simon.fraser@apple.com>

        Move RemoteLayerBackingStore::Buffer.isVolatile into ImageBufferBackend
        https://bugs.webkit.org/show_bug.cgi?id=237631

        Reviewed by Tim Horton.
        
        'isVolatile' is a property of a specific image buffer, so it makes more sense to have it in
        ImageBuffer[Backend] than RemoteLayerBackingStore. This also allows GPU Process code to
        maintain volatility state in the web process, which reduces the amount of IPC needed when
        making the front buffer non-volatile before display.

        So ImageBufferBackend gets volatilityState()/setVolatilityState(), accessed via ImageBuffer.
        This state is maintained by RemoteRenderingBackendProxy for remote buffers. We set the state
        to volatile when we receive the IPC reply for markSurfacesVolatile(), which requires
        changing the reply to list buffers for which making volatile was successful.

        RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile() can now
        early return when the buffer is already non-volatile, and we have a backend handle (recall
        that we clear backend handles when trying to make a buffer volatile).

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfacesVolatile):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::setBufferVolatile):
        (WebKit::RemoteLayerBackingStore::setBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::Buffer::discard):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::RemoteLayerWithRemoteRenderingBackingStoreCollection):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::collectBackingStoreBufferIdentifiersToMarkVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::sendMarkBuffersVolatile): Call the completion handler inside the callback.
        * WebProcess/GPU/graphics/ImageBufferBackendHandleSharing.h:
        (WebKit::ImageBufferBackendHandleSharing::hasBackendHandle const):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.cpp:
        (WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle const):
        (WebKit::ImageBufferRemoteIOSurfaceBackend::hasBackendHandle const):
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.h:

2022-03-09  Youenn Fablet  <youenn@apple.com>

        Allow to pass webrtc video frame buffers through RealtimeMediaSource based pipelines
        https://bugs.webkit.org/show_bug.cgi?id=236131
        <rdar://problem/88805580>

        Reviewed by Eric Carlson.

        Add optimization support for VideoFrameLibWebRTC writing into shared memory.
        This removes the need to convert the webrtc video frame into a CVPixelBuffer, just to send it to GPUProcess for rendering.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-09  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Improve WCTiledBacking and TextureMapperSparseBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=237355

        Reviewed by Don Olmstead.

        TextureMapperSparseBackingStore simply had a Vector to have all
        tiles. If a web page had a very large layer, the vector was
        extended to be able to keep all tiles, and it performed poorly.
        Use a HashMap to keep tiles only in the coverage rect.

        GraphicsLayerWC had only one dirty rect, and created a
        ImageBuffer for all tiles to update. Change it to have one dirty
        rect for one tile, and create a ImageBuffer for every dirty tile.

        * GPUProcess/graphics/wc/WCScene.cpp:
        (WebKit::WCScene::update):
        * PlatformWin.cmake:
        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::flushLayerImageBuffers):
        * WebProcess/WebPage/wc/GraphicsLayerWC.cpp:
        (WebKit::GraphicsLayerWC::setSize):
        (WebKit::GraphicsLayerWC::recursiveCommitChanges):
        * WebProcess/WebPage/wc/WCTileGrid.cpp: Added.
        (WebKit::WCTileGrid::Tile::Tile):
        (WebKit::WCTileGrid::Tile::addDirtyRect):
        (WebKit::WCTileGrid::Tile::clearDirtyRect):
        (WebKit::WCTileGrid::Tile::hasDirtyRect const):
        (WebKit::WCTileGrid::setSize):
        (WebKit::WCTileGrid::tileRectFromPixelRect):
        (WebKit::WCTileGrid::tileSizeFromPixelSize):
        (WebKit::WCTileGrid::tilePixelSize const):
        (WebKit::WCTileGrid::addDirtyRect):
        (WebKit::WCTileGrid::clearDirtyRects):
        (WebKit::WCTileGrid::ensureTile):
        (WebKit::WCTileGrid::setCoverageRect):
        * WebProcess/WebPage/wc/WCTileGrid.h: Added.
        (WebKit::WCTileGrid::Tile::willRemove const):
        (WebKit::WCTileGrid::Tile::setWillRemove):
        (WebKit::WCTileGrid::Tile::dirtyRect):
        (WebKit::WCTileGrid::tiles):
        * WebProcess/WebPage/wc/WCUpateInfo.h:
        (WebKit::WCTileUpdate::encode const):
        (WebKit::WCTileUpdate::decode):
        (WebKit::WCLayerUpateInfo::encode const):
        (WebKit::WCLayerUpateInfo::decode):

2022-03-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Stop using the env var WEBKIT_INSPECTOR_SERVER to connect to the inspector
        https://bugs.webkit.org/show_bug.cgi?id=237646

        Reviewed by Adrian Perez de Castro.

        Use it only in the UI process to start the server, but propagate the address to web process using creation
        parameters.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const): Encode inspectorServerAddress.
        (WebKit::WebProcessCreationParameters::decode): Decode inspectorServerAddress.
        * Shared/WebProcessCreationParameters.h: Add inspectorServerAddress.
        * UIProcess/API/glib/WebKitInitialize.cpp:
        (WebKit::initializeRemoteInspectorServer): Set RemoteInspector::s_inspectorServerAddress if the server started
        successfully.
        * UIProcess/glib/WebProcessPoolGLib.cpp:
        (WebKit::WebProcessPool::platformInitializeWebProcess): Set inspectorServerAddress parameter from
        RemoteInspector::s_inspectorServerAddress value.
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::platformInitializeWebProcess): Set RemoteInspector::s_inspectorServerAddress from creation
        parameter value.

2022-03-09  Youenn Fablet  <youenn@apple.com>

        Scope capture sources by page identifiers
        https://bugs.webkit.org/show_bug.cgi?id=237359

        Reviewed by Eric Carlson.

        Pass PageIdentifier where appropriate.
        Make use of PageIdentifier in UserMediaCaptureManagerProxy:
        - For microphone, if there is a source with a different device,
          fail the source as we are not yet supporting concurrent captures.
        - For camera, if there is a source with a different device,
          fail the source as we are not yet supporting concurrent captures (only on iOS).
          Otherwise, if there is a matching source, clone it so that we reduce the overhead
          of creating a new source (setting up a camera can be an expensive operation).
        We silently fail (meaning there is no console log message for now, while still firing ended event) but add release logging to detect this case.
        Minor refactoring to have one message in case capture source ends (stopped or failing) instead of two.

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSource.cpp:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSource.h:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSourceManager.cpp:
        * UIProcess/WebPageProxy.cpp:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.cpp:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.h:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.cpp:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:
        * WebProcess/cocoa/UserMediaCaptureManager.messages.in:

2022-03-08  Jean-Yves Avenard  <jya@apple.com>

        Have MediaFormatReader plugin use WebMParser directly
        https://bugs.webkit.org/show_bug.cgi?id=237594
        rdar://89960307

        Reviewed by Eric Carlson.

        Directly build the sample tables from the sample's offset/size without
        first build MediaSampleAVFObjC objects.
        The MTPluginByteSourceRef interface unfortunately doesn't allow to skip a
        given number of bytes, and you must read the content into a buffer to be
        able to continue reading the resource.
        As such, we continue to have to create SharedBuffer objects for each sample.
        However, those objects are now much shorter lived and not dispatched to
        other work queues. So the peak memory usage when playing a webm is
        significantly reduced: a 50% memory reduction (from 440MB to 202MB with a sample video)

        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        (WebKit::MediaFormatReader::parseByteSource):
        (WebKit::MediaFormatReader::parsedInitializationData):
        (WebKit::MediaFormatReader::parsedMediaData):
        (WebKit::MediaFormatReader::didProvideMediaData):
        (WebKit::MediaFormatReader::finishParsing):
        * Shared/mac/MediaFormatReader/MediaFormatReader.h:
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.cpp:
        (WebKit::MediaSampleByteRange::MediaSampleByteRange):
        (WebKit::MediaSampleByteRange::trackID const):
        (WebKit::MediaSampleByteRange::platformSample const):
        (WebKit::MediaSampleByteRange::presentationTime const):
        (WebKit::MediaSampleByteRange::decodeTime const):
        (WebKit::MediaSampleByteRange::duration const):
        (WebKit::MediaSampleByteRange::sizeInBytes const):
        (WebKit::MediaSampleByteRange::presentationSize const):
        (WebKit::MediaSampleByteRange::flags const):
        (WebKit::MediaSampleByteRange::byteRange const):
        (WebKit::MediaSampleByteRange::offsetTimestampsBy):
        (WebKit::MediaSampleByteRange::setTimestamps):
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h:
        * Shared/mac/MediaFormatReader/MediaSampleCursor.cpp:
        (WebKit::MediaSampleCursor::copyFormatDescription const):
        * Shared/mac/MediaFormatReader/MediaTrackReader.cpp:
        (WebKit::MediaTrackReader::addSample):
        (WebKit::MediaTrackReader::copyProperty):
        * Shared/mac/MediaFormatReader/MediaTrackReader.h:

2022-03-08  John Cunningham  <johncunningham@apple.com>

        RemoteGraphicsContextGL ReadPixels does not preserve contents for area that is not part of the Framebuffer
        https://bugs.webkit.org/show_bug.cgi?id=222410
        <rdar://problem/75025951>

        Reviewed by Kimmo Kinnunen.

        Make a copy of the data buffer passed into readnpixels so that reads outside the framebuffer contain
        the expected results, rather than being zero'd.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::readnPixels0):
        (WebKit::RemoteGraphicsContextGL::readnPixels1):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (bufferSubData):
        (readnPixels0): Deleted.
        (readnPixels1): Deleted.
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::readnPixels):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::readnPixels): Deleted.

2022-03-08  Simon Fraser  <simon.fraser@apple.com>

        Fix assertion when DOM Rendering in GPU Process is enabled with accelerated drawing disabled
        https://bugs.webkit.org/show_bug.cgi?id=237626

        Reviewed by Tim Horton.

        Override releaseGraphicsContext() in the base class (which asserts). This subclass
        doesn't need to do anything; releaseGraphicsContext() is only relevant for IOSurface-
        based backends.

        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.h:

2022-03-08  Jean-Yves Avenard  <jya@apple.com>

        Split SourceBufferParserWebM and have platform agnostic WebMParser
        https://bugs.webkit.org/show_bug.cgi?id=237472
        rdar://problem/89810969

        Reviewed by Eric Carlson.

        * Shared/mac/MediaFormatReader/MediaSampleByteRange.cpp:
        (WebKit::MediaSampleByteRange::MediaSampleByteRange):
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h: MediaSampleByteRange.h
        didn't need to inherit from MediaSampleAVFObjC. 

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to read and execute dylibs in /usr/lib on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237625
        <rdar://89809031>

        Reviewed by Per Arne Vollan.

        WebKit's other sandboxes allow this.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Remove unused _grantAccessToPreferenceService
        https://bugs.webkit.org/show_bug.cgi?id=237623

        Reviewed by Per Arne Vollan.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _grantAccessToPreferenceService]): Deleted.
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::grantAccessToPreferenceService): Deleted.
        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::unblockPreferenceServiceIfNeeded): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::notifyPreferencesChanged):
        (WebKit::WebProcess::unblockPreferenceService): Deleted.

2022-03-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        Rename TextRecognitionUtilities.* to ImageAnalysisUtilities.*
        https://bugs.webkit.org/show_bug.cgi?id=237613
        rdar://89982051

        Reviewed by Tim Horton and Kate Cheney.

        Rename TextRecognitionUtilities.h and TextRecognitionUtilities.mm to ImageAnalysisUtilities.h and
        ImageAnalysisUtilities.mm, respectively. This is because this file now contains helper functions that are not
        specific to just the text recognition aspect of visual intelligence features on Cocoa, but rather encompass a
        variety of image analysis helpers.

        * Platform/cocoa/ImageAnalysisUtilities.h: Renamed from Source/WebKit/Platform/cocoa/TextRecognitionUtilities.h.
        * Platform/cocoa/ImageAnalysisUtilities.mm: Renamed from Source/WebKit/Platform/cocoa/TextRecognitionUtilities.mm.
        (WebKit::createImageAnalyzer):
        (WebKit::createImageAnalyzerRequest):
        (WebKit::floatQuad):
        (WebKit::floatQuads):
        (WebKit::makeTextRecognitionResult):
        (WebKit::textRecognitionEnhancementsSystemFeatureEnabled):
        (WebKit::imageAnalysisQueueSystemFeatureEnabled):
        (WebKit::isImageAnalysisMarkupSystemFeatureEnabled):
        (WebKit::isLiveTextAvailableAndEnabled):
        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        * SourcesCocoa.txt:
        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/ios/ProcessAssertionIOS.mm:
        (-[WKRBSAssertionDelegate assertion:didInvalidateWithError:]):

        Drive-by fix: additionally tweak a couple of release logging arguments that are currently in reverse order.

        * UIProcess/ios/WKActionSheetAssistant.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        * UIProcess/mac/WebPageProxyMac.mm:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Enable CFPrefs direct mode in adattributiond
        https://bugs.webkit.org/show_bug.cgi?id=237620

        Reviewed by Per Arne Vollan.

        This makes it not try to connect to cfprefsd, which is not allowed by the sandbox.

        * Shared/EntryPointUtilities/Cocoa/Daemon/PCMDaemonEntryPoint.mm:
        (WebKit::PCMDaemonMain):

2022-03-08  Diego Pino Garcia  <dpino@igalia.com>

        [macOS] Unreviewed, non-unified build fixes
        https://bugs.webkit.org/show_bug.cgi?id=237586

        * Shared/ModelIdentifier.h:
        * UIProcess/API/Cocoa/_WKRemoteWebInspectorViewControllerInternal.h:
        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        * UIProcess/ModelElementController.h:

2022-03-08  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Using WebAuthn within cross-origin iframe elements
        https://bugs.webkit.org/show_bug.cgi?id=222240
        rdar://problem/74830748

        Reviewed by Brent Fulgham.

        This patch relaxes the requirement to perform a Web Authentication assertion
        inside an i-frame with the "publickey-credentials-get" feature policy from
        'same-site' to 'cross-origin with consent'.

        There is an additional requirement that there is only a single cross-origin
        parent to present to the user in the prompt. If we can't display the updated
        prompt, then cross-origin assertions are not allowed. 

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureAssertionOptions):
        (WebKit::configurationAssertionRequestContext):
        (WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest):
        * UIProcess/WebAuthentication/WebAuthenticationRequestData.h:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::makeCredential):
        (WebKit::WebAuthenticatorCoordinatorProxy::getAssertion):
        (WebKit::WebAuthenticatorCoordinatorProxy::handleRequest):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.messages.in:
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.h:

2022-03-08  Chris Dumez  <cdumez@apple.com>

        Rename allow-custom-protocols-navigation to allow-top-navigation-to-custom-protocols
        https://bugs.webkit.org/show_bug.cgi?id=237605

        Reviewed by Darin Adler.

        Rename allow-custom-protocols-navigation sandbox flag to allow-top-navigation-to-custom-protocols as per:
        - https://github.com/whatwg/html/pull/7654#issuecomment-1054219407

        There is no backward compatibility risk since support for this flag was added very recently
        in r290958.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::frameSandboxAllowsOpeningExternalCustomProtocols):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        File System Access: throw exception if file or directory cannot be accessed in file system
        https://bugs.webkit.org/show_bug.cgi?id=237537

        Reviewed by Youenn Fablet.

        When a FileSystemHandle is created, we will ensure that corresponding directory or file exists (create the 
        directory or file if it does not exist yet). However, we did not check the result of the file system calls.
        That means, we may fail to create the file (e.g. due to no disk space, or cases in rdar://89291566), but we 
        still return success to the FileSystemHandle creation request. We should fix this by checking the file system
        call's result before completing the request.  

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::FileSystemStorageHandle::create):
        (WebKit::FileSystemStorageHandle::FileSystemStorageHandle):
        * NetworkProcess/storage/FileSystemStorageHandle.h:
        * NetworkProcess/storage/FileSystemStorageManager.cpp:
        (WebKit::FileSystemStorageManager::createHandle):

2022-03-08  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291006.
        https://bugs.webkit.org/show_bug.cgi?id=237618

        Introduced build failure.

        Reverted changeset:

        "The accessibility library should be soft linked optionally"
        https://bugs.webkit.org/show_bug.cgi?id=236513
        https://commits.webkit.org/r291006

2022-03-08  Per Arne Vollan  <pvollan@apple.com>

        The accessibility library should be soft linked optionally
        https://bugs.webkit.org/show_bug.cgi?id=236513

        Reviewed by Geoffrey Garen.

        The accessibility library should be soft linked optionally, since it is not always present.

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::handleAXPreferenceChange):
        (WebKit::AuxiliaryProcess::handlePreferenceChange):

2022-03-08  Chris Dumez  <cdumez@apple.com>

        Optimize further the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237568

        Reviewed by Geoffrey Garen.

        Optimize further the passing of data across threads by leveraging more broadly the optimized
        versions of isolatedCopy() on r-value references.

        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::ResourceLoadStatisticsDatabaseStore::hasStorageAccess):
        (WebKit::ResourceLoadStatisticsDatabaseStore::grantStorageAccessInternal):
        (WebKit::ResourceLoadStatisticsDatabaseStore::dumpResourceLoadStatistics):
        (WebKit::ResourceLoadStatisticsDatabaseStore::clear):
        (WebKit::ResourceLoadStatisticsDatabaseStore::updateCookieBlocking):
        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.h:
        * NetworkProcess/Classifier/ResourceLoadStatisticsMemoryStore.h:
        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.cpp:
        (WebKit::ResourceLoadStatisticsStore::removeDataRecords):
        (WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData):
        (WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains):
        (WebKit::ResourceLoadStatisticsStore::logTestingEvent):
        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode):
        (WebKit::WebResourceLoadStatisticsStore::hasStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::requestStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::grantStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::logFrameNavigation):
        (WebKit::WebResourceLoadStatisticsStore::logUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration):
        (WebKit::WebResourceLoadStatisticsStore::clearUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::setLastSeen):
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        (WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce):
        (WebKit::WebResourceLoadStatisticsStore::setPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics):
        (WebKit::WebResourceLoadStatisticsStore::isPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo):
        (WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::setGrandfathered):
        (WebKit::WebResourceLoadStatisticsStore::isGrandfathered):
        (WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom):
        (WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo):
        (WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom):
        (WebKit::WebResourceLoadStatisticsStore::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.h:
        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::updateQuotaBasedOnSpaceUsageForTesting):
        (WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB):
        (WebKit::NetworkConnectionToWebProcess::logUserInteraction):
        (WebKit::NetworkConnectionToWebProcess::hasStorageAccess):
        (WebKit::NetworkConnectionToWebProcess::requestStorageAccess):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::isGrandfathered):
        (WebKit::NetworkProcess::isPrevalentResource):
        (WebKit::NetworkProcess::isVeryPrevalentResource):
        (WebKit::NetworkProcess::setGrandfathered):
        (WebKit::NetworkProcess::setPrevalentResource):
        (WebKit::NetworkProcess::setPrevalentResourceForDebugMode):
        (WebKit::NetworkProcess::setVeryPrevalentResource):
        (WebKit::NetworkProcess::clearPrevalentResource):
        (WebKit::NetworkProcess::setSubframeUnderTopFrameDomain):
        (WebKit::NetworkProcess::isRegisteredAsRedirectingTo):
        (WebKit::NetworkProcess::isRegisteredAsSubFrameUnder):
        (WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain):
        (WebKit::NetworkProcess::setSubresourceUniqueRedirectTo):
        (WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom):
        (WebKit::NetworkProcess::isRegisteredAsSubresourceUnder):
        (WebKit::NetworkProcess::setTopFrameUniqueRedirectTo):
        (WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom):
        (WebKit::NetworkProcess::setLastSeen):
        (WebKit::NetworkProcess::mergeStatisticForTesting):
        (WebKit::NetworkProcess::insertExpiredStatisticForTesting):
        (WebKit::NetworkProcess::logFrameNavigation):
        (WebKit::NetworkProcess::logUserInteraction):
        (WebKit::NetworkProcess::hadUserInteraction):
        (WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce):
        (WebKit::NetworkProcess::clearUserInteraction):
        (WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer):
        (WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::deleteCookiesForTesting):
        (WebKit::NetworkProcess::registrableDomainsWithWebsiteData):
        (WebKit::NetworkProcess::didIncreaseQuota):
        (WebKit::NetworkProcess::renameOriginInWebsiteData):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::setResourceLoadStatisticsEnabled):
        (WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains):
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManager.cpp:
        (WebKit::PrivateClickMeasurementManager::clearForRegistrableDomain):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManager.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerInterface.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerProxy.cpp:
        (WebKit::PCM::ManagerProxy::clearForRegistrableDomain):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerProxy.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.cpp:
        (WebKit::PCM::Store::attributePrivateClickMeasurement):
        (WebKit::PCM::Store::privateClickMeasurementToStringForTesting const):
        (WebKit::PCM::Store::clearPrivateClickMeasurementForRegistrableDomain):
        (WebKit::PCM::Store::clearSentAttribution):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.h:
        * NetworkProcess/WebStorage/LocalStorageDatabaseTracker.h:
        (WebKit::LocalStorageDatabaseTracker::OriginDetails::isolatedCopy const):
        (WebKit::LocalStorageDatabaseTracker::OriginDetails::isolatedCopy):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::getSessionStorageOriginsCrossThreadCopy const):
        (WebKit::StorageManager::getLocalStorageOriginsCrossThreadCopy const):
        * NetworkProcess/cache/CacheStorageEngine.cpp:
        (WebKit::CacheStorage::Engine::writeFile):
        (WebKit::CacheStorage::Engine::readFile):
        (WebKit::CacheStorage::Engine::removeFile):
        (WebKit::CacheStorage::Engine::writeSizeFile):
        (WebKit::CacheStorage::Engine::getDirectories):
        (WebKit::CacheStorage::Engine::clearCachesForOriginFromDirectories):
        (WebKit::CacheStorage::Engine::deleteNonEmptyDirectoryOnBackgroundThread):
        * NetworkProcess/cache/CacheStorageEngine.h:
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::RecordInformation::isolatedCopy):
        (WebKit::CacheStorage::TraversalResult::isolatedCopy):
        (WebKit::CacheStorage::Cache::open):
        (WebKit::CacheStorage::isolatedCopy): Deleted.
        * NetworkProcess/cache/CacheStorageEngineCache.h:
        * NetworkProcess/cache/CacheStorageEngineCaches.cpp:
        (WebKit::CacheStorage::Caches::retrieveOriginFromDirectory):
        (WebKit::CacheStorage::Caches::clear):
        (WebKit::CacheStorage::Caches::readCachesFromDisk):
        * NetworkProcess/cache/NetworkCache.cpp:
        (WebKit::NetworkCache::Cache::clear):
        * NetworkProcess/cache/NetworkCacheIOChannel.h:
        (WebKit::NetworkCache::IOChannel::open):
        * NetworkProcess/cache/NetworkCacheStorage.cpp:
        (WebKit::NetworkCache::Storage::updateFileModificationTime):
        (WebKit::NetworkCache::Storage::dispatchReadOperation):
        (WebKit::NetworkCache::Storage::dispatchWriteOperation):
        (WebKit::NetworkCache::Storage::traverse):
        (WebKit::NetworkCache::Storage::clear):
        * NetworkProcess/cache/NetworkCacheStorage.h:
        * NetworkProcess/storage/IDBStorageConnectionToClient.cpp:
        (WebKit::IDBStorageConnectionToClient::didGetAllDatabaseNamesAndVersions):
        * NetworkProcess/storage/IDBStorageConnectionToClient.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::didIncreaseQuota):
        (WebKit::NetworkStorageManager::moveData):
        (WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths):
        (WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * Shared/API/APIString.h:
        * Shared/WebsiteData/WebsiteData.cpp:
        (WebKit::WebsiteData::isolatedCopy const):
        (WebKit::WebsiteData::isolatedCopy):
        (WebKit::WebsiteData::Entry::isolatedCopy const):
        (WebKit::WebsiteData::Entry::isolatedCopy):
        * Shared/WebsiteData/WebsiteData.h:
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::createExtension):
        (API::ContentRuleListStore::lookupContentRuleList):
        (API::ContentRuleListStore::compileContentRuleList):
        (API::ContentRuleListStore::removeContentRuleList):
        (API::ContentRuleListStore::getContentRuleListSource):
        * UIProcess/API/APIContentRuleListStore.h:
        * UIProcess/API/glib/WebKitUserContentFilterStore.cpp:
        (webkitUserContentFilterStoreSaveBytes):
        * UIProcess/DeviceIdHashSaltStorage.cpp:
        (WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk):
        * UIProcess/DeviceIdHashSaltStorage.h:
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::HashSaltForOrigin):
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::isolatedCopy const):
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::isolatedCopy):
        * UIProcess/WebsiteData/WebsiteDataRecord.cpp:
        (WebKit::WebsiteDataRecord::isolatedCopy const):
        (WebKit::WebsiteDataRecord::isolatedCopy):
        * UIProcess/WebsiteData/WebsiteDataRecord.h:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        (WebKit::WebSWClientConnection::finishFetchingScriptInServer):
        (WebKit::WebSWClientConnection::registerServiceWorkerClient):
        * WebProcess/Storage/WebSWClientConnection.h:
        * WebProcess/Storage/WebServiceWorkerFetchTaskClient.cpp:
        (WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinish):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        Disable CFURLCache in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237575

        Reviewed by Geoffrey Garen.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addStorageSession):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        File System Access: disallow empty name in FileSystemHandle
        https://bugs.webkit.org/show_bug.cgi?id=237563

        Reviewed by Youenn Fablet.

        Updated expectations of imported wpt tests.

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::isValidFileName):

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Expand adattributiond sandbox to prevent sandbox exceptions during main functionality
        https://bugs.webkit.org/show_bug.cgi?id=237580
        <rdar://89855243>

        Reviewed by Per Arne Vollan.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        WebSocket.send() should synchronously update bufferedAmount
        https://bugs.webkit.org/show_bug.cgi?id=235707

        Reviewed by Chris Dumez.

        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::send):
        * WebProcess/Network/WebSocketChannel.h:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Remove unneeded Async keywords in messages.in files after r290903
        https://bugs.webkit.org/show_bug.cgi?id=237574

        Reviewed by Chris Dumez.

        * GPUProcess/graphics/wc/RemoteWCLayerTreeHost.messages.in:
        * Scripts/webkit/tests/TestWithSuperclass.messages.in:
        * WebProcess/glib/UserMediaCaptureManager.messages.in:

2022-03-08  Michael Catanzaro  <mcatanzaro@gnome.org>

        [GTK] Sync gtk-overlay-scrolling setting to web process
        https://bugs.webkit.org/show_bug.cgi?id=236476

        Reviewed by Adrian Perez de Castro.

        * Shared/gtk/GtkSettingsState.cpp:
        (WebKit::GtkSettingsState::encode const):
        (WebKit::GtkSettingsState::decode):
        * Shared/gtk/GtkSettingsState.h:
        * UIProcess/gtk/GtkSettingsManager.cpp:
        (WebKit::GtkSettingsManager::overlayScrolling const):
        (WebKit::GtkSettingsManager::settingsDidChange):
        (WebKit::GtkSettingsManager::GtkSettingsManager):
        * UIProcess/gtk/GtkSettingsManager.h:
        * WebProcess/gtk/GtkSettingsManagerProxy.cpp:
        (WebKit::GtkSettingsManagerProxy::applySettings):

2022-03-08  Youenn Fablet  <youenn@apple.com>

        Add a preference to mute video capture in case audio capture gets interrupted
        https://bugs.webkit.org/show_bug.cgi?id=237524
        <rdar://78421282>

        Reviewed by Eric Carlson.

        Add support for interrupt mock microphone devices.
        Send to WebProcess sources whether sources are interrupted each time the source muted value changes.
        Store that value in remote sources.

        * GPUProcess/GPUProcess.cpp:
        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * UIProcess/API/C/WKPage.cpp:
        * UIProcess/API/C/WKPagePrivate.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        * UIProcess/GPU/GPUProcessProxy.h:
        * UIProcess/WebPageProxy.cpp:
        * UIProcess/WebPageProxy.h:
        * WebProcess/WebPage/WebPage.cpp:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:
        * WebProcess/cocoa/UserMediaCaptureManager.messages.in:

2022-03-07  Simon Fraser  <simon.fraser@apple.com>

        Rename VolatilityState to SetNonVolatileResult
        https://bugs.webkit.org/show_bug.cgi?id=237562

        Reviewed by Tim Horton.

        Pure rename. I want to use VolatilityState to actually reflect state.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::setBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile):
        * UIProcess/ViewSnapshotStore.h:
        * UIProcess/mac/ViewSnapshotStoreMac.mm:
        (WebKit::ViewSnapshot::setVolatile):
        (WebKit::ViewSnapshot::asLayerContents):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-03-07  Brent Fulgham  <bfulgham@apple.com>

        Remove remnants of WebKit.Plugin.64.xpc service
        https://bugs.webkit.org/show_bug.cgi?id=237555
        <rdar://84485232>

        Reviewed by Alexey Proskuryakov.

        Although plugins have been disabled for a number of years, the actual code behind this
        feature was only removed this cycle (see Bugs 232462, 234354, and 234379). I noticed a few
        remaining bits of the removed plugin process that should also be cleaned up.

        * Scripts/process-entitlements.sh:
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceMain.mm:
        (WebKit::XPCServiceEventHandler):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::sandboxDirectory):
        (WebKit::applySandbox):

2022-03-07  Per Arne Vollan  <pvollan@apple.com>

        Preconnecting after process swap is a page load time improvement on some devices
        https://bugs.webkit.org/show_bug.cgi?id=237055
        <rdar://problem/89638872>

        Reviewed by Geoffrey Garen.

        On some devices we see that doing a second preconnect on HTTP/1.1 is a significant page load time improvement.
        This is due to the fact that most page loads on HTTP/1.1 will open several connections, and having two
        preconnected connections instead of one, will speed up page load time. This patch implements this by starting
        a second preconnect after the first has finished. It is important to wait until the first preconnect has
        finished, otherwise the second preconnect will go to waste, since the underlying network layer does not yet
        know if this is HTTP/1.1 or not. Since we do not see page load time improvement on iOS with this behavior,
        it is currently only enabled for macOS. The next step is to investigate why it does not seem to be a page
        load time improvement on iOS. We probably need to make sure the main resource load has started before we
        start the second preconect. This will avoid that the second preconnect returns immediately.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::sendH2Ping):
        (WebKit::NetworkConnectionToWebProcess::preconnectTo):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::preconnectTo):
        * NetworkProcess/PreconnectTask.cpp:
        (WebKit::PreconnectTask::PreconnectTask):
        (WebKit::PreconnectTask::didFinishLoading):
        (WebKit::PreconnectTask::didFailLoading):
        (WebKit::PreconnectTask::didFinish):
        * NetworkProcess/PreconnectTask.h:
        * NetworkProcess/cache/NetworkCacheSpeculativeLoadManager.cpp:
        (WebKit::NetworkCache::SpeculativeLoadManager::preconnectForSubresource):

2022-03-07  Richard Houle  <rhoule@apple.com>

        [macCatalyst] Compilation error: WebContentProcess.xib: error: macOS xibs do not support target device type "ipad".
        https://bugs.webkit.org/show_bug.cgi?id=237549
        rdar://89912760

        Reviewed by Alexey Proskuryakov.

        Xcode for macOS 12.5 complains that we bundle Mac XIBs inside our macCatalyst builds.

        * Configurations/BaseXPCService.xcconfig:

2022-03-07  Chris Dumez  <cdumez@apple.com>

        allow-custom-protocols-navigation sandbox flag.
        https://bugs.webkit.org/show_bug.cgi?id=237269
        <rdar://problem/89899736>

        Reviewed by Geoffrey Garen.

        Add support for allow-custom-protocols-navigation iframe sandbox flag to allow sandboxed iframes
        to navigate to custom protocols, as per:
        - https://github.com/whatwg/html/pull/7654

        We recently started preventing sandboxed iframes from navigating to custom protocols, which broke
        Microsoft Teams. We added a quirk for Microsoft Teams which we should be able to drop once they
        adopt this new sandbox flag.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::frameSandboxAllowsOpeningExternalCustomProtocols):

2022-03-07  Elliott Williams  <emw@apple.com>

        DerivedSources.make: Regenerate message receiver sources on Makefile changes
        https://bugs.webkit.org/show_bug.cgi?id=237543

        Reviewed by Alexey Proskuryakov.

        This script depends on configuration and other sources in DerivedSources.make, so it should
        regenerate when they change. Fixes one-time incremental build failures caused by r290896.

        * DerivedSources.make:

2022-03-07  Alex Christensen  <achristensen@webkit.org>

        Remove unnecessary Async attribute in .messages.in files
        https://bugs.webkit.org/show_bug.cgi?id=237491

        Reviewed by Chris Dumez.

        If there is a reply and no "Synchronous" then we can infer that it is asynchronous.

        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/media/RemoteAudioDestinationManager.messages.in:
        * GPUProcess/media/RemoteCDMFactoryProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.messages.in:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * GPUProcess/media/RemoteCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.h:
        * GPUProcess/media/RemoteMediaEngineConfigurationFactoryProxy.messages.in:
        * GPUProcess/media/RemoteMediaPlayerProxy.messages.in:
        * GPUProcess/media/RemoteMediaResourceManager.messages.in:
        * GPUProcess/media/RemoteSourceBufferProxy.messages.in:
        * GPUProcess/webrtc/RemoteAudioMediaStreamTrackRendererInternalUnitManager.messages.in:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteMediaRecorderManager.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayerManager.messages.in:
        * NetworkProcess/Cookies/WebCookieManager.messages.in:
        * NetworkProcess/NetworkBroadcastChannelRegistry.messages.in:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/NetworkSocketChannel.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * NetworkProcess/WebStorage/StorageManagerSet.messages.in:
        * NetworkProcess/cache/CacheStorageEngineConnection.messages.in:
        * NetworkProcess/cache/NetworkCache.cpp:
        (WebKit::NetworkCache::Cache::startAsyncRevalidationIfNeeded):
        * NetworkProcess/storage/NetworkStorageManager.messages.in:
        * Scripts/webkit/messages.py:
        (message_to_reply_forward_declaration):
        (message_to_struct_declaration):
        (forward_declarations_and_headers_for_replies):
        (async_message_statement):
        (sync_message_statement):
        (generate_message_handler):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/model.py:
        (generate_global_model):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.messages.in:
        * Shared/AuxiliaryProcess.messages.in:
        * Shared/Notifications/NotificationManagerMessageHandler.messages.in:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * UIProcess/Cocoa/VideoFullscreenManagerProxy.messages.in:
        * UIProcess/Downloads/DownloadProxy.messages.in:
        * UIProcess/Media/AudioSessionRoutingArbitratorProxy.messages.in:
        * UIProcess/Media/RemoteMediaSessionCoordinatorProxy.messages.in:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/UserContent/WebUserContentControllerProxy.messages.in:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.messages.in:
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.cpp:
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.messages.in: Removed.
        * UIProcess/WebLockRegistryProxy.messages.in:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/WebProcessProxy.messages.in:
        * UIProcess/XR/PlatformXRSystem.messages.in:
        * UIProcess/mac/SecItemShimProxy.messages.in:
        * WebAuthnProcess/WebAuthnConnectionToWebProcess.messages.in:
        * WebAuthnProcess/WebAuthnProcess.messages.in:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/Automation/WebAutomationSessionProxy.messages.in:
        * WebProcess/GPU/GPUProcessConnection.messages.in:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.messages.in:
        * WebProcess/GPU/media/SourceBufferPrivateRemote.messages.in:
        * WebProcess/Inspector/WebInspectorUIExtensionController.messages.in:
        * WebProcess/MediaSession/RemoteMediaSessionCoordinator.messages.in:
        * WebProcess/Network/NetworkProcessConnection.messages.in:
        * WebProcess/Storage/WebSWClientConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.messages.in:
        * WebProcess/Storage/WebSharedWorkerObjectConnection.messages.in:
        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.messages.in:
        * WebProcess/WebPage/EventDispatcher.messages.in:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebProcess.messages.in:
        * WebProcess/cocoa/VideoFullscreenManager.messages.in:

2022-03-07  Chris Dumez  <cdumez@apple.com>

        Optimize the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237502

        Reviewed by Geoff Garen.

        Add more isolatedCopy() overloads that work on r-value references when the implementation
        can be optimized. Also call isolatedCopy() / crossThreadCopy() on a r-value reference
        whenever possible to leverage these optimizations.

        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::ResourceLoadStatisticsDatabaseStore::migrateDataToPCMDatabaseIfNecessary):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.h:
        (WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy const):
        (WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy):
        (WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy const):
        (WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy):
        * NetworkProcess/IndexedDB/WebIDBServer.cpp:
        (WebKit::WebIDBServer::closeAndDeleteDatabasesForOrigins):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDebugInfo.cpp:
        (WebKit::PCM::DebugInfo::isolatedCopy const):
        (WebKit::PCM::DebugInfo::isolatedCopy):
        (WebKit::PCM::DebugInfo::Message::isolatedCopy const):
        (WebKit::PCM::DebugInfo::Message::isolatedCopy):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDebugInfo.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.cpp:
        (WebKit::PCM::Store::allAttributedPrivateClickMeasurement):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::ContentRuleListStore::compileContentRuleList):
        * UIProcess/Cocoa/ModalContainerControlClassifier.mm:
        (WebKit::ModalContainerControlClassifier::classify):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::setMediaAccessibilityPreferences):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didChooseFilesForOpenPanelWithImageTranscoding):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::prewarmWithDomainInformation):
        * WebProcess/WebProcess.h:

2022-03-07  Sihui Liu  <sihui_liu@apple.com>

        Delete WebIDBServer and WebIDBConnectionToClient
        https://bugs.webkit.org/show_bug.cgi?id=237479

        Reviewed by Chris Dumez.

        The code is unused since r289474; remove it to avoid confusion when investigating issues including related
        symbols.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * NetworkProcess/IndexedDB/WebIDBConnectionToClient.cpp: Removed.
        * NetworkProcess/IndexedDB/WebIDBConnectionToClient.h: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.cpp: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.h: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.messages.in: Removed.
        * NetworkProcess/NetworkProcess.cpp:
        * NetworkProcess/NetworkSession.cpp:
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/ios/NetworkProcessIOS.mm:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-07  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Provide global frame identifier to ASCAgent SPI
        https://bugs.webkit.org/show_bug.cgi?id=237454
        rdar://problem/89782147

        Reviewed by Brent Fulgham.

        For purposes related to conditional mediation, the ASCAgent SPI
        need to know what frame requested the assertion. This patch starts
        passing that along.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::cancelRequest):
        (WebKit::AuthenticatorManager::runPanel):
        * UIProcess/WebAuthentication/Cocoa/AuthenticationServicesCoreSoftLink.h:
        * UIProcess/WebAuthentication/Cocoa/AuthenticationServicesCoreSoftLink.mm:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configurationAssertionRequestContext):
        (WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest):
        * UIProcess/WebAuthentication/WebAuthenticationRequestData.h:

2022-03-07  Peng Liu  <peng.liu6@apple.com>

        Small cleanups of media code
        https://bugs.webkit.org/show_bug.cgi?id=237496

        Reviewed by Xabier Rodriguez-Calvar.

        * WebProcess/cocoa/PlaybackSessionManager.h: `protected` is not needed here.

2022-03-07  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK] generate-automation-atom.py breaks reproducible builds
        https://bugs.webkit.org/show_bug.cgi?id=237506

        Reviewed by Carlos Garcia Campos.

        * Scripts/generate-automation-atom.py:
        (append_functions): Sort utility functions to produce stable output.

2022-03-06  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Layer tree can get indefinitely frozen if WKWebView is unparented underneath -[UIWindow dealloc]
        https://bugs.webkit.org/show_bug.cgi?id=237505
        rdar://85563958

        Reviewed by Tim Horton.

        It's currently possible for the web page to get permanently stuck in frozen state, due to the
        `BackgroundApplication` layer tree freeze reason; this occurs when the web view is unparented from the view
        hierarchy underneath the scope of UIWindow's `-dealloc` method.

        During `-[UIWindow dealloc]`, the backpointer underlying the implementation of `-[UIView window]` is set to `nil`
        immediately before the subclassing method hook `-willMoveToWindow:` is invoked on the view hierarchy. This means
        that when `-willMoveToWindow:` is invoked, `self.window` will return `nil`. This, in turn, puts
        `WKApplicationStateTrackingView` in a bad state because we bail early before resetting `_applicationStateTracker`
        in the early return below, since we (erroneously) believe that we've already been unparented from the view
        hierarchy, so we don't need to do anything.

        ```
        if (!self._contentView.window || newWindow)
            return;
        ```

        As a result, if the same web view is eventually moved back into another visible window, `-didMoveToWindow` bails
        before setting up the `_applicationStateTracker` again, since it already exists from when the previous window
        was still active. This means `-_applicationWillEnterForeground` is never called when the web view is
        reintroduced to the view hierarchy, so `LayerTreeFreezeReason::BackgroundApplication` is never lifted.

        To address this, we simply remove the debug assertion for `_applicationStateTracker`, and instead check whether
        the application state tracker exists or not for the logic of the early return. Doing so also makes the early
        return in `-willMoveToWindow:` consistent with the logic in one in `-didMoveToWindow`, which already consults
        `_applicationStateTracker`:

        ```
        - (void)didMoveToWindow
        {
            if (!self._contentView.window || _applicationStateTracker)
                return;
        ```

        Test: ApplicationStateTracking.WindowDeallocDoesNotPermanentlyFreezeLayerTree

        * UIProcess/ios/WKApplicationStateTrackingView.mm:
        (-[WKApplicationStateTrackingView willMoveToWindow:]): See above.

2022-03-06  Eric Carlson  <eric.carlson@apple.com>

        Push HTMLMediaElement renderer's contentBox rect to GPU process
        https://bugs.webkit.org/show_bug.cgi?id=237444
        rdar://84869202

        Reviewed by Jer Noble.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy): Configuration now has
        playerContentBoxRect.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerContentBoxRect const):
        (WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged): Update playerContentBoxRect.
        * GPUProcess/media/RemoteMediaPlayerProxy.h:
        * GPUProcess/media/RemoteMediaPlayerProxy.messages.in:

        * GPUProcess/media/RemoteMediaPlayerProxyConfiguration.h:
        (WebKit::RemoteMediaPlayerProxyConfiguration::encode const):
        (WebKit::RemoteMediaPlayerProxyConfiguration::decode):

        * GPUProcess/media/cocoa/RemoteMediaPlayerProxyCocoa.mm:
        (WebKit::RemoteMediaPlayerProxy::setVideoInlineSizeIfPossible): Convert from static
        function so we can log.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerFirstVideoFrameAvailable): Add logging.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingModeChanged): Ditto.
        (WebKit::RemoteMediaPlayerProxy::setVideoInlineSizeFenced): Ditto.
        (WebKit::setVideoInlineSizeIfPossible): Deleted.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::playerContentBoxRectChanged):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:

        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):

2022-03-04  Sihui Liu  <sihui_liu@apple.com>

        Stop setting NSURLIsExcludedFromBackupKey attribute for localSorageDirectory in UI process
        https://bugs.webkit.org/show_bug.cgi?id=237447

        Reviewed by Chris Dumez.

        Let's do that on storage thread in network process when the directory is used.

        Covered by existing test: WKWebView.LocalStorageDirectoryExcludedFromBackup.

        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):

2022-03-04  Harrison Weinerman  <hweinerman@apple.com>

        Change app launch scheme
        https://bugs.webkit.org/show_bug.cgi?id=237480
        rdar://89781553

        Reviewed by Brady Eidson.

        We need to change the app launch scheme and remove an entitlement that is no longer required.

        * Scripts/process-entitlements.sh:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::notifyClientPushMessageIsAvailable):

2022-03-04  Patrick Angle  <pangle@apple.com>

        REGRESSION (r284472): [ Monterey ] http/tests/websocket/tests/hybi/inspector/send-and-recieve-debugger.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=237280

        Reviewed by Devin Rousso.

        Move inspector instrumentation for things that should be delayed until the websocket has resumed (in general,
        these are instrumentation points for receiving messages) into WebCore::WebSocket so that they are sent at the
        expected time in the frontend, not "in the future" when script execution is suspended (e.g. while debugging).

        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::notifySendFrame):
        (WebKit::WebSocketChannel::connect):
        (WebKit::WebSocketChannel::close):
        (WebKit::WebSocketChannel::fail):
        (WebKit::WebSocketChannel::disconnect):
        (WebKit::WebSocketChannel::didReceiveText):
        (WebKit::WebSocketChannel::didReceiveBinaryData):
        (WebKit::WebSocketChannel::didClose):
        (WebKit::WebSocketChannel::didReceiveMessageError):
        (WebKit::WebSocketChannel::didSendHandshakeRequest):
        (WebKit::WebSocketChannel::didReceiveHandshakeResponse):
        (WebKit::createWebSocketFrameForWebInspector): Deleted.
        * WebProcess/Network/WebSocketChannel.h:

2022-03-04  Patrick Angle  <pangle@apple.com>

        Web Inspector: [Cocoa] Continually opening and closing Web Inspector sometimes crashes
        https://bugs.webkit.org/show_bug.cgi?id=237484

        Reviewed by Darin Adler.

        We need to handle operations on the main queue because `webView:stopURLSchemeTask:` will be called from the main
        queue, and we must not be in middle the operation when we get the request to stop said operation, otherwise we
        may attempt to call `[urlSchemeTask did*]`, which is not permitted after we have been asked to stop that task.
        If we add the operation for the `WKURLSchemeTask` to a different queue it is possible we will have already
        started the operation on a background queue while at the same time are receiving a request to stop that same
        `WKURLSchemeTask`.

        * UIProcess/Inspector/mac/WKInspectorResourceURLSchemeHandler.mm:
        (-[WKInspectorResourceURLSchemeHandler webView:startURLSchemeTask:]):
        (-[WKInspectorResourceURLSchemeHandler webView:stopURLSchemeTask:]):

2022-03-04  Myles C. Maxfield  <mmaxfield@apple.com>

        [iOS] Books ASSERTs upon opening a book with a debug build of WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237445
        <rdar://problem/89776531>

        Reviewed by Alex Christensen.

        * NetworkProcess/cache/NetworkCacheBlobStorage.cpp:
        (WebKit::NetworkCache::BlobStorage::add):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::openAndMapContentRuleList):
        (API::compiledToFile):

2022-03-04  Chris Dumez  <cdumez@apple.com>

        Home link on weather.gov is not working
        https://bugs.webkit.org/show_bug.cgi?id=237451
        <rdar://60409277>

        Reviewed by Geoff Garen.

        * WebProcess/WebPage/WebBackForwardListProxy.cpp:
        (WebKit::WebBackForwardListProxy::removeItem):
        (WebKit::WebBackForwardListProxy::containsItem const):
        * WebProcess/WebPage/WebBackForwardListProxy.h:

2022-03-04  Simon Fraser  <simon.fraser@apple.com>

        Crash under ScrollingCoordinatorMac::hasNodeWithAnimatedScrollChanged()
        https://bugs.webkit.org/show_bug.cgi?id=237478
        <rdar://89072235>

        Reviewed by Alan Bujtas.

        Crash data show that r290109 failed to fix this crash; the actual cause of the crash is a
        null m_page on TiledCoreAnimationScrollingCoordinator, diagnosed by noting that the crash
        offset corresponds to the offset of m_renderingUpdateRemainingSteps in Page.

        * WebProcess/WebPage/mac/TiledCoreAnimationScrollingCoordinator.mm:
        (WebKit::TiledCoreAnimationScrollingCoordinator::hasNodeWithAnimatedScrollChanged):

2022-03-04  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Don't use decidePolicyForLocalAuthenticator for Web Authentication Modern
        https://bugs.webkit.org/show_bug.cgi?id=225646
        rdar://78147681

        Reviewed by Brent Fulgham.

        decidePolicyForLocalAuthenticator is not implemented for the _WKWebAuthenticationPanelDelegate
        used for modern because the prompt to allow Touch/FaceID comes earlier in the process.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::makeCredential):

2022-03-04  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Hard link AVPictureInPictureController
        https://bugs.webkit.org/show_bug.cgi?id=237227

        Reviewed by Brent Fulgham.

        Hard linking instead of soft linking should be a small performance improvement.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-04  Youenn Fablet  <youenn@apple.com>

        LibWebRTCCodecs::setEncodeRates should send LibWebRTCCodecsProxy::SetEncodeRates only when the encoder is live
        https://bugs.webkit.org/show_bug.cgi?id=237421

        Reviewed by Darin Adler.

        We were previously not asserting in LibWebRTCCodecsProxy::setEncodeRates and we were missing some encode rate orders.
        This is due to the fact that when creating an encoder, we are hopping to main thread, then to work queue to send the message to create an encoder.
        In LibWebRTCCodecs::setEncodeRates, we were hopping to main thread if needed.
        If the encoder connection is null, we are now hopping to main thread, then to work queue as done when creating an encoder.
        Since there is a time where LibWebRTCCodecsProxy::setEncodeRates might have sent encode rates, we bail out early to not set based on old bitrates.

        Covered by existing tests not crashing in LibWebRTCCodecsProxy::setEncodeRates.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::setEncodeRates):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:

2022-03-04  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK][WPE] Documentation for webkit_web_context_set_spell_checking_languages() is incomplete
        https://bugs.webkit.org/show_bug.cgi?id=237465

        Reviewed by Carlos Garcia Campos.

        * UIProcess/API/glib/WebKitWebContext.cpp: Improve documentation.

2022-03-04  Youenn Fablet  <youenn@apple.com>

        Introduce routines to exchange SharedVideoFrame::Buffer directly
        https://bugs.webkit.org/show_bug.cgi?id=237267

        Reviewed by Eric Carlson.

        Define explictly SharedVideoFrame::Buffer as Variant of the various buffer representations.
        This allows to move more code in SharedVideoFrame for instance by adding direct support of sending webrtc::VideoFrame buffers in SharedVideoFrame.
        Reuse that code in LibWebRTCCodecs as a refactoring/simplification.
        Reuse that code in RemoteVideoFrameObjectHeap which allows to exchange IOSurfaces in case WebProcess can use them.
        This is used when encoding such frames using software encoders.

        Covered by existing tests.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.messages.in:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxy.h:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.h:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.messages.in:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-03  Brady Eidson  <beidson@apple.com>

        Add a new "Daemon -> Client" message type to webpushd
        https://bugs.webkit.org/show_bug.cgi?id=237391

        Reviewed by Alex Christensen.

        Future work will need more messages like this.
        So let's add the mechanism in a small standalone patch that uses it for debug messages.
        
        No behavior change for now.

        * NetworkProcess/Notifications/Cocoa/WebPushDaemonConnectionCocoa.mm:
        (WebKit::WebPushD::handleWebPushDaemonMessage):
        (WebKit::WebPushD::Connection::connectionReceivedEvent):
        (WebKit::WebPushD::Connection::connectionReceivedEvent const): Deleted.

        * NetworkProcess/Notifications/WebPushDaemonConnection.cpp:
        (WebKit::WebPushD::Connection::debugMessage):
        * NetworkProcess/Notifications/WebPushDaemonConnection.h:

        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementConnection.h:
        * NetworkProcess/PrivateClickMeasurement/cocoa/PrivateClickMeasurementConnectionCocoa.mm:
        (WebKit::PCM::Connection::connectionReceivedEvent):
        (WebKit::PCM::Connection::connectionReceivedEvent const): Deleted.

        * Platform/IPC/DaemonConnection.h:

        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::daemonMessageTypeSendsReply):

        * webpushd/ICAppBundle.mm:
        (WebPushD::broadcastDebugMessage):

        * webpushd/PushClientConnection.h:
        * webpushd/PushClientConnection.mm:
        (WebPushD::ClientConnection::broadcastDebugMessage):
        (WebPushD::ClientConnection::sendDebugMessage):
        (WebPushD::ClientConnection::sendDaemonMessage const):

        * webpushd/WebPushDaemon.h:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::broadcastDebugMessage):
        (WebPushD::Daemon::broadcastAllConnectionIdentities):
        (WebPushD::Daemon::connectionAdded):

2022-03-03  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290815): Fix even more incorrect #if ENABLE(SERVICE_WORKER) usage in NetworkProcess
        https://bugs.webkit.org/show_bug.cgi?id=237461

        Unreviewed build fix.

        * NetworkProcess/NetworkProcess.cpp:
        The existence of NetworkProcess::{getPendingPushMessages, processPushMessages} depend on ENABLE(SERVICE_WORKER);
        it is only when they exist that their implementation depends on ENABLE(BUILT_IN_NOTIFICATIONS).

2022-03-03  Ben Nham  <nham@apple.com>

        Enforce silent push quota
        https://bugs.webkit.org/show_bug.cgi?id=236863

        Reviewed by Brady Eidson.

         - If a push event doesn't result in a notification or if the associated promise rejects,
           then we increment the silent push count associated with that origin.
         - PushService now removes a subscription if the origin has reached its quota of silent
           pushes.

        Covered by existing and new API tests.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processPushMessage):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::incrementSilentPushCount):
        (WebKit::ReplyCaller<int>::callReply):
        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::messageTypeSendsReply):
        * UIProcess/API/Cocoa/WKProcessPool.mm:
        (-[WKProcessPool _notificationManagerForTesting]):
        * webpushd/PushService.mm:
        (WebPushD::updateTopicLists):
        (WebPushD::PushService::incrementSilentPushCount):
        * webpushd/WebPushDaemon.mm:
        (WebPushD::MessageInfo::incrementSilentPushCount::encodeReply):
        (WebPushD::Daemon::decodeAndHandleMessage):
        (WebPushD::Daemon::incrementSilentPushCount):

2022-03-03  Ben Nham  <nham@apple.com>

        Allow webpushd to launch browser in background
        https://bugs.webkit.org/show_bug.cgi?id=237114

        Reviewed by Brady Eidson.

        Now that webpushd is sandboxed on Mac (r289566), the LaunchServices SPI call to launch
        Safari is now failing, because LaunchServices goes down a different path when there is a
        sandboxed caller. In particular, it fails to launch Safari because Safari doesn't register
        for the webkit-app-launch scheme. Safari also doesn't want to list this scheme in its plist.

        For now, to unblock our testing, we're giving ourselves an entitlement to restore the
        pre-sandboxed behavior of being able to launch Safari even though it doesn't register for
        the webkit-app-launch scheme. We are still in discussions with LaunchServices and Safari
        about if there is a better and more restrictive way of granting ourselves this ability.

        * Scripts/process-entitlements.sh:

2022-03-03  Devin Rousso  <drousso@apple.com>

        [GPU Process] dont load Apple Pay button/logo PDFs in the WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237177

        Reviewed by Simon Fraser.

        See `Source/WebCore/ChangeLog` for an explanation of `SystemImage`.

        * Shared/WebCoreArgumentCoders.h:
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<Ref<SystemImage>>::encode): Added.
        (IPC::ArgumentCoder<Ref<SystemImage>>::decode): Added.
        Support sending `SystemImage` (technically `Ref<SystemImage>`) across processes.

        * GPUProcess/graphics/RemoteDisplayListRecorder.messages.in:
        * GPUProcess/graphics/RemoteDisplayListRecorder.h:
        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::drawSystemImage): Added.
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::recordDrawSystemImage): Addded.
        Add new `DrawSystemImage` display list item.

        * Scripts/webkit/messages.py:
        (class_template_headers):
        Add support for `Ref<T>` in IPC messages.

2022-03-03  Michael Saboff  <msaboff@apple.com>

        Copy WebKit frameworks and XPC processes to Secondary Path
        https://bugs.webkit.org/show_bug.cgi?id=237394

        Reviewed by Saam Barati.

        Added build configuration variables and scripts to copy the built Framework as well as the XPC services 
        to the SYSTEM_SECONDARY_CONTENT_PATH when it is set.  When copying the XPC services, we update the XPC
        binaries to reference the frameworks from the SYSTEM_SECONDARY_CONTENT_PATH by updating
        DYLD_VERSIONED_FRAMEWORK_PATH.

        * Configurations/Base.xcconfig:
        * Configurations/WebKitSwift.xcconfig:
        * Scripts/copy-frameworks-to-secondary-path.sh: Added.
        * Scripts/copy-xpc-services-to-secondary-path.sh: Added.
        * Scripts/update-dyld-environment-load-command: Added.
        * Scripts/webkitpy: Added.
        * Scripts/webkitpy/mach_o.py: Added.
        (_utf8_bytes_to_str):
        (_mach_o_int_field):
        (_mach_o_int_field._get_mach_o_int_field):
        (_mach_o_int_field._set_mach_o_int_field):
        (_mach_o_int_field._set_mach_o_int_field.func):
        (_mach_o_chararray_field):
        (_mach_o_chararray_field._get_mach_o_chararray_field):
        (_mach_o_chararray_field._set_mach_o_chararray_field):
        (_mach_o_chararray_field._set_mach_o_chararray_field.func):
        (_mach_o_varchar_field):
        (_mach_o_varchar_field._get_mach_o_varchar_field):
        (_mach_o_varchar_field._set_mach_o_varchar_field):
        (_mach_o_varchar_field._set_mach_o_varchar_field.func):
        (MachOCommand):
        (MachOCommand.__init__):
        (MachOSourceVersionCommand):
        (MachOSourceVersionCommand.version_str):
        (MachOSection):
        (MachOSection.__init__):
        (MachOSegmentCommand):
        (MachOSection32):
        (MachOSegment32Command):
        (MachOSegment32Command.__init__):
        (MachOSection64):
        (MachOSegment64Command):
        (MachOSegment64Command.__init__):
        (MachOLoadDylibCommand):
        (MachOLoadDylibCommand._version_str):
        (MachOLoadDylibCommand.compatibility_version_str):
        (MachOLoadDylibCommand.current_version_str):
        (MachODyldEnvironmentCommand):
        (MachODyldEnvironmentCommand.variable):
        (MachODyldEnvironmentCommand.value):
        (MachODyldEnvironmentCommand.build):
        (MachOIDDylibCommand):
        (MachOHeader):
        (MachOHeader.__init__):
        (MachOHeader.used_header_size):
        (MachOHeader.total_header_size):
        (MachOHeader.available_header_size):
        (MachOHeader.architecture_name):
        (MachOHeader.id_command):
        (MachOHeader.dyld_env_commands):
        (MachOHeader.dyld_versioned_framework_paths):
        (MachOHeader.filter_commands):
        (MachOHeader.update_file):
        (MachOHeader.parse_command):
        (MachOHeader32LE):
        (MachOHeader32LE.__init__):
        (MachOHeader64LE):
        (MachOHeader64LE.__init__):
        (MachOFile):
        (MachOFile.__init__):
        (is_macho_bytes):
        (is_macho_file):
        (enumerate_macho_files):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-03  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290752.

        r290752 broke mutliple tests, slowing down the iOS15 EWS
        queue.

        Reverted changeset:

        "[iOS] Hard link AVPictureInPictureController"
        https://bugs.webkit.org/show_bug.cgi?id=237227
        https://commits.webkit.org/r290752

2022-03-03  Tim Horton  <timothy_horton@apple.com>

        WKContentView should explicitly request the system pointer in the fallback case
        https://bugs.webkit.org/show_bug.cgi?id=237410
        <rdar://79198381>

        Reviewed by Anders Carlsson.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView pointerRegionForPositionInformation:point:]):
        (-[WKContentView pointerInteraction:styleForRegion:]):
        Instead of assuming a nil region and nil style will provide the system
        pointer, provide a region the size of the WKContentView and explicitly
        request the system pointer shape.

        Also, drive-by adopt the API `systemPointerStyle` instead of the
        deprecated SPI version.

2022-03-03  Chris Dumez  <cdumez@apple.com>

        [macOS] WebContent processes crash with XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out
        https://bugs.webkit.org/show_bug.cgi?id=237398
        <rdar://88940229>

        Reviewed by Darin Adler.

        Because we don't use RunningBoard on macOS, we leak an OS transaction to control the lifetime of our XPC
        services ourselves. However, one of the side effects of leaking this transaction is that the default SIGTERM
        handler doesn't cleanly exit our XPC services when logging out or rebooting. This led to crashes with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT as termination reason (rdar://88940229).

        To address the issue, we now set our own SIGTERM handler that releases the OS transaction and calls the
        default SIGTERM handler to exit cleanly. In the future, we should likely adopt RunningBoard on macOS and
        control our lifetime via process assertions instead of leaking this OS transaction.

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::setOSTransaction):
        (WebKit::XPCServiceExit):
        (WebKit::osTransaction): Deleted.

2022-03-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Further reduce hangs underneath -[WKContentView requestAutocorrectionContextWithCompletionHandler:]
        https://bugs.webkit.org/show_bug.cgi?id=237387
        rdar://89654600

        Reviewed by Tim Horton.

        Tweak the mitigations landed in r288925 to be even more aggressive. Currently, we preemptively send an
        autocorrection context from the web process to the UI process after receiving an IPC message from the UI process
        indicating that an input view has been shown. However, this message might arrive too late in cases where the web
        process hangs immediately after we're done setting element focus, within the very same runloop; in such a
        scenario, we'll still end up hanging underneath the sync autocorrection request underneath `-_elementDidFocus:`
        in the UI process.

        We can instead make this mitigation even more aggressive, by setting a flag on WebPage when we're about to
        propagate an `ElementDidFocus` message to the UI process that (in lieu of the WebKit client) would normally
        cause the keyboard to appear. During the next DOM selection change, we then consult this flag and preemptively
        send an autocorrection context to the UI process.

        Additionally, remove another safeguard in the original change in r288925 which effectively invalidated the
        cached autocorrection context after the end of the runloop by setting `_autocorrectionContextNeedsUpdate`. This
        was only done to narrow the scope of the fix to just the scenario where UIKit requests autocorrection contexts
        multiple times in the same runloop iteration. However, this appears to be insufficient to tackle more scenarios
        where UIKit frequently requests autocorrection contexts even though the selection has not changed; hopefully, by
        leaving `_autocorrectionContextNeedsUpdate := NO`, we can mitigate some of these other cases.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView requestAutocorrectionContextWithCompletionHandler:]):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::notifySelectionChanged):
        * WebProcess/WebCoreSupport/WebEditorClient.cpp:
        (WebKit::WebEditorClient::respondToChangedSelection):
        * WebProcess/WebCoreSupport/ios/WebChromeClientIOS.mm:
        (WebKit::WebChromeClient::notifyRevealedSelectionByScrollingFrame):
        (WebKit::WebChromeClient::didLayout):
        * WebProcess/WebCoreSupport/ios/WebEditorClientIOS.mm:
        (WebKit::WebEditorClient::overflowScrollPositionChanged):
        (WebKit::WebEditorClient::subFrameScrollPositionChanged):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didScrollSelection):
        (WebKit::WebPage::didChangeSelection):

        Split `didChangeSelection` into two methods: `didScrollSelection`, which is invoked from codepaths where we're
        scheduling an editor state after overflow or mainframe scrolling, and `didChangeSelection`, which now takes a
        `Frame` indicating the frame that contains the changed selection. On iOS, we handle this by both scheduling an
        editor state update, but also preemptively sending the autocorrection context to the UI process if we've just
        focused an element that will probably cause the keyboard to appear (unless the client explicitly prevents it).

        Note that we must check the `frame` containing the changed selection and bail if the render tree is in the
        middle of being destroyed, so that we don't end up triggering layout (and release asserting) in the case where
        we're clearing the selection during document teardown.

        (WebKit::WebPage::resetFocusedElementForFrame):
        (WebKit::WebPage::elementDidFocus):
        (WebKit::WebPage::elementDidBlur):
        (WebKit::WebPage::didCommitLoad):
        (WebKit::WebPage::didChangeOverflowScrollPosition): Deleted.
        * WebProcess/WebPage/WebPage.h:
        (WebKit::WebPage::setIsShowingInputViewForFocusedElement):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::updateSelectionAppearance):

        Pass in `frame` to `didChangeSelection`.

        (WebKit::WebPage::setIsShowingInputViewForFocusedElement): Deleted.

        Move this back into the header, now that it's a straightforward setter again.

2022-03-03  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290776): NetworkSession::swServer depends on ENABLE(SERVICE_WORKER)
        https://bugs.webkit.org/show_bug.cgi?id=237432

        Unreviewed build fix.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible):

2022-03-03  Chris Dumez  <cdumez@apple.com>

        REGRESSION(r290356-r290351?): [ iOS EWS ] 3 imported/w3c/web-platform-tests/service-workers/service-worker/* tests are constant text failures.
        https://bugs.webkit.org/show_bug.cgi?id=237160
        <rdar://problem/89440067>

        Reviewed by Youenn Fablet.

        In r290352, I made a change so that the service worker is more likely to launch in the WebContent
        process that caused it to launch. This is beneficial for performance and memory usage.

        The partitioned-service-worker*.html service worker tests are relying on an ID variable that is
        randomly generated inside the service worker and they expect this ID to not change during the
        duration of the test. This means that if the service worker exits / relaunches, those tests start
        failing because the ID changes.

        The issue is that we have logic in WebProcessProxy::didStartProvisionalLoadForMainFrame() that
        terminates the service workers running inside the WebProcess if a new eTLD+1 page is loaded inside
        the process. We do so to try and achieve better process isolation between different sites. The
        issue is that those tests launch a service worker and then open a new cross-site popup. When the
        cross-site popup loads inside the same process, we'd make the decision to terminate the service
        workers in this process and relaunch them in a new clean one, causing the tests to fail.

        While it is true per the specification that service workers can be terminated / relaunched at 
        almost any point, there are exceptions. In particular, we should keep a service worker running
        if it still has pending extendable events. For this reason, the tests rely on FetchEvent.waitUntil()
        to keep the service worker running. Sadly, we would not obey that in this case.

        To address the issue, we no longer unconditionally close the service worker context connection
        when a WebProcess loads a new eTLD+1. Instead, we tell the network process to close that connection
        as soon as possible. When the network process receives this IPC, it terminates the context 
        connection ONLY if the service workers using the connection have no pending events. If we cannot
        close the context connection right away, we set a flag on the context connection to indicate that
        we should close it as soon as possible. Currently, this flag is only used to close the connection
        right away (no 10 second delay) once the connection no longer has any clients. I think that, ideally,
        we'd close the connection as soon as the service workers no longer have pending events. However,
        this adds complexity and is error-prone so I didn't implement it in this patch and merely added a
        FIXME comment. As it stands, my patch STILL relaunches service workers in origin-clean processes
        in the common case. It only fails to do so in the case where there are pending service worker
        events which is a case where we had the correctness bug anyway.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection):
        (WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection):
        (WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient):
        (WebKit::WebSWServerToContextConnection::close):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        (WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::terminateRemoteWorkerContextConnectionWhenPossible):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame):

2022-03-03  Adrian Perez de Castro  <aperez@igalia.com>

        Non-unified build fixes, early March 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=237420

        Unreviewed non-unified build fixes.

        * UIProcess/API/APIDataTask.cpp: Add missing inclusion of DataReference.h, remove
        "#pragma once" from non-header file.
        * UIProcess/API/APIDataTaskClient.h: Add missing inclusion of DataReference.h.

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        REGRESSION (r289474): cacheStoragePath is empty in NetworkStorageManager::localOriginStorageManager
        https://bugs.webkit.org/show_bug.cgi?id=237335

        Reviewed by Chris Dumez.

        CacheStorage::Engine::storagePath returns emptyString if salt file under rootDirectory cannot be read or
        written, so we need to make sure sandbox extension for rootDirectory is consumed before calling storagePath
        (in createNetworkStorageManager of NetworkSession).

        This patch also refactors code about adding session in network process. Now we would create 
        NetworkStorageManager when NetworkSession is created.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::updateQuotaBasedOnSpaceUsageForTesting):
        (WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::createNetworkConnectionToWebProcess):
        (WebKit::NetworkProcess::addStorageSession):
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::hasLocalStorage):
        (WebKit::NetworkProcess::fetchWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteDataForOrigins):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::registrableDomainsWithWebsiteData):
        (WebKit::NetworkProcess::prepareToSuspend):
        (WebKit::NetworkProcess::resume):
        (WebKit::NetworkProcess::syncLocalStorage):
        (WebKit::NetworkProcess::resetQuota):
        (WebKit::NetworkProcess::clearStorage):
        (WebKit::NetworkProcess::didIncreaseQuota):
        (WebKit::NetworkProcess::renameOriginInWebsiteData):
        (WebKit::NetworkProcess::uiProcessBundleIdentifier):
        (WebKit::NetworkProcess::connectionToWebProcessClosed):
        (WebKit::NetworkProcess::ensureSession): Deleted.
        * NetworkProcess/NetworkProcess.h:
        (WebKit::NetworkProcess::uiProcessBundleIdentifier const): Deleted.
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::createNetworkStorageManager):
        (WebKit::NetworkSession::NetworkSession):
        (WebKit::NetworkSession::invalidateAndCancel):
        (WebKit::NetworkSession::lowMemoryHandler):
        (WebKit::NetworkSession::addServiceWorkerSession): Deleted.
        (WebKit::NetworkSession::addStorageManagerSession): Deleted.
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::storageManager):
        * NetworkProcess/NetworkSessionCreationParameters.cpp:
        (WebKit::NetworkSessionCreationParameters::encode const):
        (WebKit::NetworkSessionCreationParameters::decode):
        * NetworkProcess/NetworkSessionCreationParameters.h:
        * NetworkProcess/RemoteNetworkingContext.h: Removed.
        * NetworkProcess/cache/CacheStorageEngine.cpp:
        (WebKit::CacheStorage::Engine::requestSpace):
        * NetworkProcess/cocoa/NetworkProcessCocoa.mm:
        (WebKit::NetworkProcess::uiProcessBundleIdentifier):
        * NetworkProcess/curl/RemoteNetworkingContextCurl.cpp: Removed.
        * NetworkProcess/mac/RemoteNetworkingContext.mm: Removed.
        * NetworkProcess/soup/RemoteNetworkingContextSoup.cpp: Removed.
        * PlatformPlayStation.cmake:
        * PlatformWin.cmake:
        * Shared/WebsiteDataStoreParameters.cpp:
        (WebKit::WebsiteDataStoreParameters::encode const):
        (WebKit::WebsiteDataStoreParameters::decode):
        (WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters): Deleted.
        * Shared/WebsiteDataStoreParameters.h:
        (): Deleted.
        * SourcesCocoa.txt:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::addSession):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        (WebKit::WebsiteDataStore::resolvedIndexedDBDirectory const):
        (WebKit::WebsiteDataStore::resolvedIndexedDatabaseDirectory const): Deleted.

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        Throw proper exception on failed removeEntry() calls
        https://bugs.webkit.org/show_bug.cgi?id=237382
        <rdar://89232969>

        Reviewed by Chris Dumez.

        Updated existing tests.

        * NetworkProcess/storage/FileSystemStorageError.h:
        (WebKit::convertToException):
        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::FileSystemStorageHandle::removeEntry):

2022-03-02  Dan Glastonbury  <djg@apple.com>

        [WebGPU] Implement GPUDeviceDescriptor.requiredLimits
        https://bugs.webkit.org/show_bug.cgi?id=232741
        rdar://problem/85325316

        Reviewed by Myles C. Maxfield.

        Implement IDL bindings for requiredLimits attribute of
        GPUDeviceDescriptor.

        * Shared/WebGPU/WebGPUDeviceDescriptor.cpp:
        (WebKit::WebGPU::ConvertToBackingContext::convertToBacking):
        (WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking):
        * Shared/WebGPU/WebGPUDeviceDescriptor.h:
        (WebKit::WebGPU::DeviceDescriptor::encode const):
        (WebKit::WebGPU::DeviceDescriptor::decode):

2022-03-02  Brent Fulgham  <bfulgham@apple.com>

        [AppSSO] Correct logging messages to avoid confusing screeners that an error has occurred
        https://bugs.webkit.org/show_bug.cgi?id=237390
        <rdar://problem/89710486>

        Reviewed by Simon Fraser.

        The phrasing of the message in 'SOAuthorizationCoordinator::tryAuthorize' when a URL is not relevant for
        AppSSO flows is:

                AUTHORIZATIONCOORDINATOR_RELEASE_LOG("tryAuthorize: Cannot authorize the requested URL.");

        This leads people spelunking logs to believe that the URL can't be authorized (perhaps due to an error).

        Instead, we should more accurately report that the URL is not one that is mediated through an AppSSO flow,
        and so no AppSSO processing is needed.

        * UIProcess/Cocoa/SOAuthorization/SOAuthorizationCoordinator.mm:
        (WebKit::SOAuthorizationCoordinator::tryAuthorize):

2022-03-02  Brent Fulgham  <bfulgham@apple.com>

        [WebAuthn] Completion handler is not called when WebAuthn invoked without proper entitlements
        https://bugs.webkit.org/show_bug.cgi?id=237380
        <rdar://problem/89700242>

        Reviewed by Chris Dumez.

        WebAuthn is not permitted outside of Web Browser applications. When an application that lacks
        the full web browser entitlement attempts to invoke WebAuthn flows, we do an early return. However,
        the completion handler for this flow is bypassed, preventing applications from being informed of
        this problem.

        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::makeCredential):
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        (WebKit::WebAuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable):

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Seatbelt sandbox profile entitlement is deprecated
        https://bugs.webkit.org/show_bug.cgi?id=237374

        Reviewed by Brent Fulgham.

        Replace with new entitlement.

        * Scripts/process-entitlements.sh:

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Hard link AVPictureInPictureController
        https://bugs.webkit.org/show_bug.cgi?id=237227

        Reviewed by Brent Fulgham.

        Hard linking instead of soft linking should be a small performance improvement.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Copy context menu action should be titled "Copy Link" when long pressing a non-image link
        https://bugs.webkit.org/show_bug.cgi?id=237367
        rdar://77397886

        Reviewed by Devin Rousso.

        Change the current title of the "Copy" context menu action to "Copy Link", when showing the context menu for a
        non-image link. See below for more details.

        Tests:  fast/events/touch/ios/long-press-on-link.html
                fast/events/touch/ios/long-press-on-image.html

        * UIProcess/API/Cocoa/_WKActivatedElementInfo.mm:
        (-[_WKActivatedElementInfo _initWithInteractionInformationAtPosition:userInfo:]):
        (-[_WKActivatedElementInfo _isImage]):

        Add a helper method to return whether or not the activated element represents an image. Crucially, this will
        return YES in the case of image links, even though the activated element type is _WKActivatedElementTypeLink.
        We consult this below to still show "Copy" in the case of image links, instead of "Copy Link".

        * UIProcess/API/Cocoa/_WKActivatedElementInfoInternal.h:
        * UIProcess/API/Cocoa/_WKElementAction.mm:
        (+[_WKElementAction _elementActionWithType:customTitle:assistant:]):
        (+[_WKElementAction _elementActionWithType:info:assistant:]):

        Add a `_WKActivatedElementInfo` argument to `-_elementActionWithType:assistant:`, and use this to set a custom
        title for the menu action in the case of the Copy action for non-image links.

        (+[_WKElementAction _elementActionWithType:assistant:]): Deleted.
        * UIProcess/API/Cocoa/_WKElementActionInternal.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant _appendOpenActionsForURL:actions:elementInfo:]):
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Additionally use `-_isImage` instead of `-image` here when supplying several default Visual Look Up-related
        items; `-image` is misleading here, since it returns a non-null result even in the case of non-image elements,
        if a node snapshot was requested by the client. It's also a bit wasteful, since it means we currently create an
        image from the bitmap data while performing this check, when we really only need to know whether the hit-tested
        element was an image element.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _simulateElementAction:atLocation:]):
        (-[WKContentView _contentsOfUserInterfaceItem:]):
        (-[WKContentView _contextMenuInteraction:configurationForMenuAtLocation:completion:]):

        Include the titles of all visible menu items as an additional argument in the "contents of user interface item"
        dictionary, in the case of context menus. To do this, we take advantage of the `-updateVisibleMenuWithBlock:`
        API, which passes the currently visible `UIMenu`, to collect the titles of each visible menu item, and then
        simply return the visible menu as-is.

        See adjusted layout tests for more information.

        (-[WKContentView contextMenuInteraction:willDisplayMenuForConfiguration:animator:]):

        Move the call to `-_didShowContextMenu` to the animation completion block, such that we invoke the testing
        completion handler for `didShowContextMenuCallback` after the menu is actually visible. Importantly, this allows
        us to query the list of visible menu item titles above, by calling `-updateVisibleMenuWithBlock:`.

        * UIProcess/mac/DisplayCaptureSessionManager.mm:
        (WebKit::alertForWindowSelection):

        Drive-by fix: add quotes around the description argument to the UI string macro to fix an error when running
        the `update-webkit-localizable-strings` script.

2022-03-02  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Ensure presenter gets dismissed on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237336
        rdar://81609371

        Reviewed by Brent Fulgham.

        Always call [m_presenter dismissWithError] to ensure presenter gets dismissed.

        * UIProcess/WebAuthentication/Cocoa/AuthenticatorPresenterCoordinator.mm:
        (WebKit::AuthenticatorPresenterCoordinator::dimissPresenter):

2022-03-02  Chris Dumez  <cdumez@apple.com>

        Mousemove events double-firing in Safari
        https://bugs.webkit.org/show_bug.cgi?id=237342
        <rdar://88025610>

        Reviewed by Wenson Hsieh.

        When we constructed a WebViewImpl, we would add a mouse tracking area to the view,
        so that mouseMoved/mouseEntered/mouseExited would get called and we would be able
        to forward these mouse events to the WebContent process. However, when the view
        becomes first responder, an implicit mouse tracking area also gets added. As a
        result, we would get duplicate calls to mouseMoved/mouseEntered/mouseExited.

        We consulted with the AppKit team and their recommendation was to use a different
        owner object for our mouse tracking area and have that object forward the
        mouseMoved/mouseEntered/mouseExited calls to our WebViewImpl. In doing so, we
        can stop forwarding mouseMoved/mouseEntered/mouseExited calls from WKWebView &
        WKView, which are NOT for our mouse tracking area.

        No new tests, I tried but wasn't able to write an API test for this.
        I had trouble making the test window key so that the view would receive
        the (duplicate) mousemove events. I validated via logging that we are no longer
        getting duplicate mousemove events. I also checked on
        https://www.vsynctester.com/testing/mouse.html that the output now looks correct.

        * UIProcess/API/Cocoa/WKViewPrivate.h:
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/API/mac/WKView.mm:
        (-[WKView _simulateMouseMove:]):
        (-[WKView mouseMoved:]): Deleted.
        (-[WKView mouseEntered:]): Deleted.
        (-[WKView mouseExited:]): Deleted.
        * UIProcess/API/mac/WKWebViewMac.mm:
        (-[WKWebView _simulateMouseMove:]):
        (-[WKWebView mouseMoved:]): Deleted.
        (-[WKWebView mouseEntered:]): Deleted.
        (-[WKWebView mouseExited:]): Deleted.
        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (-[WKMouseTrackingObserver initWithViewImpl:]):
        (-[WKMouseTrackingObserver mouseMoved:]):
        (-[WKMouseTrackingObserver mouseEntered:]):
        (-[WKMouseTrackingObserver mouseExited:]):
        (WebKit::WebViewImpl::WebViewImpl):
        (WebKit::WebViewImpl::updatePrimaryTrackingAreaOptions):
        (WebKit::WebViewImpl::setPrimaryTrackingArea): Deleted.
        * UIProcess/mac/PageClientImplMac.mm:
        (WebKit::PageClientImpl::recommendedScrollbarStyleDidChange):

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        Add assertion that no two sessions share the same general storage directory
        https://bugs.webkit.org/show_bug.cgi?id=236844
        <rdar://problem/89178566>

        Reviewed by Chris Dumez.

        rdar://89190571 shows that there can be two WebsiteDataStores using the same general storage directory, when
        initializing network process. This can lead to corruption because storage code of each session runs on its own
        WorkQueue (or thread) in network process. If two sessions (WebsiteDataStores) use the same directory, the 
        directory and its files may be accessed concurrently. The correct usage is creating different persistent 
        sessions with different paths. Let's add an assertion to help find problematic use case.

        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        (WebKit::WebsiteDataStore::cacheStorageDirectory const):
        (WebKit::WebsiteDataStore::resolvedGeneralStorageDirectory const):
        (WebKit::WebsiteDataStore::generalStorageDirectory const): Deleted.

2022-03-02  Youenn Fablet  <youenn@apple.com>

        Rename MediaSampleAVFObjC::createImageSample to MediaSampleAVFObjC::createFromPixelBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237354

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        (WebKit::UserMediaCaptureManagerProxy::SourceProxy::rotateVideoFrameIfNeeded):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoSampleAvailable):

2022-03-02  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile
        https://bugs.webkit.org/show_bug.cgi?id=237195

        Reviewed by Antti Koivisto.
        Reland after revert:
        Add missing includes to JSC inlines, needed for ASAN build. Compile
        failure was hidden my unified build.

        IPC testing API needs convert message data buffer, IPC::Decoder, to
        JSValue. This is a run-time operation.
        IPC message decoding is based on templates, a compile time operation.
        IPC generator generates MessageArgumentDescriptions.cpp with
        a big switch. The switch has a case for each message name. The case would
        call templated jsValueForDecodedArguments<Arguments>, where the Arguments
        is the type tuple for the message arguments.

        The above would mean that MessageArgumentDescriptions would need to
        include all the headers for all the messages in WebKit in order
        to populate the Arguments tuple for particular message.
        This would cause MessageArgumentDescriptions to be slow to compile because
        it would need all the headers in Source/WebKit related to message parameter types.

        This would show up as slow compiles that would consume much memory (5-6gb) and do a
        lot of work.

        It would also have to compile the MessageArgumentDescriptions each time
        any of the headers were touched.

        Change this so that the big switch calls a declared but not defined
        template jsValueForDecodedMessage<MessageName> for each MessageName case in the
        switch.

        Instantiate the template for each message in the *MessageReceiver.cpp file
        that each message receiver has. This file already has to include all the
        headers used for that particular message receiver. These files are small and compile
        fast.

        After this change MessageArgumentDescriptions.cpp only includes the message
        definition headers, does not use much more than the standard 1gb+ of memory
        while compiling and is relatively fast to compile. Also if any of the dependent
        headers are touched, only the corresponding small *MessageReceiver.cpp files are compiled.

        This change is needed for further improve the JS testing API implementation.
        Adding new operations that employ the same strategy, eg. switch and a complex
        template instantiation, would possibly just make the matter worse. New operations
        that are needed are message sends, which use templates similarly to the message
        decode case that is implement here.

        This change regenerates the checked-in test content that can be used to review
        what kind of changes the real MessageArgumentDescriptions.cpp and MessageReceiver.cpps
        get.

        * Platform/IPC/JSIPCBinding.h:
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        (generate_js_value_conversion_function):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/tests/MessageArgumentDescriptions.cpp:
        (IPC::jsValueForArguments):
        (IPC::jsValueForReplyArguments):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_SendCVPixelBuffer>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_ReceiveCVPixelBuffer>):
        * Scripts/webkit/tests/TestWithIfMessageMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithIfMessage_LoadURL>):
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_SendImageData>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_ReceiveImageData>):
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_ExperimentalOperation>):
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_SendSemaphore>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_ReceiveSemaphore>):
        * Scripts/webkit/tests/TestWithStreamBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStreamBuffer_SendStreamBuffer>):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendString>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendStringSynchronized>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_ReceiveMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendAndReceiveMachSendRight>):
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_ExperimentalOperation>):

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Stop generating certain sandbox violation reports
        https://bugs.webkit.org/show_bug.cgi?id=237364

        Reviewed by Chris Dumez.

        Stop generating certain common sandbox violation reports in the WebContent process on iOS, since that
        can improve performance. We will still get telemetry for these violations.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-02  Michael Catanzaro  <mcatanzaro@gnome.org>

        [GTK] setDragImage ignores offset
        https://bugs.webkit.org/show_bug.cgi?id=237292

        Reviewed by Carlos Garcia Campos.

        Plumb the offset from the last place we have access to a DataTransfer object down to
        DragSource, where it's ultimately used. This allows web content to properly position the
        drag image under the mouse cursor.

        * UIProcess/API/gtk/DragSource.h:
        * UIProcess/API/gtk/DragSourceGtk3.cpp:
        (WebKit::DragSource::begin):
        * UIProcess/API/gtk/DragSourceGtk4.cpp:
        (WebKit::DragSource::begin):
        * UIProcess/API/gtk/PageClientImpl.cpp:
        (WebKit::PageClientImpl::startDrag):
        * UIProcess/API/gtk/PageClientImpl.h:
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseStartDrag):
        * UIProcess/API/gtk/WebKitWebViewBasePrivate.h:
        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::startDrag):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/WebCoreSupport/gtk/WebDragClientGtk.cpp:
        (WebKit::WebDragClient::startDrag):

2022-03-02  Youenn Fablet  <youenn@apple.com>

        Annotate LibWebRTC with thread safety macros
        https://bugs.webkit.org/show_bug.cgi?id=237321
        <rdar://problem/89625577>

        Unreviewed, addressing post commit style change.
        No change of behavior.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:

2022-03-02  Alex Christensen  <achristensen@webkit.org>

        Add SPI _WKDataTask
        https://bugs.webkit.org/show_bug.cgi?id=237234

        Reviewed by Tim Horton.

        When I added WKWebView._requestResource:completionHandler: I overlooked a few things.
        First, it is unable to support HTTPS because I didn't hook up authentication challenge handling to it.
        Second, it is unable to have a maximum accepted response length, which is a requirement for an adopter.
        To make these possible, I made _WKDataTask which is related to WKDownload and NSURLSessionDataTask.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::dataTaskWithRequest):
        (WebKit::NetworkProcess::cancelDataTask):
        (WebKit::NetworkProcess::requestResource): Deleted.
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::dataTaskWithRequest):
        (WebKit::NetworkSession::cancelDataTask):
        (WebKit::NetworkSession::requestResource): Deleted.
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::dataTaskWithRequest):
        (WebKit::NetworkSessionCocoa::cancelDataTask):
        (WebKit::NetworkSessionCocoa::removeDataTask):
        (WebKit::NetworkSessionCocoa::requestResource): Deleted.
        * NetworkProcess/cocoa/WKURLSessionTaskDelegate.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * NetworkProcess/cocoa/WKURLSessionTaskDelegate.mm: Added.
        (-[WKURLSessionTaskDelegate initWithIdentifier:session:]):
        (-[WKURLSessionTaskDelegate connection]):
        (-[WKURLSessionTaskDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:dataTask:didReceiveData:]):
        (-[WKURLSessionTaskDelegate URLSession:task:didCompleteWithError:]):
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/API/APIObject.h:
        * Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h:
        * Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.mm:
        (WebKit::fromAuthenticationChallengeDisposition):
        * Shared/Cocoa/APIObject.mm:
        (API::Object::newObject):
        * Shared/DataTaskIdentifier.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * Sources.txt:
        * SourcesCocoa.txt:
        * UIProcess/API/APIDataTask.cpp: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTask::setClient):
        (API::DataTask::cancel):
        (API::DataTask::DataTask):
        * UIProcess/API/APIDataTask.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTask::create):
        (API::DataTask::page):
        (API::DataTask::client const):
        * UIProcess/API/APIDataTaskClient.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTaskClient::create):
        (API::DataTaskClient::~DataTaskClient):
        (API::DataTaskClient::didReceiveChallenge const):
        (API::DataTaskClient::willPerformHTTPRedirection const):
        (API::DataTaskClient::didReceiveResponse const):
        (API::DataTaskClient::didReceiveData const):
        (API::DataTaskClient::didCompleteWithError const):
        * UIProcess/API/APIInspectorExtensionClient.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _dataTaskWithRequest:completionHandler:]):
        (-[WKWebView _requestResource:completionHandler:]): Deleted.
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/API/Cocoa/_WKDataTask.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        * UIProcess/API/Cocoa/_WKDataTask.mm: Added.
        (-[_WKDataTask cancel]):
        (-[_WKDataTask webView]):
        (-[_WKDataTask delegate]):
        (-[_WKDataTask setDelegate:]):
        (-[_WKDataTask dealloc]):
        (-[_WKDataTask _apiObject]):
        * UIProcess/API/Cocoa/_WKDataTaskDelegate.h: Added.
        * UIProcess/API/Cocoa/_WKDataTaskInternal.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::dataTaskWithRequest):
        (WebKit::NetworkProcessProxy::dataTaskReceivedChallenge):
        (WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection):
        (WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse):
        (WebKit::NetworkProcessProxy::dataTaskDidReceiveData):
        (WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError):
        (WebKit::NetworkProcessProxy::requestResource): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::dataTaskWithRequest):
        (WebKit::WebPageProxy::requestResource): Deleted.
        * UIProcess/WebPageProxy.h:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-01  Youenn Fablet  <youenn@apple.com>

        Remove RemoteVideoSample support from ImageTransferSessionVT
        https://bugs.webkit.org/show_bug.cgi?id=237318

        Reviewed by Eric Carlson.

        Remove no longer needed forward declaration or include of RemoteVideoSample.
        Remove ImageTransferSessionVT::createMediaSample(RemoteVideoSample&&) and replace it with direct use of MediaSampleAVFObjC.

        No change of behavior.

        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/UserMediaCaptureManager.h:

2022-03-01  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290588.

        Patch r290588 caused ASAN build to fail on macOS

        Reverted changeset:

        "IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to
        compile"
        https://bugs.webkit.org/show_bug.cgi?id=237195
        https://commits.webkit.org/r290588

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        Fix clean build

        * UnifiedSources-output.xcfilelist:

2022-03-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        Clipboard Paste dialog doesn't show on external monitors
        https://bugs.webkit.org/show_bug.cgi?id=236395
        rdar://88943577

        Reviewed by Tim Horton.

        Fix the bug by aligning the way we generate synthetic mouse click NSEvents in WebKit2 macOS, when:

        1. Showing the standard web content context menu
        2. Showing the DOM paste menu
        3. Showing the context menu for PDFs

        Critically, this makes AppKit choose the correct NSScreen when presenting the popup menu when showing the DOM
        paste menu, if the last mouse down event is `nil` upon presenting the menu.

        Covered by adding a debug assertion to verify that we aren't trying to present popup menus from a `nil` event
        during DOM paste.

        * UIProcess/API/mac/WKWebViewTestingMac.mm:
        (-[WKWebView _activeMenu]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::requestDOMPasteAccess):
        * UIProcess/WebPageProxy.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::showContextMenuWithItems):
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::showPDFContextMenu):
        (WebKit::WebPageProxy::activeContextMenu const):

        Renamed from `platformActiveContextMenu`. The "platform" prefix in front of this method was unnecessary, since
        this is only invoked from macOS-only code that expects an NSMenu anyways.

        (WebKit::WebPageProxy::createSyntheticEventForContextMenu const):

        Add a helper method to create a synthetic NSEvent at the given location that's suitable for presenting a context
        menu; use this new helper in the three places described above.

        (WebKit::WebPageProxy::platformActiveContextMenu const): Deleted.

2022-03-01  Michael Catanzaro  <mcatanzaro@gnome.org>

        Misc compiler warnings, late Feb 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=237275

        Reviewed by Adrian Perez de Castro.

        Delete an unused function. Remove a redundant move.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::applySandboxProfileForDaemon): Deleted.
        * Shared/WebFoundTextRange.cpp:
        (WebKit::WebFoundTextRange::decode):

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        Prepare to add more files to WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237343

        Reviewed by Chris Dumez.

        This fixes the build after bug 237234, and it's unrelated so I pulled it into a different patch.

        * Scripts/generate-unified-sources.sh:
        * UIProcess/Cocoa/WebURLSchemeHandlerCocoa.mm:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-01  Said Abou-Hallawa  <said@apple.com>

        [macOS][REGRESSION] (rr289518): Form controls are scaled twice on Retina display
        https://bugs.webkit.org/show_bug.cgi?id=237128
        rdar://89064642

        Reviewed by Darin Adler.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::createImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createAlignedImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createCompatibleImageBuffer const): Deleted.
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-01  Eric Carlson  <eric.carlson@apple.com>

        [Cocoa] HLS stream currentTime sometimes jumps backwards
        https://bugs.webkit.org/show_bug.cgi?id=235087
        rdar://83831093

        Reviewed by Dean Jackson.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::currentTimeChanged): Always notify player when
        time jumps backwards.

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Move StorageBucket function definitions outside the class definition
        https://bugs.webkit.org/show_bug.cgi?id=237300

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::mode const):
        (WebKit::OriginStorageManager::StorageBucket::setMode):
        (WebKit::OriginStorageManager::StorageBucket::StorageBucket):
        (WebKit::OriginStorageManager::StorageBucket::connectionClosed):
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier const):
        (WebKit::OriginStorageManager::StorageBucket::typeStoragePath const):
        (WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::localStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingLocalStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::sessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingSessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::idbStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingIDBStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::isActive const):
        (WebKit::OriginStorageManager::StorageBucket::isEmpty):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk):
        (WebKit::OriginStorageManager::StorageBucket::deleteData):
        (WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData):
        (WebKit::OriginStorageManager::StorageBucket::moveData):
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::toWebsiteDataType): Deleted.
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier): Deleted.

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        If the main resource was loaded over private relay, load all sub resources over private relay
        https://bugs.webkit.org/show_bug.cgi?id=237296

        Reviewed by Geoffrey Garen.

        I manually verified that this fixes rdar://88965550 when using the CFNetwork change in the related bug.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::createSocketChannel):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::transferToNewWebProcess):
        (WebKit::NetworkResourceLoader::didRetrieveCacheEntry):
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::createWebSocketTask):
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/NetworkSocketChannel.cpp:
        (WebKit::NetworkSocketChannel::create):
        (WebKit::NetworkSocketChannel::NetworkSocketChannel):
        * NetworkProcess/NetworkSocketChannel.h:
        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess):
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::connect):

2022-03-01  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Allow logging to be configured by NSDefaults (without regressing launch time)
        https://bugs.webkit.org/show_bug.cgi?id=237183

        Reviewed by Darin Adler.

        In r220780, code was added to WebProcessPoolCocoa to explicitly pass the results of a NSUserDefaults
        to newly created WebContent processes to determine log channel levels. Later, in r232158, NSUserDefaults
        were removed from the default logLevelString() implementations in WTF, WebCore, and WebKit to improve
        process launch time performance. In r279796, the same technique sued in WebProcessPoolCocoa was added
        to GPUProcessProxyCocoa to pass those log level strings to the GPUProcess. And then in r286484, all the
        uses of NSUserDefaults were removed from WebProcessPoolCocoa and GPUProcessProxyCocoa were removed,
        removing the ability to increase the log channel levels at runtime through NSUserDefualts.

        Add back in the ability to define log levels for the UIProcess and all AuxiliaryProcesses without
        regressing launch time by only checking the NSUserDefault once, only in the UIProcess, storing the result
        in a static variable, and passing the results of that check to all AuxiliaryProcesses at creation time.

        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters):
        * UIProcess/Cocoa/UIProcessLogInitializationCocoa.mm: Added.
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.cpp: Added.
        (WebKit::UIProcess::initializeLoggingIfNecessary):
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.h: Added.
        * UIProcess/WebProcessPool.cpp:

2022-03-01  Youenn Fablet  <youenn@apple.com>

        Annotate LibWebRTC with thread safety macros
        https://bugs.webkit.org/show_bug.cgi?id=237321

        Reviewed by Eric Carlson.

        LibWebRTCCodecs works with 3 threads and we add macros to make it clear where each thread is used:
        - the main thread to get its GPU process connection (isMainRunLoop()).
        - the libwebrtc thread where it gets orders to decode/encode frames (!isMainRunLoop())
        - the work queue thread where it is receiving encode/decode results (assertIsCurrent(workQueue())).

        Rename m_encodersLock to m_encodersConnectionLock to make it clear this is about locking the encoder connection and not the encoder map.
        Both decoder and encoder maps should only be touched on the workQueue thread.

        Introduce encoderConnection/setEncoderConnection and decoderConnection/setDecoderConnection routines.
        These methods are guarded by corresponding locks.
        This requires adding some additional locks when accessing connections in workQueue thread.
        Fix a potential issue when creating the encoder: we lock the encoderConnection lock earlier when setting the connection.

        Covered by existing tests.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionMayNoLongerBeNeeded):
        (WebKit::LibWebRTCCodecs::createDecoder):
        (WebKit::LibWebRTCCodecs::releaseDecoder):
        (WebKit::LibWebRTCCodecs::decodeFrame):
        (WebKit::LibWebRTCCodecs::registerDecodeFrameCallback):
        (WebKit::LibWebRTCCodecs::failedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        (WebKit::LibWebRTCCodecs::createEncoder):
        (WebKit::LibWebRTCCodecs::releaseEncoder):
        (WebKit::LibWebRTCCodecs::initializeEncoder):
        (WebKit::LibWebRTCCodecs::copySharedVideoFrame):
        (WebKit::LibWebRTCCodecs::encodeFrame):
        (WebKit::LibWebRTCCodecs::registerEncodeFrameCallback):
        (WebKit::LibWebRTCCodecs::setEncodeRates):
        (WebKit::LibWebRTCCodecs::completedEncoding):
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose):
        (WebKit::LibWebRTCCodecs::encoderConnection):
        (WebKit::LibWebRTCCodecs::setEncoderConnection):
        (WebKit::LibWebRTCCodecs::decoderConnection):
        (WebKit::LibWebRTCCodecs::setDecoderConnection):
        (WebKit::copySharedVideoFrame): Deleted.
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        (WebKit::LibWebRTCCodecs::workQueue const):

2022-03-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        focus({preventScroll: true}) does not prevent scrolling on iOS
        https://bugs.webkit.org/show_bug.cgi?id=236584
        rdar://88911184

        Reviewed by Simon Fraser.

        Add support for `preventScroll` on iOS by avoiding UI-side zooming/scrolling to reveal the focused element if it
        was focused with `preventScroll: true`. See below for more details.

        Tests: fast/forms/select-focus-prevent-scroll.html
               fast/forms/text-field-focus-prevent-scroll.html

        * Shared/FocusedElementInformation.cpp:
        (WebKit::FocusedElementInformation::encode const):
        (WebKit::FocusedElementInformation::decode):
        * Shared/FocusedElementInformation.h:

        Add a boolean flag to `FocusedElementInformation` to indicate whether or not scrolling to reveal the focused
        element should be prevented.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _zoomToRevealFocusedElement]):

        Only zoom to reveal the focused element if the focused element information's `preventScroll` flag is `NO`.

        (-[WKContentView _elementDidBlur]):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::elementDidFocus):
        (WebKit::WebChromeClient::elementDidRefocus):
        * WebProcess/WebCoreSupport/WebChromeClient.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::elementDidRefocus):
        (WebKit::WebPage::elementDidFocus):

        Use `FocusOptions` to set the `preventScroll` flag when propagating `FocusedElementInformation`.

        * WebProcess/WebPage/WebPage.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL GPUP OpenGL context is not used even if WebGL via Metal is deselected
        https://bugs.webkit.org/show_bug.cgi?id=236505

        Reviewed by Myles C. Maxfield.

        * Shared/WebCoreArgumentCoders.cpp:
        * Shared/WebCoreArgumentCoders.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        GraphicsContextGL related includes are inconsistent, slowing the build
        https://bugs.webkit.org/show_bug.cgi?id=237270

        Reviewed by Alexey Proskuryakov.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Migrate third-party IndexedDB data to GeneralStorageDirectory
        https://bugs.webkit.org/show_bug.cgi?id=237283

        Reviewed by Chris Dumez.

        In current storage layout, third-party IndexedDB data is stored in a subdirectory of top origin directory, e.g.
        [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[Database]. First-party data is stored in the top origin
        directory, e.g. [IndexedDBDirectory]/[TopOrigin]/[Database]. Our current migration code directly renames the 
        origin directory without checking whether it has subdirectory that is a third-party directory. That means, 
        [IndexedDBDirectory]/[TopOrigin]/ is moved to [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/, 
        and [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/ is moved to 
        [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/[ThirdPartyOrigin] ([ThirdPartyOrigin]/ here is
        treated as a database directory). This is wrong: the new third-party directory should actually be 
        [GeneralStorageDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[IndexedDB]/.

        To fix this, we now make sure only first-party data is migrated when first-party IndexedDB database is visited,
        by moving only database directories under origin directory.

        Test: IndexedDB.MigrateThirdPartyDataToGeneralStorageDirectory

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginDataImpl):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):
        (WebKit::IDBStorageManager::migrateOriginData):
        (WebKit::migrateOriginData): Deleted.
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):

2022-02-28  Chris Dumez  <cdumez@apple.com>

        [IPC] Do more hardening in WebSWServerConnection's client registration / unregistration
        https://bugs.webkit.org/show_bug.cgi?id=237290
        <rdar://88903506>

        Reviewed by Alex Christensen.

        Validate client identifiers sent by the WebContent process via IPC to make sure that the
        process identifier of the client actually matches the process identifier of the process
        we're connected to.

        Also validate the SecurityOriginData to make sure it is not empty. We support sending
        empty SecurityOriginData objects over IPC. However, they cannot be used as keys in
        HashMaps.

        If validation fails, we assume the WebContent process is compromised and we terminate it.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::registerServiceWorkerClient):
        (WebKit::WebSWServerConnection::unregisterServiceWorkerClient):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix use-after-move bug in NetworkResourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=237294

        Reviewed by Chris Dumez.

        Luckily, they were just two booleans, and after you call std::move on a bool you get
        technically undefined behavior.  Luckily, in practice the bool value is unchanged.
        We don't need to rely on that, though.  Let's read from the location with defined behavior.

        * NetworkProcess/NetworkResourceLoader.cpp:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290470): CDMInstanceSession::setLogIdentifier must be guarded with !RELEASE_LOG_DISABLED
        https://bugs.webkit.org/show_bug.cgi?id=237302

        Unreviewed build fix.

        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):

2022-02-28  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Darin Adler.

        Revert r290544 as it does not fully fix the flaky test. The flakiness is caused by network process exiting
        before transactions of SQLiteStorageArea are committed. In NetworkProcess::destroySession, we schedule a 
        background task to commit transactions in the session, and remove session. In NetworkProcess::didClose, for 
        existing sessions, we schedule tasks to commit transaction and wait until the tasks are finished before exiting 
        network process. That means for a session, when NetworkProcess::destroySession is called before 
        NetworkProcess::didClose, process may exit before commit task (scheduled by NetworkProcess::destroySession) is
        finished (NetworkProcess::didClose does not wait because session is already removed). 

        To solve this issue, let NetworkProcess::didClose check existing NetworkStorageManagers, instead of 
        NetworkSessions. NetworkStorageManager can outlive NetworkSession when it's finishing cleanup task
        (including committing transactions) on its background thread; we want to ensure process exits after the cleanup
        task is done.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::allNetworkStorageManagers):
        (WebKit::NetworkStorageManager::forEach):
        (WebKit::NetworkStorageManager::NetworkStorageManager):
        (WebKit::NetworkStorageManager::~NetworkStorageManager):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):
        (WebKit::commitTransactionsAtExit): Deleted.

2022-02-28  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Adopt -streamDataParser:didProvideContentKeySpecifier:forTrackID: delegate callback
        https://bugs.webkit.org/show_bug.cgi?id=236109
        <rdar://problem/88785844>

        Reviewed by Eric Carlson.

        Pass the new RuntimeEnabledFeature through to the GPU process.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::setSampleBufferContentKeySessionSupportEnabled):
        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/GPUProcessCreationParameters.cpp:
        (WebKit::GPUProcessCreationParameters::encode const):
        (WebKit::GPUProcessCreationParameters::decode):
        * GPUProcess/GPUProcessCreationParameters.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::updatePreferences):
        * UIProcess/GPU/GPUProcessProxy.h:

2022-02-28  Chris Dumez  <cdumez@apple.com>

        Adopt the modern Hasher more widely
        https://bugs.webkit.org/show_bug.cgi?id=237262

        Reviewed by Sam Weinig.

        * NetworkProcess/cache/NetworkCache.h:
        (WebKit::NetworkCache::add):
        (WTF::GlobalFrameIDHash::hash):
        (WebKit::NetworkCache::GlobalFrameID::hash const): Deleted.
        * Platform/IPC/StringReference.cpp:
        (IPC::StringReference::Hash::hash):
        * Platform/IPC/StringReference.h:
        (IPC::add):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix typo in adattributiond sandbox
        https://bugs.webkit.org/show_bug.cgi?id=237279

        Reviewed by Chris Dumez.

        After this change, it matches the value in com.apple.webkit.adattributiond.plist

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290588): Broke WinCairo and PlayStation debug builds
        https://bugs.webkit.org/show_bug.cgi?id=237277

        Unreviewed build fix.

        * Scripts/webkit/messages.py:
        (conditions_for_header):

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290588) Missing symbol jsValueForDecodedMessage<107> (IPCStreamTesterProxy_WasCreated)
        https://bugs.webkit.org/show_bug.cgi?id=237268

        Reviewed by Antti Koivisto.

        Add the class IPCStreamTesterProxy now that *MessageReceiver.cpp
        are needed. After commit
        "IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile"
        MessageReceiver.cpp files contain also message-specific functions that
        need to be compiled, even though IPCStreamTesterProxy itself is not
        used.

        * Shared/IPCStreamTesterProxy.h: Added.
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:

2022-02-28  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap should process its IPC messages in a background thread
        https://bugs.webkit.org/show_bug.cgi?id=237198

        Reviewed by Darin Adler.

        Minor refactoring to have addWorkQueueMessageReceiver take a reference instead of a pointer.
        Make RemoteVideoFrameObjectHeap become a WorkQueueMessageReceiver.
        This ensures that a main thread hang in GPUProcess will not block big memory releases or WebProcess access to pixel buffers.

        No observable change of behavior.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::didClose):
        (WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap const):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::remoteVideoFrameObjectHeapQueue):
        (WebKit::RemoteVideoFrameObjectHeap::create):
        (WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::close):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC): Deleted.
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * NetworkProcess/IndexedDB/WebIDBServer.cpp:
        (WebKit::WebIDBServer::addConnection):
        * NetworkProcess/WebStorage/StorageManagerSet.cpp:
        (WebKit::StorageManagerSet::addConnection):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::startReceivingMessageFromConnection):
        * NetworkProcess/webrtc/RTCDataChannelRemoteManagerProxy.cpp:
        (WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess):
        * Platform/IPC/Connection.cpp:
        (IPC::Connection::addWorkQueueMessageReceiver):
        * Platform/IPC/Connection.h:
        * UIProcess/mac/SecItemShimProxy.cpp:
        (WebKit::SecItemShimProxy::initializeConnection):
        * WebProcess/GPU/media/RemoteAudioSourceProviderManager.cpp:
        (WebKit::RemoteAudioSourceProviderManager::setConnection):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/Inspector/WebInspectorInterruptDispatcher.cpp:
        (WebKit::WebInspectorInterruptDispatcher::initializeConnection):
        * WebProcess/Network/webrtc/RTCDataChannelRemoteManager.cpp:
        (WebKit::RTCDataChannelRemoteManager::setConnection):
        * WebProcess/WebPage/EventDispatcher.cpp:
        (WebKit::EventDispatcher::initializeConnection):
        * WebProcess/WebPage/ViewUpdateDispatcher.cpp:
        (WebKit::ViewUpdateDispatcher::initializeConnection):

2022-02-28  Youenn Fablet  <youenn@apple.com>

        Ensure RemoteMediaPlayerProxy sets its resource owner to pixel buffers created by its player
        https://bugs.webkit.org/show_bug.cgi?id=237200

        Reviewed by Eric Carlson.

        Set resource owner to the player private.

        * GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp:
        (WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer):
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy):
        * GPUProcess/media/RemoteMediaPlayerProxy.h:

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile
        https://bugs.webkit.org/show_bug.cgi?id=237195

        Reviewed by Antti Koivisto.

        IPC testing API needs convert message data buffer, IPC::Decoder, to
        JSValue. This is a run-time operation.
        IPC message decoding is based on templates, a compile time operation.
        IPC generator generates MessageArgumentDescriptions.cpp with
        a big switch. The switch has a case for each message name. The case would
        call templated jsValueForDecodedArguments<Arguments>, where the Arguments
        is the type tuple for the message arguments.

        The above would mean that MessageArgumentDescriptions would need to
        include all the headers for all the messages in WebKit in order
        to populate the Arguments tuple for particular message.
        This would cause MessageArgumentDescriptions to be slow to compile because
        it would need all the headers in Source/WebKit related to message parameter types.

        This would show up as slow compiles that would consume much memory (5-6gb) and do a
        lot of work.

        It would also have to compile the MessageArgumentDescriptions each time
        any of the headers were touched.

        Change this so that the big switch calls a declared but not defined
        template jsValueForDecodedMessage<MessageName> for each MessageName case in the
        switch.

        Instantiate the template for each message in the *MessageReceiver.cpp file
        that each message receiver has. This file already has to include all the
        headers used for that particular message receiver. These files are small and compile
        fast.

        After this change MessageArgumentDescriptions.cpp only includes the message
        definition headers, does not use much more than the standard 1gb+ of memory
        while compiling and is relatively fast to compile. Also if any of the dependent
        headers are touched, only the corresponding small *MessageReceiver.cpp files are compiled.

        This change is needed for further improve the JS testing API implementation.
        Adding new operations that employ the same strategy, eg. switch and a complex
        template instantiation, would possibly just make the matter worse. New operations
        that are needed are message sends, which use templates similarly to the message
        decode case that is implement here.

        This change regenerates the checked-in test content that can be used to review
        what kind of changes the real MessageArgumentDescriptions.cpp and MessageReceiver.cpps
        get.

        * Platform/IPC/JSIPCBinding.h:
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        (generate_js_value_conversion_function):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/tests/MessageArgumentDescriptions.cpp:
        (IPC::jsValueForArguments):
        (IPC::jsValueForReplyArguments):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_SendCVPixelBuffer>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_ReceiveCVPixelBuffer>):
        * Scripts/webkit/tests/TestWithIfMessageMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithIfMessage_LoadURL>):
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_SendImageData>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_ReceiveImageData>):
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_ExperimentalOperation>):
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_SendSemaphore>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_ReceiveSemaphore>):
        * Scripts/webkit/tests/TestWithStreamBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStreamBuffer_SendStreamBuffer>):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendString>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendStringSynchronized>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_ReceiveMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendAndReceiveMachSendRight>):
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_ExperimentalOperation>):

2022-02-27  Sihui Liu  <sihui_liu@apple.com>

        Add a feature flag for using general storage directory
        https://bugs.webkit.org/show_bug.cgi?id=237186
        rdar://89521373

        Reviewed by Chris Dumez.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.cpp:
        (WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.h:

2022-02-27  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Deleted unneeded constructors from DisplayList::Recorder classes
        https://bugs.webkit.org/show_bug.cgi?id=237261

        Reviewed by Wenson Hsieh.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-02-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Invoking "Markup Image" should preserve the existing selection range
        https://bugs.webkit.org/show_bug.cgi?id=237242

        Reviewed by Darin Adler.

        Make a few adjustments to `replaceWithPasteboardData`, such that it attempts to restore the previous selection
        range after replacing the target element. If the previous selection is no longer valid (i.e., it was orphaned as
        a result of the editing command used to replace the element), then we fall back to restoring the visible
        character range of the previous selection, relative to the editable root (or the body if there is none).

        API tests will be added in https://webkit.org/b/236519, once we're able to swizzle out the underlying VisionKit
        methods in order to make these tests run reliably.

        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement):
        (WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement):

        Add a helper RAII object that encapsulates logic for setting and unsetting data on the override pasteboard. Use
        this in the two methods below.

        (WebKit::WebPage::replaceWithPasteboardData):

        Switch to using the refactored `Editor::replaceNodeFromPasteboard` method instead of calling to the adjacent
        `replaceSelectionWithPasteboardData` method below. Using this method allows us to avoid manually selecting the
        target element here, and also avoids smart pasteboard replacement (which may insert spaces before or after the
        image); the latter is important in order to correctly restore the previous selection's character range in the
        case where the previous selection range was orphaned by the replacement.

        (WebKit::WebPage::replaceSelectionWithPasteboardData):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Omit template parameter for SetForScope<> variables
        https://bugs.webkit.org/show_bug.cgi?id=237258

        Reviewed by Darin Adler.

        * NetworkProcess/storage/QuotaManager.cpp:
        (WebKit::QuotaManager::handleRequests):
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (createEncodedObject):
        (decodeObject):
        * UIProcess/API/glib/InputMethodFilter.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (WebKitWebViewClient::frameDisplayed):
        * UIProcess/API/gtk/InputMethodFilterGtk.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _keyboardChangedWithInfo:adjustScrollView:]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::updateTextTouchBar):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::open):
        (WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow):
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren):
        * UIProcess/_WKWebViewPrintFormatter.mm:
        (-[_WKWebViewPrintFormatter _setSnapshotPaperRect:]):
        * UIProcess/gtk/ClipboardGtk3.cpp:
        (WebKit::Clipboard::write):
        * UIProcess/gtk/WebDateTimePickerGtk.cpp:
        (WebKit::WebDateTimePickerGtk::update):
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView becomeFirstResponderForWebView]):
        (-[WKContentView resignFirstResponderForWebView]):
        (-[WKContentView unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded]):
        (-[WKContentView _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]):
        (-[WKContentView _elementDidBlur]):
        * UIProcess/ios/forms/WKDateTimeInputControl.mm:
        (-[WKDateTimePicker handleDatePickerPresentationDismissal]):
        (-[WKDateTimePicker removeDatePickerPresentation]):
        * WebProcess/Plugins/Plugin.cpp:
        (WebKit::Plugin::destroyPlugin):
        * WebProcess/WebPage/CoordinatedGraphics/CompositingCoordinator.cpp:
        (WebKit::CompositingCoordinator::flushPendingLayerChanges):
        (WebKit::CompositingCoordinator::purgeBackingStores):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::updateRendering):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::stopLoadingDueToProcessSwap):
        (WebKit::WebPage::mouseEvent):
        (WebKit::WebPage::keyEvent):
        (WebKit::WebPage::restoreSessionInternal):
        (WebKit::WebPage::dispatchTouchEvent):
        (WebKit::WebPage::setInitialFocus):
        (WebKit::WebPage::setActivityState):
        (WebKit::WebPage::insertTextAsync):
        (WebKit::WebPage::createAppHighlightInSelectedRange):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::completeSyntheticClick):
        (WebKit::WebPage::requestDragStart):
        (WebKit::WebPage::requestAdditionalItemsForDragSession):
        (WebKit::WebPage::selectPositionAtPoint):
        (WebKit::WebPage::dynamicViewportSizeUpdate):
        (WebKit::WebPage::focusTextInputContextAndPlaceCaret):
        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::updateRendering):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::prepareToSuspend):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Simplify SerializedScriptValue construction
        https://bugs.webkit.org/show_bug.cgi?id=237241

        Reviewed by Darin Adler.

        Update code base to reflect SerializedScriptValue API changes.

        * Shared/API/APISerializedScriptValue.h:
        (API::SerializedScriptValue::createFromWireBytes):
        (API::SerializedScriptValue::dataReference const):
        (API::SerializedScriptValue::adopt): Deleted.
        * Shared/SessionState.cpp:
        (WebKit::PageState::encode const):
        * Shared/UserData.cpp:
        (WebKit::UserData::decode):
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _evaluateJavaScript:asAsyncFunction:withSourceURL:withArguments:forceUserGesture:inFrame:inWorld:completionHandler:]):
        * UIProcess/Inspector/WebInspectorUIExtensionControllerProxy.cpp:
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptInExtensionTab):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::didPostMessage):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld):
        * WebProcess/Inspector/WebInspectorUIExtensionController.cpp:
        (WebKit::WebInspectorUIExtensionController::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionController::evaluateScriptInExtensionTab):
        * WebProcess/UserContent/WebUserContentController.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        (WebKit::applyFrameState):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::runJavaScript):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://problem/89354367>

        Reviewed by Darin Adler.

        When doing a process swap on navigation (PSON), we start a new provisional load in the new provisional
        process and ask the committed process to stop all loads. Since we swap in decidePolicyForNavigationAction,
        no provisional load has started in the committed process yet. If the provisional process sends us a
        didFailProvisionalLoad though, we know the provisional load has failed and we take this into consideration
        and notify the client app.

        When doing a process swap on resource response (due to COOP), we were behaving differently and it was
        causing some confusion. Since we swap on resource response, the provisional load has started in the
        committed process by the time we process-swap (unlike PSON). We were also not asking for the committed
        process to stop/cancel this provisional load. As a result, a provisional load would still be going on
        in the committed process while another provisional load starts happening in the provisional page / process.
        Then, if the provisional process would send us a didFailProvisional, we would not pass it along to the
        client app. Instead we would destroy the ProvisionalPageProxy, which would tell the committed process to
        stop loading and send its own didFailProvisionalLoad, and the client app would eventually get notified.

        Even though the difference in behavior was confusing, it was working in most cases. There was however
        an edge case where it didn't work and we would fail to tell the client app that the provisional load
        had failed. In particular, we would run into trouble when navigating cross-site to a site that adopted
        the COOP header. We would first do a process-swap on navigation, stop the provisional load in the committed
        process A, then start a provisional load in process B. We would then get the COOP header and we would
        start a new provisional load in process C. Process B would go away since we cannot have 2 provisional
        pages / processes at the same time for the same WebPageProxy. Then if the provisional load fails in
        process C, we would ignore the didFailProvisionalLoad from process C and destroy the provisional page.
        We would tell the committed process A to stop loading, expecting it to send its own didFailProvisionalLoad
        but it wouldn't happen since PSON had already stopped all loading in process A earlier when swapping to
        process B.

        To address the issue, we align COOP process swap with PSON process swap. We now has the committed process
        to stop all loads when process swapping on resource response due to COOP. As a result, when the provisional
        load fails in the provisional process, we can simply pass it along to the client, no matter if the process
        swap occurred due to PSON or COOP.

        Covered by new API test.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::~ProvisionalPageProxy):
        We no longer need to tell the committed process to stop loading when the provisional page gets destroyed
        and this was a process swap on resource response. The reason is that when process-swapping on navigation
        response, we now drop the provisional load in the committed process right away, like in the PSON case.

        (WebKit::ProvisionalPageProxy::cancel):
        When cancelling a provisional load due to PSON or COOP, we need to notify the client that the provisional
        load failed. We used to only to it in the PSON case. We now do it for both PSON and COOP since they
        behave the same.

        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):
        Similarly as above, now that PSON and COOP behave the same, we need to pass the didFailProvisionalLoad
        from the provisional process to the client app for both PSON and COOP (Not just PSON).

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation):
        When triggering a process swap on resource response (due to COOP), we now stop the provisional load going
        on in the committed process to be consistent with what we do in the PSON case. This way there is only a
        single provisional load going on and it is happening in the provisional page / process.


2022-02-27  Youenn Fablet  <youenn@apple.com>

        Exposing RemoteVideoFrameProxy::write is unneeded
        https://bugs.webkit.org/show_bug.cgi?id=237212

        Reviewed by Eric Carlson.

        Exposing RemoteVideoFrameProxy::write is unneeded as RemoteVideoFrameProxy is immutable.
        It is best to remove it as calling write() inadvertently would break things.
        Renaming read() to newReadReference() to make it clear that we are creating a new read reference
        that needs to be sent to GPUProcess to prevent leaks.
        No change of behavior.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy):
        (WebKit::RemoteVideoFrameProxy::newReadReference const):
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        (WebKit::RemoteVideoFrameProxy::write const): Deleted.
        (WebKit::RemoteVideoFrameProxy::read const): Deleted.
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::encodeFrame):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteCaptureSampleManager, UserMediaSampleCaptureManagerProxy create the RemoteVideoFrame in incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237134

        Reviewed by Youenn Fablet.

        UserMediaSampleCaptureManagerProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, UserMediaSampleCaptureManagerProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0).

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailable):
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailableCV):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:

2022-02-26  Chris Dumez  <cdumez@apple.com>

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing
        https://bugs.webkit.org/show_bug.cgi?id=237231

        Reviewed by Darin Adler.

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing. Some people expect it to compare
        pointers while other expect it to compare the values we hold references to.
        It seems best to omit this operator and be explicit at call sites.

        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::cacheMediaMIMETypes):
        * UIProcess/VisitedLinkStore.cpp:
        (WebKit::VisitedLinkStore::removeAll):
        (WebKit::VisitedLinkStore::sendStoreHandleToProcess):
        (WebKit::VisitedLinkStore::didUpdateSharedStringHashes):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::shouldTerminate):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        Multiple concurrency violations in LibWebRTCCodecsProxy
        https://bugs.webkit.org/show_bug.cgi?id=236767
        <rdar://88904160>

        Reviewed by Antti Koivisto.

        - ThreadMessageReceivers should not add IPC listeners in constructors,
        as the delivery starts right away and uses the unconstructed virtual pointer.
        - The work queue functions should not use GPUConnectionToWebProcess, as that is
        main thread object.
        - Locked m_encoders, m_decoders are sometimes accessed without lock.

        Instead:
        - Add the IPC listeners in initialize function.
        - Remove the IPC listeners when GPUConnectionToWebProcess disconnects.
        - Store the thread-safe conection, video frame object heap, process identity
        objects as member variables.
        - Do not lock m_encoders, m_decoders. If they are work queue instances,
        just access them in the work queue functions. Add thread requirements
        to the variables so that the compiler checks the access.
        - Use IPC testing assertions when skipping incorrect messages.
        - Use separate atomic counter (bool) to check if allowsExitUnderMemoryPressure.

        No new tests, tested with existing tests and ASAN.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess):
        (WebKit::GPUConnectionToWebProcess::didClose):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::create):
        (WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy):
        (WebKit::LibWebRTCCodecsProxy::stopListeningForIPC):
        (WebKit::LibWebRTCCodecsProxy::initialize):
        (WebKit::LibWebRTCCodecsProxy::dispatchToThread):
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        (WebKit::LibWebRTCCodecsProxy::createH264Decoder):
        (WebKit::LibWebRTCCodecsProxy::createH265Decoder):
        (WebKit::LibWebRTCCodecsProxy::createVP9Decoder):
        (WebKit::LibWebRTCCodecsProxy::releaseDecoder):
        (WebKit::LibWebRTCCodecsProxy::createEncoder):
        (WebKit::LibWebRTCCodecsProxy::releaseEncoder):
        (WebKit::LibWebRTCCodecsProxy::initializeEncoder):
        (WebKit::LibWebRTCCodecsProxy::findEncoder):
        (WebKit::LibWebRTCCodecsProxy::encodeFrame):
        (WebKit::LibWebRTCCodecsProxy::setEncodeRates):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory):
        (WebKit::LibWebRTCCodecsProxy::allowsExitUnderMemoryPressure const):

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Alexey Proskuryakov.

        Commit transactions of SQLiteStorageArea at exit of network process.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::commitTransactionsAtExit):
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):

2022-02-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Adjust -[WKContentView _requiresKeyboardWhenFirstResponder] to account for editable web views
        https://bugs.webkit.org/show_bug.cgi?id=237226
        rdar://89447095

        Reviewed by Aditya Keerthi.

        Adjust the implementation of `-[WKContentView _requiresKeyboardWhenFirstResponder]`, such that it returns YES
        for editable web views, except for the scenario where an input field that does *not* require the automatic
        keyboard is currently focused in the page inside the editable web view (e.g. a `readonly` text field).

        UIKit consults this method to know whether or not a given responder would require the keyboard (either software
        keyboard or the minimized UCB for hardware keyboard) if it were to become the first responder. For web views
        that are made editable in the SPI sense, we know a-priori that this should return YES, unless a readonly element
        underneath the web view has focus (in which case, `_disableAutomaticKeyboardUI` would be true).

        Test: KeyboardInputTests.EditableWebViewRequiresKeyboardWhenFirstResponder

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _requiresKeyboardWhenFirstResponder]):

2022-02-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Implement RemoteImageBufferProxy::drawConsuming()
        https://bugs.webkit.org/show_bug.cgi?id=236685
        rdar://89007426

        Reviewed by Simon Fraser.

        RemoteImageBufferProxy::drawConsuming() should call drawImageBuffer() of
        the destination GraphicsContext. No recursion will happen and the expected
        behavior will be achieved by this change. 

        This is the sequence of calls when the Destination GraphicsContext is
        local and when it is remote:

        -- Destination GraphicsContext is local:
           In this case, the backend of the RemoteImageBufferProxy can be mapped
           in WebProcess; i.e. we do have access to its memory.
           ConcreteImageBuffer::draw() will be called eventually. This function
           will call its backend->draw() which will get a NativeImage by calling
           backend->copyNativeImage(). There is no difference between draw() and
           drawConsuming() in this case because the backend is still owned by
           GPUProcess. So it will not be released immediately. We do not copy the
           pixels since we have to pass DontCopyBackingStore to copyNativeImage().

        -- Destination GraphicsContext is remote:
           In this case, Recorder::drawImageBuffer() will be called which will
           call RemoteDisplayListRecorderProxy::recordDrawImageBuffer(). This
           will send a message to GPUProcess and hence all the drawing will 
           happen in GPUProcess. Similar to the case of the local GraphicsContext,
           no pixels will be copied from the RemoteImageBuffer backend to the
           NativeImage in all cases. The assumption is the backend will be destroyed
           automatically after calling drawConsuming().

        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:

2022-02-25  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fallback to attestation=none whenever attestation fails
        https://bugs.webkit.org/show_bug.cgi?id=237223
        rdar://88767812

        Reviewed by Brent Fulgham.

        Whenever attestation is requested by a RP and it fails to complete,
        we previously errored out of the registration. The more correct platform
        behavior in this case is to provide attestation=none.

        Created API test for this behavior.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterAttested):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Add access to required mach service in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=237216
        <rdar://89176897>

        Reviewed by Brent Fulgham.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:

2022-02-25  Brent Fulgham  <bfulgham@apple.com>

        WebKit continues to render PDF images in Captive Portal mode
        https://bugs.webkit.org/show_bug.cgi?id=237120
        <rdar://problem/89384234>

        Reviewed by Chris Dumez.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess): Turn PDF image decoding off when in CaptivePortal mode.

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        Regression(r242729): m_origin in IDBDatabaseIdentifier is incorrect
        https://bugs.webkit.org/show_bug.cgi?id=237044

        Reviewed by Youenn Fablet.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginData):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Make sure there is a default Networking process to provide the Launch Services database
        https://bugs.webkit.org/show_bug.cgi?id=236629

        Reviewed by Brent Fulgham.

        The WebContent processes relies on getting the Launch Services database from the Networking process.
        It is possible to enter a state where there is no default Network process, but a Network process is
        running because a Website data store is holding a reference to it. This patch addresses this issue
        by removing Network process references in all remaining Website data stores when the last process
        pool is being deleted.

        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::~WebProcessPool):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::removeNetworkProcessReference):
        * UIProcess/WebsiteData/WebsiteDataStore.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Better isolate RemoteVideoFrameObjectHeap clients from ThreadSafeObjectHeap implementation details
        https://bugs.webkit.org/show_bug.cgi?id=237191

        Reviewed by Kimmo Kinnunen.

        Refactoring to make RemoteVideoFrameObjectHeap API independent of ThreadSafeObjectHeap.
        This makes code more readable and simplifies client side usage as well,
        for instance by not having to care about timers, or using more known names like add/get instead of retire.

        No change of behavior.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * Shared/ThreadSafeObjectHeap.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Remove unused soft linking declarations
        https://bugs.webkit.org/show_bug.cgi?id=237209

        Reviewed by Brent Fulgham.

        * WebProcess/cocoa/WebProcessCocoa.mm:

2022-02-25  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r289580): [ iOS macOS ] TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory is a constant timeout
        https://bugs.webkit.org/show_bug.cgi?id=236744

        Reviewed by Antti Koivisto.

        Add new tester interface for testing IPC stream features.

        Before, TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory would test the feature of
        "can reply stream sync message with shared memory" by using a RemoteRenderingBackend
        message that did so. However, when the RemoteRenderingBackend was changed to use a
        different stategy, this test stopped working without compile failure. The IPC testing
        is currently done at JS level.

        After, the new dedicated testing interface IPCStreamTester has dedicated message for
        testing this feature. The test is moved to LayoutTests/ipc and made so that
        it tests the feature in all currently testable processes WP uses (GPU, Networking, UI).

        IPCTestingAPI is amended to return the all possible testable process names, so
        the .html test can work even when ENABLE(GPU_PROCESS) is toggled.

        The .html test also passes when !ENABLE(IPC_TESTING_API). Currently
        ENABLE_IPC_TESTING_API == (ASAN_ENABLED || !defined(NDEBUG)) && PLATFORM(COCOA)
        E.g. test tests something on Release+ASAN or Debug.

        Having the test in .html also makes it possible to run the test on iOS devices.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/IPCStreamTester.cpp: Added.
        (WebKit::IPCStreamTester::create):
        (WebKit::IPCStreamTester::IPCStreamTester):
        (WebKit::IPCStreamTester::initialize):
        (WebKit::IPCStreamTester::stopListeningForIPC):
        (WebKit::IPCStreamTester::syncMessageReturningSharedMemory1):
        * Shared/IPCStreamTester.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTester.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCStreamTesterIdentifier.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTesterProxy.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCTester.cpp:
        (WebKit::IPCTester::createStreamTester):
        (WebKit::IPCTester::releaseStreamTester):
        * Shared/IPCTester.h:
        * Shared/IPCTester.messages.in:
        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPC::staticValues):
        (WebKit::IPCTestingAPI::processTargetFromArgument):
        (WebKit::IPCTestingAPI::JSIPC::processTargets):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Optimize black frame sending in MediaRecorderPrivate
        https://bugs.webkit.org/show_bug.cgi?id=237027

        Reviewed by Kimmo Kinnunen.

        Add support for sending black frames through SharedVideoFrame.
        In that case, we only send width and height and we reconstruct a black frame on receiver side.
        Make use of SharedVideoFrame in RemoteMediaRecorder.
        Set ownership in SharedVideoFrame to the corresponding WebProcess.

        Covered by existing tests, in particular http/wpt/mediarecorder/mute-tracks.html.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Remove dead code in GPUProcessConnection::dispatchMessage
        https://bugs.webkit.org/show_bug.cgi?id=237135

        Reviewed by Kimmo Kinnunen.

        No change of behavior.

        * WebProcess/GPU/GPUProcessConnection.cpp:
        (WebKit::GPUProcessConnection::dispatchMessage):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Make RemoteVideoFrameIdentifier a regular ObjectIdentifier
        https://bugs.webkit.org/show_bug.cgi?id=237136

        Reviewed by Kimmo Kinnunen.

        Given all RemoteVideoFrames are created in GPUProcess, we no longer need to use a ProcessQualified identifier.
        Covered by existing tests.

        * WebProcess/GPU/media/RemoteVideoFrameIdentifier.h:

2022-02-24  Alex Christensen  <achristensen@webkit.org>

        Unreviewed, reverting r290371.

        Caused assertion

        Reverted changeset:

        "Call WKNavigationDelegate.didFailProvisionalNavigation even
        after a cross-origin navigation with COOP"
        https://bugs.webkit.org/show_bug.cgi?id=237071
        https://commits.webkit.org/r290371

2022-02-24  Gavin Phillips  <gavin.p@apple.com>

        Port CaptivePortalMode preferences to AnyHost in order to support CFPrefs Direct Mode propagation
        https://bugs.webkit.org/show_bug.cgi?id=237098

        Reviewed by Brent Fulgham.

        Move our CaptivePortalMode preference to AnyHost in order to correctly support
        CFPrefs Direct Mode propagation. We also now dispatch a CFNotification to ensure our preference
        observer is always notified of the change.

        * UIProcess/Cocoa/PreferenceObserver.mm:
        (-[WKUserDefaults findPreferenceChangesAndNotifyForKeys:toValuesForKeys:]):

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::AuxiliaryProcess::setPreferenceValue):
        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        (+[_WKSystemPreferences setCaptivePortalModeEnabled:]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::captivePortalModeConfigUpdateCallback):
        (WebKit::WebProcessPool::registerNotificationObservers):
        (WebKit::WebProcessPool::unregisterNotificationObservers):
        * UIProcess/WebProcessPool.h:

2022-02-24  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add support for replacing WKFoundTextRanges
        https://bugs.webkit.org/show_bug.cgi?id=237151
        rdar://89258687

        Reviewed by Wenson Hsieh.

        Implement protocol methods to support replacement.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::replaceFoundTextRangeWithString):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView replaceFoundTextInRange:inDocument:withText:]):
        (-[WKContentView supportsTextReplacement]):

        Restrict replacement to editable web views.

        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString):

        Use a `TemporarySelectionChange` to select and replace the desired range.

        * WebProcess/WebPage/WebFoundTextRangeController.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::replaceFoundTextRangeWithString):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Take down shared worker context connection less aggressively when it becomes idle
        https://bugs.webkit.org/show_bug.cgi?id=237156

        Reviewed by Darin Adler.

        Take down shared worker context connection less aggressively when it becomes idle. Give it 5
        seconds before shutting it down in case it ends up being used again in the near future.

        This is similar to what we do for service workers.

        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        (WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection):
        (WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:

2022-02-24  Jer Noble  <jer.noble@apple.com>

        [Refactor] Adopt LoggerHelper in Legacy EME classes
        https://bugs.webkit.org/show_bug.cgi?id=234319

        Reviewed by Eric Carlson.

        * GPUProcess/media/RemoteCDMFactoryProxy.cpp:
        (WebKit::RemoteCDMFactoryProxy::createCDM):
        (WebKit::RemoteCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteCDMFactoryProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.cpp:
        (WebKit::RemoteCDMInstanceProxy::create):
        (WebKit::RemoteCDMInstanceProxy::RemoteCDMInstanceProxy):
        (WebKit::RemoteCDMInstanceProxy::createSession):
        * GPUProcess/media/RemoteCDMInstanceProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.messages.in:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::create):
        (WebKit::RemoteCDMInstanceSessionProxy::RemoteCDMInstanceSessionProxy):
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.h:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * GPUProcess/media/RemoteCDMProxy.cpp:
        (WebKit::RemoteCDMProxy::create):
        (WebKit::RemoteCDMProxy::RemoteCDMProxy):
        (WebKit::RemoteCDMProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMProxy.h:
        (WebKit::RemoteCDMProxy::logger const):
        (WebKit::RemoteCDMProxy::logIdentifier const):
        * GPUProcess/media/RemoteCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp:
        (WebKit::RemoteLegacyCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.cpp:
        (WebKit::RemoteLegacyCDMProxy::createSession):
        * GPUProcess/media/RemoteLegacyCDMProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.cpp:
        (WebKit::RemoteLegacyCDMSessionProxy::create):
        (WebKit::RemoteLegacyCDMSessionProxy::RemoteLegacyCDMSessionProxy):
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.h:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::createSession):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:
        * WebProcess/GPU/media/RemoteCDM.cpp:
        (WebKit::RemoteCDM::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDM.h:
        * WebProcess/GPU/media/RemoteCDMConfiguration.h:
        (WebKit::RemoteCDMConfiguration::encode const):
        (WebKit::RemoteCDMConfiguration::decode):
        * WebProcess/GPU/media/RemoteCDMFactory.cpp:
        (WebKit::RemoteCDMFactory::createCDM):
        * WebProcess/GPU/media/RemoteCDMFactory.h:
        * WebProcess/GPU/media/RemoteCDMInstance.cpp:
        (WebKit::RemoteCDMInstance::createSession):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.cpp:
        (WebKit::RemoteCDMInstanceSession::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.h:
        * WebProcess/GPU/media/RemoteLegacyCDM.cpp:
        (WebKit::RemoteLegacyCDM::createSession):
        * WebProcess/GPU/media/RemoteLegacyCDM.h:
        * WebProcess/GPU/media/RemoteLegacyCDMSession.cpp:
        (WebKit::RemoteLegacyCDMSession::create):
        (WebKit::RemoteLegacyCDMSession::RemoteLegacyCDMSession):
        * WebProcess/GPU/media/RemoteLegacyCDMSession.h:

2022-02-24  Sihui Liu  <sihui_liu@apple.com>

        Delete SessionStorageQuotaManager
        https://bugs.webkit.org/show_bug.cgi?id=237132

        Reviewed by Chris Dumez.

        The code is unused since r289474.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::addSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::removeSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::setSessionStorageQuotaManagerIDBRootPath): Deleted.
        (WebKit::NetworkProcess::storageQuotaManager): Deleted.
        * NetworkProcess/NetworkProcess.h:
        (WebKit::NetworkProcess::SessionStorageQuotaManager::SessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::defaultQuota const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::ensureOriginStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::existingStorageQuotaManagers): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::cacheRootPath const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::setIDBRootPath): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::idbRootPath const): Deleted.

2022-02-24  Devin Rousso  <drousso@apple.com>

        REGRESSION(r290436): fix build failures
        https://bugs.webkit.org/show_bug.cgi?id=237149

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        Replace `PAL::get_PassKitCore_*()` with `#define` declared in `<pal/cocoa/PassKitSoftLink.h>`.

2022-02-24  Wenson Hsieh  <wenson_hsieh@apple.com>

        Refactor logic for showing "Markup Image" and Quick Note items in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=237127
        rdar://89396617

        Reviewed by Megan Gardner.

        Use `-buildMenuWithBuilder:` to supply additional Quick Note and image analysis items, instead of adding them
        directly to the shared menu controller. See below for more details.

        Tests:  ImageAnalysisTests.MenuControllerItems
                WebKit.AppHighlightsInImageOverlays

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView didMoveToWindow]):

        See below.

        (-[WKWebView buildMenuWithBuilder:]):

        Override this method and call into the content view via `-buildMenuForWebViewWithBuilder:` to populate the given
        builder with either Quick Note or "Markup Image" items, if necessary. Note that overriding this method on
        WKWebView is sufficient, since UIKit walks up the responder hierarchy starting from the first responder
        (WKContentView) when populating menu items.

        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView targetForAction:withSender:]):

        Move some logic for conditionally enabling the Quick Note items into `-imageAnalysisMarkupMenu`.

        (-[WKContentView imageAnalysisMarkupMenu]):
        (-[WKContentView _selectionChanged]):

        Remove logic that updates the shared UIMenuController's menu items every time the selection changes. This is
        no longer needed, since UIKit will always call into `-buildMenuWithBuilder:` when presenting the callout bar,
        which allows us to lazily run logic to determine whether or not we should show the Quick Note and image analysis
        items when the callout bar is shown, instead of keeping the menu controller's `-menuItems` array up to date upon
        each selection change.

        (-[WKContentView buildMenuForWebViewWithBuilder:]):

        Consult `-appHighlightMenu` and `-imageAnalysisMarkupMenu` to populate the menu with inline UIMenus. Note that
        these menus' items are always inlined into the callout bar as top-level items, since we explicitly specify
        `UIMenuOptionsDisplayInline` when creating the menu.

        (-[WKContentView menuWithInlineAction:identifier:handler:]):
        (-[WKContentView appHighlightMenu]):

        Refactor this, and `-imageAnalysisMarkupMenu` above to return a UIMenu with a single UIAction presented inline.

        (-[WKContentView updateImageAnalysisMarkupMenuItems:]): Deleted.

        Replaced with `-imageAnalysisMarkupMenu`.

        (-[WKContentView canPerformImageAnalysisMarkup]): Deleted.
        (-[WKContentView performImageAnalysisMarkup:]): Deleted.
        (-[WKContentView setUpAdditionalMenuControllerActions]): Deleted.
        (findMenuItemWithAction): Deleted.
        (-[WKContentView updateAppHighlightMenuItems:]): Deleted.

        Replaced with `-appHighlightMenu`.

        (-[WKContentView createHighlightForCurrentQuickNoteWithRange:]): Deleted.
        (-[WKContentView createHighlightForNewQuickNoteWithRange:]): Deleted.

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Regression(r273929) FrameState no longer gets a move constructor
        https://bugs.webkit.org/show_bug.cgi?id=237142

        Reviewed by Darin Adler.

        FrameState no longer gets an implicit move constructor since r273929 because a custom
        destructor was added.

        * Shared/SessionState.h:

2022-02-24  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP console logging
        https://bugs.webkit.org/show_bug.cgi?id=232216
        <rdar://problem/89322580>

        Reviewed by Brent Fulgham.

        * NetworkProcess/NetworkLoadChecker.cpp:
        (WebKit::NetworkLoadChecker::check):
        (WebKit::NetworkLoadChecker::checkRedirection):
        (WebKit::NetworkLoadChecker::checkRequest):
        (WebKit::NetworkLoadChecker::isAllowedByContentSecurityPolicy):
        * NetworkProcess/NetworkLoadChecker.h:

2022-02-24  Devin Rousso  <drousso@apple.com>

        [MacCatalyst] REGRESSION(r290091): sometimes can crash if `WKWebView` is deallocated before the next visible content rect update
        https://bugs.webkit.org/show_bug.cgi?id=237126
        <rdar://problem/89345853>

        Reviewed by Tim Horton.

        Tests: WKWebViewResize.DoesNotAssertInDeallocAfterChangingFrame
               WKWebViewResize.DoesNotAssertInDeallocAfterChangingBounds

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _acquireResizeAssertionForReason:]):
        (-[WKWebView _invalidateResizeAssertions]): Added.
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView dealloc]):
        Make sure to `-invalidate` any remaining assertions in `-dealloc` as required by `_UIInvalidatable`.

2022-02-24  Devin Rousso  <drousso@apple.com>

        [Apple Pay] switch from `PassKit/*` to `PassKit[Core,UI]/*`
        https://bugs.webkit.org/show_bug.cgi?id=237091
        <rdar://problem/81085862>

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard):
        (WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup):
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        * WebProcess/ApplePay/cocoa/WebPaymentCoordinatorCocoa.mm:
        (WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks):

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        LibWebRTCCodecs, -Proxy create and communicate the RemoteVideoFrameProxy incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237083

        Reviewed by Youenn Fablet.
        LibWebRTCCodecsProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, LibWebRTCCodecsProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0). This works towards being able
        to remove RemoteVideoFrameObjectHeap::createVideoFrame.

        Split the completedDecoding to two:
        - completedDecoding used to send new RemoteVideoFrames
        - completedDecodingCV to send CoreVideo specific RemoteVideoSample instances (which will
          removed eventually).

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::Function<void):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis to assert "code is run sequentially" is not useful when code is mainly run with WorkQueues
        https://bugs.webkit.org/show_bug.cgi?id=236832

        Reviewed by Antti Koivisto.

        Assert directly that the work queues are current instead of using ThreadAssertion.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL):
        (WebKit::RemoteGraphicsContextGL::displayWasReconfigured):
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        (WebKit::RemoteGraphicsContextGL::didComposite):
        (WebKit::RemoteGraphicsContextGL::forceContextLost):
        (WebKit::RemoteGraphicsContextGL::dispatchContextChangedNotification):
        (WebKit::RemoteGraphicsContextGL::reshape):
        (WebKit::RemoteGraphicsContextGL::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGL::synthesizeGLError):
        (WebKit::RemoteGraphicsContextGL::getError):
        (WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled):
        (WebKit::RemoteGraphicsContextGL::markContextChanged):
        (WebKit::RemoteGraphicsContextGL::paintRenderingResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample):
        (WebKit::RemoteGraphicsContextGL::paintPixelBufferToImageBuffer):
        (WebKit::RemoteGraphicsContextGL::simulateEventForTesting):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        (WebKit::RemoteGraphicsContextGL::workQueue const):
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        (WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame):
        (WebKit::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize):
        (WebKit::RemoteGraphicsContextGLCocoa::prepareForDisplay):
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (moveErrorsToSyntheticErrorList):
        (activeTexture):
        (attachShader):
        (bindAttribLocation):
        (bindBuffer):
        (bindFramebuffer):
        (bindRenderbuffer):
        (bindTexture):
        (blendColor):
        (blendEquation):
        (blendEquationSeparate):
        (blendFunc):
        (blendFuncSeparate):
        (checkFramebufferStatus):
        (clear):
        (clearColor):
        (clearDepth):
        (clearStencil):
        (colorMask):
        (compileShader):
        (copyTexImage2D):
        (copyTexSubImage2D):
        (createBuffer):
        (createFramebuffer):
        (createProgram):
        (createRenderbuffer):
        (createShader):
        (createTexture):
        (cullFace):
        (deleteBuffer):
        (deleteFramebuffer):
        (deleteProgram):
        (deleteRenderbuffer):
        (deleteShader):
        (deleteTexture):
        (depthFunc):
        (depthMask):
        (depthRange):
        (detachShader):
        (disable):
        (disableVertexAttribArray):
        (drawArrays):
        (drawElements):
        (enable):
        (enableVertexAttribArray):
        (finish):
        (flush):
        (framebufferRenderbuffer):
        (framebufferTexture2D):
        (frontFace):
        (generateMipmap):
        (getActiveAttrib):
        (getActiveUniform):
        (getAttribLocation):
        (getBufferParameteri):
        (getString):
        (getFloatv):
        (getIntegerv):
        (getInteger64):
        (getInteger64i):
        (getProgrami):
        (getBooleanv):
        (getFramebufferAttachmentParameteri):
        (getProgramInfoLog):
        (getRenderbufferParameteri):
        (getShaderi):
        (getShaderInfoLog):
        (getShaderPrecisionFormat):
        (getShaderSource):
        (getTexParameterf):
        (getTexParameteri):
        (getUniformfv):
        (getUniformiv):
        (getUniformuiv):
        (getUniformLocation):
        (getVertexAttribOffset):
        (hint):
        (isBuffer):
        (isEnabled):
        (isFramebuffer):
        (isProgram):
        (isRenderbuffer):
        (isShader):
        (isTexture):
        (lineWidth):
        (linkProgram):
        (pixelStorei):
        (polygonOffset):
        (renderbufferStorage):
        (sampleCoverage):
        (scissor):
        (shaderSource):
        (stencilFunc):
        (stencilFuncSeparate):
        (stencilMask):
        (stencilMaskSeparate):
        (stencilOp):
        (stencilOpSeparate):
        (texParameterf):
        (texParameteri):
        (uniform1f):
        (uniform1fv):
        (uniform1i):
        (uniform1iv):
        (uniform2f):
        (uniform2fv):
        (uniform2i):
        (uniform2iv):
        (uniform3f):
        (uniform3fv):
        (uniform3i):
        (uniform3iv):
        (uniform4f):
        (uniform4fv):
        (uniform4i):
        (uniform4iv):
        (uniformMatrix2fv):
        (uniformMatrix3fv):
        (uniformMatrix4fv):
        (useProgram):
        (validateProgram):
        (vertexAttrib1f):
        (vertexAttrib1fv):
        (vertexAttrib2f):
        (vertexAttrib2fv):
        (vertexAttrib3f):
        (vertexAttrib3fv):
        (vertexAttrib4f):
        (vertexAttrib4fv):
        (vertexAttribPointer):
        (viewport):
        (bufferData0):
        (bufferData1):
        (bufferSubData):
        (readnPixels0):
        (readnPixels1):
        (texImage2D0):
        (texImage2D1):
        (texSubImage2D0):
        (texSubImage2D1):
        (compressedTexImage2D0):
        (compressedTexImage2D1):
        (compressedTexSubImage2D0):
        (compressedTexSubImage2D1):
        (drawArraysInstanced):
        (drawElementsInstanced):
        (vertexAttribDivisor):
        (createVertexArray):
        (deleteVertexArray):
        (isVertexArray):
        (bindVertexArray):
        (copyBufferSubData):
        (getBufferSubData):
        (blitFramebuffer):
        (framebufferTextureLayer):
        (invalidateFramebuffer):
        (invalidateSubFramebuffer):
        (readBuffer):
        (renderbufferStorageMultisample):
        (texStorage2D):
        (texStorage3D):
        (texImage3D0):
        (texImage3D1):
        (texSubImage3D0):
        (texSubImage3D1):
        (copyTexSubImage3D):
        (compressedTexImage3D0):
        (compressedTexImage3D1):
        (compressedTexSubImage3D0):
        (compressedTexSubImage3D1):
        (getFragDataLocation):
        (uniform1ui):
        (uniform2ui):
        (uniform3ui):
        (uniform4ui):
        (uniform1uiv):
        (uniform2uiv):
        (uniform3uiv):
        (uniform4uiv):
        (uniformMatrix2x3fv):
        (uniformMatrix3x2fv):
        (uniformMatrix2x4fv):
        (uniformMatrix4x2fv):
        (uniformMatrix3x4fv):
        (uniformMatrix4x3fv):
        (vertexAttribI4i):
        (vertexAttribI4iv):
        (vertexAttribI4ui):
        (vertexAttribI4uiv):
        (vertexAttribIPointer):
        (drawRangeElements):
        (drawBuffers):
        (clearBufferiv):
        (clearBufferuiv):
        (clearBufferfv):
        (clearBufferfi):
        (createQuery):
        (deleteQuery):
        (isQuery):
        (beginQuery):
        (endQuery):
        (getQuery):
        (getQueryObjectui):
        (createSampler):
        (deleteSampler):
        (isSampler):
        (bindSampler):
        (samplerParameteri):
        (samplerParameterf):
        (getSamplerParameterf):
        (getSamplerParameteri):
        (fenceSync):
        (isSync):
        (deleteSync):
        (clientWaitSync):
        (waitSync):
        (getSynci):
        (createTransformFeedback):
        (deleteTransformFeedback):
        (isTransformFeedback):
        (bindTransformFeedback):
        (beginTransformFeedback):
        (endTransformFeedback):
        (transformFeedbackVaryings):
        (getTransformFeedbackVarying):
        (pauseTransformFeedback):
        (resumeTransformFeedback):
        (bindBufferBase):
        (bindBufferRange):
        (getUniformIndices):
        (getActiveUniforms):
        (getUniformBlockIndex):
        (getActiveUniformBlockName):
        (uniformBlockBinding):
        (getActiveUniformBlockiv):
        (getGraphicsResetStatusARB):
        (getTranslatedShaderSourceANGLE):
        (drawBuffersEXT):
        (getInternalformativ):
        (multiDrawArraysANGLE):
        (multiDrawArraysInstancedANGLE):
        (multiDrawElementsANGLE):
        (multiDrawElementsInstancedANGLE):
        (paintRenderingResultsToPixelBuffer):
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::RemoteGPU):
        (WebKit::RemoteGPU::initialize):
        (WebKit::RemoteGPU::stopListeningForIPC):
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * Platform/IPC/StreamConnectionWorkQueue.cpp:
        (IPC::StreamConnectionWorkQueue::assertIsCurrent const):
        * Platform/IPC/StreamConnectionWorkQueue.h:
        (IPC::WTF_ASSERTS_ACQUIRED_CAPABILITY):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290175): Texture upload from video and user media is slower than expected for non-GPUP WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237034

        Reviewed by Youenn Fablet.

        Add back the code-path to obtain the IOSurface backed CVPixelBuffers directly
        via IPC transfer. This is used on macOS where WebGL is in WP.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:

2022-02-23  Don Olmstead  <don.olmstead@sony.com>

        Fix !ENABLE(SERVICE_WORKER) build after r290387
        https://bugs.webkit.org/show_bug.cgi?id=237119

        Unreviewed build fix.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):

2022-02-23  Maxim Cournoyer  <maxim.cournoyer@gmail.com>

        [WPE][GTK] Paths should be canonicalized before calling bwrap
        https://bugs.webkit.org/show_bug.cgi?id=211131

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindSymlinksRealPath): Relocate earlier in file,
        add a 'bindOption' argument and use FileSystem::realPath instead
        of realpath from the standard C library.
        (WebKit::bindIfExists): Use the modified above procedure to
        canonicalize the source path, and avoid adding bind mounts for
        locations under /etc.

2022-02-23  Liliana Marie Prikler <liliana.prikler@gmail.com>

        Bubblewrap launcher doesn't bind font locations from XDG_DATA_DIRS
        https://bugs.webkit.org/show_bug.cgi?id=237089

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindFonts): Expose font directories present in the
        XDG_DATA_DIRS environment variable.

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Adopt more widely the new URL constructor that takes in a String
        https://bugs.webkit.org/show_bug.cgi?id=237099

        Reviewed by Darin Adler.

        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        * Shared/API/APISecurityOrigin.h:
        (API::SecurityOrigin::createFromString):
        * Shared/API/APIURL.h:
        (API::URL::parseURLIfNecessary const):
        * Shared/API/c/WKURLRequest.cpp:
        (WKURLRequestCreateWithWKURL):
        * Shared/API/glib/WebKitURIRequest.cpp:
        (webkit_uri_request_set_uri):
        * Shared/APIWebArchiveResource.mm:
        (API::WebArchiveResource::WebArchiveResource):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * Shared/curl/WebCoreArgumentCodersCurl.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * Shared/gtk/ArgumentCodersGtk.cpp:
        (IPC::ArgumentCoder<SelectionData>::decode):
        * Shared/soup/WebCoreArgumentCodersSoup.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * UIProcess/API/C/WKOpenPanelResultListener.cpp:
        (filePathsFromFileURLs):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageLoadURL):
        (WKPageLoadURLWithShouldOpenExternalURLsPolicy):
        (WKPageLoadURLWithUserData):
        (WKPageLoadAlternateHTMLStringWithUserData):
        (WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting):
        (WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting):
        (WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting):
        * UIProcess/API/C/WKPageGroup.cpp:
        (WKPageGroupAddUserStyleSheet):
        (WKPageGroupAddUserScript):
        * UIProcess/API/C/WKWebsiteDataStoreRef.cpp:
        (WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode):
        (WKWebsiteDataStoreSetStatisticsLastSeen):
        (WKWebsiteDataStoreSetStatisticsMergeStatistic):
        (WKWebsiteDataStoreSetStatisticsExpiredStatistic):
        (WKWebsiteDataStoreSetStatisticsPrevalentResource):
        (WKWebsiteDataStoreSetStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo):
        (WKWebsiteDataStoreSetStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce):
        (WKWebsiteDataStoreSetStatisticsGrandfathered):
        (WKWebsiteDataStoreIsStatisticsGrandfathered):
        (WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration):
        (WKWebsiteDataStoreStatisticsDeleteCookiesForTesting):
        (WKWebsiteDataStoreStatisticsHasLocalStorage):
        (WKWebsiteDataStoreStatisticsHasIsolatedSession):
        (WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetAppBoundDomainsForTesting):
        * UIProcess/API/C/curl/WKWebsiteDataStoreRefCurl.cpp:
        (WKWebsiteDataStoreEnableCustomNetworkProxySettings):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        * UIProcess/API/glib/WebKitCookieManager.cpp:
        (webkit_cookie_manager_get_cookies):
        * UIProcess/API/glib/WebKitSecurityOrigin.cpp:
        (webkit_security_origin_new_for_uri):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webkit_web_view_load_alternate_html):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _uiEventAttribution]):
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::navigateBrowsingContext):
        (WebKit::WebAutomationSession::addSingleCookie):
        (WebKit::WebAutomationSession::deleteAllCookies):
        * UIProcess/Cocoa/LegacyDownloadClient.mm:
        (WebKit::LegacyDownloadClient::legacyDidStart):
        * UIProcess/Cocoa/NavigationState.mm:
        (WebKit::NavigationState::NavigationClient::willPerformClientRedirect):
        (WebKit::NavigationState::NavigationClient::didPerformClientRedirect):
        * UIProcess/Cocoa/WKReloadFrameErrorRecoveryAttempter.mm:
        (-[WKReloadFrameErrorRecoveryAttempter attemptRecovery]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::isURLKnownHSTSHost const):
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::load):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::isMainOrTestInspectorPage):
        (WebKit::WebInspectorUIProxy::openLocalInspectorFrontend):
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformSave):
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformSave):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::launchProcessForReload):
        (WebKit::WebPageProxy::loadFile):
        (WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick):
        (WebKit::WebPageProxy::reload):
        (WebKit::WebPageProxy::goToBackForwardItem):
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::sessionState const):
        (WebKit::checkIfNavigationContainsDataTransfer):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::contextMenuItemSelected):
        (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::processForNavigationInternal):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::assumeReadAccessToBaseURL):
        (WebKit::WebProcessProxy::checkURLReceivedFromWebProcess):
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::platformSetNetworkParameters):
        (WebKit::WebsiteDataStore::initializeAppBoundDomains):
        * UIProcess/mac/LegacySessionStateCoding.cpp:
        (WebKit::decodeLegacySessionState):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::validateMerchant):
        * WebProcess/InjectedBundle/API/c/WKBundleFrame.cpp:
        (WKBundleFrameAllowsFollowingLink):
        (WKBundleFrameCopySuggestedFilenameForResourceWithURL):
        (WKBundleFrameCopyMIMETypeForResourceWithURL):
        * WebProcess/InjectedBundle/API/c/WKBundlePage.cpp:
        (WKBundlePageHasLocalDataForURL):
        (WKBundlePageClearApplicationCacheForOrigin):
        (WKBundlePageGetAppCacheUsageForOrigin):
        * WebProcess/InjectedBundle/InjectedBundle.cpp:
        (WebKit::InjectedBundle::setUserStyleSheetLocation):
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::isValidFetch):
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFormData):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::loadData):
        (WebKit::WebPage::loadAlternateHTML):
        (WebKit::WebPage::getResourceDataFromFrame):
        * webpushd/PushService.mm:
        (WebPushD::PushService::didReceivePushMessage):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Share more code between service and shared workers for context connection establishment
        https://bugs.webkit.org/show_bug.cgi?id=237085

        Reviewed by Youenn Fablet.

        Share more code between service and shared workers for context connection establishment.

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        (WebKit::WebSharedWorker::firstSharedWorkerObjectProcess const):
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript):
        (WebKit::WebSharedWorkerServer::createContextConnection):
        (WebKit::WebSharedWorkerServer::removeContextConnection):
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::NetworkProcessProxy::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcessPool::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::establishRemoteWorkerContext):
        (WebKit::WebProcessProxy::establishServiceWorkerContext): Deleted.
        (WebKit::WebProcessProxy::establishSharedWorkerContext): Deleted.
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcess::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcess::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        Prevent use of PDFKit when using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237052
        rdar://89251696

        Reviewed by Tim Horton.

        PDFKit was still being used by embeds, this patch fixes that issue by treating
        pdf embeds as frames if PDF.js is enabled and also prevents the loading of
        the PDFKit plugin entirely by modifying shouldUsePDFPlugin.

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] userHandle not marked nullable in _WKWebAuthenticationAssertionResponse
        https://bugs.webkit.org/show_bug.cgi?id=237043
        rdar://89317740

        Reviewed by Brent Fulgham.

        The userHandle is a nullable field on UserEntity. This patch changes
        various API/SPI to allow passing null userHandle.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        Update forward declared SPI, reflecting userHandle as nullable.
        * UIProcess/API/Cocoa/_WKAuthenticatorAssertionResponseInternal.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationAssertionResponse.h:
        Update userHandle property to null.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (getAllLocalAuthenticatorCredentialsImpl):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticatorInternal::getExistingCredentials):

2022-02-23  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] De-initialize GStreamer before terminating WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237084

        Reviewed by Carlos Garcia Campos.

        Allowing the leak tracer to report/log leaks. There is an issue though, if the UIProcess
        exits too early, the leak tracer reporting will be interrupted potentially too early. The
        workaround is to have 2 tabs open in the GTK MiniBrowser, closing the one where media
        handling and leak tracing was done and keeping the second tab open.

        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025
        <rdar://problem/89343447>

        Reviewed by Darin Adler.

        Updated https://commits.webkit.org/r290358 according comments given during review.

        * Platform/IPC/ArgumentCoders.h:
        (IPC::ArgumentCoder<std::nullptr_t>::encode):
        (IPC::ArgumentCoder<std::nullptr_t>::decode):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):
        (WebKit::SharedVideoFrameReader::SharedVideoFrameReader):
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        (WebKit::SharedVideoFrame::encode const):
        (WebKit::SharedVideoFrame::decode):

2022-02-23  Alex Christensen  <achristensen@webkit.org>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://88652375>

        Reviewed by Chris Dumez.

        There was an assumption that this callback wasn't needed in this case, but it is.
        Covered by an API test that verifies the callback is received.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):

2022-02-23  Zan Dobersek  <zdobersek@igalia.com>

        [GLib] Add missing WebPage.h inclusion in WebProcessGLib.cpp
        https://bugs.webkit.org/show_bug.cgi?id=237081

        Unreviewed, adding the WebPage.h header inclusion in WebProcessGLib.cpp
        to avoid incomplete-type errors for the WebPage class under a certain
        combination of unified sources.

        * WebProcess/glib/WebProcessGLib.cpp:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap::getVideoFrameBuffer can use base class pixelBuffer accessor
        https://bugs.webkit.org/show_bug.cgi?id=237020

        Reviewed by Kimmo Kinnunen.

        Make use of pixelBuffer virtual method to simplify things.
        Add a missing early return in case of not found pixel buffer.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889

        Reviewed by Antti Koivisto.

        Regenerated.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis macros are confusing for non-Lock use-cases
        https://bugs.webkit.org/show_bug.cgi?id=237022

        Reviewed by Chris Dumez.

        Use WTF_GUARDED_BY_CAPABILITY instead of WTF_GUARDED_BY_LOCK
        for non-lock use-cases.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:

2022-02-23  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] PlatformDisplay::terminateEglDisplays() is never called
        https://bugs.webkit.org/show_bug.cgi?id=217655

        Stop the run loop for GTK and WPE to ensure a normal exit, since we need
        atexit handlers to be called to cleanup resources like EGL displays.

        Reviewed by Carlos Garcia Campos.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::didClose):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeConnection):
        * WebProcess/WebProcess.h:
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025

        Reviewed by Darin Adler.

        From past bugs, it is risky to change CMSampleBuffer dictionaries if they can be used on various threads (encoder, display layer...).
        Instead, we create a new MediaSample that is wrapping the same CVPixelBufferRef, on which can safely apply setAsDisplayImmediately.

        We introduce SharedVideoFrame as a replacement to RemoteVideoSample.
        We beef up SharedVideoFrameWriter and SharedVideoFrameReader to handle any MediaSample,
        with specific handling for remote frames, IOSurface frames or other in memory frames.
        We make use of SharedVideoFrame in SampleBufferDisplayLayer, which allows to unify enqueueSample and enqueueCV in one IPC message,
        which is easier to maintain.

        We update call sites that create SharedVideoFrameReader to either take nullptr or a object heap reference when they will need it in the future.

        Covered by existing tests.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        Optimize RemoteVideoFrame handling in WebProcess WebRTC pipeline
        https://bugs.webkit.org/show_bug.cgi?id=236970

        Reviewed by Eric Carlson.

        Fix bug in LibWebRTCCodecsProxy that would make use of shared video frame instead of remote video frame when a shared video frame is available.
        Use VideoFrame* as webrtc frame provider for encoding and decoding.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        http/wpt/push-api/onpush-disabled.html fails
        https://bugs.webkit.org/show_bug.cgi?id=236874
        <rdar://problem/89176154>

        Reviewed by Youenn Fablet.

        Before running the test, we would construct a new WKWebView with the Push API setting disabled.
        We would then run the test, which would launch a service worker. Normally, we would expect the
        service worker to inherit the settings from the WKWebView. However, it was not reliably
        happening because the settings for the service worker are stored on the WebProcessPool and
        WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess() was selecting a
        random WebProcessPool object (the first one returned by processPools()).

        To address the issue, we now pass the ProcessIdentifier of the client that requested the
        service worker connection so that establishServiceWorkerContextConnectionToNetworkProcess() can
        now prioritize the WebProcessPool of that process. Also, as an optimization, we now prioritize
        this client process to run the service worker (assuming it is origin-clean).

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/WebProcessPool.h:

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        With DOM Rendering in GPU process, every display results in new IOSurface allocation
        https://bugs.webkit.org/show_bug.cgi?id=237063

        Reviewed by Tim Horton.

        We have to avoid ImageBufferRemoteIOSurfaceBackends in the web process from hanging on to
        an IOSurface MachSendRight (via ImageBufferBackendHandle) all the time, because doing so
        makes the IOSurface appear to be in-use, and therefore not eligible for swapping to,
        or making volatile. In particular, swapToValidFrontBuffer() would always think
        that the surfaces were in-use, resulting in permanent triple-buffering, and
        allocation of a new buffer on every swap.

        Fix by clearing the ImageBufferBackendHandles of all the buffers in the WP in
        RemoteRenderingBackendProxy::swapToValidFrontBuffer(), so that the GPUP can accurately
        gauge in-use-ness; we get back a handle to the new front buffer in the reply,
        and this is the only one we need to keep hold of, since it gets transferred to
        the UI process.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::display):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        Use non-inline messages for layer volatility-related IPC in RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=237061

        Reviewed by Wenson Hsieh.

        There appears to be a rare issue where StreamClientConnection::sendSync() can hang sometimes,
        which makes it impossible to do an entire MotionMark run (rdar://89313626). So avoid this
        by making the MarkSurfaceNonVolatile and SwapToValidFrontBuffer use out-of-line encoding.

        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:

2022-02-22  Simon Lewis  <simon.lewis@apple.com>

        Further restrict received IPC boolean values to 0 or 1
        https://bugs.webkit.org/show_bug.cgi?id=236801
        rdar://85811396

        Reviewed by Chris Dumez.

        Return std::nullopt if a value larger than 1 is received.

        * Platform/IPC/ArgumentCoder.h:
        (IPC::ArgumentCoder<bool>::decode):

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        PingLoader is failing to call completion handler in error case
        https://bugs.webkit.org/show_bug.cgi?id=237062
        <rdar://50157253>

        Reviewed by Chris Dumez.

        The completion handler was not being called in the case of a PingLoad being redirected to
        a non-HTTP(S) scheme.

        * NetworkProcess/PingLoad.cpp:
        (WebKit::PingLoad::willPerformHTTPRedirection):

2022-02-22  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WK2] animations/background-position.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=236630

        Reviewed by Don Olmstead.

        r289848 was a wrong fix causing some test failures. It called the
        force repaint completion handler too early if m_waitDidUpdate was
        true when the force repaint was requested. In such case, we should
        wait for two DidUpdate messages before calling the completion
        handler.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::forceRepaintAsync):
        (WebKit::DrawingAreaWC::didUpdate):
        * WebProcess/WebPage/wc/DrawingAreaWC.h:
        Added m_isForceRepaintCompletionHandlerDeferred flag.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Clean up / optimize even more call sites constructing vectors
        https://bugs.webkit.org/show_bug.cgi?id=236852

        Reviewed by Darin Adler.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources):
        * GPUProcess/media/RemoteSourceBufferProxy.cpp:
        (WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment):
        (WebKit::RemoteSourceBufferProxy::updateTrackIds):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::fetchDiskCacheEntries):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::getOriginsWithPushAndNotificationPermissions):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::allStorageAreaIdentifiers const):
        * NetworkProcess/WebStorage/TransientLocalStorageNamespace.cpp:
        (WebKit::TransientLocalStorageNamespace::origins const):
        (WebKit::TransientLocalStorageNamespace::storageAreaIdentifiers const):
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::Cache::finishOpening):
        (WebKit::CacheStorage::Cache::keys const):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        * Platform/IPC/ArgumentCoders.h:
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * UIProcess/API/APINavigation.cpp:
        (API::Navigation::Navigation):
        (API::m_clientNavigationActivity):
        * UIProcess/Cocoa/WKShareSheet.mm:
        (appendFilesAsShareableURLs):
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex):
        * UIProcess/FrameLoadState.cpp:
        (WebKit::FrameLoadState::didFinishLoad):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::parameters const):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::startDiscovery):
        * UIProcess/WebBackForwardList.cpp:
        (WebKit::WebBackForwardList::removeAllItems):
        (WebKit::WebBackForwardList::clear):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        (WebKit::WebProcessPool::removeProcessFromOriginCacheSet):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        (WebKit::WebsiteDataStore::removeData):
        * UIProcess/ios/TextCheckerIOS.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant presentationRectForElementUsingClosestIndicatedRect]):
        * UIProcess/mac/TextCheckerMac.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::showPaymentUI):
        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):
        * WebProcess/GPU/media/SourceBufferPrivateRemote.cpp:
        (WebKit::SourceBufferPrivateRemote::updateTrackIds):
        (WebKit::SourceBufferPrivateRemote::sourceBufferPrivateDidReceiveInitializationSegment):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::createEncoder):
        * WebProcess/InjectedBundle/API/c/WKBundlePageOverlay.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        * WebProcess/WebCoreSupport/WebDeviceOrientationUpdateProvider.cpp:
        (WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged):
        (WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged):
        * WebProcess/WebCoreSupport/WebPasteboardOverrides.cpp:
        (WebKit::WebPasteboardOverrides::overriddenTypes):
        * WebProcess/WebCoreSupport/WebSpeechSynthesisClient.cpp:
        (WebKit::WebSpeechSynthesisClient::voiceList):
        * WebProcess/WebPage/FindController.cpp:
        (WebKit::FindController::findStringMatches):
        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::drawRect):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::consumeSandboxExtensions):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::handleSelectionServiceClick):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::fetchWebsiteData):

2022-02-22  Alex Christensen  <achristensen@webkit.org>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889
        <rdar://problem/88567612>

        Reviewed by Chris Dumez.

        Even though we check if the synchronous message was received successfully before using it,
        if we didn't check then we might have a problem with pointing to uninitialized memory, which we then wouldn't use for anything.
        To fix this hypothetical problem, I start out by pointing to initialized memory.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fix lifetime issue on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237018
        rdar://89206950

        Reviewed by Brent Fulgham.

        Lifetime issues introduced in a recent refactor of performRequest were causing
        replies from WebAuthenticatorCoordinatorProxy_MakeCredentialReply not to make it
        back to the web content process. This patch fixes these, allowing requests to proceed.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::continueAfterRequest):
        (WebKit::WebAuthenticatorCoordinatorProxy::performRequest): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable): Deleted.
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        Remove an unneeded IOKit property
        https://bugs.webkit.org/show_bug.cgi?id=236867
        <rdar://47695155>

        Reviewed by Per Arne Vollan.

        The relevant frameworks that used the IOPlatformUUID IOKit
        property have been updated to no longer refer to it. We can
        now safely remove it.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-02-22  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Adopt new _UITextSearching method for range comparison
        https://bugs.webkit.org/show_bug.cgi?id=237012
        rdar://88442811

        Reviewed by Devin Rousso.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView offsetFromPosition:toPosition:inDocument:]):

        Mark deprecation.

        (-[WKWebView compareFoundRange:toRange:inDocument:]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView compareFoundRange:toRange:inDocument:]):

        Implement the new comparison method using existing offset computation logic.

2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Youenn Fablet  <youenn@apple.com>

        http/wpt/mediarecorder/mute-tracks.html fails with WebRTCRemoteVideoFrameEnabled=true
        https://bugs.webkit.org/show_bug.cgi?id=237021

        Reviewed by Kimmo Kinnunen.

        We were previously creating the black frame but still sending the remote read reference.
        On GPUProcess side, we were then encoding the real frame instead of the black/muted frame.
        Add a specific muted code path to fix the issue.

        Covered by updated test.

        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * WebProcess/InjectedBundle/DOM/InjectedBundleNodeHandle.cpp:
        (WebKit::InjectedBundleNodeHandle::isSelectableTextNode const):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::selectionPositionInformation):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _serviceWorkersEnabled:]):
        * WebProcess/Storage/WebServiceWorkerProvider.cpp:
        (WebKit::WebServiceWorkerProvider::serviceWorkerConnection):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updateThrottleState):
        (WebKit::WebPage::updatePreferences):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * WebProcess/WebStorage/StorageAreaImpl.cpp:
        (WebKit::StorageAreaImpl::setItem):
        (WebKit::StorageAreaImpl::removeItem):
        (WebKit::StorageAreaImpl::clear):
        * WebProcess/WebStorage/StorageAreaImpl.h:
        * WebProcess/WebStorage/StorageAreaMap.cpp:
        (WebKit::StorageAreaMap::setItem):
        (WebKit::StorageAreaMap::removeItem):
        (WebKit::StorageAreaMap::clear):
        (WebKit::StorageAreaMap::dispatchSessionStorageEvent):
        (WebKit::StorageAreaMap::dispatchLocalStorageEvent):
        (WebKit::framesForEventDispatching): Deleted.
        * WebProcess/WebStorage/StorageAreaMap.h:

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        NSSharingServicePicker gets deallocated when using the standard share menu item
        https://bugs.webkit.org/show_bug.cgi?id=236998
        <rdar://problem/89174827>

        Reviewed by Wenson Hsieh.

        The NSMenuItem should keep the NSSharingServicePicker alive.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getShareMenuItem):

2022-02-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Suspend web process after some time in the process cache
        https://bugs.webkit.org/show_bug.cgi?id=236971

        Reviewed by Michael Catanzaro.

        Implement platformSuspendProcess() and platformResumeProcess() for GTK and WPE ports.

        * UIProcess/WebProcessCache.cpp:
        (WebKit::WebProcessCache::addProcess):
        (WebKit::WebProcessCache::CachedProcess::CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::~CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::takeProcess):
        * UIProcess/WebProcessCache.h:
        * UIProcess/WebProcessProxy.h:
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformSuspendProcess):
        (WebKit::WebProcessProxy::platformResumeProcess):

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to start on iOS devices
        https://bugs.webkit.org/show_bug.cgi?id=237009
        <rdar://89062166>

        Reviewed by Per Arne Vollan.

        There were three more problems preventing it from starting:
        1. The code signature said to look for a sandbox profile with "webkit" in the name, but the profile had "WebKit" in the name.
           These names are case sensitive.
        2. The sandbox profile would not let it load the WebKit framework, so dyld would fail and the process would fail to launch.
           I added the framework directories that the XPC services are allowed to access.
        3. Once it started, it would crash inside WTF::initializeMainThread when calling WTF::pageSize which requires access to the hw.pagesize_compat syscall.
           As a starting point, I'm going to allow all the syscalls that the network process currently has access to,
           which is enough to get it to respond without crashing.
        4. We need access to com.apple.diagnosticd and com.apple.analyticsd in order to be able to generate crash reports.  This is quite useful.
        Yes, I know I said there were only three problems, but the 4th is so useful I thought I'd put it in the list.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:
        * Scripts/process-entitlements.sh:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * UIProcess/Notifications/WebNotification.h:
        (WebKit::WebNotification::origin const):
        (WebKit::WebNotification::origin):

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Adjust some behaviors around the "Markup Image" action in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=236980

        Reviewed by Aditya Keerthi.

        Adjust the following behaviors around the "Markup Image" callout bar item on iOS:
        1.  The item should be present as long as the selection range contains a single image item (not only if the
            selection range exactly encompasses a single image element.
        2.  The item should appear in the callout bar before other WebKit-client-provided menu controller items.

        This patch also adds a new API test to exercise these behaviors and, in doing so, also refactors logic around
        determining whether or not to show this item so that it's dependent on a WebKit internal feature instead of just
        the system feature flag (with the default value of the internal feature being equal to whether or not the system
        feature is enabled). This means we can run tests for these features without requiring the system feature flag to
        be enabled.

        See below for more details.

        Test: ImageAnalysisTests.MenuControllerItems

        * Platform/cocoa/TextRecognitionUtilities.mm:
        (WebKit::makeTextRecognitionResult):

        Drive-by fix for some API tests: only attempt to send the platform image analysis result over IPC if it is a
        `VKCImageAnalysis`. In some API tests, we use mock objects here instead, which currently causes the IPC message
        send to fail due to encoding failure.

        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        (WebKit::defaultImageAnalysisMarkupEnabled):
        * Shared/WebPreferencesDefaultValues.h:

        Make the new internal feature flag default to the system feature flag.

        * UIProcess/ios/WKActionSheetAssistant.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Consult a new delegate method (`-actionSheetAssistantShouldIncludeCopyCroppedImageAction:`) instead of checking
        the system feature flag directly.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView updateImageAnalysisMarkupMenuItems:]):

        Append the "Markup Image" item at the start of the list of additional menu items.

        (-[WKContentView canPerformImageAnalysisMarkup]):

        Check the internal feature instead of the system feature flag.

        (-[WKContentView performImageAnalysisMarkup:]):

        Now that this action can be triggered even when the current selection doens't encompass only a single image, we
        need to use `replaceWithPasteboardData()` instead, passing in the element context of the image element we want
        to replace.

        (-[WKContentView actionSheetAssistantShouldIncludeCopyCroppedImageAction:]):

        Only attempt to show the new items if the internal feature is enabled. Consulted by `WKActionSheetAssistant`
        above.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

        Check the internal feature instead of the system feature flag.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::getPlatformEditorState const):

        Make a minor adjustment here to bail early only if we find multiple image elements in the selected range,
        rather than bailing if we find anything that's not an image element.

2022-02-21  Alexander Kanavin  <alex@linutronix.de>

        Fix racy parallel build of WebKit2-4.0.gir
        https://bugs.webkit.org/show_bug.cgi?id=232935

        Reviewed by Michael Catanzaro.

        This is a target and not a command because it's used to build another .gir
        and a .typelib, which would trigger two racy parallel builds when using command
        (e.g. command would run twice, target runs only once).

        * PlatformGTK.cmake:

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        * WebKit.xcodeproj/project.pbxproj:

2022-02-21  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Fix the internal build after rdar://88354008
        https://bugs.webkit.org/show_bug.cgi?id=236999

        Unreviewed build fix.

        Mark deprecated implementations.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:

== Rolled over to ChangeLog-2022-02-22 ==
