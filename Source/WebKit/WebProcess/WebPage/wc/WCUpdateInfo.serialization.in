# Copyright (C) 2023 Sony Interactive Entertainment Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if USE(GRAPHICS_LAYER_WC)

header: "WCUpdateInfo.h"

[CustomHeader] struct WebKit::WCTileUpdate {
    WebCore::TextureMapperSparseBackingStore::TileIndex index;
    bool willRemove;
    WebKit::WCBackingStore backingStore;
    WebCore::IntRect dirtyRect;
}

[CustomHeader,OptionSet] enum class WebKit::WCLayerChange : uint32_t {
    Children,
    MaskLayer,
    ReplicaLayer,
    Position,
    AnchorPoint,
    Size,
    BoundsOrigin,
    MasksToBounds,
    ContentsRectClipsDescendants,
    ShowDebugBorder,
    ShowRepaintCounter,
    ContentsVisible,
    BackfaceVisibility,
    Preserves3D,
    SolidColor,
    DebugBorderColor,
    Opacity,
    DebugBorderWidth,
    RepaintCount,
    ContentsRect,
    Background,
    Transform,
    ChildrenTransform,
    Filters,
    BackdropFilters,
    BackdropFiltersRect,
    ContentsClippingRect,
    PlatformLayer,
    RemoteFrame,
}

[Nested] struct WebKit::WCLayerUpdateInfo::BackgroundChanges {
    WebCore::Color color;
    bool hasBackingStore;
    Vector<WebKit::WCTileUpdate> tileUpdates;
}

[Nested] struct WebKit::WCLayerUpdateInfo::PlatformLayerChanges {
    bool hasLayer;
    Vector<WebKit::WCContentBufferIdentifier> identifiers;
}

[CustomHeader] struct WebKit::WCLayerUpdateInfo {
    [Validator='id'] WebCore::PlatformLayerIdentifier id;
    [OptionalTupleBits] OptionSet<WebKit::WCLayerChange> changes;
    [OptionalTupleBit=WebKit::WCLayerChange::Children] Vector<WebCore::PlatformLayerIdentifier> children;
    [OptionalTupleBit=WebKit::WCLayerChange::MaskLayer] std::optional<WebCore::PlatformLayerIdentifier> maskLayer;
    [OptionalTupleBit=WebKit::WCLayerChange::ReplicaLayer] std::optional<WebCore::PlatformLayerIdentifier> replicaLayer;
    [OptionalTupleBit=WebKit::WCLayerChange::Position] WebCore::FloatPoint position;
    [OptionalTupleBit=WebKit::WCLayerChange::AnchorPoint] WebCore::FloatPoint3D anchorPoint;
    [OptionalTupleBit=WebKit::WCLayerChange::Size] WebCore::FloatSize size;
    [OptionalTupleBit=WebKit::WCLayerChange::BoundsOrigin] WebCore::FloatPoint boundsOrigin;
    [OptionalTupleBit=WebKit::WCLayerChange::MasksToBounds] bool masksToBounds;
    [OptionalTupleBit=WebKit::WCLayerChange::ContentsRectClipsDescendants] bool contentsRectClipsDescendants;
    [OptionalTupleBit=WebKit::WCLayerChange::ShowDebugBorder] bool showDebugBorder;
    [OptionalTupleBit=WebKit::WCLayerChange::ShowRepaintCounter] bool showRepaintCounter;
    [OptionalTupleBit=WebKit::WCLayerChange::ContentsVisible] bool contentsVisible;
    [OptionalTupleBit=WebKit::WCLayerChange::BackfaceVisibility] bool backfaceVisibility;
    [OptionalTupleBit=WebKit::WCLayerChange::Preserves3D] bool preserves3D;
    [OptionalTupleBit=WebKit::WCLayerChange::SolidColor] WebCore::Color solidColor;
    [OptionalTupleBit=WebKit::WCLayerChange::DebugBorderColor] WebCore::Color debugBorderColor;
    [OptionalTupleBit=WebKit::WCLayerChange::Opacity] float opacity;
    [OptionalTupleBit=WebKit::WCLayerChange::DebugBorderWidth] float debugBorderWidth;
    [OptionalTupleBit=WebKit::WCLayerChange::RepaintCount] int repaintCount;
    [OptionalTupleBit=WebKit::WCLayerChange::ContentsRect] WebCore::FloatRect contentsRect;
    [OptionalTupleBit=WebKit::WCLayerChange::Background] WebKit::WCLayerUpdateInfo::BackgroundChanges background;
    [OptionalTupleBit=WebKit::WCLayerChange::Transform] WebCore::TransformationMatrix transform;
    [OptionalTupleBit=WebKit::WCLayerChange::ChildrenTransform] WebCore::TransformationMatrix childrenTransform;
    [OptionalTupleBit=WebKit::WCLayerChange::Filters] WebCore::FilterOperations filters;
    [OptionalTupleBit=WebKit::WCLayerChange::BackdropFilters] WebCore::FilterOperations backdropFilters;
    [OptionalTupleBit=WebKit::WCLayerChange::BackdropFiltersRect] WebCore::FloatRoundedRect backdropFiltersRect;
    [OptionalTupleBit=WebKit::WCLayerChange::ContentsClippingRect] WebCore::FloatRoundedRect contentsClippingRect;
    [OptionalTupleBit=WebKit::WCLayerChange::PlatformLayer] WebKit::WCLayerUpdateInfo::PlatformLayerChanges platformLayer;
    [OptionalTupleBit=WebKit::WCLayerChange::RemoteFrame] Markable<WebCore::LayerHostingContextIdentifier> hostIdentifier;
}

struct WebKit::WCUpdateInfo {
    Markable<WebCore::LayerHostingContextIdentifier> remoteContextHostedIdentifier;
    WebCore::PlatformLayerIdentifier rootLayer;
    Vector<WebCore::PlatformLayerIdentifier> addedLayers;
    Vector<WebCore::PlatformLayerIdentifier> removedLayers;
    Vector<WebKit::WCLayerUpdateInfo> changedLayers;
}

#endif
