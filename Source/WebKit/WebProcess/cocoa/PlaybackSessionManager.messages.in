# Copyright (C) 2016-2021 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

#if PLATFORM(IOS_FAMILY) || (PLATFORM(MAC) && ENABLE(VIDEO_PRESENTATION_MODE))
messages -> PlaybackSessionManager {
    Play(WebKit::PlaybackSessionContextIdentifier contextId)
    Pause(WebKit::PlaybackSessionContextIdentifier contextId)
    TogglePlayState(WebKit::PlaybackSessionContextIdentifier contextId)
    BeginScrubbing(WebKit::PlaybackSessionContextIdentifier contextId)
    EndScrubbing(WebKit::PlaybackSessionContextIdentifier contextId)
    SeekToTime(WebKit::PlaybackSessionContextIdentifier contextId, double time, double toleranceBefore, double toleranceAfter)
    FastSeek(WebKit::PlaybackSessionContextIdentifier contextId, double time)
    BeginScanningForward(WebKit::PlaybackSessionContextIdentifier contextId)
    BeginScanningBackward(WebKit::PlaybackSessionContextIdentifier contextId)
    EndScanning(WebKit::PlaybackSessionContextIdentifier contextId)
    SetDefaultPlaybackRate(WebKit::PlaybackSessionContextIdentifier contextId, float defaultPlaybackRate)
    SetPlaybackRate(WebKit::PlaybackSessionContextIdentifier contextId, float playbackRate)
    SelectAudioMediaOption(WebKit::PlaybackSessionContextIdentifier contextId, uint64_t index)
    SelectLegibleMediaOption(WebKit::PlaybackSessionContextIdentifier contextId, uint64_t index)
    HandleControlledElementIDRequest(WebKit::PlaybackSessionContextIdentifier contextId)
    TogglePictureInPicture(WebKit::PlaybackSessionContextIdentifier contextId)
    ToggleMuted(WebKit::PlaybackSessionContextIdentifier contextId)
    SetMuted(WebKit::PlaybackSessionContextIdentifier contextId, bool muted)
    SetVolume(WebKit::PlaybackSessionContextIdentifier contextId, double volume)
    SetPlayingOnSecondScreen(WebKit::PlaybackSessionContextIdentifier contextId, bool value)
    SendRemoteCommand(WebKit::PlaybackSessionContextIdentifier contextId, enum:uint8_t WebCore::PlatformMediaSession::RemoteControlCommandType type, struct WebCore::PlatformMediaSession::RemoteCommandArgument argument)
}
#endif
