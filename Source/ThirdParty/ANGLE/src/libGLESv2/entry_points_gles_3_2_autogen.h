// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_3_2_autogen.h:
//   Defines the GLES 3.2 entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_

#include <GLES3/gl32.h>
#include <export.h>

extern "C" {
ANGLE_EXPORT void GL_APIENTRY GL_BlendBarrier();
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationSeparatei(GLuint buf,
                                                        GLenum modeRGB,
                                                        GLenum modeAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationi(GLuint buf, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY
GL_BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendFunci(GLuint buf, GLenum src, GLenum dst);
ANGLE_EXPORT void GL_APIENTRY
GL_ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY GL_CopyImageSubData(GLuint srcName,
                                                  GLenum srcTarget,
                                                  GLint srcLevel,
                                                  GLint srcX,
                                                  GLint srcY,
                                                  GLint srcZ,
                                                  GLuint dstName,
                                                  GLenum dstTarget,
                                                  GLint dstLevel,
                                                  GLint dstX,
                                                  GLint dstY,
                                                  GLint dstZ,
                                                  GLsizei srcWidth,
                                                  GLsizei srcHeight,
                                                  GLsizei srcDepth);
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageControl(GLenum source,
                                                     GLenum type,
                                                     GLenum severity,
                                                     GLsizei count,
                                                     const GLuint *ids,
                                                     GLboolean enabled);
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageInsert(GLenum source,
                                                    GLenum type,
                                                    GLuint id,
                                                    GLenum severity,
                                                    GLsizei length,
                                                    const GLchar *buf);
ANGLE_EXPORT void GL_APIENTRY GL_Disablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsBaseVertex(GLenum mode,
                                                        GLsizei count,
                                                        GLenum type,
                                                        const void *indices,
                                                        GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedBaseVertex(GLenum mode,
                                                                 GLsizei count,
                                                                 GLenum type,
                                                                 const void *indices,
                                                                 GLsizei instancecount,
                                                                 GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawRangeElementsBaseVertex(GLenum mode,
                                                             GLuint start,
                                                             GLuint end,
                                                             GLsizei count,
                                                             GLenum type,
                                                             const void *indices,
                                                             GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_Enablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture(GLenum target,
                                                    GLenum attachment,
                                                    GLuint texture,
                                                    GLint level);
ANGLE_EXPORT GLuint GL_APIENTRY GL_GetDebugMessageLog(GLuint count,
                                                      GLsizei bufSize,
                                                      GLenum *sources,
                                                      GLenum *types,
                                                      GLuint *ids,
                                                      GLenum *severities,
                                                      GLsizei *lengths,
                                                      GLchar *messageLog);
ANGLE_EXPORT GLenum GL_APIENTRY GL_GetGraphicsResetStatus();
ANGLE_EXPORT void GL_APIENTRY
GL_GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_GetObjectPtrLabel(const void *ptr,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_GetPointerv(GLenum pname, void **params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIiv(GLuint sampler,
                                                        GLenum pname,
                                                        GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIuiv(GLuint sampler,
                                                         GLenum pname,
                                                         GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformfv(GLuint program,
                                               GLint location,
                                               GLsizei bufSize,
                                               GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformiv(GLuint program,
                                               GLint location,
                                               GLsizei bufSize,
                                               GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformuiv(GLuint program,
                                                GLint location,
                                                GLsizei bufSize,
                                                GLuint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsEnabledi(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_MinSampleShading(GLfloat value);
ANGLE_EXPORT void GL_APIENTRY GL_ObjectLabel(GLenum identifier,
                                             GLuint name,
                                             GLsizei length,
                                             const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_ObjectPtrLabel(const void *ptr,
                                                GLsizei length,
                                                const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_PatchParameteri(GLenum pname, GLint value);
ANGLE_EXPORT void GL_APIENTRY GL_PopDebugGroup();
ANGLE_EXPORT void GL_APIENTRY GL_PrimitiveBoundingBox(GLfloat minX,
                                                      GLfloat minY,
                                                      GLfloat minZ,
                                                      GLfloat minW,
                                                      GLfloat maxX,
                                                      GLfloat maxY,
                                                      GLfloat maxZ,
                                                      GLfloat maxW);
ANGLE_EXPORT void GL_APIENTRY GL_PushDebugGroup(GLenum source,
                                                GLuint id,
                                                GLsizei length,
                                                const GLchar *message);
ANGLE_EXPORT void GL_APIENTRY GL_ReadnPixels(GLint x,
                                             GLint y,
                                             GLsizei width,
                                             GLsizei height,
                                             GLenum format,
                                             GLenum type,
                                             GLsizei bufSize,
                                             void *data);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIiv(GLuint sampler,
                                                     GLenum pname,
                                                     const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIuiv(GLuint sampler,
                                                      GLenum pname,
                                                      const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY GL_TexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY GL_TexBufferRange(GLenum target,
                                                GLenum internalformat,
                                                GLuint buffer,
                                                GLintptr offset,
                                                GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIuiv(GLenum target,
                                                  GLenum pname,
                                                  const GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage3DMultisample(GLenum target,
                                                         GLsizei samples,
                                                         GLenum internalformat,
                                                         GLsizei width,
                                                         GLsizei height,
                                                         GLsizei depth,
                                                         GLboolean fixedsamplelocations);
}  // extern "C"

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_
