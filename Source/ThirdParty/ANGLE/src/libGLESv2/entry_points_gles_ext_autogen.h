// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_ext_autogen.h:
//   Defines the GLES extension entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_EXT_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_EXT_AUTOGEN_H_

#include <GLES/gl.h>
#include <GLES/glext.h>
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#include <GLES3/gl32.h>
#include <export.h>

extern "C" {

// GL_AMD_performance_monitor
ANGLE_EXPORT void GL_APIENTRY GL_BeginPerfMonitorAMD(GLuint monitor);
ANGLE_EXPORT void GL_APIENTRY GL_DeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
ANGLE_EXPORT void GL_APIENTRY GL_EndPerfMonitorAMD(GLuint monitor);
ANGLE_EXPORT void GL_APIENTRY GL_GenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorCounterDataAMD(GLuint monitor,
                                                              GLenum pname,
                                                              GLsizei dataSize,
                                                              GLuint *data,
                                                              GLint *bytesWritten);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorCounterInfoAMD(GLuint group,
                                                              GLuint counter,
                                                              GLenum pname,
                                                              void *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorCounterStringAMD(GLuint group,
                                                                GLuint counter,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLchar *counterString);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorCountersAMD(GLuint group,
                                                           GLint *numCounters,
                                                           GLint *maxActiveCounters,
                                                           GLsizei counterSize,
                                                           GLuint *counters);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorGroupStringAMD(GLuint group,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLchar *groupString);
ANGLE_EXPORT void GL_APIENTRY GL_GetPerfMonitorGroupsAMD(GLint *numGroups,
                                                         GLsizei groupsSize,
                                                         GLuint *groups);
ANGLE_EXPORT void GL_APIENTRY GL_SelectPerfMonitorCountersAMD(GLuint monitor,
                                                              GLboolean enable,
                                                              GLuint group,
                                                              GLint numCounters,
                                                              GLuint *counterList);

// GL_ANDROID_extension_pack_es31a

// GL_ANGLE_base_vertex_base_instance
ANGLE_EXPORT void GL_APIENTRY GL_DrawArraysInstancedBaseInstanceANGLE(GLenum mode,
                                                                      GLint first,
                                                                      GLsizei count,
                                                                      GLsizei instanceCount,
                                                                      GLuint baseInstance);
ANGLE_EXPORT void GL_APIENTRY
GL_DrawElementsInstancedBaseVertexBaseInstanceANGLE(GLenum mode,
                                                    GLsizei count,
                                                    GLenum type,
                                                    const GLvoid *indices,
                                                    GLsizei instanceCount,
                                                    GLint baseVertex,
                                                    GLuint baseInstance);
ANGLE_EXPORT void GL_APIENTRY
GL_MultiDrawArraysInstancedBaseInstanceANGLE(GLenum mode,
                                             const GLint *firsts,
                                             const GLsizei *counts,
                                             const GLsizei *instanceCounts,
                                             const GLuint *baseInstances,
                                             GLsizei drawcount);
ANGLE_EXPORT void GL_APIENTRY
GL_MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(GLenum mode,
                                                         const GLsizei *counts,
                                                         GLenum type,
                                                         const GLvoid *const *indices,
                                                         const GLsizei *instanceCounts,
                                                         const GLint *baseVertices,
                                                         const GLuint *baseInstances,
                                                         GLsizei drawcount);

// GL_ANGLE_copy_texture_3d
ANGLE_EXPORT void GL_APIENTRY GL_CopyTexture3DANGLE(GLuint sourceId,
                                                    GLint sourceLevel,
                                                    GLenum destTarget,
                                                    GLuint destId,
                                                    GLint destLevel,
                                                    GLint internalFormat,
                                                    GLenum destType,
                                                    GLboolean unpackFlipY,
                                                    GLboolean unpackPremultiplyAlpha,
                                                    GLboolean unpackUnmultiplyAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_CopySubTexture3DANGLE(GLuint sourceId,
                                                       GLint sourceLevel,
                                                       GLenum destTarget,
                                                       GLuint destId,
                                                       GLint destLevel,
                                                       GLint xoffset,
                                                       GLint yoffset,
                                                       GLint zoffset,
                                                       GLint x,
                                                       GLint y,
                                                       GLint z,
                                                       GLint width,
                                                       GLint height,
                                                       GLint depth,
                                                       GLboolean unpackFlipY,
                                                       GLboolean unpackPremultiplyAlpha,
                                                       GLboolean unpackUnmultiplyAlpha);

// GL_ANGLE_depth_texture

// GL_ANGLE_framebuffer_blit
ANGLE_EXPORT void GL_APIENTRY GL_BlitFramebufferANGLE(GLint srcX0,
                                                      GLint srcY0,
                                                      GLint srcX1,
                                                      GLint srcY1,
                                                      GLint dstX0,
                                                      GLint dstY0,
                                                      GLint dstX1,
                                                      GLint dstY1,
                                                      GLbitfield mask,
                                                      GLenum filter);

// GL_ANGLE_framebuffer_multisample
ANGLE_EXPORT void GL_APIENTRY GL_RenderbufferStorageMultisampleANGLE(GLenum target,
                                                                     GLsizei samples,
                                                                     GLenum internalformat,
                                                                     GLsizei width,
                                                                     GLsizei height);

// GL_ANGLE_get_image
ANGLE_EXPORT void GL_APIENTRY
GL_GetTexImageANGLE(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_GetCompressedTexImageANGLE(GLenum target,
                                                            GLint level,
                                                            void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_GetRenderbufferImageANGLE(GLenum target,
                                                           GLenum format,
                                                           GLenum type,
                                                           void *pixels);

// GL_ANGLE_get_tex_level_parameter
ANGLE_EXPORT void GL_APIENTRY GL_GetTexLevelParameterivANGLE(GLenum target,
                                                             GLint level,
                                                             GLenum pname,
                                                             GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexLevelParameterfvANGLE(GLenum target,
                                                             GLint level,
                                                             GLenum pname,
                                                             GLfloat *params);

// GL_ANGLE_instanced_arrays
ANGLE_EXPORT void GL_APIENTRY GL_DrawArraysInstancedANGLE(GLenum mode,
                                                          GLint first,
                                                          GLsizei count,
                                                          GLsizei primcount);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedANGLE(GLenum mode,
                                                            GLsizei count,
                                                            GLenum type,
                                                            const void *indices,
                                                            GLsizei primcount);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribDivisorANGLE(GLuint index, GLuint divisor);

// GL_ANGLE_memory_object_flags
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMemFlags2DANGLE(GLenum target,
                                                           GLsizei levels,
                                                           GLenum internalFormat,
                                                           GLsizei width,
                                                           GLsizei height,
                                                           GLuint memory,
                                                           GLuint64 offset,
                                                           GLbitfield createFlags,
                                                           GLbitfield usageFlags,
                                                           const void *imageCreateInfoPNext);
ANGLE_EXPORT void GL_APIENTRY
GL_TexStorageMemFlags2DMultisampleANGLE(GLenum target,
                                        GLsizei samples,
                                        GLenum internalFormat,
                                        GLsizei width,
                                        GLsizei height,
                                        GLboolean fixedSampleLocations,
                                        GLuint memory,
                                        GLuint64 offset,
                                        GLbitfield createFlags,
                                        GLbitfield usageFlags,
                                        const void *imageCreateInfoPNext);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMemFlags3DANGLE(GLenum target,
                                                           GLsizei levels,
                                                           GLenum internalFormat,
                                                           GLsizei width,
                                                           GLsizei height,
                                                           GLsizei depth,
                                                           GLuint memory,
                                                           GLuint64 offset,
                                                           GLbitfield createFlags,
                                                           GLbitfield usageFlags,
                                                           const void *imageCreateInfoPNext);
ANGLE_EXPORT void GL_APIENTRY
GL_TexStorageMemFlags3DMultisampleANGLE(GLenum target,
                                        GLsizei samples,
                                        GLenum internalFormat,
                                        GLsizei width,
                                        GLsizei height,
                                        GLsizei depth,
                                        GLboolean fixedSampleLocations,
                                        GLuint memory,
                                        GLuint64 offset,
                                        GLbitfield createFlags,
                                        GLbitfield usageFlags,
                                        const void *imageCreateInfoPNext);

// GL_ANGLE_memory_object_fuchsia
ANGLE_EXPORT void GL_APIENTRY GL_ImportMemoryZirconHandleANGLE(GLuint memory,
                                                               GLuint64 size,
                                                               GLenum handleType,
                                                               GLuint handle);

// GL_ANGLE_multi_draw
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawArraysANGLE(GLenum mode,
                                                      const GLint *firsts,
                                                      const GLsizei *counts,
                                                      GLsizei drawcount);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawArraysInstancedANGLE(GLenum mode,
                                                               const GLint *firsts,
                                                               const GLsizei *counts,
                                                               const GLsizei *instanceCounts,
                                                               GLsizei drawcount);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawElementsANGLE(GLenum mode,
                                                        const GLsizei *counts,
                                                        GLenum type,
                                                        const GLvoid *const *indices,
                                                        GLsizei drawcount);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawElementsInstancedANGLE(GLenum mode,
                                                                 const GLsizei *counts,
                                                                 GLenum type,
                                                                 const GLvoid *const *indices,
                                                                 const GLsizei *instanceCounts,
                                                                 GLsizei drawcount);

// GL_ANGLE_pack_reverse_row_order

// GL_ANGLE_program_binary

// GL_ANGLE_provoking_vertex
ANGLE_EXPORT void GL_APIENTRY GL_ProvokingVertexANGLE(GLenum mode);

// GL_ANGLE_request_extension
ANGLE_EXPORT void GL_APIENTRY GL_RequestExtensionANGLE(const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_DisableExtensionANGLE(const GLchar *name);

// GL_ANGLE_robust_client_memory
ANGLE_EXPORT void GL_APIENTRY GL_GetBooleanvRobustANGLE(GLenum pname,
                                                        GLsizei bufSize,
                                                        GLsizei *length,
                                                        GLboolean *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetBufferParameterivRobustANGLE(GLenum target,
                                                                 GLenum pname,
                                                                 GLsizei bufSize,
                                                                 GLsizei *length,
                                                                 GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetFloatvRobustANGLE(GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetFramebufferAttachmentParameterivRobustANGLE(GLenum target,
                                                                                GLenum attachment,
                                                                                GLenum pname,
                                                                                GLsizei bufSize,
                                                                                GLsizei *length,
                                                                                GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetIntegervRobustANGLE(GLenum pname,
                                                        GLsizei bufSize,
                                                        GLsizei *length,
                                                        GLint *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetProgramivRobustANGLE(GLuint program,
                                                         GLenum pname,
                                                         GLsizei bufSize,
                                                         GLsizei *length,
                                                         GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetRenderbufferParameterivRobustANGLE(GLenum target,
                                                                       GLenum pname,
                                                                       GLsizei bufSize,
                                                                       GLsizei *length,
                                                                       GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetShaderivRobustANGLE(GLuint shader,
                                                        GLenum pname,
                                                        GLsizei bufSize,
                                                        GLsizei *length,
                                                        GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterfvRobustANGLE(GLenum target,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterivRobustANGLE(GLenum target,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetUniformfvRobustANGLE(GLuint program,
                                                         GLint location,
                                                         GLsizei bufSize,
                                                         GLsizei *length,
                                                         GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetUniformivRobustANGLE(GLuint program,
                                                         GLint location,
                                                         GLsizei bufSize,
                                                         GLsizei *length,
                                                         GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribfvRobustANGLE(GLuint index,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribivRobustANGLE(GLuint index,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribPointervRobustANGLE(GLuint index,
                                                                    GLenum pname,
                                                                    GLsizei bufSize,
                                                                    GLsizei *length,
                                                                    void **pointer);
ANGLE_EXPORT void GL_APIENTRY GL_ReadPixelsRobustANGLE(GLint x,
                                                       GLint y,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLenum format,
                                                       GLenum type,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       GLsizei *columns,
                                                       GLsizei *rows,
                                                       void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_TexImage2DRobustANGLE(GLenum target,
                                                       GLint level,
                                                       GLint internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLint border,
                                                       GLenum format,
                                                       GLenum type,
                                                       GLsizei bufSize,
                                                       const void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterfvRobustANGLE(GLenum target,
                                                           GLenum pname,
                                                           GLsizei bufSize,
                                                           const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterivRobustANGLE(GLenum target,
                                                           GLenum pname,
                                                           GLsizei bufSize,
                                                           const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexSubImage2DRobustANGLE(GLenum target,
                                                          GLint level,
                                                          GLint xoffset,
                                                          GLint yoffset,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          GLenum format,
                                                          GLenum type,
                                                          GLsizei bufSize,
                                                          const void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_TexImage3DRobustANGLE(GLenum target,
                                                       GLint level,
                                                       GLint internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       GLint border,
                                                       GLenum format,
                                                       GLenum type,
                                                       GLsizei bufSize,
                                                       const void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_TexSubImage3DRobustANGLE(GLenum target,
                                                          GLint level,
                                                          GLint xoffset,
                                                          GLint yoffset,
                                                          GLint zoffset,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          GLsizei depth,
                                                          GLenum format,
                                                          GLenum type,
                                                          GLsizei bufSize,
                                                          const void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexImage2DRobustANGLE(GLenum target,
                                                                 GLint level,
                                                                 GLenum internalformat,
                                                                 GLsizei width,
                                                                 GLsizei height,
                                                                 GLint border,
                                                                 GLsizei imageSize,
                                                                 GLsizei dataSize,
                                                                 const GLvoid *data);
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexSubImage2DRobustANGLE(GLenum target,
                                                                    GLint level,
                                                                    GLsizei xoffset,
                                                                    GLsizei yoffset,
                                                                    GLsizei width,
                                                                    GLsizei height,
                                                                    GLenum format,
                                                                    GLsizei imageSize,
                                                                    GLsizei dataSize,
                                                                    const GLvoid *data);
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexImage3DRobustANGLE(GLenum target,
                                                                 GLint level,
                                                                 GLenum internalformat,
                                                                 GLsizei width,
                                                                 GLsizei height,
                                                                 GLsizei depth,
                                                                 GLint border,
                                                                 GLsizei imageSize,
                                                                 GLsizei dataSize,
                                                                 const GLvoid *data);
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexSubImage3DRobustANGLE(GLenum target,
                                                                    GLint level,
                                                                    GLint xoffset,
                                                                    GLint yoffset,
                                                                    GLint zoffset,
                                                                    GLsizei width,
                                                                    GLsizei height,
                                                                    GLsizei depth,
                                                                    GLenum format,
                                                                    GLsizei imageSize,
                                                                    GLsizei dataSize,
                                                                    const GLvoid *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryivRobustANGLE(GLenum target,
                                                       GLenum pname,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectuivRobustANGLE(GLuint id,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetBufferPointervRobustANGLE(GLenum target,
                                                              GLenum pname,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              void **params);
ANGLE_EXPORT void GL_APIENTRY GL_GetIntegeri_vRobustANGLE(GLenum target,
                                                          GLuint index,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLint *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetInternalformativRobustANGLE(GLenum target,
                                                                GLenum internalformat,
                                                                GLenum pname,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribIivRobustANGLE(GLuint index,
                                                               GLenum pname,
                                                               GLsizei bufSize,
                                                               GLsizei *length,
                                                               GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribIuivRobustANGLE(GLuint index,
                                                                GLenum pname,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetUniformuivRobustANGLE(GLuint program,
                                                          GLint location,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetActiveUniformBlockivRobustANGLE(GLuint program,
                                                                    GLuint uniformBlockIndex,
                                                                    GLenum pname,
                                                                    GLsizei bufSize,
                                                                    GLsizei *length,
                                                                    GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetInteger64vRobustANGLE(GLenum pname,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetInteger64i_vRobustANGLE(GLenum target,
                                                            GLuint index,
                                                            GLsizei bufSize,
                                                            GLsizei *length,
                                                            GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetBufferParameteri64vRobustANGLE(GLenum target,
                                                                   GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterivRobustANGLE(GLuint sampler,
                                                               GLuint pname,
                                                               GLsizei bufSize,
                                                               const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterfvRobustANGLE(GLuint sampler,
                                                               GLenum pname,
                                                               GLsizei bufSize,
                                                               const GLfloat *param);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterivRobustANGLE(GLuint sampler,
                                                                  GLenum pname,
                                                                  GLsizei bufSize,
                                                                  GLsizei *length,
                                                                  GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterfvRobustANGLE(GLuint sampler,
                                                                  GLenum pname,
                                                                  GLsizei bufSize,
                                                                  GLsizei *length,
                                                                  GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetFramebufferParameterivRobustANGLE(GLenum target,
                                                                      GLenum pname,
                                                                      GLsizei bufSize,
                                                                      GLsizei *length,
                                                                      GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetProgramInterfaceivRobustANGLE(GLuint program,
                                                                  GLenum programInterface,
                                                                  GLenum pname,
                                                                  GLsizei bufSize,
                                                                  GLsizei *length,
                                                                  GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetBooleani_vRobustANGLE(GLenum target,
                                                          GLuint index,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLboolean *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetMultisamplefvRobustANGLE(GLenum pname,
                                                             GLuint index,
                                                             GLsizei bufSize,
                                                             GLsizei *length,
                                                             GLfloat *val);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexLevelParameterivRobustANGLE(GLenum target,
                                                                   GLint level,
                                                                   GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexLevelParameterfvRobustANGLE(GLenum target,
                                                                   GLint level,
                                                                   GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetPointervRobustANGLERobustANGLE(GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   void **params);
ANGLE_EXPORT void GL_APIENTRY GL_ReadnPixelsRobustANGLE(GLint x,
                                                        GLint y,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLenum format,
                                                        GLenum type,
                                                        GLsizei bufSize,
                                                        GLsizei *length,
                                                        GLsizei *columns,
                                                        GLsizei *rows,
                                                        void *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformfvRobustANGLE(GLuint program,
                                                          GLint location,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformivRobustANGLE(GLuint program,
                                                          GLint location,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformuivRobustANGLE(GLuint program,
                                                           GLint location,
                                                           GLsizei bufSize,
                                                           GLsizei *length,
                                                           GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIivRobustANGLE(GLenum target,
                                                            GLenum pname,
                                                            GLsizei bufSize,
                                                            const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIuivRobustANGLE(GLenum target,
                                                             GLenum pname,
                                                             GLsizei bufSize,
                                                             const GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIivRobustANGLE(GLenum target,
                                                               GLenum pname,
                                                               GLsizei bufSize,
                                                               GLsizei *length,
                                                               GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIuivRobustANGLE(GLenum target,
                                                                GLenum pname,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIivRobustANGLE(GLuint sampler,
                                                                GLenum pname,
                                                                GLsizei bufSize,
                                                                const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIuivRobustANGLE(GLuint sampler,
                                                                 GLenum pname,
                                                                 GLsizei bufSize,
                                                                 const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIivRobustANGLE(GLuint sampler,
                                                                   GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIuivRobustANGLE(GLuint sampler,
                                                                    GLenum pname,
                                                                    GLsizei bufSize,
                                                                    GLsizei *length,
                                                                    GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectivRobustANGLE(GLuint id,
                                                             GLenum pname,
                                                             GLsizei bufSize,
                                                             GLsizei *length,
                                                             GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjecti64vRobustANGLE(GLuint id,
                                                               GLenum pname,
                                                               GLsizei bufSize,
                                                               GLsizei *length,
                                                               GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectui64vRobustANGLE(GLuint id,
                                                                GLenum pname,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLuint64 *params);

// GL_ANGLE_robust_resource_initialization

// GL_ANGLE_semaphore_fuchsia
ANGLE_EXPORT void GL_APIENTRY GL_ImportSemaphoreZirconHandleANGLE(GLuint semaphore,
                                                                  GLenum handleType,
                                                                  GLuint handle);

// GL_ANGLE_texture_compression_dxt3

// GL_ANGLE_texture_compression_dxt5

// GL_ANGLE_texture_external_update
ANGLE_EXPORT void GL_APIENTRY GL_TexImage2DExternalANGLE(GLenum target,
                                                         GLint level,
                                                         GLint internalformat,
                                                         GLsizei width,
                                                         GLsizei height,
                                                         GLint border,
                                                         GLenum format,
                                                         GLenum type);
ANGLE_EXPORT void GL_APIENTRY GL_InvalidateTextureANGLE(GLenum target);

// GL_ANGLE_texture_multisample
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage2DMultisampleANGLE(GLenum target,
                                                              GLsizei samples,
                                                              GLenum internalformat,
                                                              GLsizei width,
                                                              GLsizei height,
                                                              GLboolean fixedsamplelocations);
ANGLE_EXPORT void GL_APIENTRY GL_GetMultisamplefvANGLE(GLenum pname, GLuint index, GLfloat *val);
ANGLE_EXPORT void GL_APIENTRY GL_SampleMaskiANGLE(GLuint maskNumber, GLbitfield mask);

// GL_ANGLE_texture_usage

// GL_ANGLE_translated_shader_source
ANGLE_EXPORT void GL_APIENTRY GL_GetTranslatedShaderSourceANGLE(GLuint shader,
                                                                GLsizei bufSize,
                                                                GLsizei *length,
                                                                GLchar *source);

// GL_ANGLE_vulkan_image
ANGLE_EXPORT void GL_APIENTRY GL_AcquireTexturesANGLE(GLuint numTextures,
                                                      const GLuint *textures,
                                                      const GLenum *layouts);
ANGLE_EXPORT void GL_APIENTRY GL_ReleaseTexturesANGLE(GLuint numTextures,
                                                      const GLuint *textures,
                                                      GLenum *layouts);

// GL_APPLE_clip_distance

// GL_ARB_sync

// GL_CHROMIUM_bind_uniform_location
ANGLE_EXPORT void GL_APIENTRY GL_BindUniformLocationCHROMIUM(GLuint program,
                                                             GLint location,
                                                             const GLchar *name);

// GL_CHROMIUM_copy_compressed_texture
ANGLE_EXPORT void GL_APIENTRY GL_CompressedCopyTextureCHROMIUM(GLuint sourceId, GLuint destId);

// GL_CHROMIUM_copy_texture
ANGLE_EXPORT void GL_APIENTRY GL_CopyTextureCHROMIUM(GLuint sourceId,
                                                     GLint sourceLevel,
                                                     GLenum destTarget,
                                                     GLuint destId,
                                                     GLint destLevel,
                                                     GLint internalFormat,
                                                     GLenum destType,
                                                     GLboolean unpackFlipY,
                                                     GLboolean unpackPremultiplyAlpha,
                                                     GLboolean unpackUnmultiplyAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_CopySubTextureCHROMIUM(GLuint sourceId,
                                                        GLint sourceLevel,
                                                        GLenum destTarget,
                                                        GLuint destId,
                                                        GLint destLevel,
                                                        GLint xoffset,
                                                        GLint yoffset,
                                                        GLint x,
                                                        GLint y,
                                                        GLint width,
                                                        GLint height,
                                                        GLboolean unpackFlipY,
                                                        GLboolean unpackPremultiplyAlpha,
                                                        GLboolean unpackUnmultiplyAlpha);

// GL_CHROMIUM_framebuffer_mixed_samples
ANGLE_EXPORT void GL_APIENTRY GL_CoverageModulationCHROMIUM(GLenum components);

// GL_CHROMIUM_lose_context
ANGLE_EXPORT void GL_APIENTRY GL_LoseContextCHROMIUM(GLenum current, GLenum other);

// GL_EXT_EGL_image_array

// GL_EXT_EGL_image_storage
ANGLE_EXPORT void GL_APIENTRY GL_EGLImageTargetTexStorageEXT(GLenum target,
                                                             GLeglImageOES image,
                                                             const GLint *attrib_list);
ANGLE_EXPORT void GL_APIENTRY GL_EGLImageTargetTextureStorageEXT(GLuint texture,
                                                                 GLeglImageOES image,
                                                                 const GLint *attrib_list);

// GL_EXT_YUV_target

// GL_EXT_base_instance
ANGLE_EXPORT void GL_APIENTRY GL_DrawArraysInstancedBaseInstanceEXT(GLenum mode,
                                                                    GLint first,
                                                                    GLsizei count,
                                                                    GLsizei instancecount,
                                                                    GLuint baseinstance);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedBaseInstanceEXT(GLenum mode,
                                                                      GLsizei count,
                                                                      GLenum type,
                                                                      const void *indices,
                                                                      GLsizei instancecount,
                                                                      GLuint baseinstance);
ANGLE_EXPORT void GL_APIENTRY
GL_DrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode,
                                                  GLsizei count,
                                                  GLenum type,
                                                  const void *indices,
                                                  GLsizei instancecount,
                                                  GLint basevertex,
                                                  GLuint baseinstance);

// GL_EXT_blend_func_extended
ANGLE_EXPORT void GL_APIENTRY GL_BindFragDataLocationEXT(GLuint program,
                                                         GLuint color,
                                                         const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_BindFragDataLocationIndexedEXT(GLuint program,
                                                                GLuint colorNumber,
                                                                GLuint index,
                                                                const GLchar *name);
ANGLE_EXPORT GLint GL_APIENTRY GL_GetFragDataIndexEXT(GLuint program, const GLchar *name);
ANGLE_EXPORT GLint GL_APIENTRY GL_GetProgramResourceLocationIndexEXT(GLuint program,
                                                                     GLenum programInterface,
                                                                     const GLchar *name);

// GL_EXT_blend_minmax

// GL_EXT_buffer_storage
ANGLE_EXPORT void GL_APIENTRY GL_BufferStorageEXT(GLenum target,
                                                  GLsizeiptr size,
                                                  const void *data,
                                                  GLbitfield flags);

// GL_EXT_clip_control
ANGLE_EXPORT void GL_APIENTRY GL_ClipControlEXT(GLenum origin, GLenum depth);

// GL_EXT_clip_cull_distance

// GL_EXT_color_buffer_float

// GL_EXT_color_buffer_half_float

// GL_EXT_copy_image
ANGLE_EXPORT void GL_APIENTRY GL_CopyImageSubDataEXT(GLuint srcName,
                                                     GLenum srcTarget,
                                                     GLint srcLevel,
                                                     GLint srcX,
                                                     GLint srcY,
                                                     GLint srcZ,
                                                     GLuint dstName,
                                                     GLenum dstTarget,
                                                     GLint dstLevel,
                                                     GLint dstX,
                                                     GLint dstY,
                                                     GLint dstZ,
                                                     GLsizei srcWidth,
                                                     GLsizei srcHeight,
                                                     GLsizei srcDepth);

// GL_EXT_debug_label
ANGLE_EXPORT void GL_APIENTRY
GL_GetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_LabelObjectEXT(GLenum type,
                                                GLuint object,
                                                GLsizei length,
                                                const GLchar *label);

// GL_EXT_debug_marker
ANGLE_EXPORT void GL_APIENTRY GL_InsertEventMarkerEXT(GLsizei length, const GLchar *marker);
ANGLE_EXPORT void GL_APIENTRY GL_PopGroupMarkerEXT();
ANGLE_EXPORT void GL_APIENTRY GL_PushGroupMarkerEXT(GLsizei length, const GLchar *marker);

// GL_EXT_discard_framebuffer
ANGLE_EXPORT void GL_APIENTRY GL_DiscardFramebufferEXT(GLenum target,
                                                       GLsizei numAttachments,
                                                       const GLenum *attachments);

// GL_EXT_disjoint_timer_query
ANGLE_EXPORT void GL_APIENTRY GL_BeginQueryEXT(GLenum target, GLuint id);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteQueriesEXT(GLsizei n, const GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY GL_EndQueryEXT(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_GenQueriesEXT(GLsizei n, GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY GL_GetInteger64vEXT(GLenum pname, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryivEXT(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsQueryEXT(GLuint id);
ANGLE_EXPORT void GL_APIENTRY GL_QueryCounterEXT(GLuint id, GLenum target);

// GL_EXT_draw_buffers
ANGLE_EXPORT void GL_APIENTRY GL_DrawBuffersEXT(GLsizei n, const GLenum *bufs);

// GL_EXT_draw_buffers_indexed
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationSeparateiEXT(GLuint buf,
                                                           GLenum modeRGB,
                                                           GLenum modeAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationiEXT(GLuint buf, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY GL_BlendFuncSeparateiEXT(GLuint buf,
                                                       GLenum srcRGB,
                                                       GLenum dstRGB,
                                                       GLenum srcAlpha,
                                                       GLenum dstAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendFunciEXT(GLuint buf, GLenum src, GLenum dst);
ANGLE_EXPORT void GL_APIENTRY
GL_ColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY GL_DisableiEXT(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_EnableiEXT(GLenum target, GLuint index);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsEnablediEXT(GLenum target, GLuint index);

// GL_EXT_draw_elements_base_vertex
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsBaseVertexEXT(GLenum mode,
                                                           GLsizei count,
                                                           GLenum type,
                                                           const void *indices,
                                                           GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedBaseVertexEXT(GLenum mode,
                                                                    GLsizei count,
                                                                    GLenum type,
                                                                    const void *indices,
                                                                    GLsizei instancecount,
                                                                    GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawRangeElementsBaseVertexEXT(GLenum mode,
                                                                GLuint start,
                                                                GLuint end,
                                                                GLsizei count,
                                                                GLenum type,
                                                                const void *indices,
                                                                GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawElementsBaseVertexEXT(GLenum mode,
                                                                const GLsizei *count,
                                                                GLenum type,
                                                                const void *const *indices,
                                                                GLsizei drawcount,
                                                                const GLint *basevertex);

// GL_EXT_external_buffer
ANGLE_EXPORT void GL_APIENTRY GL_BufferStorageExternalEXT(GLenum target,
                                                          GLintptr offset,
                                                          GLsizeiptr size,
                                                          GLeglClientBufferEXT clientBuffer,
                                                          GLbitfield flags);
ANGLE_EXPORT void GL_APIENTRY GL_NamedBufferStorageExternalEXT(GLuint buffer,
                                                               GLintptr offset,
                                                               GLsizeiptr size,
                                                               GLeglClientBufferEXT clientBuffer,
                                                               GLbitfield flags);

// GL_EXT_float_blend

// GL_EXT_geometry_shader
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTextureEXT(GLenum target,
                                                       GLenum attachment,
                                                       GLuint texture,
                                                       GLint level);

// GL_EXT_gpu_shader5

// GL_EXT_instanced_arrays
ANGLE_EXPORT void GL_APIENTRY GL_DrawArraysInstancedEXT(GLenum mode,
                                                        GLint start,
                                                        GLsizei count,
                                                        GLsizei primcount);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedEXT(GLenum mode,
                                                          GLsizei count,
                                                          GLenum type,
                                                          const void *indices,
                                                          GLsizei primcount);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribDivisorEXT(GLuint index, GLuint divisor);

// GL_EXT_map_buffer_range
ANGLE_EXPORT void GL_APIENTRY GL_FlushMappedBufferRangeEXT(GLenum target,
                                                           GLintptr offset,
                                                           GLsizeiptr length);
ANGLE_EXPORT void *GL_APIENTRY GL_MapBufferRangeEXT(GLenum target,
                                                    GLintptr offset,
                                                    GLsizeiptr length,
                                                    GLbitfield access);

// GL_EXT_memory_object
ANGLE_EXPORT void GL_APIENTRY GL_BufferStorageMemEXT(GLenum target,
                                                     GLsizeiptr size,
                                                     GLuint memory,
                                                     GLuint64 offset);
ANGLE_EXPORT void GL_APIENTRY GL_CreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects);
ANGLE_EXPORT void GL_APIENTRY GL_GetMemoryObjectParameterivEXT(GLuint memoryObject,
                                                               GLenum pname,
                                                               GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetUnsignedBytevEXT(GLenum pname, GLubyte *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsMemoryObjectEXT(GLuint memoryObject);
ANGLE_EXPORT void GL_APIENTRY GL_MemoryObjectParameterivEXT(GLuint memoryObject,
                                                            GLenum pname,
                                                            const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMem2DEXT(GLenum target,
                                                    GLsizei levels,
                                                    GLenum internalFormat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLuint memory,
                                                    GLuint64 offset);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMem2DMultisampleEXT(GLenum target,
                                                               GLsizei samples,
                                                               GLenum internalFormat,
                                                               GLsizei width,
                                                               GLsizei height,
                                                               GLboolean fixedSampleLocations,
                                                               GLuint memory,
                                                               GLuint64 offset);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMem3DEXT(GLenum target,
                                                    GLsizei levels,
                                                    GLenum internalFormat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth,
                                                    GLuint memory,
                                                    GLuint64 offset);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorageMem3DMultisampleEXT(GLenum target,
                                                               GLsizei samples,
                                                               GLenum internalFormat,
                                                               GLsizei width,
                                                               GLsizei height,
                                                               GLsizei depth,
                                                               GLboolean fixedSampleLocations,
                                                               GLuint memory,
                                                               GLuint64 offset);

// GL_EXT_memory_object_fd
ANGLE_EXPORT void GL_APIENTRY GL_ImportMemoryFdEXT(GLuint memory,
                                                   GLuint64 size,
                                                   GLenum handleType,
                                                   GLint fd);

// GL_EXT_multi_draw_indirect
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawArraysIndirectEXT(GLenum mode,
                                                            const void *indirect,
                                                            GLsizei drawcount,
                                                            GLsizei stride);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawElementsIndirectEXT(GLenum mode,
                                                              GLenum type,
                                                              const void *indirect,
                                                              GLsizei drawcount,
                                                              GLsizei stride);

// GL_EXT_multisampled_render_to_texture
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture2DMultisampleEXT(GLenum target,
                                                                    GLenum attachment,
                                                                    GLenum textarget,
                                                                    GLuint texture,
                                                                    GLint level,
                                                                    GLsizei samples);
ANGLE_EXPORT void GL_APIENTRY GL_RenderbufferStorageMultisampleEXT(GLenum target,
                                                                   GLsizei samples,
                                                                   GLenum internalformat,
                                                                   GLsizei width,
                                                                   GLsizei height);

// GL_EXT_multisampled_render_to_texture2

// GL_EXT_occlusion_query_boolean

// GL_EXT_primitive_bounding_box
ANGLE_EXPORT void GL_APIENTRY GL_PrimitiveBoundingBoxEXT(GLfloat minX,
                                                         GLfloat minY,
                                                         GLfloat minZ,
                                                         GLfloat minW,
                                                         GLfloat maxX,
                                                         GLfloat maxY,
                                                         GLfloat maxZ,
                                                         GLfloat maxW);

// GL_EXT_protected_textures

// GL_EXT_pvrtc_sRGB

// GL_EXT_read_format_bgra

// GL_EXT_robustness
ANGLE_EXPORT GLenum GL_APIENTRY GL_GetGraphicsResetStatusEXT();
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformfvEXT(GLuint program,
                                                  GLint location,
                                                  GLsizei bufSize,
                                                  GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetnUniformivEXT(GLuint program,
                                                  GLint location,
                                                  GLsizei bufSize,
                                                  GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_ReadnPixelsEXT(GLint x,
                                                GLint y,
                                                GLsizei width,
                                                GLsizei height,
                                                GLenum format,
                                                GLenum type,
                                                GLsizei bufSize,
                                                void *data);

// GL_EXT_sRGB

// GL_EXT_sRGB_write_control

// GL_EXT_semaphore
ANGLE_EXPORT void GL_APIENTRY GL_DeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores);
ANGLE_EXPORT void GL_APIENTRY GL_GenSemaphoresEXT(GLsizei n, GLuint *semaphores);
ANGLE_EXPORT void GL_APIENTRY GL_GetSemaphoreParameterui64vEXT(GLuint semaphore,
                                                               GLenum pname,
                                                               GLuint64 *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsSemaphoreEXT(GLuint semaphore);
ANGLE_EXPORT void GL_APIENTRY GL_SemaphoreParameterui64vEXT(GLuint semaphore,
                                                            GLenum pname,
                                                            const GLuint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_SignalSemaphoreEXT(GLuint semaphore,
                                                    GLuint numBufferBarriers,
                                                    const GLuint *buffers,
                                                    GLuint numTextureBarriers,
                                                    const GLuint *textures,
                                                    const GLenum *dstLayouts);
ANGLE_EXPORT void GL_APIENTRY GL_WaitSemaphoreEXT(GLuint semaphore,
                                                  GLuint numBufferBarriers,
                                                  const GLuint *buffers,
                                                  GLuint numTextureBarriers,
                                                  const GLuint *textures,
                                                  const GLenum *srcLayouts);

// GL_EXT_semaphore_fd
ANGLE_EXPORT void GL_APIENTRY GL_ImportSemaphoreFdEXT(GLuint semaphore,
                                                      GLenum handleType,
                                                      GLint fd);

// GL_EXT_separate_shader_objects
ANGLE_EXPORT void GL_APIENTRY GL_ActiveShaderProgramEXT(GLuint pipeline, GLuint program);
ANGLE_EXPORT void GL_APIENTRY GL_BindProgramPipelineEXT(GLuint pipeline);
ANGLE_EXPORT GLuint GL_APIENTRY GL_CreateShaderProgramvEXT(GLenum type,
                                                           GLsizei count,
                                                           const GLchar **strings);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines);
ANGLE_EXPORT void GL_APIENTRY GL_GenProgramPipelinesEXT(GLsizei n, GLuint *pipelines);
ANGLE_EXPORT void GL_APIENTRY GL_GetProgramPipelineInfoLogEXT(GLuint pipeline,
                                                              GLsizei bufSize,
                                                              GLsizei *length,
                                                              GLchar *infoLog);
ANGLE_EXPORT void GL_APIENTRY GL_GetProgramPipelineivEXT(GLuint pipeline,
                                                         GLenum pname,
                                                         GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsProgramPipelineEXT(GLuint pipeline);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1fvEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1ivEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform1uivEXT(GLuint program,
                                                       GLint location,
                                                       GLsizei count,
                                                       const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2fEXT(GLuint program,
                                                     GLint location,
                                                     GLfloat v0,
                                                     GLfloat v1);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2fvEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2iEXT(GLuint program,
                                                     GLint location,
                                                     GLint v0,
                                                     GLint v1);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2ivEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2uiEXT(GLuint program,
                                                      GLint location,
                                                      GLuint v0,
                                                      GLuint v1);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform2uivEXT(GLuint program,
                                                       GLint location,
                                                       GLsizei count,
                                                       const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform3fvEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform3ivEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLint *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform3uivEXT(GLuint program,
                                                       GLint location,
                                                       GLsizei count,
                                                       const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform4fEXT(GLuint program,
                                                     GLint location,
                                                     GLfloat v0,
                                                     GLfloat v1,
                                                     GLfloat v2,
                                                     GLfloat v3);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform4fvEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform4ivEXT(GLuint program,
                                                      GLint location,
                                                      GLsizei count,
                                                      const GLint *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniform4uivEXT(GLuint program,
                                                       GLint location,
                                                       GLsizei count,
                                                       const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix2fvEXT(GLuint program,
                                                            GLint location,
                                                            GLsizei count,
                                                            GLboolean transpose,
                                                            const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix2x3fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix2x4fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix3fvEXT(GLuint program,
                                                            GLint location,
                                                            GLsizei count,
                                                            GLboolean transpose,
                                                            const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix3x2fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix3x4fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix4fvEXT(GLuint program,
                                                            GLint location,
                                                            GLsizei count,
                                                            GLboolean transpose,
                                                            const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix4x2fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramUniformMatrix4x3fvEXT(GLuint program,
                                                              GLint location,
                                                              GLsizei count,
                                                              GLboolean transpose,
                                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_UseProgramStagesEXT(GLuint pipeline,
                                                     GLbitfield stages,
                                                     GLuint program);
ANGLE_EXPORT void GL_APIENTRY GL_ValidateProgramPipelineEXT(GLuint pipeline);

// GL_EXT_shader_framebuffer_fetch

// GL_EXT_shader_framebuffer_fetch_non_coherent
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferFetchBarrierEXT();

// GL_EXT_shader_io_blocks

// GL_EXT_shader_non_constant_global_initializers

// GL_EXT_shader_texture_lod

// GL_EXT_shadow_samplers

// GL_EXT_tessellation_shader
ANGLE_EXPORT void GL_APIENTRY GL_PatchParameteriEXT(GLenum pname, GLint value);

// GL_EXT_texture_border_clamp
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIivEXT(GLuint sampler,
                                                           GLenum pname,
                                                           GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIuivEXT(GLuint sampler,
                                                            GLenum pname,
                                                            GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIuivEXT(GLenum target,
                                                        GLenum pname,
                                                        GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIivEXT(GLuint sampler,
                                                        GLenum pname,
                                                        const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIuivEXT(GLuint sampler,
                                                         GLenum pname,
                                                         const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIivEXT(GLenum target,
                                                    GLenum pname,
                                                    const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIuivEXT(GLenum target,
                                                     GLenum pname,
                                                     const GLuint *params);

// GL_EXT_texture_buffer
ANGLE_EXPORT void GL_APIENTRY GL_TexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY GL_TexBufferRangeEXT(GLenum target,
                                                   GLenum internalformat,
                                                   GLuint buffer,
                                                   GLintptr offset,
                                                   GLsizeiptr size);

// GL_EXT_texture_compression_bptc

// GL_EXT_texture_compression_dxt1

// GL_EXT_texture_compression_rgtc

// GL_EXT_texture_compression_s3tc

// GL_EXT_texture_compression_s3tc_srgb

// GL_EXT_texture_cube_map_array

// GL_EXT_texture_filter_anisotropic

// GL_EXT_texture_format_BGRA8888

// GL_EXT_texture_format_sRGB_override

// GL_EXT_texture_norm16

// GL_EXT_texture_rg

// GL_EXT_texture_sRGB_R8

// GL_EXT_texture_sRGB_RG8

// GL_EXT_texture_sRGB_decode

// GL_EXT_texture_storage
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage1DEXT(GLenum target,
                                                 GLsizei levels,
                                                 GLenum internalformat,
                                                 GLsizei width);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage2DEXT(GLenum target,
                                                 GLsizei levels,
                                                 GLenum internalformat,
                                                 GLsizei width,
                                                 GLsizei height);
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage3DEXT(GLenum target,
                                                 GLsizei levels,
                                                 GLenum internalformat,
                                                 GLsizei width,
                                                 GLsizei height,
                                                 GLsizei depth);

// GL_EXT_texture_type_2_10_10_10_REV

// GL_EXT_unpack_subimage

// GL_IMG_texture_compression_pvrtc

// GL_IMG_texture_compression_pvrtc2

// GL_KHR_blend_equation_advanced
ANGLE_EXPORT void GL_APIENTRY GL_BlendBarrierKHR();

// GL_KHR_debug
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageCallbackKHR(GLDEBUGPROCKHR callback,
                                                         const void *userParam);
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageControlKHR(GLenum source,
                                                        GLenum type,
                                                        GLenum severity,
                                                        GLsizei count,
                                                        const GLuint *ids,
                                                        GLboolean enabled);
ANGLE_EXPORT void GL_APIENTRY GL_DebugMessageInsertKHR(GLenum source,
                                                       GLenum type,
                                                       GLuint id,
                                                       GLenum severity,
                                                       GLsizei length,
                                                       const GLchar *buf);
ANGLE_EXPORT GLuint GL_APIENTRY GL_GetDebugMessageLogKHR(GLuint count,
                                                         GLsizei bufSize,
                                                         GLenum *sources,
                                                         GLenum *types,
                                                         GLuint *ids,
                                                         GLenum *severities,
                                                         GLsizei *lengths,
                                                         GLchar *messageLog);
ANGLE_EXPORT void GL_APIENTRY GL_GetObjectLabelKHR(GLenum identifier,
                                                   GLuint name,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_GetObjectPtrLabelKHR(const void *ptr,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_GetPointervKHR(GLenum pname, void **params);
ANGLE_EXPORT void GL_APIENTRY GL_ObjectLabelKHR(GLenum identifier,
                                                GLuint name,
                                                GLsizei length,
                                                const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_ObjectPtrLabelKHR(const void *ptr,
                                                   GLsizei length,
                                                   const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GL_PopDebugGroupKHR();
ANGLE_EXPORT void GL_APIENTRY GL_PushDebugGroupKHR(GLenum source,
                                                   GLuint id,
                                                   GLsizei length,
                                                   const GLchar *message);

// GL_KHR_no_error

// GL_KHR_parallel_shader_compile
ANGLE_EXPORT void GL_APIENTRY GL_MaxShaderCompilerThreadsKHR(GLuint count);

// GL_KHR_robust_buffer_access_behavior

// GL_KHR_texture_compression_astc_hdr

// GL_KHR_texture_compression_astc_ldr

// GL_KHR_texture_compression_astc_sliced_3d

// GL_MESA_framebuffer_flip_y
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferParameteriMESA(GLenum target,
                                                           GLenum pname,
                                                           GLint param);
ANGLE_EXPORT void GL_APIENTRY GL_GetFramebufferParameterivMESA(GLenum target,
                                                               GLenum pname,
                                                               GLint *params);

// GL_NV_fence
ANGLE_EXPORT void GL_APIENTRY GL_DeleteFencesNV(GLsizei n, const GLuint *fences);
ANGLE_EXPORT void GL_APIENTRY GL_FinishFenceNV(GLuint fence);
ANGLE_EXPORT void GL_APIENTRY GL_GenFencesNV(GLsizei n, GLuint *fences);
ANGLE_EXPORT void GL_APIENTRY GL_GetFenceivNV(GLuint fence, GLenum pname, GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsFenceNV(GLuint fence);
ANGLE_EXPORT void GL_APIENTRY GL_SetFenceNV(GLuint fence, GLenum condition);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_TestFenceNV(GLuint fence);

// GL_NV_framebuffer_blit
ANGLE_EXPORT void GL_APIENTRY GL_BlitFramebufferNV(GLint srcX0,
                                                   GLint srcY0,
                                                   GLint srcX1,
                                                   GLint srcY1,
                                                   GLint dstX0,
                                                   GLint dstY0,
                                                   GLint dstX1,
                                                   GLint dstY1,
                                                   GLbitfield mask,
                                                   GLenum filter);

// GL_NV_pixel_buffer_object

// GL_NV_read_depth

// GL_NV_read_depth_stencil

// GL_NV_read_stencil

// GL_NV_robustness_video_memory_purge

// GL_NV_shader_noperspective_interpolation

// GL_OES_EGL_image
ANGLE_EXPORT void GL_APIENTRY GL_EGLImageTargetRenderbufferStorageOES(GLenum target,
                                                                      GLeglImageOES image);
ANGLE_EXPORT void GL_APIENTRY GL_EGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);

// GL_OES_EGL_image_external

// GL_OES_EGL_image_external_essl3

// GL_OES_compressed_ETC1_RGB8_texture

// GL_OES_copy_image
ANGLE_EXPORT void GL_APIENTRY GL_CopyImageSubDataOES(GLuint srcName,
                                                     GLenum srcTarget,
                                                     GLint srcLevel,
                                                     GLint srcX,
                                                     GLint srcY,
                                                     GLint srcZ,
                                                     GLuint dstName,
                                                     GLenum dstTarget,
                                                     GLint dstLevel,
                                                     GLint dstX,
                                                     GLint dstY,
                                                     GLint dstZ,
                                                     GLsizei srcWidth,
                                                     GLsizei srcHeight,
                                                     GLsizei srcDepth);

// GL_OES_depth24

// GL_OES_depth32

// GL_OES_depth_texture

// GL_OES_draw_buffers_indexed
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationSeparateiOES(GLuint buf,
                                                           GLenum modeRGB,
                                                           GLenum modeAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendEquationiOES(GLuint buf, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY GL_BlendFuncSeparateiOES(GLuint buf,
                                                       GLenum srcRGB,
                                                       GLenum dstRGB,
                                                       GLenum srcAlpha,
                                                       GLenum dstAlpha);
ANGLE_EXPORT void GL_APIENTRY GL_BlendFunciOES(GLuint buf, GLenum src, GLenum dst);
ANGLE_EXPORT void GL_APIENTRY
GL_ColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY GL_DisableiOES(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_EnableiOES(GLenum target, GLuint index);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsEnablediOES(GLenum target, GLuint index);

// GL_OES_draw_elements_base_vertex
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsBaseVertexOES(GLenum mode,
                                                           GLsizei count,
                                                           GLenum type,
                                                           const void *indices,
                                                           GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedBaseVertexOES(GLenum mode,
                                                                    GLsizei count,
                                                                    GLenum type,
                                                                    const void *indices,
                                                                    GLsizei instancecount,
                                                                    GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawRangeElementsBaseVertexOES(GLenum mode,
                                                                GLuint start,
                                                                GLuint end,
                                                                GLsizei count,
                                                                GLenum type,
                                                                const void *indices,
                                                                GLint basevertex);

// GL_OES_draw_texture
ANGLE_EXPORT void GL_APIENTRY
GL_DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
ANGLE_EXPORT void GL_APIENTRY GL_DrawTexfvOES(const GLfloat *coords);
ANGLE_EXPORT void GL_APIENTRY GL_DrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height);
ANGLE_EXPORT void GL_APIENTRY GL_DrawTexivOES(const GLint *coords);
ANGLE_EXPORT void GL_APIENTRY
GL_DrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
ANGLE_EXPORT void GL_APIENTRY GL_DrawTexsvOES(const GLshort *coords);
ANGLE_EXPORT void GL_APIENTRY
GL_DrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
ANGLE_EXPORT void GL_APIENTRY GL_DrawTexxvOES(const GLfixed *coords);

// GL_OES_element_index_uint

// GL_OES_fbo_render_mipmap

// GL_OES_framebuffer_object
ANGLE_EXPORT void GL_APIENTRY GL_BindFramebufferOES(GLenum target, GLuint framebuffer);
ANGLE_EXPORT void GL_APIENTRY GL_BindRenderbufferOES(GLenum target, GLuint renderbuffer);
ANGLE_EXPORT GLenum GL_APIENTRY GL_CheckFramebufferStatusOES(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferRenderbufferOES(GLenum target,
                                                            GLenum attachment,
                                                            GLenum renderbuffertarget,
                                                            GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture2DOES(GLenum target,
                                                         GLenum attachment,
                                                         GLenum textarget,
                                                         GLuint texture,
                                                         GLint level);
ANGLE_EXPORT void GL_APIENTRY GL_GenFramebuffersOES(GLsizei n, GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY GL_GenRenderbuffersOES(GLsizei n, GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY GL_GenerateMipmapOES(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_GetFramebufferAttachmentParameterivOES(GLenum target,
                                                                        GLenum attachment,
                                                                        GLenum pname,
                                                                        GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetRenderbufferParameterivOES(GLenum target,
                                                               GLenum pname,
                                                               GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsFramebufferOES(GLuint framebuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsRenderbufferOES(GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY GL_RenderbufferStorageOES(GLenum target,
                                                        GLenum internalformat,
                                                        GLsizei width,
                                                        GLsizei height);

// GL_OES_geometry_shader
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTextureOES(GLenum target,
                                                       GLenum attachment,
                                                       GLuint texture,
                                                       GLint level);

// GL_OES_get_program_binary
ANGLE_EXPORT void GL_APIENTRY GL_GetProgramBinaryOES(GLuint program,
                                                     GLsizei bufSize,
                                                     GLsizei *length,
                                                     GLenum *binaryFormat,
                                                     void *binary);
ANGLE_EXPORT void GL_APIENTRY GL_ProgramBinaryOES(GLuint program,
                                                  GLenum binaryFormat,
                                                  const void *binary,
                                                  GLint length);

// GL_OES_mapbuffer
ANGLE_EXPORT void GL_APIENTRY GL_GetBufferPointervOES(GLenum target, GLenum pname, void **params);
ANGLE_EXPORT void *GL_APIENTRY GL_MapBufferOES(GLenum target, GLenum access);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_UnmapBufferOES(GLenum target);

// GL_OES_matrix_palette
ANGLE_EXPORT void GL_APIENTRY GL_CurrentPaletteMatrixOES(GLuint matrixpaletteindex);
ANGLE_EXPORT void GL_APIENTRY GL_LoadPaletteFromModelViewMatrixOES();
ANGLE_EXPORT void GL_APIENTRY GL_MatrixIndexPointerOES(GLint size,
                                                       GLenum type,
                                                       GLsizei stride,
                                                       const void *pointer);
ANGLE_EXPORT void GL_APIENTRY GL_WeightPointerOES(GLint size,
                                                  GLenum type,
                                                  GLsizei stride,
                                                  const void *pointer);

// GL_OES_packed_depth_stencil

// GL_OES_point_size_array
ANGLE_EXPORT void GL_APIENTRY GL_PointSizePointerOES(GLenum type,
                                                     GLsizei stride,
                                                     const void *pointer);

// GL_OES_point_sprite

// GL_OES_primitive_bounding_box
ANGLE_EXPORT void GL_APIENTRY GL_PrimitiveBoundingBoxOES(GLfloat minX,
                                                         GLfloat minY,
                                                         GLfloat minZ,
                                                         GLfloat minW,
                                                         GLfloat maxX,
                                                         GLfloat maxY,
                                                         GLfloat maxZ,
                                                         GLfloat maxW);

// GL_OES_query_matrix
ANGLE_EXPORT GLbitfield GL_APIENTRY GL_QueryMatrixxOES(GLfixed *mantissa, GLint *exponent);

// GL_OES_rgb8_rgba8

// GL_OES_sample_shading
ANGLE_EXPORT void GL_APIENTRY GL_MinSampleShadingOES(GLfloat value);

// GL_OES_sample_variables

// GL_OES_shader_image_atomic

// GL_OES_shader_io_blocks

// GL_OES_shader_multisample_interpolation

// GL_OES_standard_derivatives

// GL_OES_surfaceless_context

// GL_OES_texture_3D
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexImage3DOES(GLenum target,
                                                         GLint level,
                                                         GLenum internalformat,
                                                         GLsizei width,
                                                         GLsizei height,
                                                         GLsizei depth,
                                                         GLint border,
                                                         GLsizei imageSize,
                                                         const void *data);
ANGLE_EXPORT void GL_APIENTRY GL_CompressedTexSubImage3DOES(GLenum target,
                                                            GLint level,
                                                            GLint xoffset,
                                                            GLint yoffset,
                                                            GLint zoffset,
                                                            GLsizei width,
                                                            GLsizei height,
                                                            GLsizei depth,
                                                            GLenum format,
                                                            GLsizei imageSize,
                                                            const void *data);
ANGLE_EXPORT void GL_APIENTRY GL_CopyTexSubImage3DOES(GLenum target,
                                                      GLint level,
                                                      GLint xoffset,
                                                      GLint yoffset,
                                                      GLint zoffset,
                                                      GLint x,
                                                      GLint y,
                                                      GLsizei width,
                                                      GLsizei height);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture3DOES(GLenum target,
                                                         GLenum attachment,
                                                         GLenum textarget,
                                                         GLuint texture,
                                                         GLint level,
                                                         GLint zoffset);
ANGLE_EXPORT void GL_APIENTRY GL_TexImage3DOES(GLenum target,
                                               GLint level,
                                               GLenum internalformat,
                                               GLsizei width,
                                               GLsizei height,
                                               GLsizei depth,
                                               GLint border,
                                               GLenum format,
                                               GLenum type,
                                               const void *pixels);
ANGLE_EXPORT void GL_APIENTRY GL_TexSubImage3DOES(GLenum target,
                                                  GLint level,
                                                  GLint xoffset,
                                                  GLint yoffset,
                                                  GLint zoffset,
                                                  GLsizei width,
                                                  GLsizei height,
                                                  GLsizei depth,
                                                  GLenum format,
                                                  GLenum type,
                                                  const void *pixels);

// GL_OES_texture_border_clamp
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIivOES(GLuint sampler,
                                                           GLenum pname,
                                                           GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIuivOES(GLuint sampler,
                                                            GLenum pname,
                                                            GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIivOES(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIuivOES(GLenum target,
                                                        GLenum pname,
                                                        GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIivOES(GLuint sampler,
                                                        GLenum pname,
                                                        const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIuivOES(GLuint sampler,
                                                         GLenum pname,
                                                         const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIivOES(GLenum target,
                                                    GLenum pname,
                                                    const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIuivOES(GLenum target,
                                                     GLenum pname,
                                                     const GLuint *params);

// GL_OES_texture_buffer
ANGLE_EXPORT void GL_APIENTRY GL_TexBufferOES(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY GL_TexBufferRangeOES(GLenum target,
                                                   GLenum internalformat,
                                                   GLuint buffer,
                                                   GLintptr offset,
                                                   GLsizeiptr size);

// GL_OES_texture_compression_astc

// GL_OES_texture_cube_map
ANGLE_EXPORT void GL_APIENTRY GL_GetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexGenivOES(GLenum coord, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexGenfOES(GLenum coord, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY GL_TexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexGeniOES(GLenum coord, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY GL_TexGenivOES(GLenum coord, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexGenxOES(GLenum coord, GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY GL_TexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params);

// GL_OES_texture_cube_map_array

// GL_OES_texture_float

// GL_OES_texture_float_linear

// GL_OES_texture_half_float

// GL_OES_texture_half_float_linear

// GL_OES_texture_npot

// GL_OES_texture_stencil8

// GL_OES_texture_storage_multisample_2d_array
ANGLE_EXPORT void GL_APIENTRY GL_TexStorage3DMultisampleOES(GLenum target,
                                                            GLsizei samples,
                                                            GLenum internalformat,
                                                            GLsizei width,
                                                            GLsizei height,
                                                            GLsizei depth,
                                                            GLboolean fixedsamplelocations);

// GL_OES_vertex_array_object
ANGLE_EXPORT void GL_APIENTRY GL_BindVertexArrayOES(GLuint array);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteVertexArraysOES(GLsizei n, const GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY GL_GenVertexArraysOES(GLsizei n, GLuint *arrays);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsVertexArrayOES(GLuint array);

// GL_OES_vertex_half_float

// GL_OES_vertex_type_10_10_10_2

// GL_OVR_multiview
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTextureMultiviewOVR(GLenum target,
                                                                GLenum attachment,
                                                                GLuint texture,
                                                                GLint level,
                                                                GLint baseViewIndex,
                                                                GLsizei numViews);

// GL_OVR_multiview2

// GL_QCOM_shading_rate
ANGLE_EXPORT void GL_APIENTRY GL_ShadingRateQCOM(GLenum rate);
}  // extern "C"

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_EXT_AUTOGEN_H_
