#!/usr/bin/python3
# Copyright 2021 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# create_mtl_internal_shaders.py:
#   Script to compile a metalLib into NSData, for including the compilded
#       library in the ANGLE dylib.

import os
import sys
from datetime import datetime

sys.path.append('../..')

template_header_boilerplate = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
"""


# Convert content of a file to byte array and store in a header file.
# variable_name: name of C++ variable that will hold the file content as byte array.
# filename: the file whose content will be converted to C++ byte array.
# dest_src_file: destination header file that will contain the byte array.
def append_file_as_byte_array_string(variable_name, filename, dest_src_file):
    string = f'// Generated from {filename}:\n'
    string += f'constexpr uint8_t {variable_name}[]={{\n'
    bytes_ = open(filename, "rb").read()
    for byte in bytes_:
        string += f'0x{byte:02x}' + ", "
    string += "\n};\n"
    with open(dest_src_file, "a") as out_file:
        out_file.write(string)


def main():
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    os.chdir(sys.path[0])

    boilerplate_code = template_header_boilerplate.format(
        script_name=os.path.basename(sys.argv[0]), copyright_year=datetime.today().year)

    # -------- Compile shaders -----------
    # boiler plate code
    os.system(f"echo \"{boilerplate_code}\" > \"{output_file}\"")
    os.system(
        f'echo "// Compiled binary for Metal default shaders.\n\n" >>  \"{output_file}\"')
    os.system(f'echo "#include <TargetConditionals.h>\n\n" >>  \"{output_file}\"')

    os.system(f'echo "// clang-format off" >> \"{output_file}\"')

    append_file_as_byte_array_string('gDefaultMetallib', input_file, output_file)

    os.system(f'echo "// clang-format on" >> \"{output_file}\"')


if __name__ == '__main__':
    sys.exit(main())
