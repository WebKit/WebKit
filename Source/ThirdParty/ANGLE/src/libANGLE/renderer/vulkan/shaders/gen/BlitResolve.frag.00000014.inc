// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x95,0xdb,0x4e,0x53,0x51,
    0x10,0x86,0x57,0xcf,0x80,0xa0,0x40,0x39,0x89,0x1c,0x04,0x04,0x05,0x95,0x54,0x6d,
    0x0d,0x06,0x11,0x14,0x0a,0x22,0x55,0x81,0x42,0x41,0x8c,0x36,0x04,0x6a,0x24,0x81,
    0x42,0x80,0x0b,0x2f,0x4c,0xbc,0x30,0x3e,0x82,0xbe,0x84,0xcf,0x67,0x3c,0x24,0x26,
    0xce,0xac,0x7e,0xcb,0x8c,0x5c,0xb8,0x93,0x95,0xbd,0xe7,0x9f,0x7f,0x0e,0xff,0xda,
    0x6b,0xf6,0x8e,0x45,0x87,0x52,0xce,0x45,0x5c,0x83,0xab,0x73,0x47,0xae,0x76,0xb5,
    0xb8,0xa8,0x20,0xb5,0xfb,0xe7,0xb4,0x13,0x5f,0xbd,0x2b,0x2e,0x97,0xca,0xf9,0xcd,
    0xb5,0xf2,0xc9,0xdb,0xed,0xdd,0xca,0x71,0xf9,0xe4,0xb4,0x52,0xdd,0xd9,0xdb,0x2f,
    0x57,0xde,0x1d,0x1d,0x1e,0x9f,0x0a,0xf7,0x9c,0x4b,0xfa,0x98,0x85,0x42,0xb1,0x30,
    0x7e,0x72,0xba,0x3b,0x9e,0xcd,0x65,0x34,0xd7,0x79,0x17,0xf3,0x39,0xd5,0x77,0x41,
    0x6a,0xc4,0xe5,0xae,0xeb,0x60,0x7b,0xaf,0xaa,0x78,0xa3,0xac,0x39,0x59,0x1b,0xb2,
    0x9a,0x85,0xab,0xbe,0x94,0x79,0x56,0xff,0x82,0x3c,0x35,0xfa,0x1a,0x9a,0xc3,0xb9,
    0xc7,0x2e,0xe1,0xda,0xe8,0x75,0x88,0x7b,0xc0,0x22,0x60,0x75,0x06,0x8b,0x82,0x35,
    0x1b,0x2c,0x06,0xd6,0x65,0xb0,0x38,0x58,0x8f,0xc1,0x12,0x60,0x97,0x0d,0x96,0x04,
    0xbb,0x62,0xb0,0x14,0xd8,0x35,0x83,0xd5,0x81,0xdd,0x30,0x58,0x3d,0x58,0xc6,0xeb,
    0x8a,0xfd,0xed,0x4f,0x35,0xce,0xa1,0xb1,0x03,0x7b,0x41,0xee,0x83,0xe8,0x0b,0xf6,
    0x80,0xb1,0x97,0xce,0xf8,0x97,0xf0,0x87,0x7c,0x1b,0xe4,0xfb,0x92,0xae,0xd9,0x5b,
    0x67,0xf8,0x5b,0xf0,0x75,0xcf,0xd2,0x12,0x15,0xf5,0x76,0xcc,0xef,0x4d,0xd4,0xf7,
    0x11,0xf3,0x5a,0x55,0x7b,0xa7,0xf0,0x53,0x68,0x8f,0x62,0x37,0x60,0xc7,0x3d,0x27,
    0xee,0x6b,0x69,0x2e,0xc5,0x27,0xb1,0x1b,0xc1,0xda,0xc5,0x6e,0x25,0x57,0xb0,0xd3,
    0xd8,0x7a,0xf5,0x09,0x33,0xec,0x63,0x58,0xad,0xac,0x24,0xf7,0xb4,0x59,0x5a,0xaf,
    0x9d,0xfd,0x6c,0xa3,0x5e,0x3b,0x7b,0xa7,0xd8,0x75,0xea,0x75,0x52,0x4f,0xf9,0x5d,
    0xf8,0x52,0xc6,0xdf,0x4b,0xfd,0x60,0x0f,0xe2,0x57,0xfe,0x10,0xfc,0xb4,0xaf,0x11,
    0x75,0x23,0xf0,0xd4,0xbe,0x7a,0x26,0x2e,0xc3,0xfb,0x0e,0xf6,0x24,0xb1,0x9a,0x67,
    0x96,0xf3,0x96,0xa4,0xcf,0x59,0xce,0xbc,0x62,0x17,0x85,0x95,0xc7,0x17,0x71,0xff,
    0x5e,0xc1,0xd6,0x1c,0xf3,0x3c,0xe7,0xc9,0x31,0xef,0xdf,0x61,0xed,0xea,0x96,0xde,
    0x16,0xe1,0x3d,0x01,0x5b,0x84,0xa7,0xf6,0x12,0xd8,0x25,0xa9,0xf8,0x94,0x1c,0xa1,
    0xcf,0x65,0xde,0xa7,0xc6,0x96,0xe8,0xa9,0x95,0xd8,0x12,0x73,0x19,0xfa,0xdc,0x64,
    0x2f,0xfe,0xd7,0xe7,0x0b,0x9e,0x37,0xc9,0xa1,0xf6,0x96,0xa9,0xff,0x0a,0x9f,0x9e,
    0x9f,0x1d,0xf2,0xe9,0xf9,0xb9,0x2b,0xf3,0x11,0xe5,0xd9,0x51,0xf3,0x87,0x20,0x3a,
    0x7f,0x53,0x9c,0xb5,0x26,0xce,0xd3,0x8a,0xa0,0x49,0xbe,0x05,0x4d,0xf0,0x03,0xd6,
    0x0c,0x16,0xf1,0xda,0x12,0xfe,0x5d,0xb6,0xc0,0x55,0xdf,0x43,0xc1,0xba,0xbc,0x9e,
    0xda,0x59,0xe9,0x24,0x7f,0xca,0xef,0x63,0x0d,0xff,0x44,0x5c,0x0f,0xb1,0xdd,0x26,
    0xae,0x8f,0xb8,0x5e,0x13,0xd7,0x0f,0xfe,0x91,0xb8,0x01,0x62,0xfb,0x89,0x0b,0xdf,
    0x8a,0x0e,0xce,0xd7,0x14,0x67,0x68,0x18,0xfc,0xab,0x70,0x46,0xf8,0x76,0x0c,0x73,
    0xb6,0xbe,0xcb,0x0e,0x8c,0xa1,0xed,0x97,0xf0,0xd5,0x37,0x2a,0x6b,0x8c,0x7d,0x19,
    0x35,0x9a,0x6f,0x9a,0xef,0xc2,0x07,0xe1,0x2a,0x36,0x0e,0xbe,0x2a,0x96,0xf6,0xb4,
    0x07,0x16,0x78,0x3f,0x25,0x47,0xc8,0xa5,0xf7,0x6f,0xc2,0x52,0xde,0x01,0x9c,0x04,
    0x31,0xa3,0x46,0xc3,0x2d,0x34,0x64,0x8c,0x86,0xdb,0xe0,0x41,0xc3,0x1d,0xb0,0xa0,
    0x21,0x67,0x34,0xa8,0x2f,0x2b,0x2b,0x47,0xdd,0xac,0xd1,0x30,0x41,0xed,0x88,0xd1,
    0x70,0x0f,0x3c,0x68,0xd8,0x07,0x0b,0x3c,0xd5,0x10,0x72,0xe5,0x8c,0x86,0x2a,0x9c,
    0x31,0x62,0xb2,0x46,0xc3,0x7d,0x34,0x4c,0x1a,0x0d,0x53,0xe0,0x41,0xc3,0x03,0xb0,
    0xa0,0x61,0xc6,0x68,0x50,0xdf,0xb4,0xac,0x19,0xea,0xea,0xf3,0x73,0xea,0x3e,0xa2,
    0x76,0xd5,0xcc,0x84,0xf6,0x18,0xb8,0x33,0xa6,0xc7,0x43,0x78,0x39,0xe2,0xa6,0xe9,
    0x27,0xef,0xff,0x15,0xb5,0xd9,0x56,0x5b,0xe7,0xb8,0xc0,0x0c,0x97,0xa4,0x3f,0x9d,
    0xdf,0x67,0x70,0x0a,0xe6,0x5c,0xae,0xa0,0x6b,0xd9,0x9c,0xcb,0x55,0xf0,0x70,0x9e,
    0x8b,0xd4,0x5d,0xf5,0x73,0x9d,0xf0,0x33,0xb5,0x46,0xbe,0xa2,0x79,0x17,0xeb,0xe0,
    0xce,0xef,0x45,0xcc,0x7f,0xab,0xd6,0xc9,0xab,0xb3,0xfb,0x92,0x99,0xd6,0x7e,0x74,
    0x9e,0x5f,0x83,0x15,0xc8,0xab,0x73,0xbd,0x0b,0x1e,0xf2,0xea,0x3e,0x57,0xc0,0xf5,
    0x7a,0xcf,0xf7,0xe7,0x0d,0xb8,0xd6,0xd9,0xc0,0xfe,0x2d,0xbb,0x37,0x21,0xeb,0x0f,
    0xf1,0x3d,0x7d,0x11,0x9c,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
//     gl_FragStencilRefARB = int(texture(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent). x);
//
// }
