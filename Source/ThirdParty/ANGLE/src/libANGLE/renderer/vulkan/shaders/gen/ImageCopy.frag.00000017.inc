// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000017.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000017[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0xd5,0x65,
    0x18,0xc6,0xbf,0xe7,0x8d,0x83,0x10,0x2f,0x02,0x4a,0x54,0x58,0x26,0x6c,0x36,0x0c,
    0x58,0x91,0x11,0xa4,0x1b,0xa6,0xe8,0xca,0x42,0x34,0xa5,0x82,0x2d,0x4b,0x16,0x5a,
    0xa0,0xc5,0xa9,0xa5,0x6b,0x6b,0x2d,0x4c,0xf8,0x21,0xad,0x60,0x8d,0x59,0x2b,0xd8,
    0x0a,0x7e,0x48,0x98,0xfd,0xd0,0xd6,0x4f,0xad,0xb5,0xb2,0x48,0x7b,0xf9,0x6b,0x5a,
    0x2f,0x5b,0x5b,0xcf,0xfd,0x9c,0xcf,0xed,0xae,0xce,0x6a,0x9e,0xed,0xd9,0xf7,0x3c,
    0xd7,0xfd,0x76,0x5d,0xf7,0xfd,0x7c,0x9f,0x73,0x32,0xe9,0x2d,0xf9,0x24,0x49,0x25,
    0x15,0x49,0x79,0xf2,0x6b,0x52,0xfc,0xac,0x4f,0xd2,0x01,0x29,0x3e,0xef,0x09,0xcf,
    0xca,0xa4,0x2c,0xee,0xf7,0xee,0x3f,0xb4,0xbf,0xbd,0xf0,0xf2,0x68,0x7b,0xd7,0x7d,
    0x9d,0xe6,0x57,0x9d,0x64,0xa2,0xbf,0xd9,0x6a,0x92,0x7c,0x92,0x0d,0x4f,0x5b,0x13,
    0xcf,0x9c,0x38,0x69,0x78,0x55,0x58,0x9f,0x87,0x55,0x1b,0xfc,0x0c,0xcf,0x5b,0x8e,
    0xf0,0xad,0x2a,0xe6,0xb4,0x98,0x24,0xd9,0x97,0xe4,0x92,0x7a,0xea,0x6e,0xe1,0xe9,
    0x58,0x0a,0xac,0x5c,0xb0,0x34,0x58,0xad,0x60,0x19,0xb0,0x06,0xc1,0xb2,0x60,0x37,
    0x0b,0x96,0x03,0xbb,0x4d,0xb0,0x32,0xb0,0x3b,0x04,0xcb,0x83,0xb5,0x08,0x56,0x0e,
    0xb6,0x55,0xb0,0x75,0x60,0xdb,0x04,0xab,0x00,0xeb,0x14,0xac,0x12,0xac,0x4b,0xb0,
    0x9b,0xc0,0xba,0x05,0xab,0x02,0x7b,0x30,0xf6,0x29,0x73,0x5d,0xaf,0xf5,0x6c,0x77,
    0x78,0xde,0x49,0x7f,0x7c,0xbf,0x59,0xf6,0xd6,0xe7,0x4d,0xec,0xeb,0x43,0x54,0x3a,
    0xda,0x33,0xb1,0x37,0xf6,0x7d,0x43,0xf0,0x29,0x43,0xa7,0xf5,0xb5,0x31,0xec,0xf3,
    0xe8,0x37,0xfb,0xc6,0xe0,0x59,0x81,0xdd,0x6c,0x95,0x68,0xc9,0x46,0x2c,0x1b,0xf9,
    0xa6,0xd0,0xd2,0xcb,0xbe,0x4a,0x72,0x55,0xe3,0xef,0xb5,0xea,0xc8,0x95,0x44,0x5e,
    0xb5,0xd7,0xfb,0xea,0x35,0x6d,0xd5,0xdd,0x60,0xb9,0x8f,0xd5,0x6f,0xa0,0xdf,0xf5,
    0xd4,0x6f,0x88,0x75,0x8a,0x58,0x1b,0xda,0x36,0xc2,0xc7,0xfc,0x1b,0xb1,0xe5,0xc5,
    0xde,0x2c,0x7a,0x36,0x61,0xaf,0x8b,0xe7,0x26,0x1d,0x7b,0xd9,0x06,0x6f,0xef,0xb3,
    0xc7,0xb5,0x71,0x76,0x7c,0xbf,0x1d,0xed,0xa6,0x7b,0x27,0x3c,0x2d,0x6f,0x53,0xc8,
    0xd8,0xc7,0x3e,0x95,0xfc,0xfb,0xe3,0xfb,0x5b,0x43,0x9f,0x77,0x85,0x67,0x1f,0x3c,
    0x1e,0x02,0xdf,0x85,0x2e,0xdb,0xef,0x2e,0xa9,0xdf,0x5f,0xb2,0x1f,0xa4,0xcf,0x16,
    0x7f,0x10,0x1d,0x65,0x62,0x1f,0x62,0x6f,0xfc,0x8e,0xf2,0x3d,0x23,0xf6,0xe3,0x25,
    0x7d,0x99,0xe2,0x7c,0xfb,0xfe,0x42,0x49,0x5f,0x2f,0x72,0x5e,0xad,0xde,0x65,0x72,
    0xed,0x84,0xef,0x65,0xde,0xf1,0x4c,0xec,0x4b,0x2e,0xf2,0xca,0xc2,0xd7,0xb0,0x3f,
    0x02,0x62,0xbd,0xdb,0xc1,0x99,0xaa,0xa1,0x77,0x03,0x81,0x41,0x35,0xef,0x71,0x0d,
    0xcb,0xfb,0x74,0x92,0xb3,0xb9,0x1e,0x7b,0x5f,0xc8,0xd0,0xc8,0xbb,0xbc,0x81,0x39,
    0xef,0xc0,0xa7,0x09,0xfc,0xcd,0xe0,0x63,0xfb,0x5b,0x88,0x6b,0x22,0xce,0xe6,0x7c,
    0x3b,0x71,0xcd,0xc4,0xf9,0xd9,0x34,0xfc,0x52,0xf0,0xd9,0x2c,0x77,0x80,0xcd,0xfe,
    0xf7,0xc0,0xbc,0x15,0x3e,0x7f,0x05,0x7f,0xbf,0x0b,0x5a,0xd1,0xd3,0x12,0x67,0x90,
    0x8b,0xbd,0xd9,0x4a,0x4d,0xfb,0xbc,0x4e,0xbf,0xee,0x02,0x3f,0x18,0x76,0xc6,0xe9,
    0x0b,0x30,0xf7,0xfb,0x33,0xe4,0xf0,0x5c,0xf6,0xfc,0x2d,0x78,0x99,0xdf,0x77,0xf8,
    0xe4,0x88,0x69,0x11,0x0d,0xdb,0xd0,0xd0,0x26,0x1a,0xee,0x06,0x77,0x0d,0xed,0x60,
    0xae,0xa1,0x53,0x34,0x98,0xad,0x83,0x7b,0xc9,0xea,0x76,0x88,0x86,0x7b,0xa9,0x9d,
    0x12,0x0d,0x5d,0xe0,0xae,0xe1,0x4b,0x30,0xf7,0x33,0x0d,0x9e,0xab,0x53,0x34,0x5c,
    0xc1,0xa7,0x95,0x98,0x0e,0xd1,0x70,0x3f,0x1a,0xb6,0x8b,0x86,0x6e,0x70,0xd7,0xf0,
    0x00,0x98,0x6b,0xe8,0x15,0x0d,0x66,0xeb,0x89,0xe7,0xae,0x58,0xb7,0x87,0x73,0x94,
    0x8f,0xf9,0x8a,0xb5,0xaf,0xc8,0xbb,0x66,0x1c,0xdd,0xb7,0x57,0x38,0x7e,0x8f,0x5f,
    0x27,0x71,0x3d,0xf0,0xb1,0x77,0x70,0x0f,0xef,0x9f,0x9f,0xb9,0xbd,0x70,0xee,0x97,
    0x33,0xb7,0x0f,0xfc,0x0d,0xce,0xdc,0xc3,0x60,0x96,0xf7,0x14,0x77,0xe1,0x23,0xe0,
    0xa3,0x61,0x6f,0xef,0xfa,0xa3,0xe4,0x1e,0x23,0xe6,0x31,0xb0,0x7e,0x89,0x19,0x00,
    0x9f,0x09,0x3e,0xb6,0x3f,0x40,0x9e,0x01,0xf8,0xd8,0xbb,0x7e,0x08,0x3e,0x83,0xf0,
    0xb1,0x59,0x3d,0x0e,0x6e,0x79,0xec,0x0e,0x3e,0x0c,0x36,0x14,0x2a,0xd9,0x7b,0x7a,
    0x84,0xda,0x07,0xe8,0xcd,0x61,0x99,0xc9,0x13,0xe4,0x1b,0x92,0x99,0x3c,0x09,0xee,
    0x33,0x79,0x0a,0xcc,0x67,0x32,0x22,0x33,0x31,0xdb,0x70,0xd4,0x55,0xec,0xf3,0xb0,
    0x9c,0xab,0xa7,0xa9,0x9d,0x89,0x1a,0xca,0xe3,0x5d,0xf4,0x2c,0xd8,0x11,0x79,0xdf,
    0xd3,0x91,0x5b,0x59,0xb4,0x1f,0x23,0xce,0xd7,0xd9,0x90,0xeb,0x68,0xec,0x63,0x31,
    0xf6,0x58,0xcc,0xb5,0x2e,0xea,0x7a,0x8e,0x3c,0xa3,0xdc,0x39,0x39,0xb9,0xeb,0x6c,
    0xf6,0x23,0x70,0x1a,0x13,0xbd,0x27,0xd0,0x7b,0x5c,0xf4,0x3e,0x0f,0xee,0x7a,0x5f,
    0x00,0x73,0xbd,0x13,0xa2,0xd7,0x6c,0xe3,0xf6,0x1f,0x87,0xdc,0xe3,0xa2,0xf7,0x94,
    0xe8,0x5d,0x25,0xd7,0x8b,0xe0,0xfd,0x70,0xf2,0xb8,0x09,0xce,0xa3,0xf9,0xbc,0x44,
    0xcd,0x31,0xfc,0xc7,0xa9,0x5b,0x90,0xba,0xe6,0x33,0x19,0x56,0x81,0xf8,0x49,0xa9,
    0xfb,0xca,0x7f,0xf4,0xf9,0xd5,0x1b,0xf4,0xf9,0x34,0x71,0xbe,0xa6,0xe9,0xf3,0x19,
    0x62,0x4f,0x4b,0x9f,0x5f,0x23,0xcf,0x99,0xff,0xe9,0xb3,0x73,0x2a,0xa0,0xc9,0x62,
    0x7e,0x24,0x66,0x82,0xf8,0xc9,0x92,0x99,0x8c,0x88,0xef,0x1a,0xb3,0x1c,0x26,0xae,
    0x20,0xf3,0x3a,0xcb,0xbc,0xa6,0x64,0x5e,0x6f,0x81,0xfb,0xbc,0xce,0x81,0xf9,0xbc,
    0x66,0xa4,0x6f,0xe7,0xa2,0xb6,0x24,0x39,0x4f,0xdd,0x69,0xd1,0xf5,0x36,0xb5,0xd7,
    0xd0,0x95,0xa7,0x47,0xae,0x6b,0x86,0x98,0xf3,0xc2,0xe7,0x1d,0xf8,0x5c,0x10,0x3e,
    0xef,0x82,0x3b,0x9f,0xf7,0xc0,0x9c,0xcf,0x9c,0xf0,0x31,0xdb,0x6c,0x58,0xf3,0xe4,
    0x9e,0x95,0x39,0xbe,0x0f,0x97,0x0c,0xf7,0xae,0x71,0xfc,0x4a,0x70,0xbf,0xd3,0xe6,
    0x88,0x9d,0x97,0x7b,0xe1,0x03,0x78,0x5d,0x94,0x7b,0xe1,0x43,0xf0,0x1f,0xc8,0xff,
    0x11,0xd8,0xa0,0x70,0xfd,0x18,0xbc,0x1f,0xae,0x8b,0xc2,0xd5,0x6c,0x0b,0x61,0x2d,
    0x52,0x6f,0x41,0x78,0x7d,0x4d,0xcc,0x9a,0xfc,0x1e,0xb8,0xdf,0xa2,0xcc,0xf6,0x2a,
    0x3e,0xf3,0xc4,0x2c,0x08,0x9f,0x4f,0xe0,0xd3,0x2c,0x7c,0x3e,0x05,0x77,0x3e,0xcb,
    0xc2,0xc7,0x6c,0x4b,0x61,0x2d,0x53,0x67,0x49,0xf8,0x7c,0x43,0xcc,0x55,0x66,0x68,
    0x7c,0xdc,0x6f,0x59,0xf8,0x5c,0xc3,0x67,0x91,0x98,0x25,0xe1,0xf3,0x19,0x7c,0xa6,
    0x84,0xcf,0x25,0x70,0xe7,0xb3,0x2a,0x7c,0xcc,0xb6,0x12,0xdf,0xf5,0x62,0x9d,0x15,
    0xe1,0xf3,0x2d,0xff,0x53,0xae,0xc9,0x79,0x72,0xbf,0x55,0xe1,0xf3,0x0b,0x3e,0xcb,
    0xc4,0xac,0x94,0xcc,0x78,0x4e,0x7c,0x7f,0xe6,0x3c,0xcc,0x12,0xb7,0x5a,0x72,0x4e,
    0x67,0xc4,0xf7,0x27,0xce,0xf7,0x34,0x71,0x73,0xf1,0x3f,0x5b,0x26,0xfe,0x57,0x33,
    0xdb,0xdf,0x61,0x6a,0xdd,0x61,0xfd,0x03,0xb2,0x7b,0xf8,0x8a,0x00,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
