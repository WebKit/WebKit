// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Blit3DSrc.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlit3DSrc_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x5d,0x65,
    0x10,0x86,0xbf,0x73,0xef,0xcd,0xbd,0x89,0x91,0x36,0xc6,0xb4,0x31,0xff,0xd1,0x1a,
    0x69,0x13,0x89,0x5d,0xa8,0x04,0x44,0x51,0xba,0xd0,0x45,0x69,0xfd,0x81,0x64,0x91,
    0x4d,0x84,0x6c,0xb2,0x50,0x09,0xda,0x4d,0x16,0x55,0x08,0xd2,0x4d,0x16,0xdd,0x64,
    0xe1,0xa2,0xfe,0xb4,0xd4,0x5a,0x53,0x45,0xeb,0xc2,0xd6,0x9d,0xf8,0x13,0xb4,0xa8,
    0x0d,0x4a,0xd4,0xa0,0x44,0x2d,0x06,0xac,0x4a,0x40,0x6b,0xb4,0x2d,0x01,0xe7,0x3d,
    0xe7,0x99,0x76,0xb8,0x17,0xe6,0x9e,0x33,0xef,0x3b,0xdf,0xbc,0x33,0xf3,0x7d,0xdf,
    0x29,0x97,0x76,0xd4,0x52,0xca,0xd2,0x0d,0xa9,0x31,0x0d,0x65,0x29,0xff,0xdd,0x94,
    0x4a,0x49,0xaf,0xcd,0xa9,0x9a,0x3f,0x1f,0xde,0xfb,0xc4,0xde,0xe1,0x67,0x9f,0x9b,
    0x1c,0xbe,0xfb,0x9e,0xdd,0xe2,0xb7,0xa4,0x72,0x1e,0x27,0x6e,0xab,0x79,0x15,0x7b,
    0xca,0x9e,0x7a,0x72,0xea,0x69,0xe1,0x6d,0x66,0x63,0x66,0x13,0x66,0x53,0x66,0xd3,
    0x66,0x33,0x66,0xb3,0x66,0x73,0x66,0xf3,0x66,0x2d,0x96,0x43,0x6b,0x6a,0xca,0x6f,
    0x6f,0x6d,0xb9,0x9e,0xf2,0xa5,0xf4,0x48,0x6a,0x48,0xdd,0x45,0x29,0x69,0x07,0x4f,
    0xc7,0x32,0xb0,0xc6,0x80,0x95,0xc0,0x5a,0x02,0x56,0x06,0xbb,0x25,0x60,0x15,0xb0,
    0xee,0x80,0x35,0x80,0xf5,0x07,0xac,0x0a,0x76,0x7b,0xc0,0x6a,0x60,0x3b,0x03,0xd6,
    0x08,0x76,0x67,0xc0,0x9a,0xc0,0x76,0xe7,0x7d,0x95,0xaf,0xd5,0xa7,0x1e,0x35,0x93,
    0x5e,0xfa,0x91,0x3f,0x81,0x9f,0xe1,0x4f,0xe1,0x7b,0xfc,0x34,0x7e,0x19,0x7f,0x06,
    0xbf,0x82,0x3f,0x8b,0xdf,0x80,0x3f,0x87,0x5f,0xc5,0x9f,0xc7,0xf7,0x19,0x9f,0xb0,
    0xe7,0x6d,0x41,0x5f,0xfe,0xad,0xc1,0x5f,0xa8,0xe3,0x17,0xe0,0x55,0xcf,0xcd,0xf6,
    0x5f,0xca,0xfd,0x72,0x5e,0x8f,0xde,0xb7,0xdb,0x5b,0x95,0xd9,0xb5,0x5b,0x7c,0x0d,
    0xed,0x12,0x7e,0x33,0x7e,0x25,0x8f,0xa9,0x58,0x8e,0xc4,0xb9,0x4a,0xe9,0x3e,0xfc,
    0x36,0xb0,0x6d,0xe6,0x77,0x92,0xcb,0xfd,0x2e,0xfc,0x94,0xf7,0x71,0xe3,0xb5,0x7d,
    0x70,0xeb,0xc4,0xaa,0x3c,0xbb,0x82,0x49,0xaf,0x87,0xfd,0xe8,0x46,0xaf,0x87,0x79,
    0x08,0x1b,0x42,0xaf,0x0f,0x3d,0xc5,0xf7,0xc3,0xd5,0x02,0x3f,0x80,0xbe,0xfb,0x83,
    0xf0,0x8a,0x1f,0x22,0xbe,0x2b,0xef,0xa3,0x94,0x86,0x89,0x93,0x7f,0x57,0xdd,0xba,
    0x11,0xce,0x8b,0xfb,0x7b,0xea,0xea,0xd8,0x47,0x1f,0xca,0xbb,0x1f,0xae,0x13,0x7f,
    0x94,0x33,0xe0,0x73,0x1b,0xe5,0x7e,0x95,0xc3,0xfa,0x71,0xe6,0xee,0xfc,0x44,0x1d,
    0x3f,0xc9,0x3e,0x38,0x3f,0x05,0xef,0xfe,0x74,0x5d,0xfc,0x01,0xee,0x93,0xf3,0x33,
    0x75,0xfc,0x41,0xf6,0xc6,0xf9,0xd9,0x3a,0xfe,0x90,0xd9,0x83,0x81,0x9f,0xab,0xe3,
    0x0f,0x9b,0xbd,0x10,0xf8,0x79,0x78,0x9d,0x9b,0x97,0x98,0x45,0x8c,0x3f,0x82,0xdf,
    0x61,0x93,0x39,0x1e,0xce,0x59,0xfc,0xf1,0xf9,0xca,0x67,0xf6,0x3a,0xef,0xc7,0xd1,
    0x90,0x7f,0x02,0xac,0xd3,0x56,0x9e,0x24,0xee,0x4d,0xb0,0x93,0xc4,0xc9,0x5f,0x00,
    0xeb,0x32,0xc5,0xb7,0xc8,0x71,0xaf,0xdd,0xb2,0x12,0x33,0x4c,0xd4,0xf2,0x9f,0x21,
    0xba,0x7b,0xf7,0x73,0xd6,0x3f,0xe4,0x3c,0x3f,0x66,0xa8,0xea,0xfb,0x08,0x2c,0x05,
    0xec,0x63,0x30,0xd5,0xfa,0xa8,0x61,0x3a,0x4b,0x9f,0x10,0x2b,0xee,0x21,0xc3,0x34,
    0xd7,0x4f,0x39,0xab,0x7d,0xe4,0x57,0xdc,0x22,0xf8,0x8b,0xac,0xfb,0x8c,0xb5,0x8b,
    0x61,0xdd,0xe7,0xac,0x1b,0x08,0xeb,0xce,0x81,0xcf,0xb2,0xee,0x0b,0xd6,0x9e,0x63,
    0x9d,0xce,0xf1,0x97,0xac,0x1b,0x64,0x9d,0xce,0xf0,0x57,0xe0,0x0b,0x16,0xa3,0xb3,
    0x7d,0x1e,0x4c,0x67,0xfb,0x5f,0x9b,0xc0,0x32,0xbd,0x5d,0xb1,0x78,0x71,0x4b,0x66,
    0xcb,0xcc,0x65,0x29,0xf4,0xfc,0x35,0x9a,0xfa,0x3d,0x6f,0xb1,0xc2,0xbe,0x01,0x7f,
    0xdc,0xbc,0xfc,0xdb,0x9a,0x15,0x98,0xc7,0x5d,0xb6,0x1c,0x9e,0x4b,0xcf,0x7f,0x2c,
    0x4a,0x71,0x3b,0xb3,0x22,0xa6,0x81,0x35,0x4b,0xa1,0x87,0x6f,0xe9,0x61,0x24,0xf4,
    0xf0,0x1d,0xb8,0xf7,0xf0,0x3d,0x98,0xf7,0xb0,0x1a,0x7a,0x10,0xb7,0x62,0xb6,0x8a,
    0xee,0x4a,0xe8,0xe1,0x07,0xb4,0xb3,0xd0,0xc3,0x8f,0xe0,0xde,0xc3,0x1d,0x59,0x81,
    0x79,0x9c,0x7a,0xf0,0x5c,0xab,0xa1,0x87,0x5d,0x59,0x11,0xb3,0xcc,0x9a,0x95,0xd0,
    0xc3,0x4f,0xf4,0xb0,0x27,0xf4,0xf0,0x33,0xb8,0xf7,0xf0,0x0b,0x98,0xf7,0xb0,0x16,
    0x7a,0x10,0x77,0xc1,0x6c,0x0d,0x5d,0xbd,0xef,0x47,0xf7,0x57,0xb4,0x77,0x65,0xd7,
    0xef,0x8a,0x6a,0xf4,0xd8,0xb5,0x50,0xe3,0x20,0x71,0xab,0xac,0xbb,0x40,0x8d,0xfa,
    0x36,0xbd,0x4c,0x8d,0x47,0xa8,0x51,0xf7,0xf3,0x15,0xf0,0x67,0x98,0xcd,0xab,0x60,
    0x3e,0xbf,0xd7,0xc8,0x19,0xef,0xc2,0x51,0xb0,0xe2,0x2e,0x54,0xf3,0x7b,0x7f,0x8c,
    0xd8,0xa3,0xe4,0x50,0x7e,0xdd,0xbf,0x37,0xb8,0xbf,0xf2,0x75,0x57,0x4f,0x71,0x4f,
    0x47,0x2d,0x97,0xee,0xe8,0xdb,0xc4,0x9c,0x0a,0xfd,0xbe,0x43,0xbe,0x63,0xe1,0xfb,
    0xe0,0xf7,0xe4,0x5d,0x7a,0x18,0x0f,0xf7,0xe4,0x34,0xb8,0xdf,0xaf,0xf7,0xc8,0x71,
    0x3a,0xd4,0xfc,0x3e,0x78,0xec,0xe3,0x0c,0x58,0xec,0xe3,0x2c,0xb1,0x67,0xe8,0x63,
    0xcc,0x62,0xf5,0x8d,0xf8,0x80,0x5a,0xcf,0x86,0x79,0xfe,0x46,0x2d,0xfb,0xc2,0x3c,
    0x2f,0x82,0x2f,0x5a,0x8c,0xfc,0xdf,0xc1,0xfa,0xc2,0x39,0xf8,0x03,0x7c,0x80,0x73,
    0xb0,0x1e,0xce,0x81,0xb8,0x3f,0xcd,0xd6,0xd9,0x5b,0xbd,0x3f,0x60,0x31,0x63,0xd4,
    0xa0,0x7d,0x77,0x6e,0x3d,0xe8,0xfc,0x85,0xce,0x78,0xd0,0xf9,0x1b,0xdc,0x75,0x36,
    0x82,0x8e,0xb8,0x4b,0x66,0x1b,0xe4,0xba,0x84,0xce,0x44,0xd0,0x71,0x6e,0x23,0xe8,
    0x5c,0x46,0x67,0x32,0xe8,0x5c,0x01,0x77,0x9d,0xcd,0xa0,0x23,0xee,0xaa,0xd9,0x26,
    0xb9,0xae,0xa2,0x33,0x15,0x74,0x9c,0xdb,0x0c,0x3a,0xda,0x94,0x8b,0x7c,0x13,0x5c,
    0x27,0xcb,0x0a,0xdc,0x75,0x2a,0xd9,0x75,0x1d,0x71,0x25,0x33,0x61,0xca,0xa5,0x77,
    0xe9,0x4c,0x07,0x1d,0xe7,0xf4,0x74,0x9d,0x1a,0x3a,0x07,0x82,0x4e,0x63,0x56,0xe0,
    0xae,0xd3,0x1c,0x74,0xc4,0x35,0x99,0x35,0x93,0xab,0x09,0x9d,0x99,0xa0,0xe3,0x5c,
    0x73,0xd0,0xd9,0x82,0xce,0xc1,0xa0,0xb3,0x35,0x2b,0x70,0xd7,0x69,0x0d,0x3a,0xe2,
    0x5a,0xcc,0x5a,0xc9,0xd5,0x82,0xce,0x6c,0xd0,0x71,0xae,0x35,0xe8,0x6c,0x43,0xe7,
    0x50,0xd0,0xd9,0x9e,0x15,0xb8,0xeb,0x74,0x04,0x1d,0x71,0xed,0x66,0x1d,0xe4,0x6a,
    0x47,0x67,0x2e,0xe8,0x38,0xd7,0x11,0x74,0xba,0xd1,0x39,0x1c,0x74,0x7a,0xb2,0x02,
    0x77,0x9d,0xfe,0xa0,0x23,0xae,0xd7,0xac,0x9f,0x5c,0xbd,0xe8,0xcc,0x07,0x1d,0xe7,
    0xf4,0xdc,0xb4,0x8d,0x1e,0x31,0xfb,0x1f,0xb7,0xf0,0x33,0x52,0xe8,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture3D color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 58 "shaders/src/Blit3DSrc.frag"
//
// void main()
// {
//             vec2 srcImageCoordsXY = getSrcImageCoords();
//     vec3 srcImageCoords = vec3(srcImageCoordsXY, params . srcLayer);
//
//             vec4 colorValue = texture(sampler3D(color, blitSampler), vec3((srcImageCoords . xy)* params . invSrcExtent, srcImageCoords . z));
//
//     broadcastColor(colorValue);
// }
