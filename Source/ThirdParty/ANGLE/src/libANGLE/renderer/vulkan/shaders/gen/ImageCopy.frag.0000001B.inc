// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x95,0x65,
    0x18,0xc7,0x9f,0x73,0x9e,0xf3,0x82,0x10,0x2f,0x02,0x4a,0x54,0x58,0x26,0x6c,0x36,
    0x0c,0x4e,0x45,0x46,0x90,0x6e,0x98,0x1d,0x5d,0x59,0x88,0xa6,0x54,0xb0,0x65,0xc9,
    0x42,0x0b,0xb4,0x38,0xb5,0x74,0xb9,0x06,0x26,0xd4,0x96,0x56,0xb0,0x35,0x66,0xad,
    0x60,0x2b,0xf8,0x21,0x61,0xfa,0x43,0x5b,0x3f,0xb5,0xd6,0xca,0x5e,0xb4,0x97,0xbf,
    0xa6,0xf5,0xb2,0xb5,0x75,0x5d,0xf7,0xf3,0xb9,0xdc,0xd5,0x59,0xcd,0xb3,0xdd,0x7b,
    0xce,0xfd,0xbd,0xde,0xbe,0xdf,0xeb,0xbe,0x9e,0xfb,0x9c,0x38,0xbd,0x29,0x1f,0x45,
    0xa9,0xa8,0x32,0xaa,0x88,0x7e,0x8d,0x92,0xcf,0xda,0x28,0x2d,0x48,0xf2,0xbc,0x5b,
    0x9e,0x55,0x51,0x2e,0xec,0x77,0xed,0xd9,0xbf,0xa7,0xa3,0xf4,0xf2,0x48,0x47,0xd7,
    0xbd,0x05,0xf5,0xab,0x89,0xe2,0xe0,0xaf,0xb6,0xda,0x28,0x1f,0x65,0xe4,0xa9,0x6b,
    0xfc,0x99,0xa3,0xc7,0x14,0xaf,0x96,0x75,0x49,0x56,0x9d,0xf8,0x29,0x9e,0xd7,0x1c,
    0xf2,0xad,0x3a,0xe4,0xd4,0x98,0x28,0xda,0x1d,0x65,0xa3,0x06,0xea,0x6e,0xe2,0x69,
    0x58,0x0a,0xac,0xc2,0x61,0x69,0xb0,0x3a,0x87,0xc5,0x60,0x8d,0x0e,0xcb,0x80,0xdd,
    0xe8,0xb0,0x2c,0xd8,0x2d,0x0e,0xcb,0x81,0xdd,0xe6,0xb0,0x3c,0x58,0xab,0xc3,0x2a,
    0xc0,0x36,0x3b,0x6c,0x0d,0xd8,0x16,0x87,0x55,0x82,0x15,0x1c,0x56,0x05,0xd6,0xe5,
    0xb0,0x1b,0xc0,0xba,0x1d,0x56,0x0d,0xf6,0x40,0xe8,0x53,0x7c,0x4d,0xaf,0xf6,0x6c,
    0xa7,0x3c,0x6f,0xa7,0x3f,0xb6,0xdf,0xe8,0xf6,0xda,0xe7,0x0d,0xec,0x1b,0x24,0x2a,
    0x1d,0xec,0x71,0xe8,0x8d,0x7e,0x5f,0x27,0x3e,0x39,0x74,0x6a,0x5f,0x9b,0x64,0x9f,
    0x47,0xbf,0xda,0xd7,0x8b,0x67,0x25,0x76,0xb5,0x55,0xa1,0x25,0x13,0xb0,0x4c,0xe0,
    0x9b,0x42,0x4b,0x2f,0xfb,0x6a,0x97,0xab,0x06,0x7f,0xab,0x55,0x4f,0xae,0x28,0xf0,
    0xaa,0xbb,0xd6,0x57,0xab,0xa9,0xab,0xfe,0x3a,0xcb,0x7c,0xb4,0x7e,0x23,0xfd,0x6e,
    0xa0,0x7e,0x63,0xa8,0x93,0x60,0xed,0x68,0x5b,0x0f,0x1f,0xf5,0x6f,0xc2,0x96,0x77,
    0xf6,0x16,0xa7,0x67,0x03,0xf6,0xfa,0x30,0x37,0xe9,0xd0,0xcb,0x76,0x78,0x5b,0x9f,
    0x2d,0xae,0x9d,0xd9,0x31,0xfb,0x5d,0xd4,0x31,0xfb,0x56,0x7a,0xa1,0x7d,0xd8,0x0e,
    0x6f,0xad,0xd3,0x2c,0x15,0xfa,0xd8,0xa7,0xa2,0x7f,0x7f,0x6c,0x7f,0xb3,0xf4,0x7d,
    0x87,0x3c,0xfb,0xe0,0xf5,0x20,0xf8,0x0e,0x74,0xea,0x7e,0x67,0x19,0x9f,0x62,0xd9,
    0x7e,0x80,0xbe,0x6b,0xfc,0x3e,0x74,0xe5,0x9c,0x7d,0x90,0xbd,0xf2,0x3b,0xc4,0xf7,
    0xd8,0xd9,0x8f,0xd0,0x27,0xb5,0x9f,0xa2,0x27,0x19,0x67,0x9f,0x62,0xfe,0x6d,0x7f,
    0xae,0xac,0xef,0xe7,0x99,0x67,0xad,0x7f,0x91,0xdc,0xa7,0xe0,0x7f,0x91,0x3b,0x20,
    0x0e,0x7d,0xca,0x06,0x9e,0x19,0xf8,0x2b,0xf6,0x87,0x20,0xda,0xdb,0x6d,0xcc,0x5c,
    0x2d,0xbd,0xec,0x17,0x46,0x35,0xbc,0xe7,0xb5,0x2c,0xeb,0xdb,0x31,0x66,0x77,0x2d,
    0xf6,0x3e,0xc9,0xd0,0xc4,0xbb,0xbe,0x8e,0x39,0xd8,0x86,0x4f,0x33,0xf8,0x69,0xf1,
    0xd1,0xfd,0x4d,0xc4,0x35,0x13,0xa7,0x73,0x70,0x2b,0x71,0x2d,0xc4,0xd9,0xec,0x2a,
    0x7e,0x41,0x7c,0x36,0xba,0x3b,0x42,0x67,0xe3,0x77,0x61,0xde,0x06,0x9f,0xbf,0xc4,
    0xdf,0xee,0x8a,0x36,0xf4,0xb4,0x86,0x33,0xc9,0x86,0xde,0x6c,0xa6,0xa6,0x7e,0x5e,
    0xa7,0x5f,0x77,0x80,0xef,0x93,0x9d,0x72,0xfa,0x1c,0xcc,0xfc,0xfe,0x94,0x1c,0x96,
    0x4b,0x9f,0xbf,0x89,0x97,0xfa,0x7d,0x8b,0x4f,0x96,0x98,0x56,0xa7,0x61,0x0b,0x1a,
    0xda,0x9d,0x86,0x3b,0xc1,0x4d,0x43,0x07,0x98,0x69,0x28,0x38,0x0d,0x6a,0xeb,0xe4,
    0xde,0xd2,0xba,0x9d,0x4e,0xc3,0x3d,0xd4,0x4e,0x39,0x0d,0x5d,0xe0,0xa6,0xe1,0x0b,
    0x30,0xf3,0x53,0x0d,0x96,0xab,0xe0,0x34,0x5c,0xc6,0xa7,0x8d,0x98,0x4e,0xa7,0xe1,
    0x3e,0x34,0x6c,0x75,0x1a,0xba,0xc1,0x4d,0xc3,0xfd,0x60,0xa6,0xa1,0xd7,0x69,0x50,
    0x5b,0x4f,0x98,0xbb,0xa4,0x6e,0x0f,0x73,0x94,0x0f,0xf9,0x92,0xda,0x97,0xdd,0xbb,
    0xa7,0x1c,0xcd,0xb7,0xd7,0x71,0xfc,0x0e,0xbf,0x02,0x71,0x3d,0xf0,0xd1,0x77,0xf2,
    0x21,0xde,0x47,0x9b,0xb9,0x5d,0x70,0x2e,0xba,0x99,0xdb,0x0d,0x3e,0xc9,0xcc,0x3d,
    0x0c,0xa6,0x79,0x8f,0x73,0x57,0x3e,0x02,0x3e,0x22,0x7b,0x7d,0xf7,0x1f,0x25,0xf7,
    0x28,0x31,0x8f,0x81,0x15,0x5d,0x4c,0x3f,0xf8,0x5b,0xe2,0xa3,0xfb,0xbd,0xe4,0xe9,
    0x87,0x8f,0xbe,0xfb,0xfb,0xe1,0x33,0x00,0x1f,0x3d,0xab,0xc7,0xc1,0x35,0x8f,0xde,
    0xd1,0x07,0xc0,0x06,0xa5,0x92,0xde,0x57,0x07,0xa9,0xbd,0x97,0xde,0x1c,0x70,0x67,
    0xf2,0x04,0xf9,0x06,0xdd,0x99,0x3c,0x09,0x6e,0x67,0xf2,0x14,0x98,0x9d,0xc9,0xb0,
    0x3b,0x13,0xb5,0x0d,0x05,0x5d,0x49,0x9f,0x87,0xdc,0x5c,0x3d,0x4d,0xed,0x38,0x68,
    0xa8,0x08,0x77,0xd3,0xb3,0x60,0x07,0xdd,0xfb,0x9e,0x0e,0xdc,0x72,0xc1,0x7e,0x98,
    0x38,0x5b,0x67,0x24,0xd7,0xa1,0xd0,0xc7,0x24,0xf6,0x70,0xc8,0xb5,0x26,0xe8,0x7a,
    0x8e,0x3c,0x23,0xdc,0x39,0x59,0x77,0xf7,0xe9,0xd9,0x0f,0xc3,0x69,0xd4,0xe9,0x3d,
    0x8a,0xde,0x23,0x4e,0xef,0xf3,0xe0,0xa6,0xf7,0x05,0x30,0xd3,0x3b,0xee,0xf4,0xaa,
    0x6d,0x4c,0xff,0x03,0x91,0x7b,0xcc,0xe9,0x3d,0xee,0xf4,0xae,0x92,0xeb,0x45,0xf0,
    0x22,0x9c,0x2c,0x6e,0x9c,0x79,0x54,0x9f,0x97,0xa8,0x39,0x8a,0xff,0x18,0x75,0x4b,
    0xae,0xae,0xfa,0x4c,0xc8,0x2a,0x11,0x3f,0xe1,0xea,0xbe,0xf2,0x1f,0x7d,0x7e,0xf5,
    0x3a,0x7d,0x3e,0x41,0x9c,0xad,0x37,0xe9,0xf3,0x49,0x62,0x4f,0xb8,0x3e,0xbf,0x46,
    0x9e,0x93,0xff,0xd3,0x67,0xe3,0x54,0x42,0x93,0xc6,0xfc,0x48,0xcc,0x38,0xf1,0x13,
    0x65,0x67,0x32,0xec,0x7c,0x7f,0xe0,0x2c,0x87,0x88,0x2b,0x85,0xdf,0x97,0xe4,0xb7,
    0x6a,0x12,0xbb,0x9d,0xdf,0x69,0xce,0x6f,0xca,0x9d,0xdf,0x1b,0xe0,0x76,0x7e,0x67,
    0xc0,0xec,0xfc,0x66,0x5c,0x1f,0xd5,0x36,0x2d,0xeb,0x2c,0x3c,0xa6,0xd1,0xa9,0xb5,
    0xde,0xa6,0xde,0x24,0x3a,0xf3,0xf4,0xcc,0x74,0xce,0x10,0x73,0xd6,0xf1,0x79,0x07,
    0x3e,0xe7,0x1c,0x9f,0x77,0xc1,0x8d,0xcf,0x7b,0x60,0xc6,0x67,0xce,0xf1,0x51,0xdb,
    0xac,0xac,0x79,0x72,0xcf,0x72,0xae,0x9a,0xe7,0x7d,0xb8,0xc4,0xdc,0xc3,0xca,0xf1,
    0x4b,0x87,0xdb,0x1d,0x37,0x47,0xec,0xbc,0xbb,0x27,0x3e,0x80,0xd7,0x79,0x77,0x4f,
    0x7c,0x08,0xfe,0x3d,0x73,0xf3,0x11,0xd8,0x80,0xe3,0xfa,0x31,0x78,0x11,0xae,0x8b,
    0x8e,0xab,0xda,0x16,0x64,0x2d,0x52,0x6f,0xc1,0xf1,0xfa,0x0a,0x7d,0x93,0xee,0xf7,
    0xc1,0xfc,0x16,0x39,0x6b,0xf5,0xbb,0x82,0xcf,0x3c,0x31,0x0b,0x8e,0xcf,0x27,0xf0,
    0x69,0x71,0x7c,0x3e,0x05,0x37,0x3e,0xcb,0x8e,0x8f,0xda,0x96,0x64,0x2d,0x53,0x67,
    0xc9,0xf1,0xf9,0x1a,0x3e,0x57,0x38,0x43,0xe5,0x63,0x7e,0xcb,0x8e,0xcf,0x55,0x7c,
    0x16,0x89,0x59,0x72,0x7c,0x3e,0x83,0xcf,0x94,0xe3,0x73,0x01,0xdc,0xf8,0xac,0x3a,
    0x3e,0x6a,0x5b,0x09,0xef,0x7e,0x52,0x67,0xc5,0xf1,0xf9,0x86,0xff,0x95,0x57,0xdd,
    0x3c,0x99,0xdf,0xaa,0xe3,0xf3,0x0b,0x3e,0xcb,0xc4,0xac,0x94,0x9d,0xf1,0x9c,0xf3,
    0xfd,0x99,0x79,0x98,0x25,0x6e,0xb5,0x6c,0x4e,0x67,0x9c,0xef,0x4f,0xcc,0xf7,0x34,
    0x71,0x9a,0x67,0xbb,0x30,0xb9,0x84,0xed,0x6f,0x39,0xb5,0x6e,0x59,0xff,0x00,0x81,
    0xf4,0x0b,0x56,0x30,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
