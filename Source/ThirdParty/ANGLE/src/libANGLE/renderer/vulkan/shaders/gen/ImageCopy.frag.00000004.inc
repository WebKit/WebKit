// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xe9,0x6f,0x95,0x45,
    0x14,0xc6,0x67,0xee,0xed,0xc2,0x56,0x5a,0x05,0x2a,0x10,0x34,0xad,0x85,0x0a,0x52,
    0x4b,0x45,0x28,0xeb,0x65,0x91,0x42,0xab,0x36,0x20,0x10,0x4d,0x10,0x2b,0x69,0x65,
    0x11,0xa9,0x60,0x80,0x08,0x2a,0xd5,0x42,0x25,0x40,0xf8,0x60,0x8c,0xa8,0xd4,0x18,
    0x13,0x3e,0x91,0x80,0x94,0x0f,0x82,0x4a,0x43,0x08,0x1a,0xa5,0x26,0x4a,0x13,0xa5,
    0x06,0xfe,0x02,0x22,0x91,0xb8,0x90,0x10,0x2b,0x04,0x74,0xce,0x3b,0xbf,0xd3,0x7b,
    0x6c,0x5c,0x6e,0x32,0x79,0xdf,0x79,0xe6,0x3c,0x67,0x79,0xe6,0xcc,0xbc,0x85,0x74,
    0xaa,0x2c,0xdf,0x39,0xef,0x06,0xb9,0x01,0xee,0x51,0xef,0x92,0xdf,0x1d,0x2e,0xe5,
    0xe4,0x75,0xb0,0xcb,0x4b,0x9e,0xb5,0xf5,0xcb,0xeb,0x2b,0xb7,0x6c,0x5d,0x5d,0x39,
    0x65,0x6a,0x95,0xac,0x0f,0x75,0xe9,0xc4,0x4e,0xd6,0x0a,0x5d,0xbe,0xcb,0x09,0x4f,
    0x19,0x2f,0x34,0xae,0xdf,0x28,0x78,0x79,0x18,0x97,0xc2,0x28,0x0a,0x76,0x82,0xe7,
    0x8b,0x8f,0xf0,0x56,0x9e,0xf8,0x14,0x8e,0x73,0x75,0x2e,0xd7,0x55,0xc4,0x70,0xae,
    0x8c,0xa7,0x62,0x1e,0x6c,0x80,0xc1,0x52,0x60,0x45,0x06,0x4b,0x83,0x0d,0x37,0x58,
    0x0e,0xd8,0x48,0x83,0xe5,0x82,0x8d,0x31,0x58,0x1e,0x58,0x89,0xc1,0xf2,0xc1,0xc6,
    0x1a,0x6c,0x00,0xd8,0x78,0x83,0x0d,0x04,0xab,0x30,0xd8,0x20,0xb0,0x2a,0x83,0x0d,
    0x06,0x9b,0x62,0xb0,0x21,0x60,0xd3,0x0d,0x56,0x00,0x36,0x3b,0xd1,0x29,0xdd,0x57,
    0xaf,0x68,0xb6,0x32,0x3c,0xef,0x45,0x1f,0x9d,0x97,0x9a,0xb9,0xe8,0x7c,0x0f,0xf3,
    0x61,0x81,0x95,0x4a,0xd6,0xd3,0x89,0x36,0xf2,0x5e,0x1c,0xde,0xf2,0xa8,0x73,0x62,
    0xb0,0xcf,0x23,0xde,0xe5,0x8e,0x71,0x99,0xe1,0xc1,0x62,0xa8,0xc1,0x45,0xb3,0x8e,
    0xda,0xc6,0x8c,0xce,0x45,0xaf,0xf7,0xdb,0x47,0xcd,0x1b,0x11,0xe6,0x25,0xf8,0x90,
    0xbd,0xb9,0x2b,0xcc,0x4b,0x99,0xa7,0x98,0x8f,0x45,0xd3,0x9c,0x04,0xcf,0x71,0xe3,
    0xb0,0x15,0x7c,0x16,0xf3,0x72,0xc3,0xbf,0x0f,0x7b,0xe1,0x8b,0xff,0x89,0xf8,0x73,
    0x49,0x3d,0x45,0x89,0x06,0xa5,0x8c,0x92,0xbe,0xfc,0xff,0x7b,0x94,0xf4,0x3d,0x73,
    0xdc,0x03,0xec,0x53,0x05,0xf1,0x65,0x5e,0x09,0x36,0x91,0x7a,0x26,0x91,0x8f,0xd8,
    0x57,0xb1,0x56,0x6a,0xd6,0xab,0x4d,0x3d,0xd3,0xfa,0xb8,0x71,0x5d,0x9e,0x33,0xc9,
    0x57,0xed,0x17,0xd0,0x6b,0x3a,0x5f,0x8c,0xd6,0x52,0xef,0x93,0xe4,0x27,0xfe,0x46,
    0x05,0x4f,0x2b,0x8c,0x9e,0xf6,0xa7,0x73,0x89,0xf9,0x14,0xef,0x2b,0xa8,0x41,0xe6,
    0x2b,0xfb,0xc5,0x6c,0xe8,0x37,0x6f,0x42,0x53,0xe1,0x3f,0x4b,0xce,0x25,0x66,0x7d,
    0x1d,0xba,0x4b,0x4e,0x2f,0xb2,0x96,0x36,0xeb,0xdb,0x39,0x07,0x3a,0x3f,0x40,0x1f,
    0xeb,0xfc,0x08,0x67,0x42,0xe7,0x27,0xfb,0x69,0x7a,0x96,0x1e,0xd7,0x1e,0xfa,0xda,
    0xe4,0x27,0xf3,0x1f,0x92,0x59,0xeb,0x5c,0xc9,0xef,0x22,0xb1,0xb5,0x47,0x2e,0x72,
    0x6f,0xa4,0x8d,0xfd,0x94,0x20,0xc8,0xce,0xd6,0xd6,0x59,0x15,0x21,0x2b,0xb1,0x9b,
    0xea,0x23,0x66,0x87,0xda,0x56,0x87,0xf7,0x4d,0x87,0x37,0xcf,0xd5,0xf9,0xb4,0x30,
    0x7f,0xab,0xed,0xc3,0x4c,0x75,0xd8,0x95,0x14,0xda,0x3b,0xfc,0xf7,0x06,0x44,0xf6,
    0x2a,0x43,0xef,0x8e,0xa7,0x3f,0x97,0x84,0x38,0xd2,0x9b,0x13,0xc0,0xc6,0x9b,0x7d,
    0xd9,0x48,0xdf,0xdf,0xcf,0xfa,0xfc,0xe0,0x41,0xfa,0xe6,0x41,0x7a,0x6b,0x12,0xfe,
    0xc4,0x66,0x32,0xf8,0xae,0x60,0x23,0xf3,0x87,0xe0,0x4d,0x86,0x37,0x8d,0x3b,0xa0,
    0x92,0x3e,0xcb,0xd0,0x53,0x33,0xc0,0x8f,0x06,0x9b,0xa1,0x89,0x2e,0x11,0x93,0x5e,
    0xfb,0x3d,0x64,0x9e,0x21,0x9f,0x1b,0xc1,0x7e,0x16,0x77,0x46,0x86,0x7a,0xe4,0x7d,
    0x69,0xe0,0xc9,0x3e,0xcc,0x23,0xa6,0xfc,0x5e,0x63,0x6f,0xe6,0x83,0x2f,0x0b,0xea,
    0x48,0x4e,0xa3,0x7d,0xc4,0xd4,0xee,0x8f,0xe0,0x43,0x7d,0xc9,0xf3,0x7a,0xd0,0x42,
    0xec,0xa6,0xfb,0x68,0x93,0x0b,0x67,0xb6,0xa9,0xa1,0x86,0x1a,0x16,0x98,0x1a,0x16,
    0x82,0x6b,0x0d,0x8b,0xc0,0xb4,0x86,0x3a,0x53,0xc3,0xa2,0xe4,0x1e,0x73,0x09,0x26,
    0x71,0x6b,0x4d,0x0d,0x8f,0x11,0xdb,0x9b,0x1a,0xea,0xc1,0xb5,0x86,0xbb,0x7d,0xc4,
    0xd4,0x4e,0x6a,0x50,0x5f,0x75,0xa6,0x86,0x19,0x3e,0xda,0x64,0xe0,0xd4,0x9a,0x1a,
    0x96,0x50,0xc3,0x62,0x53,0xc3,0xe3,0xe0,0x5a,0xc3,0x52,0x30,0xad,0x61,0xb9,0xa9,
    0x61,0x69,0x92,0x8f,0x4b,0x30,0x89,0xbb,0x8c,0x3e,0x92,0xb8,0x4f,0x10,0x7b,0x86,
    0xcf,0x9e,0x6d,0xc9,0x51,0x6d,0x97,0x9b,0x1c,0x67,0x62,0x57,0x07,0x6f,0x19,0xf9,
    0xc8,0xf9,0x7f,0x9a,0xb3,0xaf,0x3d,0xf7,0x0c,0x39,0x37,0x98,0x9e,0x5b,0x05,0xde,
    0x4a,0xcf,0x35,0x82,0xcd,0xf4,0x91,0x27,0xf7,0xc1,0x6a,0x78,0x4d,0xf0,0x44,0xd3,
    0x35,0xe0,0xab,0x42,0x1e,0x72,0x4f,0xad,0x25,0x5e,0x23,0x77,0xc9,0x1a,0xa3,0xd5,
    0x73,0xf0,0xd7,0x19,0xad,0xd6,0x83,0xab,0x56,0xcf,0x83,0xa9,0x56,0xcd,0x46,0x2b,
    0x59,0xdb,0x10,0xc6,0x36,0xea,0xdf,0x66,0x7c,0xbf,0x8c,0xef,0xed,0xc6,0xf7,0x2b,
    0xe0,0xea,0xfb,0x55,0x30,0xf5,0xdd,0x62,0x7c,0xcb,0xda,0x8e,0x30,0x5a,0xf0,0xbd,
    0xc3,0xf4,0xd2,0xeb,0xd4,0x25,0x67,0xff,0x18,0xbe,0x5a,0xc1,0x1b,0xd8,0x13,0xe5,
    0xb5,0xb0,0x27,0x62,0xb3,0x93,0x98,0xdb,0xb0,0xdf,0x41,0xdc,0x36,0x13,0x77,0x67,
    0x72,0xce,0x5d,0x82,0x09,0x7f,0x97,0x89,0xbb,0xdb,0xc4,0x5d,0x12,0x6e,0x4e,0xb9,
    0x73,0xf7,0x80,0xad,0x35,0x77,0x4b,0x2a,0xe9,0xaf,0xbc,0x64,0x7d,0x2f,0x3c,0x1d,
    0x7b,0x82,0x2f,0xc1,0xf7,0xc1,0xdd,0x9b,0xf8,0x1a,0x98,0xec,0xd5,0x7e,0xfc,0xec,
    0xe3,0x7e,0xcb,0xe5,0x7e,0x4f,0x53,0x93,0xe6,0xd4,0x46,0x4d,0xc2,0xc9,0xf8,0xc8,
    0x69,0x81,0xbf,0x0b,0xdb,0x66,0x6c,0x37,0x98,0xfc,0x37,0xfd,0x43,0xfe,0x9b,0xff,
    0x27,0xff,0x2d,0xf0,0x74,0xbc,0x41,0xfe,0x5b,0xe1,0x6e,0x31,0xf9,0xbf,0x84,0x9f,
    0xad,0xff,0x92,0xbf,0xe6,0xd4,0x6c,0xf2,0x9f,0xed,0x63,0x0d,0x6d,0xf0,0x37,0x24,
    0x71,0xe2,0x3d,0xfe,0x26,0xeb,0xbb,0x83,0x27,0x99,0xbf,0x0d,0x36,0xd5,0x67,0xfb,
    0xec,0x1d,0xfa,0xec,0x80,0xe9,0xb3,0x77,0xc1,0xb5,0xcf,0xde,0x03,0xd3,0x3e,0x6b,
    0x37,0xfb,0x2d,0x6b,0x07,0xc3,0x68,0x27,0xb7,0x83,0xe8,0x25,0x79,0x7f,0x40,0x4c,
    0x07,0xef,0x1a,0xef,0x37,0xc3,0xbb,0xf8,0xba,0x0c,0x47,0x9e,0xa7,0x89,0xf5,0x23,
    0xbc,0x02,0x38,0xbf,0x99,0x58,0xb2,0x76,0x25,0x8c,0xab,0xf0,0xae,0x26,0x3d,0x19,
    0x63,0xfd,0x0c,0x6f,0xa4,0x8b,0xf5,0x0a,0xf6,0x0b,0xb8,0x7c,0x0b,0x87,0x04,0xbd,
    0x04,0xfb,0x95,0x3d,0x1a,0xcd,0xfa,0x18,0xb4,0xbd,0x86,0xcf,0x2b,0x86,0xff,0x13,
    0x3e,0xe5,0xdb,0x69,0x6d,0x24,0xa7,0x3f,0x83,0x97,0x5e,0xb0,0xeb,0xf8,0x9e,0xe3,
    0xa3,0xff,0xab,0x70,0xaf,0x70,0x37,0x8b,0xf6,0x65,0x3e,0xae,0xab,0x1e,0xaa,0xd1,
    0x21,0x34,0xf2,0xd4,0x9b,0xe3,0xff,0xae,0x51,0x2f,0x31,0x7b,0x8d,0x46,0x37,0xe0,
    0xa9,0x46,0x69,0x9f,0xd5,0xe8,0x46,0xc2,0x75,0xee,0x36,0xbc,0xdb,0x46,0x23,0x09,
    0x72,0xa8,0x9f,0x46,0xde,0x47,0xdc,0x6a,0x94,0xf2,0x59,0x8d,0x64,0x5d,0x35,0x92,
    0xdc,0xc4,0xe7,0x4d,0xc3,0xbf,0x45,0x2e,0xaa,0x91,0xda,0x48,0x4e,0xaa,0x91,0x60,
    0xaa,0xd1,0x3c,0x1f,0xfd,0xdf,0x86,0x7b,0xd3,0x68,0x54,0xee,0xe3,0x7a,0x19,0xf1,
    0x55,0xa3,0xc3,0x68,0x94,0xa2,0xde,0xe2,0x7e,0x1a,0x0d,0x22,0xa6,0x3c,0x55,0xa3,
    0x21,0x3e,0xf2,0x54,0xa3,0x11,0x46,0x23,0x59,0x2b,0x08,0xa3,0x08,0x9e,0x3c,0x55,
    0xa3,0x3b,0xe1,0x59,0x8d,0x86,0xf9,0x88,0x5b,0x8d,0x86,0x1b,0x8d,0x86,0x19,0x8d,
    0x8a,0xf1,0x59,0xe0,0xb3,0xfc,0x42,0x7c,0xaa,0x46,0x6a,0x33,0xc2,0x68,0x54,0x6c,
    0x34,0x7a,0xd8,0x47,0xff,0x92,0x57,0x21,0xb9,0xaa,0x46,0x13,0x7c,0x5c,0x17,0xad,
    0x52,0xc4,0xd4,0xb3,0xd7,0x4e,0x2f,0x8a,0x5d,0x0d,0xbd,0xd6,0x0c,0xa7,0xd8,0x9c,
    0xf9,0xa3,0x9c,0xf9,0x23,0xe6,0xcc,0x7f,0x04,0xae,0x67,0xfe,0x18,0x98,0x9e,0xf9,
    0xe3,0xe6,0x1c,0xca,0x5a,0x47,0x18,0x27,0x88,0x7b,0xc2,0x7c,0xb7,0x3e,0xc1,0xf7,
    0x49,0xe3,0xfb,0x53,0x70,0xf5,0xfd,0x19,0x98,0xfa,0xee,0x34,0xbe,0x65,0xed,0x54,
    0x18,0x67,0xf0,0x7d,0xc6,0x65,0xbf,0xd7,0x9f,0xe3,0xfb,0xac,0xf9,0x5e,0x7f,0x01,
    0xde,0xc5,0x1d,0xfd,0x25,0x58,0x93,0x89,0xf7,0x15,0x78,0x03,0xf1,0xba,0x4c,0x3c,
    0x59,0x3b,0x97,0xf0,0x63,0xbc,0x73,0xa6,0x1f,0x2b,0x7d,0xfc,0x9b,0xbd,0xc6,0xfc,
    0x3d,0xa5,0x76,0x5d,0x46,0xeb,0x85,0x3e,0xda,0x9c,0x81,0x73,0xce,0xe4,0xf3,0x0d,
    0xf9,0x54,0x9b,0x7c,0xbe,0x05,0xd7,0x7c,0xba,0x4d,0x3e,0xb2,0x76,0x3e,0x8c,0x6e,
    0xe2,0x9c,0x37,0xf9,0x54,0x91,0xcf,0x42,0xb3,0xf7,0x6a,0xd7,0x6d,0xf2,0x59,0xe4,
    0xa3,0x4d,0x17,0x9c,0xf3,0x26,0x9f,0xef,0xc8,0xe7,0x88,0xc9,0xe7,0x7b,0x70,0xcd,
    0xa7,0xc7,0xe4,0x23,0x6b,0x17,0xc2,0xe8,0x21,0xce,0x05,0x93,0xcf,0x64,0x1f,0xff,
    0x0d,0x23,0xf1,0xf4,0x1b,0xa5,0x76,0x3d,0x26,0x9f,0x47,0x7c,0xb4,0xe9,0x86,0x73,
    0x01,0xdb,0x4e,0x6c,0x4f,0x99,0xb3,0x7e,0x1a,0xbd,0xd3,0x26,0x4e,0x85,0xcf,0xe2,
    0xae,0x1f,0xb7,0xd3,0xc4,0xa9,0xf3,0x31,0x56,0x0f,0x9c,0x53,0xd8,0x1e,0xc7,0xb6,
    0x83,0x6f,0xad,0xd8,0x7e,0x8c,0x3f,0x19,0xfa,0xff,0x32,0x29,0xf3,0xad,0x55,0xce,
    0x71,0xe3,0xbf,0xd6,0xc7,0x18,0x9d,0xf0,0xc5,0xdf,0x9c,0xc0,0xb8,0xc4,0xda,0xad,
    0xd0,0x25,0xd3,0xc3,0xf8,0x0b,0x6c,0x65,0x82,0x23,0x48,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
