// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x95,0x69,0x4f,0x93,0x41,
    0x14,0x85,0xa7,0x3b,0x20,0x28,0xb4,0x6c,0x22,0x8b,0x80,0xa0,0xa0,0x12,0xd4,0xd6,
    0x60,0x10,0x41,0xa1,0x20,0x52,0x95,0x5d,0x14,0xa4,0xd4,0x82,0x4a,0xa2,0x60,0x68,
    0x4d,0x48,0x14,0xf9,0x60,0xfc,0x09,0xfa,0x27,0xfc,0x7d,0xc6,0x25,0x31,0xf1,0xde,
    0x79,0x9f,0x21,0x93,0x7e,0xb0,0xc9,0xe4,0x9d,0x7b,0xee,0xb9,0xcb,0x99,0xad,0x91,
    0x70,0x6f,0xc2,0x98,0x90,0xa9,0x31,0x55,0xe6,0xd8,0x04,0xbf,0x06,0x13,0x16,0x24,
    0xf8,0x7e,0x4d,0x19,0xf1,0x55,0x9b,0xa5,0xf9,0xd5,0x7c,0x76,0x6d,0x39,0x5f,0x7a,
    0x5d,0xd8,0xde,0x39,0xc8,0x97,0xca,0x3b,0x7b,0xc5,0xdd,0x37,0xf9,0x9d,0xc3,0x77,
    0xfb,0x07,0x65,0xe1,0x9e,0x32,0x71,0x1b,0x33,0x93,0x5b,0xca,0x0d,0x95,0xca,0xdb,
    0x43,0xe9,0xcc,0xb0,0xe6,0x3a,0x6d,0x22,0x36,0xa7,0xfa,0xce,0x48,0x8d,0xa8,0x7c,
    0x75,0xbc,0x2d,0xec,0xee,0x29,0x5e,0x2b,0x63,0x4a,0xc6,0x96,0x8c,0x7a,0xe1,0xaa,
    0x2f,0xe1,0xcd,0xd5,0x3f,0x23,0xb3,0x5a,0x5b,0x43,0x73,0x18,0x73,0xdf,0xc4,0x4c,
    0x23,0xbd,0xf6,0xf2,0x75,0x58,0x08,0xac,0xca,0xc3,0xc2,0x60,0xf5,0x1e,0x16,0x01,
    0x6b,0xf5,0xb0,0x28,0x58,0xbb,0x87,0xc5,0xc0,0xce,0x7b,0x58,0x1c,0xec,0x82,0x87,
    0x25,0xc0,0x2e,0x79,0x58,0x15,0xd8,0x15,0x0f,0xab,0x06,0x1b,0xb6,0xba,0x22,0x27,
    0xfd,0xa9,0xc6,0x29,0x34,0x36,0x63,0xcf,0xc8,0xb7,0x07,0x7d,0xce,0xee,0xf6,0xec,
    0xb9,0x0a,0xff,0x1c,0x7e,0x97,0x6f,0x8b,0x7c,0xdf,0x52,0x81,0x5d,0xac,0xe0,0x17,
    0xe1,0xeb,0x9a,0xa5,0x24,0x2a,0x6c,0xed,0x88,0x5d,0x9b,0xb0,0xed,0x23,0x62,0xb5,
    0xaa,0xf6,0x16,0xe1,0x27,0xd0,0x1e,0xc6,0xae,0xc1,0x8e,0x5a,0x4e,0xd4,0xd6,0xd2,
    0x5c,0x8a,0x8f,0x62,0xd7,0x82,0x35,0x89,0x9d,0x24,0x97,0xb3,0x53,0xd8,0xfa,0xeb,
    0x14,0xa6,0x5b,0x47,0x37,0x92,0x8c,0x38,0xdf,0x94,0x37,0xb4,0x5e,0x13,0xeb,0xd9,
    0x48,0xbd,0x26,0xd6,0x4e,0xb1,0xcb,0xd4,0x6b,0xa1,0x9e,0xf2,0x5b,0xf1,0x25,0x3c,
    0x7f,0x07,0xf5,0x9d,0xdd,0x83,0x5f,0xf9,0xbd,0xf0,0x53,0xb6,0x46,0xd8,0xf4,0xc3,
    0x53,0xfb,0x62,0x45,0xdc,0x30,0xfb,0xed,0xec,0x51,0x62,0x35,0xcf,0x24,0xe7,0x2d,
    0x4e,0x9f,0x93,0x9c,0x79,0xc5,0xce,0x0a,0x2b,0x8b,0x2f,0x44,0xce,0xca,0xaf,0xe6,
    0x98,0x66,0x9e,0x25,0xc7,0xb4,0xdd,0xc3,0xe0,0xd7,0x26,0xbd,0xcd,0xc2,0x7b,0x00,
    0x36,0x0b,0x4f,0xed,0x39,0xb0,0x73,0x52,0xf1,0x21,0x39,0x5c,0x9f,0xf3,0xec,0xa7,
    0xb3,0x97,0xe9,0x4b,0x73,0xad,0xa0,0x21,0xc9,0x7e,0x3f,0xa5,0x4f,0xe7,0xcf,0x33,
    0x4f,0x52,0x2b,0xcf,0x3d,0x76,0xba,0x0a,0xac,0xdd,0xff,0x74,0xbd,0x60,0x5e,0x20,
    0x87,0xda,0x45,0xaf,0xdf,0x97,0xf8,0xb4,0xfe,0x01,0xf9,0xf4,0xbc,0xdd,0x94,0xfb,
    0x14,0x66,0x6e,0xa8,0xf9,0x4b,0x10,0xbd,0xaf,0x63,0x9c,0xcd,0x3a,0xce,0xdf,0x82,
    0xa0,0x71,0xde,0x8e,0x3a,0xf8,0x0e,0xab,0x07,0x0b,0xd9,0xb5,0x88,0xd9,0xbd,0x6f,
    0x80,0xab,0xbe,0xbb,0x82,0xb5,0x5a,0x3d,0xc1,0xd9,0x6a,0x21,0x7f,0xc2,0xae,0x7b,
    0x80,0x7f,0x21,0xae,0x9d,0xd8,0x36,0x2f,0xae,0x93,0xb8,0x0e,0x2f,0xae,0x0b,0xfc,
    0x33,0x71,0xdd,0xc4,0x76,0x11,0xe7,0xde,0x96,0x66,0xce,0xe3,0x18,0x67,0xae,0x0f,
    0xfc,0xbb,0x70,0xfa,0x79,0x6b,0xfa,0x38,0x8b,0x3f,0x65,0x05,0x06,0xd1,0xf6,0x47,
    0xf8,0xea,0x1b,0x90,0x31,0xc8,0xba,0x0c,0x78,0x9a,0xaf,0x7a,0xef,0xc8,0xb1,0x70,
    0x15,0x1b,0x02,0x5f,0x14,0x4b,0x7b,0x3a,0x04,0x73,0xbc,0xdf,0x92,0xc3,0xe5,0xd2,
    0xef,0x0f,0x61,0x29,0xef,0x23,0x9c,0x18,0x31,0x03,0x9e,0x86,0x6b,0x68,0x18,0xf6,
    0x34,0x5c,0x07,0x77,0x1a,0x6e,0x80,0x39,0x0d,0x19,0x4f,0x83,0xfa,0xd2,0x32,0x32,
    0xd4,0x4d,0x7b,0x1a,0x46,0xa8,0x1d,0xf2,0x34,0xdc,0x02,0x77,0x1a,0x3e,0x80,0x39,
    0x9e,0x6a,0x70,0xb9,0x32,0x9e,0x86,0x23,0x38,0x83,0xc4,0xa4,0x3d,0x0d,0xb7,0xd1,
    0x30,0xea,0x69,0x18,0x03,0x77,0x1a,0xee,0x80,0x39,0x0d,0x13,0x9e,0x06,0xf5,0x8d,
    0xcb,0x98,0xa0,0xae,0xce,0x1f,0x53,0xf7,0x1e,0xb5,0x8f,0xbc,0x3b,0xa1,0x3d,0x3a,
    0xee,0x84,0xd7,0xe3,0x27,0x78,0x19,0xe2,0xc6,0xe9,0x27,0x6b,0xff,0x5b,0x82,0xb7,
    0x40,0x6d,0xbd,0xf7,0x39,0xee,0xfc,0xaa,0xf4,0xa7,0xf7,0xfd,0x11,0x9c,0x9c,0x77,
    0x2e,0x17,0xd0,0x35,0xef,0x9d,0xcb,0x45,0x70,0x77,0x9e,0x97,0xa8,0xbb,0x48,0xdc,
    0x8a,0xcd,0x19,0xc4,0x2d,0x13,0xa7,0x77,0xff,0x09,0xf8,0x3e,0xfb,0xb0,0x06,0xe6,
    0xf6,0xea,0x19,0xb9,0xfc,0x7b,0xb7,0x0e,0x16,0xdc,0xbb,0xb8,0x7d,0x5b,0x36,0xe0,
    0xae,0x9f,0xe4,0x88,0xd9,0x7b,0xfc,0x1c,0x0d,0x1b,0x5e,0xfc,0x26,0xb8,0xb1,0xeb,
    0x1f,0xb1,0xef,0xe9,0x26,0x3d,0xe9,0x7b,0xb1,0xcd,0x3b,0xa2,0x6b,0xa0,0x6f,0xc8,
    0x2b,0xb0,0x1c,0x79,0xf5,0x2d,0x29,0x81,0xbb,0xbc,0xba,0xb7,0x65,0x70,0x63,0xcf,
    0x44,0xa0,0xef,0x3d,0xb8,0xd6,0xd9,0xc2,0xfe,0x2b,0x9d,0x8f,0xc8,0xf8,0x07,0xd4,
    0xb1,0x61,0x01,0x40,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
//     gl_FragStencilRefARB = int(texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x);
//
// }
