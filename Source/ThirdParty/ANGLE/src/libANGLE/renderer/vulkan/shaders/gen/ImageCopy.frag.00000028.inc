// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000028.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000028[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x68,0x96,0x55,
    0x18,0xc7,0xcf,0x79,0x9e,0xed,0xd9,0xd4,0x69,0x66,0x9a,0xf3,0x6d,0x6c,0xbe,0x65,
    0x6d,0xcd,0x97,0x6c,0x9a,0xfa,0xa8,0xcb,0x97,0x8d,0x9a,0xce,0x4d,0x0a,0xcc,0x4c,
    0x34,0x2b,0x35,0x9d,0xb5,0x05,0x45,0x8a,0x4e,0xdd,0x2a,0x1d,0x91,0xd2,0x87,0x28,
    0xcd,0x14,0x82,0x88,0xc2,0xc0,0x4a,0x3f,0xa4,0x95,0x23,0xcc,0xa2,0x5c,0x50,0x0e,
    0xca,0x85,0x7e,0xea,0x63,0x24,0x69,0xa9,0x11,0x75,0xae,0xfb,0xfc,0xae,0xed,0x72,
    0xf4,0xf2,0xc0,0xe1,0xbe,0xcf,0xff,0xba,0xfe,0xd7,0xcb,0xff,0xbc,0xdc,0xce,0x74,
    0x6a,0x4c,0x9e,0x73,0xde,0xf5,0x75,0xf9,0xae,0xde,0xbb,0xe4,0x77,0xa3,0x4b,0x39,
    0x79,0xed,0xe7,0x32,0xc9,0xb3,0xaa,0x66,0x69,0x4d,0x79,0xd3,0x53,0x6b,0xca,0xa7,
    0xde,0x39,0x49,0xec,0x03,0x5c,0x3a,0xf1,0x13,0xdb,0x0d,0x2e,0xcf,0xe5,0x84,0xa7,
    0x8c,0x8d,0xab,0xd6,0x35,0x08,0x3e,0x3e,0x8c,0x0b,0x61,0x0c,0x0c,0x7e,0x82,0xe7,
    0x49,0x8c,0xf0,0x36,0x3e,0x89,0x29,0x1c,0xe7,0xaa,0x5d,0xae,0x2b,0x8b,0xe9,0xdc,
    0x18,0x9e,0x8a,0x79,0xb0,0x7c,0x83,0xa5,0xc0,0x06,0x1a,0x2c,0x0d,0x36,0xd8,0x60,
    0x39,0x60,0x85,0x06,0xcb,0x05,0x1b,0x69,0xb0,0x0c,0x58,0xb1,0xc1,0xf2,0xc0,0xc6,
    0x1a,0x2c,0x1f,0x6c,0x82,0xc1,0xfa,0x80,0x95,0x19,0xac,0x2f,0xd8,0x24,0x83,0xf5,
    0x03,0x9b,0x6a,0xb0,0x02,0xb0,0xe9,0x06,0xeb,0x0f,0x36,0x2b,0xd1,0x29,0xdd,0xdd,
    0xaf,0x68,0xb6,0x3c,0x3c,0x47,0xa3,0x8f,0xce,0x4b,0xcc,0x5c,0x74,0x2e,0x62,0x7e,
    0x53,0x60,0xa5,0x12,0x7b,0x3a,0xd1,0x46,0xde,0x6f,0x0e,0x6f,0x19,0xfa,0x2c,0x0d,
    0xfe,0x19,0xf2,0xfd,0x74,0x78,0x5c,0x76,0x70,0xf0,0x18,0x60,0x70,0xd1,0xec,0x70,
    0xd5,0xaa,0xac,0xce,0x45,0xaf,0xd7,0x5e,0x1d,0x36,0x77,0x48,0x98,0x17,0x13,0x43,
    0xd6,0x66,0x68,0x98,0x97,0x30,0x4f,0x31,0x1f,0x8b,0xa6,0x39,0x09,0x9e,0xe3,0xc6,
    0xe1,0x2b,0xf8,0x4c,0xe6,0xe3,0x0d,0xff,0x16,0xfc,0x85,0x2f,0xf1,0x4b,0x89,0xe7,
    0x92,0x7e,0x06,0x26,0x1a,0x94,0x30,0x8a,0xbb,0xeb,0xff,0xef,0x51,0xdc,0xfd,0xcc,
    0x71,0xb7,0xb3,0x4e,0x65,0xe4,0x97,0x79,0x39,0x58,0x29,0xfd,0x4c,0xa4,0x1e,0xf1,
    0x9f,0x84,0xad,0xc4,0xd8,0x2b,0x4c,0x3f,0xd3,0xba,0xb9,0xd1,0x2e,0xcf,0x19,0xd4,
    0xab,0xfe,0xf3,0xd8,0x6b,0x3a,0x5f,0x8c,0xd6,0xd2,0xef,0xfd,0x70,0x25,0xde,0xb0,
    0x10,0x69,0x19,0xf3,0x94,0xbb,0xfe,0xc7,0x11,0x4c,0x72,0x3e,0xc0,0xfb,0x32,0x7a,
    0x90,0xf9,0xf2,0x5e,0x39,0x57,0xf4,0x9a,0xaf,0xe6,0x5c,0x08,0xff,0x61,0x6a,0x2e,
    0xa6,0x86,0x47,0x79,0x4f,0x1b,0xff,0xf5,0xd4,0xa0,0xf3,0x06,0xd6,0x45,0xfc,0x9f,
    0xa1,0x46,0xeb,0xdf,0xcc,0x39,0xd1,0xf9,0x7e,0xf6,0xb9,0xce,0x8f,0x70,0x66,0x74,
    0x7e,0xa2,0x97,0xe6,0xa7,0x39,0x03,0xba,0xc7,0xbe,0x31,0xf5,0xcb,0xfc,0xc7,0x64,
    0xd6,0x3c,0x47,0xea,0x3f,0x4f,0x6e,0xdd,0x43,0xe7,0xb9,0x57,0xd2,0xc6,0x7f,0x56,
    0x10,0x6c,0x7b,0x73,0xf3,0xcc,0xb2,0x50,0x95,0xf8,0x65,0x7d,0xc4,0xec,0x50,0xdf,
    0xd9,0xe1,0x7d,0xd3,0x5b,0x8d,0x73,0x74,0x3e,0x27,0xcc,0xf7,0xee,0x3c,0x90,0xad,
    0x08,0xab,0x96,0x62,0x6d,0x1c,0xf1,0xaf,0x04,0x44,0xd6,0x32,0xcb,0xde,0x9e,0xc0,
    0xfe,0xad,0x0d,0x79,0x64,0xef,0xde,0x0a,0x36,0xc1,0xac,0x5b,0x03,0xe7,0xe2,0x36,
    0xec,0x95,0x21,0x82,0xec,0xab,0xc9,0xec,0xbd,0x89,0xc4,0x13,0x9f,0x29,0xe0,0x3b,
    0x82,0x8f,0xcc,0xef,0x80,0x37,0x05,0xde,0x34,0xee,0x88,0x72,0xf6,0x61,0x96,0x3d,
    0x77,0x17,0xf8,0x3b,0xc1,0x67,0x40,0xa2,0x4b,0xc4,0x64,0x2f,0xfe,0x1e,0x2a,0xcf,
    0x52,0xcf,0xb5,0xe0,0x3f,0x93,0x3b,0x25,0x4b,0x3f,0xf2,0x5e,0x17,0x78,0xb2,0x0e,
    0x73,0xc9,0x29,0xbf,0xad,0xac,0x4d,0x25,0x78,0x7d,0x50,0x47,0x6a,0x1a,0xed,0x23,
    0xa6,0x7e,0x57,0x43,0x0c,0x8d,0x25,0xcf,0xcb,0x41,0x0b,0xf1,0x9b,0xeb,0xa3,0x4f,
    0x2e,0x9c,0x59,0xa6,0x87,0xf9,0xf4,0x30,0xcf,0xf4,0xb0,0x00,0x5c,0x7b,0x58,0x08,
    0xa6,0x3d,0x54,0x9b,0x1e,0x16,0x26,0xf7,0x9c,0x4b,0x30,0xc9,0x5b,0x65,0x7a,0xb8,
    0x97,0xdc,0xde,0xf4,0x50,0x03,0xae,0x3d,0x8c,0xf3,0x11,0x53,0x3f,0xe9,0x41,0x63,
    0x55,0x9b,0x1e,0x2a,0x7d,0xf4,0xc9,0xc2,0xa9,0x32,0x3d,0xd4,0xd2,0xc3,0x62,0xd3,
    0xc3,0x12,0x70,0xed,0xa1,0x0e,0x4c,0x7b,0x58,0x6a,0x7a,0xa8,0x4b,0xea,0x71,0x09,
    0x26,0x79,0xeb,0xd9,0x47,0x92,0xf7,0x3e,0x72,0x57,0xfa,0x9e,0xb3,0x2f,0x35,0xaa,
    0xef,0x52,0x53,0xe3,0xdd,0xf8,0x55,0xc3,0xab,0xa7,0x1e,0xb9,0x1f,0x1e,0xe4,0x6e,
    0xd0,0x3d,0xf7,0x10,0x35,0xaf,0x30,0x7b,0x6e,0x25,0x78,0x33,0x7b,0x6e,0x15,0x58,
    0x12,0x37,0x60,0x72,0x5f,0xac,0x81,0xb7,0x1a,0x9e,0x68,0xfa,0x08,0xb8,0xea,0xfe,
    0x18,0x5c,0x67,0xb0,0xb5,0x60,0x3e,0xd1,0x21,0x93,0xdc,0x35,0xeb,0xf0,0x5d,0x4b,
    0x0c,0xcd,0xf1,0x38,0x39,0xd6,0x9b,0x1c,0x1b,0xc0,0x57,0x86,0x5e,0xe5,0xae,0xdc,
    0x48,0x4f,0xeb,0xb8,0x9f,0x36,0x98,0xf5,0xd8,0x04,0xbf,0xc1,0xac,0xc7,0x13,0xe0,
    0xba,0x1e,0x4f,0x82,0xe9,0x7a,0x34,0x99,0xf5,0x10,0x5b,0x63,0x18,0xdb,0xd0,0x78,
    0x9b,0x89,0xbd,0x9d,0xd8,0xcd,0x26,0xf6,0x0e,0x70,0x8d,0xbd,0x13,0x4c,0x63,0xb7,
    0x9a,0xd8,0x62,0x6b,0x09,0xa3,0x95,0xd8,0x2d,0x68,0x24,0x71,0x9e,0xa7,0x2f,0xb9,
    0x5f,0xde,0x25,0xd6,0x0b,0xe0,0x33,0x58,0x77,0xe5,0xb5,0xb2,0xee,0xe2,0xb3,0x8b,
    0x9c,0xdb,0xf0,0x6f,0x21,0x6f,0x9b,0xc9,0x2b,0x3e,0xbb,0xc3,0x68,0x83,0xbf,0xdb,
    0xe4,0x7d,0xd1,0xe4,0xad,0x0d,0xb7,0xb3,0xdc,0xeb,0x2f,0x81,0x6d,0x34,0xf7,0x57,
    0x8a,0xb5,0x13,0xfb,0x1e,0x78,0x3a,0x9e,0x0b,0xb1,0x04,0xdf,0x0b,0x77,0x4f,0x12,
    0xab,0x4f,0xb2,0x56,0x2f,0x13,0x67,0x2f,0x77,0x68,0x2e,0xdf,0x90,0x34,0x3d,0x69,
    0x4d,0x6d,0xf4,0x24,0x9c,0x05,0x3e,0x72,0x5a,0xe1,0xef,0xc6,0xb7,0x09,0xdf,0x46,
    0x53,0xff,0xd3,0xff,0x50,0xff,0xb3,0xff,0x53,0xff,0x66,0x78,0x3a,0x5a,0xa8,0x7f,
    0x0b,0xdc,0xcd,0xa6,0xfe,0xad,0xc4,0xd9,0xf2,0x2f,0xf5,0x6b,0x4d,0x4d,0xa6,0xfe,
    0xf9,0x3e,0xf6,0xd0,0x06,0xbf,0x31,0xd9,0x6f,0xf1,0x5b,0xf1,0x0a,0xf6,0xd6,0x10,
    0x49,0xe6,0xfb,0xc0,0xb2,0xbe,0x67,0x9f,0xbd,0xce,0x3e,0xdb,0x6f,0xf6,0xd9,0x01,
    0x70,0xdd,0x67,0x6f,0x80,0xe9,0x3e,0x3b,0x64,0xd6,0x5b,0x6c,0x07,0xc3,0x38,0x44,
    0x6d,0x07,0xd1,0x4b,0xea,0x7e,0x93,0x9c,0x0e,0xde,0x35,0xde,0xff,0x08,0xef,0x12,
    0xeb,0x67,0x38,0xf2,0x3c,0x4e,0xae,0x5f,0xe0,0xf5,0x87,0x73,0xd5,0xe4,0x12,0xdb,
    0xc5,0x30,0x2e,0xc1,0xbb,0x94,0x9c,0x87,0x98,0xeb,0x37,0x78,0x85,0x2e,0xf6,0x9b,
    0x49,0xf8,0x11,0x97,0xef,0x6d,0x41,0xd0,0x2b,0x93,0xf0,0xe2,0x1a,0x0d,0xc7,0x3e,
    0x12,0x6d,0xaf,0x11,0xf3,0xa2,0xe1,0xff,0x4a,0x4c,0xf9,0x3e,0x5b,0x1f,0xa9,0xe9,
    0xaf,0x10,0xe5,0x0a,0xd8,0x65,0x62,0x2f,0xf4,0x31,0xfe,0x25,0xb8,0x17,0xb9,0xff,
    0x45,0xfb,0x52,0x1f,0xed,0xfb,0xcc,0x7d,0x25,0x9c,0xb7,0xd1,0xc8,0xd3,0x6f,0x81,
    0xbf,0x5e,0x23,0xe7,0x63,0x4e,0x79,0xaa,0x46,0x29,0x1f,0x79,0xaa,0x51,0x3f,0xdf,
    0xa3,0x91,0xd8,0xd2,0x61,0x64,0xe0,0xc9,0x53,0x35,0xca,0x87,0x67,0x35,0xea,0xe3,
    0x23,0x6e,0x35,0xea,0xeb,0x7b,0x34,0x12,0xbb,0x6a,0x54,0x40,0xcc,0xb4,0xef,0xe1,
    0xe7,0x12,0x53,0x35,0x52,0x1f,0xa9,0x49,0x35,0x12,0x4c,0x35,0xaa,0xf6,0x31,0xbe,
    0xd4,0x95,0x4b,0xad,0xaa,0x51,0xb9,0x8f,0xf6,0x52,0xf2,0xab,0x46,0xef,0xa1,0x51,
    0x8a,0x7e,0x8b,0x7a,0x69,0x34,0x88,0x9c,0x83,0x8c,0x46,0x83,0x7d,0xe4,0xa9,0x46,
    0xa3,0x8c,0x46,0x62,0x1b,0x12,0x46,0x21,0xbc,0x42,0xa3,0xd1,0x70,0x78,0x56,0xa3,
    0x11,0x3e,0xe2,0x56,0xa3,0x91,0x46,0xa3,0x11,0x46,0xa3,0x22,0x62,0x0e,0x31,0x1a,
    0x0d,0x25,0xa6,0x6a,0xa4,0x3e,0xa3,0x8c,0x46,0x45,0x46,0xa3,0x7b,0x7c,0x8c,0x2f,
    0x75,0x0d,0xa5,0x56,0xd5,0x68,0xb2,0x8f,0x76,0xd1,0x2a,0x45,0x4e,0x3d,0x7b,0x87,
    0xd8,0x8b,0xe2,0x57,0xc3,0x5e,0x6b,0x82,0x53,0x64,0xce,0xfc,0xfb,0x9c,0xf9,0x23,
    0xe6,0xcc,0x7f,0x00,0xae,0x67,0xfe,0x43,0x30,0x3d,0xf3,0xc7,0xcc,0x39,0x14,0xdb,
    0xd1,0xe4,0xcc,0xc6,0xbc,0xc7,0xcd,0x77,0xeb,0x63,0x62,0x9f,0x30,0xb1,0x3f,0x01,
    0xd7,0xd8,0x9f,0x82,0x69,0xec,0x76,0x13,0x5b,0x6c,0x27,0xc3,0x38,0x45,0xec,0x53,
    0xe6,0x7b,0xfd,0x05,0xb1,0x4f,0x9b,0xef,0xf5,0x97,0xe0,0x9f,0xf3,0xfd,0xff,0x0a,
    0x6c,0xbd,0xc9,0xf7,0x35,0xf8,0x0a,0xf2,0x75,0x98,0x7c,0x62,0x3b,0x13,0x46,0x07,
    0xf9,0xce,0x98,0x33,0x5b,0xe1,0xe3,0xdf,0x05,0x35,0xe6,0xdf,0x6c,0xea,0xd7,0x61,
    0xb4,0x5e,0xe4,0xa3,0xcf,0x29,0x38,0x67,0x4c,0x3d,0xdf,0x52,0x4f,0x85,0xa9,0xe7,
    0x3b,0x70,0xad,0xa7,0xd3,0xd4,0x23,0xb6,0xb3,0x61,0x74,0x92,0xe7,0xac,0xa9,0x67,
    0x3a,0xf5,0x2c,0x32,0x6b,0xaf,0x7e,0x9d,0xa6,0x9e,0xc5,0x3e,0xfa,0x74,0xc0,0x39,
    0x6b,0xea,0xf9,0x9e,0x7a,0x8e,0x98,0x7a,0x7e,0x00,0xd7,0x7a,0xba,0x4c,0x3d,0x62,
    0x3b,0x17,0x46,0x17,0x79,0xce,0x99,0x7a,0x66,0xf8,0xf8,0x77,0x92,0xe4,0xd3,0x6f,
    0x94,0xfa,0x75,0x99,0x7a,0xea,0x7c,0xf4,0xe9,0x84,0x73,0x0e,0xdf,0x76,0x7c,0x4f,
    0x9a,0xb3,0xfe,0x19,0x7a,0xa7,0x4d,0x9e,0xa9,0xbe,0x07,0x77,0xbd,0xb8,0xed,0x26,
    0xcf,0x12,0x1f,0x73,0x75,0xc1,0x39,0x89,0xef,0x31,0x7c,0x8f,0xf2,0xad,0x15,0xdf,
    0x8f,0x88,0x27,0x43,0xff,0x6f,0x28,0x65,0xbe,0xb5,0xca,0x39,0x66,0xe2,0xd7,0xfa,
    0x98,0xa3,0x1d,0xbe,0xc4,0x9b,0x1d,0x18,0x17,0xb0,0xfd,0x19,0x76,0xc9,0xf4,0x30,
    0xfe,0x06,0xd3,0x23,0xff,0xa6,0xcc,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
