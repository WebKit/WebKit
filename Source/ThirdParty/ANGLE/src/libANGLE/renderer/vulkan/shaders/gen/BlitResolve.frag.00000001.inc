// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x96,0xe9,0x4f,0x55,0x67,
    0x10,0xc6,0xdf,0x7b,0xcf,0x5d,0xa8,0x45,0x45,0x10,0xa1,0x56,0xdc,0x70,0x29,0xb4,
    0x92,0xab,0x72,0x1b,0x1b,0x44,0xd1,0x04,0x37,0x68,0x8b,0xa8,0xdd,0x5c,0xaa,0x15,
    0x9b,0xd8,0x0a,0x4d,0x5c,0xe0,0x43,0x2b,0xd7,0x04,0x15,0x3e,0xb8,0xc0,0x07,0x5b,
    0xe1,0x83,0x1b,0x1f,0x9a,0xb4,0xb6,0xff,0x46,0xff,0xa2,0xa6,0xd5,0xc4,0xc4,0x99,
    0xf7,0xfc,0x86,0x4c,0x0e,0xc9,0x70,0xce,0x3c,0xcf,0xcc,0x3c,0x33,0xe7,0x5d,0x20,
    0xc9,0xb7,0x97,0x43,0xc8,0x85,0x65,0xa1,0x2e,0xfc,0x1d,0xd2,0x9f,0x55,0x21,0x2f,
    0x48,0x08,0xef,0x86,0x52,0x7c,0x1e,0x1e,0x3c,0x31,0xd8,0x75,0xed,0xfa,0x48,0x57,
    0x77,0xb5,0xa2,0xfc,0x8a,0x90,0xc4,0x38,0xe5,0x56,0x8a,0x57,0x90,0xa7,0xda,0xe8,
    0x85,0xcb,0x63,0x8a,0xd7,0x8b,0x7d,0x2f,0xa6,0xce,0x84,0x58,0x4d,0x6c,0x46,0x6c,
    0x4e,0x6c,0x41,0x6c,0x51,0xac,0x41,0x6a,0x68,0x4e,0x59,0xeb,0xcb,0x5b,0x7d,0xd4,
    0xd3,0x7a,0x21,0x1c,0x09,0xc5,0xb0,0x9a,0x5e,0xda,0x79,0x1a,0x96,0x03,0xab,0x73,
    0x58,0x1e,0xac,0xc1,0x61,0x09,0x58,0xab,0xc3,0x0a,0x60,0xeb,0x1c,0x56,0x04,0xdb,
    0xe8,0xb0,0x12,0xd8,0x16,0x87,0x95,0xc1,0x3e,0x70,0x58,0x1d,0xd8,0x47,0x0e,0x7b,
    0x07,0xac,0x12,0xe7,0x4a,0x96,0xfa,0xd3,0x19,0x0f,0xcb,0x73,0x33,0xf3,0x98,0xbf,
    0xc9,0xf9,0x03,0x19,0x7e,0x00,0xde,0xf2,0xf5,0x9b,0xae,0x77,0xfc,0x18,0x7e,0x0e,
    0x7f,0x02,0xdf,0xe2,0x6b,0xf8,0x09,0xfe,0x0c,0x7e,0x01,0x7f,0x0e,0xbf,0x88,0xbf,
    0x80,0x5f,0xc2,0x5f,0xc4,0xd7,0xd9,0x9b,0xa4,0x6a,0x3e,0xf6,0x93,0xc4,0x7a,0xfa,
    0xbe,0x46,0xde,0x4a,0x7c,0xbb,0x16,0x89,0x2f,0x93,0x9b,0xc7,0x5f,0x86,0x5f,0x88,
    0x31,0x85,0xb8,0xbe,0xda,0xab,0xe2,0x3d,0xf8,0xf5,0x60,0xcd,0xe2,0x37,0x52,0xcb,
    0xfc,0x26,0xfc,0x10,0xfb,0xa8,0x5f,0x5a,0x07,0xb3,0x46,0xac,0xc4,0xb3,0xc9,0x99,
    0xea,0x35,0xb3,0x1e,0xab,0xd1,0x6b,0x8e,0x3d,0xa7,0xd8,0x87,0xe8,0xb5,0xa0,0xa7,
    0xf1,0xad,0x70,0x65,0xc7,0xb7,0xa1,0x6f,0xfe,0x66,0x78,0x8d,0x6f,0x27,0xbe,0x29,
    0x6a,0xe4,0xc3,0x36,0xe2,0xd4,0xdf,0x9e,0xc9,0xab,0xb0,0x5f,0xcc,0xef,0x21,0xf7,
    0x3d,0xf9,0xdd,0xcf,0x0c,0x39,0x72,0xb2,0x4f,0xd5,0x3a,0xc4,0x7b,0x3f,0xb3,0x1c,
    0x8a,0x6b,0x94,0xfe,0xac,0x15,0xed,0xa3,0xc4,0x1d,0x03,0x3b,0x4a,0x9c,0xfa,0x03,
    0x60,0xef,0xcb,0x7a,0x7d,0x4a,0x0d,0xeb,0x63,0x88,0xf5,0x32,0xff,0x24,0xfb,0x45,
    0x6b,0x9d,0xa2,0xc7,0x46,0xd6,0xf3,0x6b,0xfa,0x4c,0x5c,0xfc,0x39,0x30,0x8d,0xbf,
    0x04,0x67,0xeb,0x7b,0x89,0x7b,0x20,0x71,0xfe,0x58,0x26,0xff,0x2a,0xfb,0xc3,0xf8,
    0x89,0x4c,0x7c,0x2d,0x13,0x3f,0xc5,0x39,0x37,0x7e,0x26,0xc3,0xdf,0x63,0xcf,0x18,
    0x3f,0x97,0xe1,0x1f,0x89,0xf5,0x39,0x7e,0x21,0xc3,0x3f,0x11,0xbb,0xe5,0xf8,0x45,
    0xf8,0x8f,0xe5,0x94,0xe4,0xe9,0x35,0x80,0xfd,0x2f,0x88,0x9e,0x9d,0x5e,0xf6,0xfa,
    0x72,0xf6,0xf3,0x71,0x41,0x4b,0xdc,0x65,0xcb,0x89,0x37,0xac,0x01,0x2c,0x17,0xbf,
    0x7d,0x31,0xee,0xa5,0x55,0xc4,0x2a,0x77,0x40,0xb0,0xd6,0xb8,0x2f,0xd2,0xbd,0xda,
    0x42,0xfd,0x72,0x5c,0xe7,0x14,0xbf,0x43,0xde,0x3a,0x72,0xd7,0xba,0xbc,0xf5,0xe4,
    0xb5,0xb9,0xbc,0x0d,0xe0,0x53,0xe4,0x6d,0x22,0x77,0x03,0x79,0x76,0xd7,0xad,0x61,
    0x7f,0xf7,0xb2,0x87,0xb7,0x82,0xff,0x29,0x31,0xdb,0xb8,0xfb,0xb6,0xb2,0xb7,0xff,
    0x93,0x2f,0xd0,0xc9,0x6c,0xaf,0x25,0x5e,0xb9,0x0e,0xb1,0x4e,0xbe,0x4b,0x87,0x9b,
    0x79,0x87,0xbb,0xe7,0x6a,0x12,0xab,0x58,0x17,0xf8,0xb0,0x78,0xda,0xd3,0xef,0x60,
    0x16,0xf7,0x4a,0x6a,0x58,0x2d,0x7d,0xfe,0x2b,0x51,0xe5,0xd8,0x4b,0x1a,0x53,0x24,
    0xa7,0xc3,0xcd,0xb0,0x93,0x19,0x2a,0x6e,0x86,0x5d,0xe0,0x36,0xc3,0x6e,0x30,0x9b,
    0xa1,0xea,0x66,0x50,0xae,0x5b,0xac,0x8a,0x6e,0xb7,0x9b,0x61,0x0f,0xda,0x39,0x37,
    0xc3,0x27,0xe0,0x36,0xc3,0x1f,0x60,0x16,0xa7,0x33,0x58,0xad,0xaa,0x9b,0xe1,0x25,
    0x31,0x9d,0xe4,0x74,0xbb,0x19,0xf6,0x32,0x43,0x8f,0x9b,0xa1,0x17,0xdc,0x66,0xd8,
    0x07,0x66,0x33,0xf4,0xb9,0x19,0x94,0xdb,0xcf,0x1e,0x57,0x5d,0x7d,0xff,0x1c,0xdd,
    0x83,0x68,0xbf,0x74,0x77,0x8b,0xf6,0x68,0xb1,0x7d,0xae,0xc7,0xbf,0x88,0xab,0x92,
    0xb7,0x9f,0x7e,0xfa,0xe3,0xdf,0xba,0xf4,0xee,0x51,0x5f,0xef,0x99,0x41,0xee,0x98,
    0x2f,0xa4,0x3f,0xbd,0x5f,0x3e,0x23,0x66,0xd0,0xed,0xcb,0xe3,0xcc,0x35,0xe4,0xf6,
    0xe5,0x30,0xb8,0xed,0xe7,0x13,0xe8,0x0e,0x93,0x77,0x2a,0xd6,0x4c,0xf3,0x4e,0x92,
    0xa7,0x67,0xf4,0x4b,0xf0,0x9f,0x58,0x87,0xaf,0xc0,0x6c,0xad,0xbe,0xa1,0x96,0x3f,
    0x77,0xa7,0xc1,0xd2,0x73,0x57,0x8a,0x77,0xd9,0x19,0x62,0x4f,0x2f,0xd5,0x28,0xc6,
    0x73,0x7c,0x96,0x19,0xce,0xb8,0x3e,0xbe,0xa5,0x8f,0x73,0xae,0x8f,0xf3,0xe0,0xff,
    0x48,0x8c,0xfa,0x17,0xc0,0x5a,0xdc,0x5a,0x7d,0x07,0xde,0xc6,0x5a,0x8d,0xb8,0xb5,
    0x52,0xee,0xa2,0xd8,0x08,0xdf,0xff,0x62,0x5c,0xdb,0x24,0xde,0x99,0x67,0x59,0x1b,
    0xe3,0x46,0x9c,0xce,0x0f,0xe8,0x0c,0x39,0x9d,0x1f,0xc1,0x4d,0x67,0xd4,0xe9,0x28,
    0x77,0x45,0xff,0x3f,0xa3,0xd6,0x15,0x74,0xc6,0x9c,0x8e,0x71,0xa3,0x4e,0xe7,0x1a,
    0x3a,0x57,0x9d,0xce,0x75,0x70,0xd3,0x19,0x77,0x3a,0xca,0xdd,0x10,0x1b,0xa7,0xd6,
    0x0d,0x74,0x26,0x9c,0x8e,0x71,0xe3,0x4e,0xe7,0x67,0x74,0x2a,0x4e,0xe7,0x17,0x70,
    0xd3,0x99,0x74,0x3a,0xca,0xdd,0x14,0x9b,0xa4,0xd6,0x4d,0x74,0x6a,0x4e,0xc7,0xb8,
    0x49,0xa7,0x73,0x1b,0x9d,0x29,0xa7,0x73,0x07,0xdc,0x74,0xa6,0x9d,0x8e,0x72,0x77,
    0xc5,0xa6,0xa9,0x75,0x17,0x9d,0x19,0xa7,0x63,0xdc,0xb4,0xd3,0xb9,0x8f,0xce,0x3d,
    0xa7,0xf3,0x00,0xdc,0x74,0x66,0x9d,0x8e,0x72,0x0f,0xc5,0x66,0xa9,0xf5,0x10,0x9d,
    0x39,0xa7,0x63,0xdc,0xac,0xd3,0xf9,0x15,0x9d,0x47,0x4e,0xe7,0x37,0x70,0xd3,0x99,
    0x77,0x3a,0xca,0x3d,0x16,0x9b,0xa7,0xd6,0x63,0x74,0x16,0x9c,0x8e,0x71,0xf3,0x4e,
    0xe7,0x29,0x3a,0x4f,0x9c,0xce,0x33,0x70,0xd3,0x79,0xe1,0x74,0x94,0x7b,0x2e,0xf6,
    0x82,0x5a,0xcf,0xd1,0x59,0x74,0x3a,0xc6,0xe9,0xf3,0x8d,0x9c,0xca,0x3d,0x62,0x6f,
    0x01,0xef,0x73,0x53,0xa0,0x8c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = texture(sampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
