// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x94,0x4b,0x6c,0x95,0x65,
    0x10,0x86,0xbf,0xef,0xdc,0xb5,0x40,0x41,0x8e,0x55,0x7a,0x57,0x6c,0x62,0xc0,0x54,
    0x16,0x6a,0x9a,0x18,0x0d,0x84,0x05,0x2c,0x08,0xd7,0xa4,0x5d,0x74,0x53,0x93,0x6e,
    0xce,0x42,0x48,0xa3,0xdd,0x74,0x01,0x26,0x27,0x86,0x4d,0x17,0x6c,0xba,0x41,0xc4,
    0x22,0x01,0x51,0x14,0xdc,0x19,0x05,0xa2,0x44,0xa1,0x81,0x14,0x68,0x34,0x05,0x1a,
    0x9a,0xa8,0x98,0x26,0x4a,0x9a,0x28,0x69,0xb4,0xb5,0x09,0xc2,0xcc,0xff,0x3f,0x43,
    0x27,0xc7,0x26,0xd3,0xef,0x9f,0xf7,0x9d,0x99,0x77,0xe6,0xbb,0x9c,0x6c,0x66,0x6d,
    0x31,0x84,0x18,0x9e,0x0c,0xa5,0xd0,0x1e,0x43,0xf2,0xb7,0x2a,0x64,0x82,0x7e,0xd6,
    0x85,0x42,0xb2,0x6e,0xd9,0xb6,0x67,0x5b,0xe7,0x3b,0xef,0xf6,0x77,0xbe,0xf2,0xea,
    0x06,0xe5,0x57,0x84,0x6c,0x12,0xa7,0x5c,0xbd,0x78,0x39,0x59,0xd5,0xde,0x7e,0xab,
    0xb2,0x57,0xf1,0xb2,0x58,0x8f,0x58,0x9f,0x58,0x45,0x6c,0x40,0x6c,0x48,0xac,0x2a,
    0x36,0x2c,0x36,0x22,0xb6,0x52,0x6a,0x68,0x4e,0x51,0xeb,0xcb,0x57,0x39,0xd1,0xd3,
    0x7a,0x21,0x6c,0x0d,0xf9,0xd0,0x9c,0xb6,0x12,0xd6,0xb2,0x1a,0x16,0xc1,0x4a,0x0e,
    0xcb,0x80,0xad,0x74,0x58,0x16,0xec,0x59,0x87,0xe5,0xc0,0x9a,0x1d,0x96,0x07,0x6b,
    0x77,0x58,0x01,0xec,0x05,0x87,0x15,0xc1,0x5e,0x74,0x58,0x09,0xec,0x25,0x87,0x3d,
    0x01,0xb6,0x21,0x99,0x2b,0xfb,0xb8,0x3f,0x9d,0x51,0xf7,0xa4,0x95,0x79,0xd4,0xef,
    0xc3,0x8f,0xf8,0x15,0x7c,0x8b,0x1f,0xc0,0xcf,0xe2,0x0f,0xe1,0xe7,0xf0,0xab,0xf8,
    0x79,0xfc,0x61,0xfc,0x02,0xfe,0x08,0xbe,0xed,0xf1,0x11,0x59,0x9f,0x77,0xfa,0xea,
    0x3f,0xe7,0xfc,0xd1,0x1a,0x7e,0x14,0x5e,0xfb,0x59,0x2d,0xff,0x33,0x89,0x9f,0x4d,
    0xfa,0xd1,0xef,0x06,0xf9,0x2a,0xb0,0x77,0xcf,0x48,0x7c,0x11,0xed,0x0c,0x7e,0x1d,
    0x7e,0x2e,0x89,0xc9,0x49,0x8d,0xc0,0xbd,0x0a,0xe1,0x75,0xfc,0x32,0xd8,0xd3,0xe2,
    0x37,0x52,0xcb,0xfc,0x26,0xfc,0x90,0xcc,0xb1,0xec,0xf1,0x39,0x98,0x35,0x62,0x05,
    0xd6,0x26,0x67,0xaa,0xd7,0xc2,0x79,0x34,0xa3,0xd7,0xc2,0x7e,0x28,0xb6,0x1e,0xbd,
    0x36,0xf4,0x34,0xbe,0x1d,0xae,0xe8,0xf8,0x0e,0xf4,0xcd,0x5f,0x07,0xaf,0xf1,0xeb,
    0x89,0x6f,0x4a,0xe6,0xc8,0x84,0x4e,0xe2,0xd4,0x7f,0xb9,0x26,0xaf,0x8b,0xfb,0x62,
    0xfe,0xe6,0x9a,0x3e,0xb6,0x33,0x87,0xd6,0xdd,0x01,0xd7,0x88,0xdf,0xcd,0x1d,0xb0,
    0x7d,0xeb,0xe6,0x7d,0x65,0x5d,0x7e,0x2f,0xfb,0x6e,0x7c,0x5f,0x0d,0xdf,0xcf,0x39,
    0x18,0x5f,0x81,0x37,0x7f,0xa0,0x26,0x7e,0x90,0xf7,0x64,0xfc,0x50,0x0d,0xbf,0x9f,
    0xb3,0x31,0xbe,0x5a,0xc3,0x1f,0x14,0xdb,0xe8,0xf8,0xe1,0x1a,0xfe,0x90,0xd8,0x7b,
    0x8e,0x1f,0x81,0x5f,0x23,0x93,0x1f,0x66,0x2f,0xf8,0x39,0xfa,0xdf,0xaa,0x7b,0xf2,
    0x01,0xdf,0x87,0xa9,0xa1,0xfe,0x11,0xb0,0x46,0xd9,0x89,0xa3,0xc4,0x7d,0x04,0x76,
    0x94,0x38,0xf5,0x47,0xc1,0x9a,0x44,0xf1,0x63,0x6a,0x58,0x5f,0xa7,0xe8,0x43,0xef,
    0xef,0xe7,0xf4,0xa1,0xfe,0x6b,0xf2,0xca,0x32,0xec,0x61,0x00,0x5b,0x10,0x44,0xdf,
    0xde,0x1b,0xdc,0xf5,0xaf,0xb8,0xcf,0xbb,0x04,0xd5,0xbc,0xaf,0xc1,0x82,0xc3,0xbe,
    0x01,0xd3,0x59,0x76,0x0a,0xa6,0x77,0xe9,0x1c,0xb1,0xca,0x6d,0x12,0x4c,0xf7,0xf5,
    0x3c,0x77,0xb5,0x8d,0xfa,0x1a,0x77,0x01,0xfc,0x7d,0xf2,0xbe,0x25,0xf7,0x82,0xcb,
    0xfb,0x8e,0xbc,0x0e,0x97,0x77,0x11,0xbc,0x4a,0xde,0xf7,0xe4,0x5e,0x24,0x4f,0xef,
    0xf1,0x0f,0xe4,0xad,0x23,0x4f,0xef,0xf0,0x25,0xf0,0xd3,0x12,0xa3,0x77,0xfb,0x32,
    0x98,0xde,0xed,0x79,0xd9,0x81,0x71,0x66,0x5b,0x94,0x78,0xe5,0xc6,0xc4,0xc6,0xd9,
    0x97,0x31,0x37,0xf3,0x15,0x34,0xf5,0xef,0x80,0xc4,0x2a,0x76,0x15,0x7c,0xb7,0x78,
    0xda,0xd3,0x9a,0x98,0x62,0x16,0xf7,0xaf,0xd4,0xb0,0x5a,0xba,0xfe,0x2d,0x51,0x1a,
    0xd7,0x12,0xd3,0x98,0x3c,0x39,0x63,0x6e,0x86,0x6b,0xcc,0xd0,0xe5,0x66,0xb8,0x0e,
    0x6e,0x33,0xdc,0x00,0xb3,0x19,0x26,0xdd,0x0c,0xca,0x4d,0x88,0x4d,0xa2,0x3b,0xe1,
    0x66,0xf8,0x11,0xed,0xe8,0x66,0xf8,0x09,0xdc,0x66,0x68,0x8e,0x29,0x66,0x71,0x3a,
    0x83,0xd5,0x9a,0x74,0x33,0xb4,0xc6,0x34,0x66,0x9c,0x9c,0x09,0x37,0xc3,0x4d,0x66,
    0xd8,0xec,0x66,0xb8,0x05,0x6e,0x33,0xdc,0x06,0xb3,0x19,0xa6,0xdd,0x0c,0xca,0x4d,
    0x89,0x4d,0xa3,0xab,0xdf,0x3b,0xd0,0xbd,0x83,0x76,0x6b,0x5c,0x7a,0x4b,0xda,0xa3,
    0xc5,0x4e,0xbb,0x1e,0xdb,0x88,0x9b,0x24,0x6f,0x8a,0x7e,0xf4,0xad,0x7c,0xc8,0x5b,
    0x53,0x5f,0xdf,0xd5,0x31,0xde,0x54,0xb7,0xf4,0xa7,0xef,0xe9,0x38,0x31,0xc7,0xdc,
    0xbd,0x3c,0xc1,0x5c,0xbd,0xee,0x5e,0x9e,0x04,0xb7,0xfb,0xfc,0x09,0xba,0x27,0xc9,
    0xd3,0xdf,0xc1,0x4f,0xc9,0x3b,0x45,0x9e,0xbe,0xd1,0xcf,0xc0,0xf7,0x71,0x0e,0xa7,
    0xc1,0xec,0xac,0xbe,0xa0,0x96,0x7f,0x77,0x67,0xc0,0xd2,0x77,0x57,0x48,0xde,0xf6,
    0x59,0x62,0xcf,0x50,0xa3,0x47,0x62,0xf5,0x1d,0x7f,0xc9,0x0c,0x67,0x5d,0x1f,0x3f,
    0xd3,0xc7,0x76,0xd7,0xc7,0x2f,0xe0,0x63,0x12,0xa3,0xfe,0xaf,0x60,0x6d,0xee,0xac,
    0xee,0x82,0x77,0x70,0x56,0x33,0xee,0xac,0x94,0xfb,0x4d,0x6c,0x86,0xfd,0xd7,0xef,
    0x37,0x25,0xa6,0x87,0x1e,0xf4,0x6c,0x8c,0x9b,0x71,0x3a,0xbf,0xa3,0xd3,0xeb,0x74,
    0xfe,0x00,0x37,0x9d,0x59,0xa7,0xa3,0xdc,0x3d,0xb1,0x59,0x6a,0xdd,0x43,0xa7,0xcf,
    0xe9,0x18,0x37,0xeb,0x74,0xfe,0x44,0xa7,0xdf,0xe9,0xfc,0x05,0x6e,0x3a,0x73,0x4e,
    0x47,0xb9,0xfb,0x62,0x73,0xd4,0xba,0x8f,0x4e,0xc5,0xe9,0x18,0x37,0xe7,0x74,0xfe,
    0x41,0xa7,0xcb,0xe9,0xcc,0x83,0x9b,0xce,0xa2,0xd3,0x99,0x4f,0x6a,0x84,0x04,0xd3,
    0x5a,0x0b,0xe8,0x0c,0x38,0x1d,0xe3,0x16,0x9d,0xce,0x03,0x74,0x06,0x9d,0xce,0x7f,
    0xe0,0xa6,0x13,0xe3,0x92,0x8e,0x72,0x0f,0xf5,0xce,0xc4,0xb4,0xd6,0x43,0x74,0x86,
    0x9c,0x8e,0x71,0x31,0x2e,0xe9,0xe4,0x62,0xaa,0xb3,0xdf,0xe9,0xe4,0x63,0x8a,0x9b,
    0x4e,0xc9,0xe9,0x28,0x57,0x10,0x2b,0x51,0x4b,0xbf,0x55,0xa7,0xea,0x74,0x8c,0x2b,
    0x39,0x9d,0x3a,0x74,0x0e,0x3a,0x9d,0x65,0x31,0xc5,0x4d,0xa7,0xde,0xe9,0x28,0xb7,
    0x5c,0xac,0x9e,0x5a,0xcb,0xd1,0x19,0x76,0x3a,0xc6,0xd5,0x3b,0x9d,0xa7,0xd0,0x39,
    0xe4,0x74,0x56,0xc7,0x14,0x37,0x9d,0x06,0xa7,0xa3,0x5c,0x59,0xac,0x81,0x5a,0x65,
    0x74,0x46,0x9c,0x8e,0x71,0xba,0x3e,0x90,0x57,0xd9,0x25,0xf6,0x08,0x97,0x53,0x2f,
    0x72,0x8c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2DArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = texture(sampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     broadcastColor(colorValue);
//
// }
