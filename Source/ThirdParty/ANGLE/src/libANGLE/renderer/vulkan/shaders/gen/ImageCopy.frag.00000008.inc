// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xf9,0x73,0x54,0x45,
    0x10,0xc7,0x5f,0x76,0x37,0xbb,0x10,0x20,0x04,0x89,0x1c,0x11,0xac,0x84,0x4b,0x34,
    0x18,0x50,0x43,0x38,0x97,0x70,0x28,0x87,0x72,0x49,0x40,0x41,0x8c,0x10,0x04,0x11,
    0x21,0x11,0x39,0x04,0xd4,0x70,0x2b,0x87,0x88,0x07,0xa0,0x02,0x2a,0xa8,0x80,0x4a,
    0x30,0x1c,0x0a,0x22,0x20,0x87,0x07,0x20,0x2a,0xa0,0x12,0x01,0xfd,0xdd,0xff,0xc0,
    0xf2,0xa8,0xf2,0x98,0x9e,0xfd,0xf4,0xda,0xbe,0x42,0x4d,0xd5,0xd4,0xdb,0xfe,0x76,
    0xcf,0x77,0xbe,0xdd,0x3d,0x33,0x6f,0x37,0xd1,0x48,0xdb,0x44,0x10,0x64,0x04,0x59,
    0x41,0xbd,0xe0,0x87,0x20,0xf5,0xd7,0x24,0x88,0x38,0x24,0x08,0x1a,0x04,0x71,0xff,
    0x1c,0x34,0xb4,0x6c,0x68,0xd1,0xec,0x39,0x93,0x8b,0x8a,0xbb,0x76,0x11,0x7f,0x76,
    0x10,0xf5,0x71,0xe2,0x6b,0x1c,0x24,0x82,0x98,0x7b,0xca,0xa8,0xac,0x98,0x56,0x25,
    0x78,0x07,0x37,0x2e,0xbb,0x91,0xe3,0xe2,0x04,0x4f,0x08,0x87,0xfb,0xd4,0xc1,0x73,
    0xca,0x9c,0x20,0x18,0x1c,0x64,0x06,0x9d,0x58,0xaf,0x2d,0x4f,0xc5,0x32,0xc0,0xea,
    0x19,0x2c,0x02,0x96,0x63,0xb0,0x28,0x58,0xae,0xc1,0x62,0x60,0x2d,0x0c,0x96,0x09,
    0xd6,0xca,0x60,0x71,0xb0,0x7c,0x83,0x25,0xc0,0xda,0x19,0xac,0x1e,0x58,0x47,0x83,
    0xd5,0x07,0xeb,0x64,0xb0,0x2c,0xb0,0x2e,0x06,0x6b,0x00,0x56,0x6c,0xb0,0x86,0x60,
    0xdd,0x0d,0xd6,0x08,0xac,0xb7,0xaf,0x53,0x34,0x9d,0xaf,0xd4,0x6c,0xbc,0x7b,0xb6,
    0xa1,0x3e,0x6a,0x17,0x18,0x5b,0xea,0x7c,0x2d,0x76,0x53,0x37,0x2b,0xe2,0xfd,0x51,
    0x5f,0x1b,0xf9,0xdc,0xcc,0x7d,0x8a,0x93,0x67,0xbe,0x8b,0x4f,0x90,0x67,0xdc,0xc7,
    0xc5,0x7c,0x7e,0x71,0xb0,0x42,0x67,0xc7,0xd1,0xf3,0x63,0x6d,0xfb,0x64,0xae,0x63,
    0xc8,0x36,0x78,0x53,0x37,0x46,0x1d,0x1c,0xde,0x4f,0x6d,0xa9,0x71,0xed,0xa0,0x8a,
    0xa4,0xda,0x79,0x6e,0x24,0xb3,0x56,0x94,0xaa,0x2d,0xf5,0xde,0xb4,0xb1,0x65,0xdf,
    0xab,0x9d,0x9d,0x8f,0x06,0xe9,0x6d,0x73,0x67,0x17,0x60,0x47,0xd0,0xd5,0x06,0x0d,
    0x05,0xf8,0xdb,0xa1,0x2b,0x86,0xbf,0x3d,0x73,0x05,0xef,0x85,0xdd,0xc1,0xf0,0x5d,
    0x47,0xbc,0xf0,0xc9,0x7a,0x85,0xf0,0x07,0xbe,0x3e,0x39,0xbe,0xa6,0x05,0x0c,0xd5,
    0x52,0xf8,0x3f,0x23,0x3f,0xfd,0x8c,0x05,0x37,0xd2,0xf7,0x4e,0xac,0x2f,0x76,0x11,
    0x58,0x21,0xf9,0x75,0x46,0x8f,0xc4,0x77,0xc1,0x57,0x60,0xfc,0x25,0x26,0x9f,0x6e,
    0xe9,0xb9,0x29,0xbf,0x3c,0x7b,0xa2,0x57,0xfc,0x7d,0xa8,0x47,0xbe,0x99,0x3f,0x80,
    0xbd,0xac,0xf1,0x43,0x58,0x4f,0xfd,0xc3,0xe9,0x9d,0xd4,0xe3,0x2e,0xb8,0x75,0xbd,
    0xbb,0xe1,0x13,0xbc,0xa5,0x5b,0x79,0x1c,0xfe,0x8c,0xe0,0x9f,0x7f,0x19,0x46,0xc3,
    0x3d,0x7c,0x1e,0x47,0xce,0x62,0x8f,0x07,0xd3,0x35,0xcb,0x43,0xf6,0x24,0xd3,0xd3,
    0xfb,0xc9,0xd1,0xe6,0x30,0x95,0x3e,0x69,0x0e,0x95,0x9c,0x63,0x89,0xaf,0x4a,0xef,
    0xc3,0x54,0x0e,0x8f,0xf0,0x39,0x6a,0xe6,0x2f,0x48,0xd7,0x25,0x16,0x3c,0xc3,0xe7,
    0x76,0x66,0x8f,0x3e,0xef,0xd5,0x2c,0x1a,0xa0,0xf1,0x1b,0x38,0x87,0xba,0xde,0x0e,
    0xf4,0xa9,0xbf,0x86,0x33,0xae,0xf6,0x81,0x50,0x4f,0x4f,0x70,0x66,0x95,0xff,0x73,
    0x93,0xaf,0xd8,0xdf,0x79,0x6b,0x71,0xa9,0xe8,0xb9,0x84,0x56,0xdd,0xa3,0x97,0xb8,
    0x07,0xa3,0xbe,0xf7,0x99,0x7e,0xdd,0x18,0xf3,0x05,0xfb,0xc5,0x21,0x99,0xc4,0xb6,
    0xe1,0x0e,0x48,0x18,0xbb,0xd8,0xd8,0xd2,0xbf,0xb1,0xc6,0x96,0xdc,0xd7,0x1a,0x5b,
    0x9e,0x9b,0x43,0xf6,0xd6,0x90,0xbd,0xdd,0xd8,0xb2,0xbf,0x8e,0x63,0x27,0x39,0x6f,
    0x1d,0x39,0x53,0x23,0x1c,0x2a,0xe7,0xe9,0x7a,0xb0,0x8e,0x66,0x6f,0x54,0x71,0x76,
    0x6f,0xc0,0xdf,0xcf,0x65,0x20,0x7b,0xfd,0x26,0xce,0x43,0x67,0xf8,0x24,0xe6,0x66,
    0xf0,0xa5,0x2e,0x46,0xec,0x5b,0x98,0x27,0x78,0x1f,0x57,0x81,0xb6,0x60,0x1a,0xdf,
    0x95,0x1a,0x88,0xaf,0x18,0x5b,0xf8,0xbb,0x71,0x5f,0x16,0x71,0x86,0x92,0xf4,0xb2,
    0x07,0x78,0x8d,0x8b,0xc9,0xf6,0x79,0xa5,0x30,0x39,0x47,0x3f,0x3b,0x8e,0x24,0xba,
    0x7f,0x73,0xf1,0xbd,0xb8,0x5f,0x93,0xd4,0xbd,0x37,0xdc,0x52,0x87,0x52,0x6a,0xdd,
    0x13,0x6e,0xe9,0x7b,0x5f,0xf0,0x85,0xd8,0xfd,0xc0,0x74,0x4e,0x7f,0x33,0x47,0xf4,
    0xf6,0x27,0xe6,0x57,0xc7,0xad,0x6b,0x24,0x8d,0xfe,0x5b,0xd1,0x3f,0xc0,0xe8,0xbf,
    0x0d,0x5c,0xf5,0x0f,0x04,0x53,0xfd,0x83,0x8d,0xfe,0x81,0xfe,0xbe,0x0f,0x3c,0x26,
    0xdc,0x83,0x8c,0x96,0xdb,0xd1,0x32,0xc4,0xe8,0xbf,0x03,0x5c,0xf5,0x0f,0x05,0xd3,
    0x39,0xc3,0xcc,0x1c,0xd1,0x3f,0x8c,0x18,0xd1,0xaf,0x6b,0x0c,0x36,0xfa,0x47,0xa0,
    0x7f,0xb8,0xd1,0x3f,0x12,0x5c,0xf5,0xdf,0x09,0xa6,0xfa,0xcb,0x8c,0x7e,0xf1,0x8d,
    0x72,0xa3,0x0c,0xee,0x51,0xa6,0xef,0xa3,0xd1,0x22,0xfb,0x4e,0xec,0x31,0x60,0xa3,
    0xcd,0x7d,0xa4,0x7b,0x62,0x0c,0x1a,0x95,0xa7,0x0c,0x1e,0xb9,0xa3,0xee,0xe5,0x7e,
    0xd2,0x3d,0x79,0x1f,0x9a,0xcb,0xcd,0x5a,0x13,0xc0,0xd5,0x9e,0xc8,0xda,0x8b,0xd9,
    0xa3,0x15,0xc4,0x4c,0x84,0x47,0xee,0xb0,0xc9,0xf0,0x4c,0x32,0xf5,0x9d,0x02,0x3e,
    0xc1,0x69,0x96,0x3b,0xf5,0x01,0xd6,0xaf,0xe0,0x7e,0x99,0x82,0xe6,0xb1,0xf8,0xb4,
    0x8e,0x0f,0xc2,0x35,0xd5,0xd4,0x71,0x1a,0xb8,0xd6,0xf1,0x21,0x30,0xad,0xe3,0x0c,
    0x53,0x47,0xf1,0x4d,0x77,0x63,0x3e,0xf9,0x4f,0x87,0x5b,0xee,0xce,0x87,0xb9,0x23,
    0x2a,0x0d,0xf7,0x4c,0xf0,0x24,0xef,0x84,0x59,0xc4,0x8c,0x70,0xb7,0x9e,0xdc,0xaf,
    0xb3,0xc1,0x66,0x99,0x33,0x1e,0xf1,0x7d,0x8c,0x7b,0xff,0x1c,0x38,0x74,0x2c,0x77,
    0x6b,0x09,0x3e,0x97,0xb9,0x73,0x0c,0xf7,0xa3,0x69,0xee,0xfa,0xde,0x9e,0x07,0x36,
    0x97,0x7b,0x2f,0x93,0xbb,0x3f,0x6a,0x6a,0x33,0x8f,0x7e,0xce,0x20,0x9f,0xf9,0xa6,
    0x56,0x8f,0x51,0xab,0x05,0x26,0x9f,0xc7,0xc1,0xb5,0x56,0x4f,0x80,0x69,0xad,0x16,
    0x9a,0x5a,0x89,0xaf,0xda,0x9f,0x81,0x14,0x77,0xb5,0xa9,0xd5,0xa2,0x2b,0xd4,0x6a,
    0x31,0xf8,0x2e,0xb8,0x97,0x80,0xf5,0x44,0xa3,0xf2,0xc8,0xf3,0x27,0xd7,0xf7,0x6c,
    0x7f,0xb7,0xa5,0x34,0xcc,0x27,0xbe,0x1a,0x1d,0xcb,0x8d,0x0e,0x89,0x59,0xe6,0x6b,
    0x97,0x9a,0xbf,0xcc,0xe8,0x78,0xf2,0x0a,0x3a,0x9e,0x02,0xd7,0xba,0xae,0x08,0xf5,
    0x6c,0x25,0xd8,0x8a,0x7f,0xe9,0xd9,0x2a,0x38,0xfe,0x1e,0xa9,0x9e,0xad,0x66,0xee,
    0x2a,0xc3,0xfd,0x74,0xa8,0x67,0x6b,0xc0,0x56,0xff,0x47,0xcf,0xd6,0x50,0x0f,0xcd,
    0x67,0x79,0xa8,0x87,0x33,0x0c,0xff,0xb3,0xf0,0xcf,0xe4,0x1d,0xf3,0x1c,0x98,0x70,
    0xad,0xc5,0xd6,0xf7,0xcf,0x0b,0xbc,0xd3,0x46,0xba,0xda,0x8a,0xbd,0x8e,0xf7,0xb9,
    0x1d,0x2b,0x9d,0x22,0xf1,0xad,0x27,0x7e,0x9d,0xe1,0x5a,0x6f,0xf6,0xce,0x8b,0xec,
    0x9d,0x0d,0xa6,0xae,0x2f,0x81,0xeb,0xde,0x79,0x19,0x4c,0xf7,0xce,0x26,0xd3,0x33,
    0xf1,0x6d,0x94,0xef,0xaf,0xe4,0xb4,0x11,0x6e,0x79,0x5f,0xbe,0x82,0x4e,0x7d,0x5f,
    0x48,0x7d,0x5e,0x05,0x17,0x2d,0x9b,0xb1,0x7b,0xb8,0x78,0xf1,0xbd,0xc6,0xef,0x83,
    0xcd,0x86,0x63,0x8b,0xe1,0x90,0x39,0x5b,0x88,0x53,0xff,0xeb,0xf8,0x87,0x98,0x35,
    0xde,0x00,0x97,0xf8,0xad,0xd8,0xba,0xc6,0x9b,0xac,0xb1,0xd5,0x70,0x6c,0x33,0x1c,
    0x32,0x67,0x1b,0x71,0xea,0x7f,0x0b,0xff,0x0e,0xb3,0xc6,0xdb,0xe0,0x12,0xbf,0x1d,
    0x5b,0xd7,0x78,0x87,0x35,0xb6,0x1b,0x8e,0x9d,0x86,0x43,0xe6,0xec,0x24,0x4e,0xf6,
    0x83,0xd6,0x6e,0x93,0xe9,0xcb,0x2e,0xfa,0x52,0x63,0xfa,0xf2,0x2e,0xb8,0xf6,0xa5,
    0x16,0x4c,0xfb,0xb2,0xc7,0xf4,0x45,0x7c,0xbb,0xdd,0xd8,0x0f,0xf7,0x6e,0xb3,0x7f,
    0xf6,0xa2,0x45,0xbf,0xbf,0xec,0x03,0xdb,0x6b,0xbe,0x73,0x69,0xec,0x7b,0xe9,0xd8,
    0xfa,0xde,0x7e,0x1f,0x6c,0x9f,0xd9,0xf7,0x11,0xb3,0xef,0xd7,0x12,0x23,0x79,0xed,
    0x61,0xed,0xfd,0x26,0xaf,0x0f,0xc8,0xeb,0x80,0xc9,0xeb,0x20,0xb8,0xe6,0xf5,0x21,
    0x98,0xe6,0x75,0xd8,0xe4,0x25,0xbe,0x43,0x6e,0x1c,0x83,0xfb,0x90,0xa9,0xf1,0x11,
    0xb4,0x56,0x9a,0x3e,0x7d,0x04,0xae,0x31,0x47,0x43,0xfb,0xe9,0x28,0x31,0xa2,0xf7,
    0x30,0x9c,0xc7,0xcc,0x3b,0xed,0x63,0xf4,0x9e,0x30,0xef,0xb4,0x4f,0xc0,0x65,0xfe,
    0x71,0x6c,0xf5,0x7d,0xca,0xf7,0xc5,0x53,0x6e,0xbe,0xd8,0x9f,0x81,0x4d,0x32,0xf9,
    0x9d,0x04,0x2f,0x27,0xbf,0xd3,0x26,0xbf,0x93,0x7e,0x6e,0xe0,0x31,0xd1,0x72,0xca,
    0x68,0x3f,0x13,0xda,0xa7,0x67,0xf8,0x9e,0x2d,0xda,0x35,0xfe,0xb4,0xd1,0xf2,0x45,
    0x48,0xcb,0x97,0x60,0x25,0x46,0xcb,0x57,0xe0,0xaa,0xe5,0x9c,0xd1,0x22,0xbe,0xb3,
    0x6e,0x9c,0x83,0xfb,0xac,0xd1,0x72,0x3e,0xb4,0x9f,0xcf,0x1b,0x2d,0x1a,0x7f,0xce,
    0x68,0xf9,0x3a,0xa4,0xe5,0x1b,0xb0,0x1a,0xa3,0xe5,0x5b,0x70,0xd5,0x52,0x67,0xb4,
    0x88,0xef,0x82,0x1b,0x75,0x70,0x5f,0x30,0x5a,0x2e,0x9a,0xbe,0x8b,0x96,0x8b,0xfc,
    0xde,0x10,0x2d,0x1a,0x5f,0x17,0xea,0xf1,0xe1,0xd0,0x1e,0xdd,0x63,0xf6,0xfc,0xf7,
    0xf0,0x09,0xd7,0x65,0xec,0xdf,0xdd,0xdb,0xa3,0xbb,0x1b,0x25,0x9c,0xf1,0x2c,0xb4,
    0xc9,0x6f,0xa2,0x6e,0x2e,0x2e,0xc1,0xef,0x21,0xe1,0x6a,0x60,0xf6,0x5f,0x43,0xf0,
    0x23,0xe4,0xd8,0x18,0xac,0x11,0x39,0x36,0x31,0x39,0x36,0xe6,0xff,0x36,0xcd,0xe0,
    0xc9,0x31,0x3c,0x57,0xc1,0xb3,0x92,0xf5,0x73,0xc1,0xe4,0x7f,0x0d,0x7f,0xb8,0xd8,
    0x5c,0xe6,0x34,0x33,0x73,0x9a,0x33,0x67,0x09,0x73,0x5a,0x82,0xb5,0x30,0x3c,0xd7,
    0x80,0xe7,0x79,0x5d,0x09,0x8f,0xb5,0xe6,0x5d,0x99,0x87,0xbf,0x15,0x6b,0xb4,0x66,
    0x0d,0xd1,0xfc,0x27,0xf5,0xf8,0x0b,0x56,0x7a,0xe2,0x6c,0x18,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
