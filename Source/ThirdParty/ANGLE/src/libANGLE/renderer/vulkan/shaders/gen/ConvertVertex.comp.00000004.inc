// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x57,0x6b,0x68,0x97,0x65,
    0x14,0x7f,0xcf,0xb3,0x39,0x6f,0x4b,0x9d,0x4e,0xd3,0xcc,0xb5,0xb9,0x59,0x73,0x5b,
    0x6e,0xd6,0x32,0xf3,0xb2,0xb5,0x0f,0x6a,0x86,0x60,0x16,0x65,0xf4,0x2d,0x5c,0x8e,
    0x02,0x4b,0x28,0x48,0x4a,0x63,0x5e,0xb0,0xf9,0xa5,0x9b,0x51,0x41,0x37,0x49,0x51,
    0x9a,0x5b,0xf3,0x9b,0x64,0xe6,0x70,0x18,0x99,0x25,0x84,0x92,0x60,0x16,0x92,0x43,
    0x48,0x24,0x2a,0xc6,0xba,0x68,0x66,0xe7,0xf7,0x3f,0xbf,0xe3,0xce,0x56,0x9f,0x1a,
    0x3c,0xbc,0xff,0xf3,0x3b,0x97,0xe7,0x77,0x2e,0xef,0xf3,0x3e,0xcb,0x4b,0xe5,0xc3,
    0xb3,0x4c,0xb2,0x51,0xd9,0x88,0xec,0xde,0x94,0xe5,0xfe,0x8a,0xb2,0xa4,0x48,0x96,
    0x8d,0xce,0x0a,0x72,0xcf,0x25,0xcb,0x1e,0x58,0x36,0xeb,0xe9,0x67,0x9a,0x67,0xd5,
    0xdf,0x51,0x07,0xfd,0x98,0x2c,0x2f,0x67,0x07,0xdd,0x58,0xb5,0x19,0xa6,0xcf,0x7c,
    0x5d,0x6b,0x1e,0x7d,0xfc,0x49,0xe0,0xc5,0xaa,0x18,0xa7,0x78,0x7e,0x2e,0x56,0x96,
    0xdd,0x4d,0x5b,0xac,0x7b,0xd4,0x7a,0x86,0x6d,0x93,0x95,0xf3,0xe9,0x98,0x10,0xcb,
    0x0f,0x58,0x22,0x36,0x22,0x60,0x79,0xc4,0x0a,0x03,0x96,0x4f,0x6c,0x5c,0xc0,0x86,
    0x11,0x2b,0x0e,0x58,0x01,0xb1,0xc9,0x01,0x1b,0x4e,0xec,0xc6,0x80,0x8d,0x20,0x56,
    0x1a,0xb0,0x91,0xc4,0x2a,0x02,0x36,0x8a,0x58,0x65,0xc0,0x46,0x13,0xab,0x09,0x58,
    0x21,0xb1,0xba,0x80,0x5d,0x47,0xac,0x3e,0x60,0x63,0x88,0xcd,0x45,0xdd,0x35,0x53,
    0xaf,0xc1,0x12,0xcd,0x70,0x15,0xf9,0x7b,0x7d,0x9a,0x87,0xd4,0x11,0xf6,0xcd,0xac,
    0x0f,0xec,0x57,0xeb,0x73,0xfa,0x35,0x9d,0xc9,0x65,0xac,0x33,0xe4,0x31,0x32,0x38,
    0xde,0x58,0xf9,0x77,0x3c,0x60,0x1e,0xaf,0x48,0x06,0xc7,0x83,0x5c,0x16,0x64,0xf4,
    0x7d,0x34,0xeb,0x08,0xf9,0x21,0xca,0x53,0x74,0x4d,0xd0,0x2c,0x52,0x6e,0xff,0xbc,
    0x5c,0x3c,0xfc,0x9e,0xa8,0x36,0x05,0xac,0x31,0xfe,0x26,0xa9,0xa6,0x88,0x72,0x89,
    0xfe,0xf2,0x7e,0xfd,0xdf,0x55,0xaa,0xf1,0x6f,0x66,0xdf,0x10,0x6b,0x3e,0xe5,0x5b,
    0x88,0x61,0xff,0x4a,0xee,0x87,0xd4,0xab,0x29,0xcf,0x0c,0xfe,0x55,0xb4,0x2d,0x08,
    0xfa,0x5a,0xce,0x96,0xcb,0xf5,0xcc,0xa7,0x9a,0xf9,0x2c,0x60,0x4d,0x5d,0x6e,0xe0,
    0x3c,0xb9,0xfd,0xa2,0x21,0xf2,0x72,0xda,0x17,0x6b,0x94,0xfb,0x83,0xdf,0x83,0xec,
    0x25,0x64,0xd4,0xe5,0x11,0xd6,0x69,0x9a,0xa2,0x3e,0x0b,0x25,0xec,0xf9,0x2a,0xf2,
    0x7d,0x8c,0x5c,0x9a,0x99,0x2f,0xe4,0xd5,0x81,0x1f,0xf6,0x6b,0x61,0x1c,0xd8,0x3f,
    0x41,0x5d,0xcc,0x6f,0x0d,0x67,0xd3,0x79,0xac,0xa5,0xbd,0xeb,0x9f,0xe5,0xdc,0xbb,
    0xbc,0x21,0xf0,0x84,0xfc,0x82,0xae,0xab,0x79,0x03,0xf2,0x46,0xce,0xb5,0xc7,0x6b,
    0x0b,0xfe,0x90,0xb7,0x0f,0xa9,0xdf,0x2e,0xf6,0xc4,0xfd,0xdb,0x11,0x4f,0xff,0x5c,
    0xee,0x18,0xd2,0xaf,0x83,0x7c,0xbf,0xdc,0xff,0x78,0xd0,0xa3,0x6e,0x17,0x73,0xec,
    0x5b,0xbb,0xdd,0xbe,0x8f,0x3d,0x75,0xf9,0x0a,0xcf,0x8d,0xeb,0x55,0x4e,0x62,0x67,
    0x56,0x62,0x9d,0xfd,0x1d,0x29,0xe1,0xbb,0x00,0x19,0x75,0x1b,0x27,0x66,0x03,0x6c,
    0x3e,0xe5,0x22,0x62,0x88,0x33,0x9e,0x7e,0x79,0xac,0xf3,0x04,0x31,0x4e,0xe3,0x69,
    0x0f,0xb9,0x98,0x18,0xf4,0x13,0xf9,0x3b,0xf6,0x61,0x16,0xdf,0x9f,0x6b,0xf3,0x20,
    0x76,0x96,0xd6,0xa8,0x84,0x38,0x78,0xbf,0x80,0x1d,0x67,0xce,0x73,0x74,0x2a,0x13,
    0x67,0x29,0xe3,0xde,0x7f,0x28,0x82,0x59,0xfd,0x5d,0xa5,0x95,0x7c,0xbf,0x2f,0xeb,
    0x6f,0xf4,0xf4,0x61,0x31,0x3d,0x9e,0x4d,0x6a,0x05,0x0e,0x25,0xe4,0x05,0xfd,0x42,
    0xee,0x7b,0x13,0x71,0xd8,0xe0,0x7d,0x28,0x15,0x7b,0x87,0x5a,0x82,0x4d,0x99,0x18,
    0xfe,0x91,0xda,0x60,0x86,0xa7,0x8b,0xf9,0x01,0xc7,0xde,0x15,0xdc,0xfb,0x92,0xda,
    0x43,0x57,0xae,0xab,0x82,0xfb,0xe3,0xf7,0x9f,0xfa,0x5c,0x49,0xb9,0x82,0x72,0x25,
    0x65,0x3c,0xfb,0xf5,0x94,0xc6,0x3e,0x4b,0x93,0x71,0x83,0xcd,0x72,0x5d,0xd5,0x41,
    0x57,0x17,0x74,0x2b,0xa8,0x73,0xce,0xb5,0xe4,0x8c,0x9a,0x3a,0xe7,0x3a,0x31,0x7c,
    0x1f,0x39,0xcf,0x16,0x8b,0x01,0xfc,0x37,0xbc,0xfb,0x8c,0xe1,0xbc,0xa1,0x9f,0xa9,
    0xab,0x8a,0xbc,0xf0,0x7b,0x8b,0xfa,0x22,0xd6,0x9d,0xcc,0x17,0xbe,0xad,0xc4,0xee,
    0x12,0xc3,0x11,0xd3,0x79,0xcc,0x27,0x8f,0x8e,0x50,0xbb,0x05,0x62,0xb8,0xd7,0x6e,
    0xa1,0x98,0xef,0x02,0xd6,0xae,0x31,0x70,0x80,0xae,0x41,0x57,0x23,0x39,0x34,0xb0,
    0x56,0xce,0xa9,0x91,0x3e,0xfd,0x43,0x7a,0xbd,0x8e,0xfa,0x75,0xa1,0x26,0xcf,0x91,
    0xcb,0xa2,0xc0,0xe5,0x79,0x31,0x7c,0x2b,0x73,0x58,0x4f,0x2e,0xc0,0xb7,0x11,0x6b,
    0x0d,0x98,0xc7,0xda,0xc4,0x58,0xcb,0x43,0xac,0xcd,0x62,0xb8,0xe7,0xb5,0x45,0xcc,
    0x77,0x73,0xa8,0xf9,0x56,0x62,0x38,0xeb,0xf6,0x10,0x7b,0x51,0xcc,0x76,0x2b,0x73,
    0xd9,0x16,0xf2,0x87,0xae,0x0d,0x5c,0x98,0x4f,0x1b,0xf3,0xef,0xa7,0xbc,0x2d,0x70,
    0xba,0x44,0x4e,0x33,0x03,0xa7,0xcb,0x62,0xb8,0xf7,0xed,0x2f,0xb1,0x1c,0x2f,0x07,
    0xbf,0xbf,0xe9,0x57,0x1b,0xfc,0xae,0x8a,0xe1,0xee,0x87,0x17,0x0d,0xbc,0xaf,0x86,
    0x7e,0x4b,0xb2,0x78,0x59,0xe8,0x77,0x4a,0x16,0xab,0x3e,0xc4,0xca,0x4b,0x86,0xbb,
    0x5f,0x7e,0x32,0x5f,0xe0,0x5e,0xf7,0x97,0xc4,0x70,0x7c,0x4b,0x9a,0x14,0xc1,0x39,
    0xfd,0xb2,0xd8,0x59,0xde,0x42,0xbd,0xc7,0x7b,0x45,0x4c,0xe7,0x7b,0xbe,0x4a,0xfe,
    0x6b,0xc2,0x9e,0xaf,0x89,0xe1,0x7b,0x59,0xe3,0xed,0x62,0xd8,0x5a,0x9e,0x0d,0x3d,
    0xa1,0xc6,0xd0,0xbd,0x8e,0x1e,0xb1,0xa6,0xf8,0xdd,0x4e,0xbf,0x37,0x42,0xbf,0x3e,
    0xd4,0xc8,0x38,0xa7,0xde,0x14,0xc3,0xeb,0xf9,0x6d,0x58,0xcf,0x3d,0xdf,0x12,0xd3,
    0xb9,0xdd,0xdb,0xb4,0xdb,0xc0,0x6f,0x84,0xdb,0xbd,0x23,0xa6,0x73,0xfe,0xef,0x92,
    0xff,0xc6,0xc0,0xff,0x3d,0x31,0xdc,0xf9,0xbf,0x2f,0x86,0x39,0xff,0xae,0xc0,0x1f,
    0xba,0x1d,0xba,0x76,0x92,0xff,0x8e,0xd0,0xb7,0x0f,0xc4,0xbe,0x3f,0xad,0x9c,0x9b,
    0x2e,0xda,0xec,0xe4,0xac,0x75,0x86,0x38,0xe0,0xba,0x5b,0xd7,0x1e,0xda,0xec,0xa6,
    0x4f,0x27,0x65,0xe0,0x9b,0x18,0xb7,0x5d,0xec,0x3b,0xd6,0x1a,0xf6,0xda,0x2b,0x56,
    0x83,0xf6,0x30,0x23,0x1d,0x62,0x38,0x6c,0x63,0xac,0xce,0x70,0x8e,0xdd,0xc6,0x73,
    0x0c,0xfb,0x75,0x70,0xff,0xc8,0xb5,0x2b,0xd8,0xd6,0x27,0xcb,0x09,0x39,0xc2,0xaf,
    0x93,0xb6,0x3d,0xb4,0xdd,0x17,0xde,0xdb,0x91,0x69,0x60,0xa6,0x9c,0xe3,0xa8,0x64,
    0x78,0x43,0xc0,0xf6,0x73,0xae,0x1b,0xb2,0x81,0xbe,0x7f,0x2c,0x86,0xef,0x62,0xbd,
    0xbb,0x43,0x9d,0xa0,0x3b,0xa0,0xeb,0x13,0xee,0x79,0x80,0x1c,0xba,0x29,0x03,0x3f,
    0xa2,0x71,0x30,0x03,0x9f,0x8a,0x9d,0x7d,0xfb,0x59,0x3b,0x60,0x87,0x64,0x00,0x8f,
    0x7e,0xdd,0xcc,0x13,0x36,0xb3,0x93,0xdd,0x03,0x10,0xfb,0x10,0xf7,0xf2,0xf9,0x39,
    0x2c,0xa6,0x8f,0x79,0xf7,0x84,0x1a,0xcd,0x4b,0xd6,0x87,0x2e,0xe6,0xd0,0x1d,0x74,
    0x73,0x92,0xcd,0x1f,0x74,0x87,0x87,0xe8,0x6e,0x4f,0x56,0x5f,0xe8,0x50,0xa7,0xee,
    0xf0,0x1e,0x1c,0xfd,0x8f,0x73,0xeb,0x0b,0x9e,0x5b,0x47,0x39,0x4b,0x27,0x43,0x8d,
    0xa0,0x3b,0x86,0x6f,0x35,0xf9,0x1d,0x0b,0xf3,0xfe,0x25,0xe7,0xfd,0x60,0x98,0xf7,
    0xaf,0xc4,0x70,0xe4,0x74,0x92,0x3e,0xf0,0xed,0x61,0x8f,0xbe,0x16,0x7b,0xef,0xc1,
    0xf1,0x73,0x62,0x27,0xc4,0xf0,0x39,0x69,0xb0,0xdf,0xc9,0x90,0x53,0x43,0xb2,0xd8,
    0xd8,0xff,0x04,0xf9,0xf8,0x59,0xfc,0x8d,0x58,0xad,0xbc,0xc7,0x17,0x02,0x7f,0xe8,
    0x4e,0xe9,0xba,0xc0,0x98,0xa7,0xc2,0xec,0x9f,0xa6,0x1f,0xee,0x20,0xde,0xe7,0x6f,
    0xd9,0xcf,0xd3,0xa1,0x4f,0x67,0xc4,0x70,0xe7,0xfb,0x9d,0x18,0x9f,0x33,0xe1,0xbd,
    0xfe,0x5e,0x0c,0xf7,0xf7,0xba,0x37,0x70,0x80,0xee,0xac,0xae,0x73,0xe4,0x70,0x36,
    0xcc,0xd5,0x0f,0x62,0xf3,0x31,0x8f,0xb9,0xf7,0xd2,0xe6,0x9c,0x0c,0x96,0x7b,0xc3,
    0x4c,0x35,0x26,0xf3,0x43,0x1c,0x9c,0xa9,0xe7,0x02,0xd7,0xf3,0x62,0xfa,0xcf,0xc8,
    0xf5,0x47,0x72,0x3d,0xcf,0x78,0x5e,0x87,0x0b,0xa1,0xb6,0x4d,0xc9,0x6c,0x50,0x6f,
    0xd8,0xf7,0x32,0x1e,0xf6,0xba,0x28,0xa6,0x7f,0x8a,0x77,0xd2,0x9f,0xc4,0x30,0xef,
    0xe7,0xcf,0xec,0x5b,0x47,0xee,0xbe,0x6d,0x36,0xbf,0x88,0xe1,0x6d,0x6a,0x03,0xf9,
    0x57,0x31,0x3f,0xe0,0x85,0xba,0x27,0xb0,0x3e,0xde,0x1b,0x2b,0xa9,0xbf,0x98,0x0d,
    0xfe,0x1e,0xf6,0x93,0x1f,0x6c,0x17,0x25,0xfb,0x1f,0x02,0xdf,0xcc,0x3e,0xf6,0xd2,
    0x67,0x70,0x02,0xbf,0x53,0x7d,0x61,0x06,0x8b,0x93,0xe1,0x3e,0xf3,0x13,0x93,0x61,
    0xdb,0xd9,0x9b,0x19,0x69,0xa0,0x37,0xd0,0x4d,0xd2,0x55,0x96,0x6c,0xdf,0x49,0x61,
    0x2e,0x27,0x27,0xbb,0x2f,0x1c,0x0f,0xe7,0xc9,0x94,0x64,0xf8,0xda,0xf0,0x1d,0xb9,
    0x21,0x19,0xde,0xc2,0x3b,0xb9,0xf7,0x62,0x6a,0x32,0xdd,0x7d,0xb8,0xdf,0x6a,0x9c,
    0x69,0x69,0x20,0x97,0x42,0xb5,0xc8,0xdd,0xcf,0x93,0xd5,0x61,0x5e,0x66,0xfa,0x23,
    0xdc,0xbb,0x34,0x99,0x6e,0x2a,0xe7,0x62,0x06,0xf9,0x81,0xa7,0xf7,0xa6,0x9c,0xf1,
    0x7c,0xbf,0x8a,0x64,0x58,0xb4,0xc7,0xd3,0xfb,0xbc,0x38,0x59,0x5c,0xe4,0x58,0xc1,
    0x9c,0x7d,0x4e,0x70,0x27,0xc5,0x1d,0x75,0x31,0xfd,0xab,0xd9,0x87,0xea,0xf0,0x0d,
    0x58,0xc1,0x3b,0xa1,0x9f,0x77,0x7e,0xcf,0xad,0x0a,0xfd,0xa8,0x62,0x3f,0x36,0x84,
    0x7e,0x54,0x27,0xc3,0xfd,0x8e,0x50,0x93,0x0c,0xc3,0x79,0xee,0xb1,0x6f,0x4d,0x76,
    0x0f,0xad,0x49,0x03,0xf7,0x86,0xda,0x64,0xff,0x9b,0xb4,0x50,0xdf,0xa0,0xbd,0x03,
    0xb6,0x34,0x0d,0xbe,0x77,0xe3,0x79,0x45,0xab,0x38,0x57,0xd7,0x3f,0x62,0x3b,0x7a,
    0x37,0x18,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//     int valueAsInt = int(valueAsUint);
//           float value = float(valueAsInt)/(valueMask >> 1);
//     value = max(value, float(- 1));
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
