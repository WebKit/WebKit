// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x6c,0x55,0x55,
    0x14,0x86,0xf7,0xb9,0xb7,0xbd,0x2d,0x5c,0xaa,0x05,0x4a,0x4b,0xd3,0x42,0x0b,0x05,
    0x7c,0x11,0x42,0x52,0x35,0x26,0x46,0xa2,0x23,0xc5,0xd0,0xa8,0x65,0xc0,0xa4,0x89,
    0x35,0xb1,0x03,0x07,0xc5,0x10,0x4d,0x07,0x0c,0x2c,0x91,0x49,0x07,0xc4,0xa4,0x13,
    0x03,0x0c,0x14,0xc4,0xe0,0xa3,0x84,0xa8,0x11,0x15,0x99,0xa1,0xe2,0x8b,0x68,0xaa,
    0x12,0x4d,0xd5,0xc6,0x26,0x3e,0x48,0x13,0x25,0x4d,0x2c,0xd6,0x47,0x53,0xd7,0x7f,
    0xce,0xb7,0x60,0xe5,0xde,0x64,0xf5,0x9c,0xf5,0xff,0x6b,0xaf,0x7f,0xaf,0xb5,0xd7,
    0x3e,0x2d,0x97,0x7a,0x1a,0x52,0xca,0xd2,0xf2,0xd4,0x98,0x6e,0xca,0x52,0xfe,0x5b,
    0x99,0x4a,0x49,0xaf,0xd5,0x54,0xc9,0x9f,0xf7,0xef,0xda,0xbd,0x6b,0xdb,0x53,0x4f,
    0x3f,0xbe,0xed,0xf6,0x3b,0xb6,0x8b,0xbf,0x21,0x95,0xf3,0x38,0x71,0x37,0x9a,0x57,
    0x67,0x4f,0xd9,0xf0,0x63,0x4f,0xec,0x15,0xde,0x6a,0xb6,0xdb,0x6c,0xc0,0x6c,0x48,
    0xb8,0xd9,0x88,0xd9,0xa8,0xd9,0x98,0xd9,0xb8,0x59,0xb3,0xe5,0xd0,0x9a,0x06,0xe5,
    0xb7,0xb7,0xd6,0x5c,0x4f,0xf9,0x52,0x7a,0x20,0xd5,0xa7,0xce,0x62,0x2b,0xa9,0x87,
    0xa7,0x63,0x19,0x58,0x63,0xc0,0x4a,0x60,0xcd,0x01,0x2b,0x83,0xad,0x0d,0x58,0x1d,
    0x58,0x67,0xc0,0xea,0xc1,0xba,0x03,0x56,0x01,0xdb,0x14,0xb0,0x06,0xb0,0x9b,0x03,
    0xd6,0x08,0xb6,0x35,0x60,0xcb,0xc0,0xb6,0xe7,0x75,0x95,0xaf,0xed,0x4f,0x35,0xaa,
    0x27,0xeb,0xa9,0x47,0xfe,0x00,0x7e,0x86,0x3f,0x84,0xef,0xf1,0xc3,0xf8,0x65,0xfc,
    0x11,0xfc,0x3a,0xfc,0x51,0xfc,0x7a,0xfc,0x31,0xfc,0x0a,0xfe,0x38,0xbe,0xf7,0xf8,
    0x84,0x3d,0x37,0x06,0x7d,0xf9,0x1b,0xf0,0x57,0x9b,0x6a,0x29,0xf7,0xcb,0xb9,0x9e,
    0xde,0xd7,0x58,0x4c,0x85,0xde,0x68,0x8f,0x6d,0xe6,0x37,0x90,0xbf,0x84,0x5f,0xc5,
    0xaf,0xcb,0xcf,0xbd,0x6c,0x79,0x8a,0x78,0x71,0x2d,0x79,0xde,0x82,0xeb,0xb6,0xbf,
    0x6b,0xc8,0x23,0xfc,0x6e,0xfc,0xd6,0x90,0xbb,0x8d,0x78,0xd7,0xee,0x20,0x57,0xca,
    0xeb,0x58,0x71,0xed,0x1c,0xda,0xb0,0x0a,0xb6,0x9a,0x67,0x47,0x30,0xe9,0xad,0xe3,
    0x3c,0x3a,0xd1,0x5b,0x47,0x3f,0x84,0xdd,0x46,0x6d,0x5d,0xe4,0x57,0x7c,0x37,0x5c,
    0x43,0xe0,0x37,0xe3,0x8b,0xdf,0x02,0xdf,0x91,0xd7,0x50,0x4a,0xb7,0x10,0x27,0xff,
    0x56,0xf2,0xf8,0xba,0x5e,0xe6,0xc3,0xfd,0x1d,0x35,0xba,0x3b,0xd9,0xb3,0xf2,0x3e,
    0x08,0x57,0x09,0x7c,0x1f,0x7d,0x11,0xdf,0xcf,0x0c,0x54,0xa9,0xa3,0x9f,0xfb,0x55,
    0x0e,0xf1,0x7b,0xe8,0x9b,0xf3,0x03,0x35,0xfc,0x20,0xe7,0xe0,0xfc,0x10,0xbc,0xfb,
    0xc3,0x35,0xf1,0xfb,0xb8,0x4f,0xce,0x8f,0xd4,0xf0,0xfb,0x39,0x1b,0xe7,0x47,0x6b,
    0xf8,0x83,0x66,0xf7,0x06,0x7e,0xac,0x86,0x3f,0x64,0x76,0x20,0xf0,0xe3,0xf0,0x5b,
    0xad,0xdb,0xaa,0xf3,0x79,0xce,0x26,0x5a,0xbb,0x75,0xe9,0x38,0x7d,0xe2,0x53,0x95,
    0x3f,0xb3,0xe0,0xab,0x5f,0x2f,0xf1,0x7e,0x9c,0xfc,0xf2,0x4f,0xd4,0x9c,0xcf,0x49,
    0xf4,0x34,0x77,0xaf,0x91,0x33,0xee,0xef,0x0c,0xf7,0x4a,0xf9,0xde,0xe1,0x7c,0x34,
    0x67,0x77,0x1a,0x5a,0xa2,0x97,0x89,0x35,0x0b,0x86,0x28,0xf6,0x1e,0x66,0xfe,0x3c,
    0x73,0xfd,0x90,0xd5,0xa2,0x39,0xfd,0x00,0xec,0x7c,0xd8,0xf3,0x5e,0xee,0xd2,0x87,
    0xf0,0xf7,0x59,0x06,0xf5,0xf3,0x23,0x66,0xb4,0x8b,0x7c,0x8a,0xb9,0x00,0xfe,0xac,
    0xc5,0xc8,0xff,0x84,0x75,0x17,0x58,0xa7,0xb9,0xfc,0x94,0x75,0x9b,0x59,0xa7,0x99,
    0xfc,0x0c,0x7c,0xc2,0x62,0x34,0xab,0x9f,0x83,0x69,0x56,0xff,0xb2,0x9d,0x4f,0xb2,
    0x9f,0x7f,0x2c,0x5e,0xdc,0x45,0xb3,0x49,0xea,0xd1,0xfb,0x23,0xb6,0x4e,0xbd,0xf8,
    0x02,0x4d,0xfd,0x9e,0xa1,0x3f,0x5f,0x82,0xf7,0x9b,0xa7,0x3d,0xad,0xcf,0x0a,0xcc,
    0xe3,0xfe,0xb6,0x1c,0x9e,0x4b,0xcf,0x79,0x8b,0x52,0xdc,0xc6,0xac,0x88,0xa9,0x67,
    0xcd,0xc5,0x50,0xc3,0x57,0xd4,0xd0,0x1b,0x6a,0xf8,0x1a,0xdc,0x6b,0xf8,0x06,0xcc,
    0x6b,0x98,0x0a,0x35,0x88,0xbb,0x64,0x36,0x85,0xee,0xa5,0x50,0xc3,0xb7,0x68,0x67,
    0xa1,0x86,0xef,0xc0,0xbd,0x86,0x0d,0x59,0x81,0x79,0x9c,0x6a,0xf0,0x5c,0x53,0xa1,
    0x86,0x9e,0xac,0x88,0x99,0x64,0xcd,0xa5,0x50,0xc3,0xf7,0xd4,0xb0,0x23,0xd4,0xf0,
    0x03,0xb8,0xd7,0xf0,0x23,0x98,0xd7,0x30,0x13,0x6a,0x10,0x37,0x6d,0x36,0x83,0xee,
    0x34,0x73,0x24,0xdd,0x9f,0xd0,0xee,0xc9,0xae,0xcf,0xbb,0xf6,0xe8,0xb1,0x33,0x61,
    0x8f,0x9b,0x88,0x9b,0x62,0xdd,0x34,0xb1,0x87,0x89,0x3d,0x4c,0xac,0xee,0xda,0x96,
    0xac,0xb8,0x6f,0x5a,0xff,0x86,0xd9,0x11,0xb8,0xfc,0xfb,0x97,0x15,0xb3,0x28,0xee,
    0x2d,0x38,0xd5,0xaa,0x6f,0xd6,0x0b,0xd4,0x3a,0x48,0xad,0x8a,0x7f,0x11,0xfc,0x4d,
    0x6a,0x3d,0x46,0x0e,0xe1,0x57,0x2d,0xe6,0x28,0x39,0xbc,0xde,0x63,0xf8,0x47,0xd9,
    0xd7,0x11,0x72,0xe9,0xee,0xbe,0xcc,0xbd,0x75,0xbd,0x57,0xd0,0x3b,0x19,0xf4,0x5e,
    0x05,0xf7,0x73,0x7e,0x9d,0xda,0x53,0xc0,0x26,0xc0,0x04,0x3f,0x6c,0x88,0xee,0xfb,
    0x29,0x62,0x27,0xc8,0xf1,0x28,0xbd,0x38,0x8d,0xee,0x29,0xbe,0x5f,0xda,0xfb,0x01,
    0xcb,0x53,0xa5,0x37,0xea,0xd5,0xe9,0x54,0x60,0x15,0x7a,0xa2,0x98,0xbe,0x9a,0xfe,
    0xaa,0x9e,0x27,0xf9,0x1e,0xbc,0xcd,0x3a,0xd5,0xa1,0x6f,0xc9,0xbb,0xd4,0x71,0x86,
    0x3a,0xf4,0x5d,0x79,0x0f,0xfc,0x39,0x8b,0xd1,0x9a,0xb3,0xac,0x13,0xbe,0xc2,0x94,
    0x84,0xbd,0x1f,0xbe,0x75,0x67,0xf9,0x86,0x68,0x5f,0xe7,0xe0,0xbc,0x4f,0x3f,0x93,
    0x7f,0x67,0xe8,0xd3,0x2f,0xe0,0x1f,0xb3,0xef,0x5f,0xc1,0xfa,0xc2,0x5c,0xfe,0x06,
    0xde,0xc5,0x5c,0xce,0x86,0x73,0x12,0x77,0xd9,0x6c,0x96,0xfa,0x2e,0xe7,0x33,0x5e,
    0xce,0xff,0x0f,0x9d,0xa3,0x76,0xe7,0x66,0x83,0xce,0xef,0xe8,0xec,0x09,0x3a,0x7f,
    0x80,0xbb,0xce,0x5c,0xd0,0x11,0x77,0xc5,0x6c,0x8e,0x5c,0x57,0xd0,0x19,0x08,0x3a,
    0xce,0xcd,0x05,0x9d,0x3f,0xd1,0x19,0x0c,0x3a,0xf3,0xe0,0xae,0xb3,0x10,0x74,0xe6,
    0xf3,0x79,0x4c,0x39,0xa6,0x5c,0x57,0xd1,0x19,0x0a,0x3a,0xce,0x2d,0x04,0x9d,0x7f,
    0xd1,0xe9,0x0d,0x3a,0xff,0x81,0xbb,0xce,0x52,0xd0,0x11,0xb7,0x68,0xb6,0x44,0xae,
    0x45,0x74,0x86,0x83,0x8e,0x73,0x4b,0x41,0xa7,0x94,0x15,0x3a,0xfb,0x82,0x4e,0x39,
    0x2b,0x70,0xd7,0xa9,0x64,0xd7,0x75,0xc4,0xd5,0x99,0x09,0x53,0x2e,0xbd,0x4b,0x67,
    0x24,0xe8,0x38,0xa7,0xa7,0xeb,0x2c,0x43,0x67,0x7f,0xd0,0x59,0x9e,0x15,0xb8,0xeb,
    0x34,0x05,0x1d,0x71,0x55,0xb3,0x26,0x72,0x55,0xd1,0x19,0x0d,0x3a,0xce,0x35,0x05,
    0x9d,0x66,0x74,0x0e,0x06,0x9d,0x95,0x59,0x81,0xbb,0x4e,0x4b,0xd0,0x11,0xb7,0xca,
    0xac,0x85,0x5c,0xab,0xd0,0x19,0x0b,0x3a,0xce,0xb5,0x04,0x9d,0x36,0x74,0x0e,0x05,
    0x9d,0xb5,0x59,0x81,0xbb,0x4e,0x47,0xd0,0x11,0xd7,0x6e,0xd6,0x41,0xae,0x76,0x74,
    0xc6,0x83,0x8e,0x73,0x7a,0x2e,0xda,0xed,0xbb,0xcb,0xec,0x7f,0xc3,0x14,0x97,0x77,
    0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMSArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
