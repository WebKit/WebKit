// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000019.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000019[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0xe4,0x21,0xa2,0x84,0x8a,0x25,0x4a,0x96,0x18,
    0x62,0x81,0x91,0x40,0x49,0x46,0x92,0x51,0x0a,0x9a,0x95,0x50,0x46,0x92,0x8f,0x42,
    0x2a,0x31,0xd3,0x24,0x14,0x53,0xb4,0xb4,0x92,0xf2,0xd1,0x4b,0xac,0x44,0x2b,0x41,
    0xeb,0xbf,0xe8,0x2f,0x6a,0x7a,0xcc,0x34,0xd3,0x5e,0xe7,0xfe,0x16,0xf3,0xcd,0x1d,
    0x2b,0x66,0xf6,0xdc,0xb3,0xbe,0xb5,0xf6,0xb7,0xbf,0xb5,0xd6,0x3e,0xeb,0x90,0x4c,
    0x2c,0x4b,0x47,0x51,0x4e,0x54,0x18,0xe5,0x47,0xbf,0x44,0x99,0xbf,0xb9,0x51,0x22,
    0x20,0x51,0x54,0x14,0xa5,0xe2,0xdf,0x8d,0x5d,0x5b,0xbb,0xea,0x87,0x0f,0x0e,0xd4,
    0x37,0x36,0x35,0x98,0xbf,0x24,0x4a,0xc6,0x71,0xe6,0x2b,0x8d,0xd2,0x51,0x6e,0xf8,
    0xb5,0xb5,0xbf,0x7f,0xdf,0x90,0xe1,0xc5,0x61,0xdd,0x0e,0xab,0x2c,0xc4,0x19,0x9e,
    0x36,0x8e,0xf0,0x54,0x1c,0x73,0xda,0x9e,0x28,0xea,0x8c,0xf2,0xa2,0x79,0x9c,0xb7,
    0x8c,0x5f,0xc7,0x72,0xc0,0xf2,0x05,0x4b,0x80,0x95,0x09,0x96,0x04,0xab,0x10,0x2c,
    0x17,0xec,0x2e,0xc1,0xf2,0xc0,0x16,0x0b,0x96,0x02,0xbb,0x47,0xb0,0x34,0xd8,0x72,
    0xc1,0xf2,0xc1,0xee,0x13,0xac,0x00,0x6c,0x95,0x60,0x85,0x60,0x0d,0x82,0x15,0x81,
    0x35,0x0a,0x36,0x07,0xac,0x59,0xb0,0x62,0xb0,0xd6,0xb8,0x4e,0xc9,0xd9,0x7c,0xad,
    0x66,0x1b,0xc2,0x6f,0x0d,0xf5,0x71,0x7b,0xa9,0xd8,0x56,0xe7,0x25,0xd8,0xf3,0xc2,
    0xae,0x44,0xec,0x4f,0xc6,0xb5,0xb1,0xe7,0xf9,0x21,0x26,0x45,0x9e,0x56,0xd7,0xca,
    0x60,0xa7,0xc9,0x3f,0x11,0xe3,0xb9,0x71,0x8e,0x69,0xd6,0x82,0xb0,0xb3,0x90,0x78,
    0x8b,0x2d,0x22,0xb7,0x5c,0x62,0xe7,0xc0,0x63,0x78,0x0b,0x76,0xb1,0x70,0x97,0x10,
    0xef,0x67,0x97,0xc3,0x15,0xc5,0x3a,0xcb,0x66,0xeb,0xec,0x1a,0x6c,0x95,0xff,0xcf,
    0xf2,0x18,0x3b,0xbf,0x82,0xfa,0xcf,0xe3,0xfc,0x8a,0xf8,0x9c,0x0c,0x56,0x47,0xae,
    0x0b,0xd0,0x63,0xf1,0x95,0xf8,0xd2,0xe2,0xaf,0x96,0x7c,0x96,0xe0,0x2f,0x8f,0xef,
    0x51,0x22,0xae,0x6d,0x1d,0xba,0xbd,0xee,0x16,0x77,0xaf,0x68,0x76,0x9e,0x3a,0xee,
    0x96,0xc7,0xaf,0xe1,0x5c,0xf7,0xaf,0xa5,0x36,0x56,0x97,0x47,0x39,0xc3,0xcf,0x7d,
    0x0c,0x3e,0xc3,0xab,0x82,0x82,0x76,0xfc,0x39,0x9c,0x99,0xfd,0x6b,0x7b,0x1e,0xe7,
    0xb9,0x9d,0xdc,0xcd,0xde,0x00,0xe6,0x67,0x76,0x64,0xd9,0x9b,0x78,0x4f,0x6c,0xff,
    0xd3,0xe4,0x9a,0x42,0xd3,0xb3,0x3c,0x27,0x25,0xbe,0x87,0xde,0xb9,0xbd,0x5d,0x72,
    0x36,0x7d,0x7d,0xc2,0xf7,0x12,0x39,0x94,0xc3,0xf7,0x0a,0xcf,0xca,0xb7,0x97,0x18,
    0xf3,0x8f,0xc0,0xe5,0x35,0x78,0x1f,0xdf,0x88,0xc4,0x8f,0xf1,0xce,0xb9,0x7d,0x2e,
    0xab,0xb7,0x97,0x79,0x87,0x5c,0xcf,0x75,0xb9,0xc7,0xb7,0x38,0x7b,0x84,0xfa,0xdc,
    0x62,0x0e,0x25,0xe3,0x5e,0xe4,0xc5,0x71,0xb9,0xd4,0xc7,0xb0,0x3f,0x02,0x92,0x47,
    0x6c,0xbe,0xdc,0x13,0xb7,0x17,0x89,0x6d,0xfd,0x5a,0x2f,0xb6,0x69,0x1f,0x15,0xdb,
    0xee,0xc7,0x25,0xec,0x36,0xde,0x9b,0x52,0xfa,0xbf,0x39,0xa0,0x25,0xcc,0xae,0x52,
    0x96,0xf7,0x76,0x88,0xf7,0x71,0x2e,0xfe,0xf6,0xa0,0xa8,0x92,0xf9,0x35,0x9f,0xbb,
    0xdc,0x46,0x4c,0x15,0xf8,0x89,0x10,0x63,0xf6,0x42,0xf6,0x55,0xc5,0xf7,0x28,0x19,
    0xeb,0x5f,0x28,0xf1,0x8b,0xc9,0xc9,0x7c,0x8b,0xb0,0x8d,0xdf,0xee,0xfc,0xdd,0xf0,
    0x57,0x13,0xef,0xef,0xa9,0xe1,0xd3,0x21,0x66,0xa9,0xcc,0x47,0x7b,0x0f,0x7e,0x0f,
    0x1c,0xb5,0xe8,0xfe,0x2b,0xc4,0xfb,0x9c,0xac,0xa5,0x8e,0xcb,0xe1,0xb6,0x3a,0xac,
    0xa0,0x76,0x35,0x70,0xa7,0x98,0x9f,0x2b,0xe2,0x9a,0x65,0xec,0xfb,0xc1,0x7c,0xcf,
    0x4a,0xd9,0x63,0x7a,0x57,0x12,0xf3,0x67,0xe0,0xf6,0x33,0x6a,0x45,0xff,0x2a,0xf4,
    0xd7,0x89,0xfe,0x07,0xc0,0x5d,0x7f,0x3d,0x98,0xeb,0x6f,0x10,0xfd,0xe6,0x5b,0xcd,
    0xbc,0x36,0xee,0xd5,0xa2,0xe5,0x41,0xb4,0xac,0x11,0xfd,0x0f,0x81,0xbb,0xfe,0x46,
    0x30,0xdf,0xd3,0x24,0x7b,0x4c,0x7f,0x13,0x31,0xa6,0xdf,0xcf,0x68,0x10,0xfd,0x0f,
    0xa3,0x7f,0xad,0xe8,0x6f,0x06,0x77,0xfd,0x8f,0x80,0xb9,0xfe,0x16,0xd1,0x6f,0xbe,
    0x75,0xf1,0xdd,0xcb,0x70,0xaf,0x93,0xbe,0xb7,0xa2,0xc5,0xee,0x5d,0xe6,0x3e,0x66,
    0xb0,0x56,0x99,0x27,0x7e,0x27,0xda,0xd0,0xe8,0x3c,0x2d,0xf0,0xd8,0x8c,0x79,0x82,
    0xf9,0xe2,0x77,0xf2,0x49,0x34,0x77,0xc8,0x59,0x1b,0xc1,0xdd,0xee,0xe4,0xec,0xe3,
    0xdc,0xd1,0xa7,0x88,0xe9,0x84,0xc7,0x66,0x50,0x17,0x3c,0x9b,0xa4,0xbe,0xcf,0x80,
    0x77,0x87,0x98,0x54,0xac,0x3d,0xb3,0x37,0x12,0x6c,0x0b,0x58,0x4e,0xfc,0x9c,0x8a,
    0xe7,0x57,0x37,0xb1,0x5b,0xe0,0xf0,0x33,0xb6,0x72,0x46,0x8f,0x9c,0xb1,0x0d,0x7c,
    0x67,0x50,0x66,0x73,0xf7,0x39,0x72,0xec,0x66,0x86,0x6c,0xa3,0x2e,0xeb,0xf1,0x79,
    0xaf,0x9e,0x87,0x6b,0xbb,0xf4,0xea,0x05,0x70,0xef,0xd5,0x8b,0x60,0xde,0xab,0x5e,
    0xe9,0x95,0xf9,0x76,0x84,0xb5,0x87,0x1a,0xef,0x80,0xdb,0xe6,0xe7,0xcb,0xcc,0x95,
    0x3e,0xe1,0xde,0x09,0xde,0xc6,0x77,0xa3,0x9f,0x98,0xcd,0x61,0x2a,0xd9,0x8c,0x7d,
    0x15,0xac,0x5f,0xe6,0x48,0x82,0x9a,0x98,0x7f,0x17,0x1c,0xbe,0x4e,0x86,0xb3,0x0c,
    0x1f,0x60,0xef,0x2e,0xe1,0x7e,0x6d,0x96,0xbb,0x20,0xb6,0x77,0x83,0x0d,0x30,0x2b,
    0xf3,0xe4,0x1b,0xe1,0xb5,0xd9,0xcd,0x9d,0xe9,0x25,0x9f,0x3d,0x52,0xab,0x7d,0xd4,
    0x6a,0xaf,0xe4,0xf3,0x3a,0xb8,0xd7,0xea,0x0d,0x30,0xaf,0xd5,0x7e,0xa9,0x95,0xf9,
    0x06,0xed,0x7f,0x49,0xb8,0x07,0xa5,0x56,0x43,0x77,0xa8,0xd5,0x9b,0xe0,0x33,0x70,
    0xbf,0x05,0x56,0x83,0x46,0xe7,0xb1,0xdf,0xdf,0x42,0xdf,0x2d,0xe6,0x6d,0x34,0xec,
    0x21,0x7e,0x10,0x1d,0xc3,0xa2,0xc3,0x62,0x0e,0x84,0x35,0xcc,0xfe,0x03,0xa2,0xe3,
    0xe0,0x1d,0x74,0xbc,0x03,0xee,0x75,0x3d,0x94,0xd5,0xb3,0x77,0xc1,0x0e,0xfd,0x4b,
    0xcf,0x0e,0xc3,0xe1,0x6b,0x9c,0x9e,0x1d,0x61,0xef,0x61,0xe1,0x7e,0x2f,0xab,0x67,
    0x47,0xc1,0x8e,0xfc,0x47,0xcf,0x8e,0x52,0x0f,0xcf,0x67,0x38,0xab,0x87,0xbd,0xc2,
    0x7f,0x0c,0xfe,0x11,0xbe,0xd9,0xc7,0xc1,0x8c,0x6b,0x14,0xdb,0xfb,0x7d,0x82,0x7e,
    0x8f,0x49,0x2d,0x3e,0x00,0xf7,0x7e,0x9f,0x04,0xf3,0x7e,0x8f,0x4b,0x9d,0xcd,0x77,
    0x2a,0xac,0xb3,0xe8,0x38,0x05,0x8f,0x9d,0x7b,0x9a,0x6f,0xac,0xcf,0xb1,0x33,0x60,
    0xa7,0xe5,0x1b,0xee,0xb1,0x1f,0xce,0xc6,0x16,0xc4,0xf6,0x47,0x60,0x67,0xa4,0x26,
    0x09,0xa9,0xc9,0x28,0x31,0x56,0x83,0x71,0xce,0x3e,0x2b,0x79,0x7d,0x4c,0x5e,0xe7,
    0x24,0xaf,0x4f,0xc0,0x3d,0xaf,0x4f,0xc1,0x3c,0xaf,0x09,0xc9,0xcb,0x7c,0xe7,0xc3,
    0xba,0x08,0xf7,0x79,0xf9,0x56,0x7c,0x86,0xd6,0x3e,0x99,0x4d,0x9f,0x83,0x7b,0xcc,
    0x05,0x62,0xfc,0x7b,0x78,0x81,0x18,0xd3,0x3b,0x01,0xe7,0x45,0x99,0x77,0x5f,0xa0,
    0xf7,0xb2,0x70,0x7e,0x09,0x6e,0xfb,0x2f,0x61,0xbb,0xef,0x2b,0xfe,0x5f,0xf9,0x95,
    0xd9,0xfa,0x35,0x58,0x8f,0xe4,0xf7,0x0d,0x78,0x07,0xf9,0x4d,0x4a,0x7e,0xe6,0xbb,
    0x12,0xd6,0x24,0x5a,0xae,0x88,0xf6,0xab,0x68,0xf7,0x6f,0xe1,0x55,0x38,0x4c,0xbb,
    0xc7,0x4f,0x8a,0x96,0x6f,0xb3,0xb4,0x7c,0x07,0x56,0x2d,0x5a,0xbe,0x07,0x77,0x2d,
    0x53,0xa2,0xc5,0x7c,0xd7,0xc2,0x9a,0x82,0xfb,0x9a,0x68,0xb9,0x81,0x96,0xeb,0x68,
    0xb9,0x21,0x5a,0x3c,0x7e,0x4a,0xb4,0xfc,0x90,0xa5,0xe5,0x47,0xb0,0x31,0xd1,0xf2,
    0x13,0xb8,0x6b,0x99,0x16,0x2d,0xe6,0xbb,0x19,0xc7,0x66,0xb8,0x6f,0x8a,0x96,0x19,
    0xe9,0xbb,0x69,0x99,0xe1,0xff,0x3b,0xd3,0xe2,0xf1,0xd3,0x59,0x3d,0x9e,0xc8,0xba,
    0xa3,0xe3,0x72,0xe7,0x7f,0x86,0xcf,0xb8,0x6e,0x63,0xff,0x1d,0x26,0x4b,0x73,0x58,
    0xff,0x00,0xe6,0x99,0x7c,0x5d,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
