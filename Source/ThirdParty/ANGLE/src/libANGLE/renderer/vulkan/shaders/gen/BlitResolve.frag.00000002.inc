// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x5d,0x55,
    0x14,0x85,0xcf,0x79,0xff,0x26,0xb1,0x69,0x30,0x49,0x9b,0x9f,0xc6,0x6a,0x23,0x54,
    0x2c,0xa5,0x04,0x15,0x41,0x2a,0x75,0x64,0x84,0x07,0x92,0x08,0x9d,0x64,0x10,0x84,
    0x37,0x29,0xc4,0x52,0xd0,0x0c,0x3a,0x09,0x9a,0x49,0x06,0x05,0xc9,0x44,0x69,0x33,
    0xd0,0xd6,0x0a,0x45,0x5a,0x2d,0x9d,0x55,0x2d,0xfe,0x14,0x25,0x6a,0x50,0xa2,0x06,
    0x03,0xfe,0x94,0x80,0x96,0x80,0x96,0x80,0x96,0x68,0x53,0x2a,0x75,0xaf,0x7b,0xbf,
    0x93,0x6c,0xde,0x83,0xcd,0xbd,0x7b,0xad,0x7d,0xf6,0xda,0xeb,0x9c,0x73,0x5f,0xb1,
    0xb0,0xa7,0x1a,0x42,0x0c,0x2d,0xa1,0x16,0x76,0xc5,0x90,0xfd,0x3a,0x42,0x21,0xe8,
    0xb5,0x35,0x54,0xb2,0xe7,0x33,0xf5,0xe7,0xeb,0xfb,0x5f,0x7a,0xb9,0xb1,0xff,0xd1,
    0xc7,0x0e,0x88,0xdf,0x16,0x8a,0x59,0x9d,0xb8,0x76,0xcb,0x4a,0xf6,0x54,0xbc,0xf8,
    0xc2,0x91,0xa3,0xc2,0xbb,0x2c,0x46,0x2d,0xc6,0x2c,0x1a,0x16,0x13,0x16,0x93,0x16,
    0x53,0x16,0x33,0x16,0xb3,0x16,0xdb,0xad,0x87,0xd6,0x54,0xd5,0xdf,0xde,0xba,0x32,
    0x3d,0xf5,0x0b,0x61,0x38,0x94,0x43,0x5f,0x3e,0x4a,0xd8,0xc3,0x33,0x61,0x11,0xac,
    0xe6,0xb0,0x02,0xd8,0x76,0x87,0x15,0xc1,0x76,0x3a,0xac,0x04,0xd6,0xef,0xb0,0x32,
    0xd8,0x6e,0x87,0x55,0xc0,0x06,0x1d,0x56,0x05,0xdb,0xeb,0xb0,0x1a,0xd8,0x3e,0x87,
    0xdd,0x03,0x76,0x20,0xf3,0x55,0xdc,0x9c,0x4f,0x1e,0xb5,0x27,0x03,0xf8,0x51,0x3e,
    0x46,0x1e,0xc9,0x1b,0xe4,0xa9,0x7e,0x82,0xbc,0x48,0x3e,0x49,0x5e,0x22,0x9f,0x22,
    0x2f,0x93,0xcf,0x90,0x57,0xc8,0x67,0xc9,0xd3,0x1e,0x9f,0xb5,0xe7,0x83,0x4e,0x5f,
    0xf9,0x03,0xe4,0xf7,0x99,0x6a,0x21,0xcb,0x8b,0x99,0x5e,0x21,0x3b,0xc7,0x52,0xd6,
    0x6b,0x37,0x33,0xee,0xb0,0xbc,0x4a,0x7f,0xf1,0xdd,0x56,0xd9,0x0a,0x2f,0xae,0x8d,
    0x33,0x2c,0x65,0x58,0x29,0x74,0xb2,0x4e,0xf8,0x93,0xe4,0x5d,0xae,0x57,0x37,0xf5,
    0x49,0xab,0x97,0x5e,0x21,0x9b,0xbb,0x6d,0x73,0xdf,0xbb,0x89,0x0a,0xd1,0xca,0xb3,
    0xd7,0x85,0xf4,0xfa,0xd9,0xff,0x3e,0xf4,0x94,0xef,0x02,0x7b,0x04,0x2f,0x69,0xff,
    0x55,0x7f,0x3f,0x5c,0xd5,0xf1,0x83,0xe4,0xe2,0x1f,0x82,0x57,0xff,0x4e,0x9b,0x72,
    0x2f,0x75,0xca,0x1f,0xa6,0x4f,0x5a,0x37,0xc4,0x7d,0x48,0xf9,0xc1,0x26,0xdd,0x61,
    0x66,0x56,0xdf,0x67,0xe1,0x2a,0x8e,0xaf,0xb3,0x2f,0xe2,0x47,0x38,0xf3,0xb4,0x6f,
    0x23,0x7c,0x4f,0x45,0x57,0x7f,0x98,0x7d,0x4b,0xfc,0x58,0x13,0x3f,0xce,0x39,0x24,
    0xbe,0x01,0x9f,0xf2,0x89,0xa6,0xfa,0x63,0x7c,0x3f,0x89,0x9f,0x6c,0xe2,0x8f,0x73,
    0x36,0x89,0x9f,0x6a,0xe2,0xa7,0x2d,0x0e,0x39,0x7e,0xa6,0x89,0x3f,0x61,0xf1,0x8a,
    0xe3,0x67,0x1d,0xaf,0xf3,0x7c,0x9d,0xfd,0xdc,0x67,0xbb,0x2f,0xdf,0x6f,0x80,0xf9,
    0xe8,0xb1,0x5d,0x3b,0xc3,0xf9,0xf3,0x57,0xb5,0xf9,0x3f,0x14,0xdd,0xb9,0xbe,0xcd,
    0xfb,0x19,0xf4,0x94,0x9f,0x6d,0x3a,0xaf,0x0b,0x7c,0x37,0xaa,0x7f,0x8f,0xf3,0x50,
    0xdf,0xc7,0x0d,0x2d,0xb0,0x77,0x81,0x19,0x6f,0x19,0x52,0xce,0xce,0x34,0xbf,0xe3,
    0x97,0xb9,0xc7,0xcf,0xd9,0xac,0xba,0x97,0x1f,0x80,0x5d,0x76,0xf3,0x1c,0xe5,0x5b,
    0xf9,0x10,0xfe,0x69,0xeb,0xa0,0xfb,0xf6,0x11,0x77,0x72,0x80,0x7e,0xaa,0xb9,0x02,
    0x3e,0x6d,0x35,0xca,0x3f,0x66,0xdd,0x15,0xd6,0xe9,0x1e,0x7e,0xc2,0xba,0x41,0xd6,
    0xe9,0x0e,0x7e,0x0a,0x7e,0xde,0x6a,0x74,0x37,0x3f,0x03,0xd3,0xdd,0xfc,0xd7,0x26,
    0x9f,0x67,0x9e,0xdb,0x56,0x2f,0xee,0xaa,0xc5,0x3c,0x7e,0xf4,0x3e,0x62,0xeb,0xb4,
    0x17,0x9f,0xa3,0x19,0xb2,0x73,0xcd,0xf7,0xe7,0x0b,0xf0,0x51,0xcb,0x34,0x53,0x67,
    0xcc,0xb1,0x54,0xb7,0x61,0x3d,0x52,0x2f,0x3d,0xd7,0xad,0x4a,0x75,0x3b,0x63,0x5e,
    0x53,0x66,0xcd,0x55,0xe7,0xe1,0x4b,0x3c,0x0c,0x39,0x0f,0x5f,0x81,0x27,0x0f,0x5f,
    0x83,0x25,0x0f,0x8b,0xce,0x83,0xb8,0x05,0x8b,0x45,0x74,0x17,0x9c,0x87,0x6f,0xd0,
    0x8e,0xce,0xc3,0xb7,0xe0,0xc9,0xc3,0x8e,0x98,0x63,0xa9,0x4e,0x1e,0x52,0xaf,0x45,
    0xe7,0xa1,0x27,0xe6,0x35,0xf3,0xac,0x59,0x70,0x1e,0xbe,0xc3,0xc3,0x41,0xe7,0xe1,
    0x7b,0xf0,0xe4,0xe1,0x07,0xb0,0xe4,0x61,0xd9,0x79,0x10,0xb7,0x64,0xb1,0x8c,0xee,
    0x12,0xf7,0x48,0xba,0x3f,0xa2,0xdd,0x13,0xb7,0xee,0xb3,0x66,0x4c,0xb5,0xcb,0x6e,
    0xc6,0x5e,0xea,0x16,0x59,0xb7,0x44,0xed,0x49,0x6a,0x4f,0x52,0xab,0xfb,0xda,0x1f,
    0xf3,0xef,0x49,0xeb,0xdf,0xb5,0x38,0x05,0xa7,0x3d,0xea,0x8b,0xf9,0x5d,0x5c,0xce,
    0xe6,0xcf,0x39,0x79,0xd5,0x7f,0xd4,0x9b,0x78,0x1d,0xc7,0xab,0xea,0xdf,0x02,0xbf,
    0x84,0xd7,0xd3,0xf4,0x10,0xfe,0x8f,0xd5,0xcc,0xd1,0x23,0xf9,0x3d,0x4d,0x3e,0xc7,
    0x5c,0xa7,0xe8,0xa5,0x6f,0xf3,0x1d,0xbe,0xcb,0x71,0xe6,0x3c,0x07,0x26,0x6f,0x87,
    0xe8,0xfb,0xaa,0xe9,0xb4,0x31,0xb7,0x7c,0x9c,0xcb,0xfe,0x47,0xf2,0x33,0x3f,0x4f,
    0x4d,0xbd,0xc9,0xfb,0x1c,0x1e,0xf4,0x5d,0xbf,0x8f,0x87,0x0b,0xe8,0xea,0x1b,0xbf,
    0x08,0xfe,0x1a,0xbd,0x2f,0xd1,0xfb,0xa2,0xf3,0xfe,0x13,0xeb,0x86,0x9d,0xf7,0x9f,
    0xc1,0xe7,0xd1,0xff,0x05,0xac,0xee,0xce,0xfe,0x57,0xf0,0x01,0xce,0x7e,0xc5,0xed,
    0x85,0xb8,0x6b,0x16,0x2b,0xcc,0xa9,0xf7,0xa7,0xac,0x66,0x94,0x19,0xe4,0x21,0x71,
    0x2b,0x4e,0xe7,0x37,0x74,0x0e,0x3b,0x9d,0xdf,0xc1,0x93,0xce,0xaa,0xd3,0x11,0x77,
    0xdd,0x62,0x95,0x5e,0xd7,0xd1,0x19,0x73,0x3a,0x89,0x5b,0x75,0x3a,0x7f,0xa0,0x33,
    0xee,0x74,0xfe,0x04,0x4f,0x3a,0x6b,0x4e,0x47,0xdc,0x0d,0x8b,0x35,0x7a,0xdd,0x40,
    0xa7,0xe1,0x74,0x12,0xb7,0xe6,0x74,0xfe,0x42,0x67,0xc8,0xe9,0xfc,0x0d,0x9e,0x74,
    0xd6,0x9d,0x8e,0xb8,0x9b,0xd9,0x9d,0xcd,0x7b,0xdd,0x44,0x67,0xc2,0xe9,0x24,0x6e,
    0xdd,0xe9,0xdc,0x42,0xe7,0x98,0xd3,0xd9,0x00,0x4f,0x3a,0x77,0x9c,0xce,0x46,0xf6,
    0x0c,0x19,0xa6,0x5e,0xb7,0xd1,0x99,0x74,0x3a,0x89,0xbb,0xe3,0x74,0xee,0xa2,0x73,
    0xdc,0xe9,0xe8,0x03,0xbe,0xeb,0x74,0x8a,0x71,0x4b,0x47,0x5c,0xb4,0x10,0xa6,0x5e,
    0x7a,0x97,0xce,0x94,0xd3,0x49,0x5c,0x31,0x6e,0xe9,0x54,0x62,0xae,0x33,0xed,0x74,
    0xaa,0x31,0xc7,0x93,0x4e,0x8b,0xd3,0x11,0x57,0xb3,0x68,0xa1,0x57,0x0d,0x9d,0x19,
    0xa7,0x93,0xb8,0x16,0xa7,0x73,0x2f,0x3a,0x27,0x9c,0xce,0xb6,0x98,0xe3,0x49,0xa7,
    0xc3,0xe9,0x88,0x6b,0xb7,0xe8,0xa0,0x57,0x3b,0x3a,0xb3,0x4e,0x27,0x71,0x7a,0xfe,
    0x67,0x1b,0xf0,0x84,0xc5,0xff,0xae,0xde,0xc7,0xe7,0x7c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue *= params . invSamples;
//
//     broadcastColor(colorValue);
//
// }
