// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x49,0x4f,0x54,0x51,
    0x10,0x85,0x6f,0x77,0x43,0x37,0xb6,0x02,0xca,0x28,0x71,0x42,0x21,0xd1,0x00,0x36,
    0x46,0x45,0x05,0xc5,0x91,0x44,0x54,0x14,0x95,0x18,0x40,0x8d,0x38,0xa1,0x31,0x0a,
    0x92,0x38,0xc0,0xc2,0xa1,0x35,0x0e,0xb0,0x70,0x80,0x85,0x03,0x2c,0x9c,0x58,0x98,
    0x38,0xc5,0x9d,0xfe,0x02,0x7f,0x91,0x63,0x62,0x62,0xd5,0xf3,0x2b,0xad,0x74,0x27,
    0xd5,0xef,0xd5,0x39,0x55,0x75,0xaa,0xee,0xbd,0xef,0x26,0xe2,0x35,0xa9,0x10,0x62,
    0x21,0x1d,0x0a,0xc2,0xe7,0xf0,0xf7,0x37,0x27,0xc4,0x05,0x09,0x61,0x66,0x48,0x46,
    0xcf,0xed,0x1d,0x5d,0x1d,0x99,0x0b,0x17,0x4f,0x66,0x56,0x37,0xad,0x50,0xbe,0x28,
    0x24,0xa2,0x38,0xe5,0x8a,0xc5,0xcb,0x93,0xa7,0xda,0xc0,0xb1,0x33,0x83,0x8a,0x17,
    0x8a,0x9d,0x16,0x1b,0x12,0x1b,0x11,0xcb,0x8a,0x8d,0x89,0x4d,0x88,0x4d,0x89,0x4d,
    0x8b,0xcd,0x96,0x1a,0x9a,0x93,0xd2,0xfa,0xf2,0x56,0x18,0xe9,0x69,0xbd,0x10,0xda,
    0x43,0x7e,0x28,0xa5,0x97,0x1a,0x9e,0x86,0xc5,0xc0,0x0a,0x1c,0x16,0x07,0x9b,0xed,
    0xb0,0x04,0xd8,0x5c,0x87,0xe5,0x81,0xcd,0x77,0x58,0x3e,0x58,0xb5,0xc3,0x92,0x60,
    0xb5,0x0e,0x4b,0x81,0x2d,0x73,0x58,0x01,0x58,0x83,0xc3,0x66,0x80,0xad,0x88,0xe6,
    0x4a,0xfc,0xeb,0x4f,0x67,0xec,0x94,0xe7,0x12,0xe6,0x31,0x7f,0xb1,0xf3,0x75,0xcd,
    0x16,0x3a,0x7f,0x08,0x3f,0x86,0x3f,0x82,0x6f,0xf5,0xb2,0xf8,0x09,0xfc,0x31,0xfc,
    0x3c,0xfc,0x09,0xfc,0x7c,0xfc,0x29,0xfc,0x24,0xfe,0x34,0xbe,0xce,0x56,0x2a,0x55,
    0xe3,0x51,0x3f,0x89,0xa8,0x9e,0xbe,0x97,0x4b,0x4c,0x92,0xb5,0xd1,0x1e,0x2a,0xc5,
    0x4f,0x91,0xaf,0x7c,0x85,0x44,0xa6,0xe1,0x95,0xd3,0xfd,0x4b,0xa3,0x5f,0x2d,0xff,
    0xb3,0xc8,0x53,0x7c,0x3d,0x7e,0xa1,0xab,0x55,0x44,0xbc,0x69,0x95,0x50,0x2b,0x44,
    0x7d,0xcd,0xfa,0xb7,0xee,0x45,0x58,0x12,0x4b,0xf3,0x2c,0x71,0xa6,0x7a,0x65,0xac,
    0x7f,0x29,0x7a,0x65,0x51,0xdd,0xbf,0x58,0x3d,0xb3,0x54,0x50,0x5f,0xe3,0x2b,0xe1,
    0x52,0x8e,0x9f,0x8f,0xaf,0xfc,0x02,0x78,0xad,0x5f,0x26,0x5d,0x56,0x13,0x57,0xe2,
    0xf6,0xcd,0xf2,0xea,0x38,0x0f,0xe6,0x37,0x39,0x5d,0xed,0x77,0x13,0xf1,0x0d,0x52,
    0x5d,0xd7,0x63,0x33,0x98,0x37,0xcb,0x6d,0x77,0x6b,0xb8,0x83,0x3a,0x8a,0x57,0xc9,
    0xdb,0x6e,0xe6,0x8f,0x85,0xff,0xbf,0x98,0xf3,0x35,0x67,0x0f,0xef,0xbb,0x59,0x07,
    0xf5,0x3b,0x73,0xfa,0xed,0x26,0xc7,0xfc,0x5e,0xce,0x89,0xe6,0x1f,0x44,0x33,0xed,
    0xf8,0x3e,0x7a,0x50,0xfe,0x14,0x67,0xce,0xf6,0xf5,0x14,0xdf,0x7b,0xc2,0xc5,0x9f,
    0x65,0x5f,0x8d,0x1f,0x82,0x37,0x7f,0x24,0xc7,0xcf,0xe6,0xe4,0xdf,0xe2,0x7b,0x36,
    0x7e,0x2c,0x87,0xbf,0xc7,0x59,0x31,0x7e,0x22,0x87,0x7f,0xc4,0x1a,0x1b,0x3f,0x95,
    0xc3,0x3f,0x43,0xd3,0xf8,0x69,0xf8,0x35,0xb2,0x0a,0x71,0xd6,0x3f,0x80,0xfd,0x10,
    0x44,0xd7,0xa6,0x95,0x33,0x5e,0xcc,0x39,0xee,0x94,0xbd,0x2c,0xa2,0xcf,0x62,0xcc,
    0xf6,0x63,0x90,0x6f,0x65,0x0e,0xfc,0x16,0xa9,0x50,0xc9,0x7d,0x54,0xce,0x39,0x6c,
    0x25,0xa6,0x0a,0xfc,0xa6,0xc4,0xa8,0x3f,0x8f,0xbc,0x2a,0xf2,0x16,0xf0,0x9d,0x96,
    0x73,0x3e,0x5b,0x39,0x83,0x8b,0xc0,0xdf,0x48,0x4c,0x35,0x77,0xcb,0x22,0xce,0xe6,
    0x77,0xe9,0xbc,0x96,0x7e,0x7e,0x49,0xfc,0x12,0x77,0xa7,0xe9,0x3c,0xfa,0xbe,0x4f,
    0xf2,0x74,0x2d,0x96,0xa2,0xa9,0xbf,0x6b,0xac,0xcf,0x32,0xf0,0xfd,0xe2,0x69,0x4f,
    0xaf,0xc1,0x2c,0xee,0xa7,0xd4,0xb0,0x5a,0xfa,0xfc,0x2a,0x51,0x1a,0xf7,0x96,0x98,
    0x7c,0x72,0x6a,0xdc,0x0c,0xf5,0xcc,0x50,0xe7,0x66,0x68,0x00,0xb7,0x19,0x96,0x83,
    0xd9,0x0c,0x8d,0x6e,0x06,0xe5,0x32,0x62,0x8d,0xe8,0x66,0xdc,0x0c,0x2b,0xd1,0x8e,
    0xb9,0x19,0x56,0x81,0xdb,0x0c,0x6f,0xc0,0x2c,0x4e,0x67,0xb0,0x5a,0x8d,0x6e,0x86,
    0x77,0xc4,0xd4,0x92,0x93,0x71,0x33,0xac,0x61,0x86,0x26,0x37,0xc3,0x5a,0x70,0x9b,
    0x61,0x1d,0x98,0xcd,0xd0,0xe2,0x66,0x50,0xae,0x59,0xac,0x05,0xdd,0x66,0xce,0x91,
    0xea,0x6e,0x40,0xfb,0x9d,0xfb,0x9e,0xb5,0x47,0x8b,0x6d,0x71,0x3d,0x7e,0x22,0xae,
    0x91,0xbc,0x66,0x62,0xb7,0x12,0xbb,0x95,0x58,0x3d,0xaf,0x1f,0xf8,0x16,0x34,0xff,
    0x80,0xd8,0x36,0x38,0x5d,0xa3,0xf7,0x9c,0x45,0xe5,0x7a,0xe0,0x74,0x56,0xbd,0x77,
    0x76,0x32,0x6b,0x3b,0xb3,0x6a,0xfc,0x2e,0xf0,0x8f,0xcc,0xda,0x41,0x0d,0xc5,0xbf,
    0x49,0x4c,0x1b,0x35,0x6c,0xde,0x0e,0xfc,0x36,0xfa,0xda,0x46,0x2d,0xbd,0x9b,0xf6,
    0x72,0x2f,0xf5,0xd1,0x67,0x17,0xd8,0x27,0xfa,0xd5,0xba,0x37,0x44,0x67,0x26,0x7d,
    0x7f,0x20,0x26,0xcb,0x9e,0xf7,0x10,0xd3,0x9d,0x33,0x7b,0x1b,0x33,0xe8,0x3d,0x76,
    0x88,0x19,0x7a,0xd1,0xd5,0x3b,0xed,0x30,0xf8,0x7d,0x6a,0x1f,0xa1,0xf6,0x61,0x37,
    0xfb,0x51,0xf2,0xfa,0xdc,0xec,0xc7,0xc0,0xbf,0xa0,0x7f,0x1c,0xac,0xdb,0xed,0xfd,
    0x09,0xf0,0x0a,0xf6,0xbe,0xdf,0xad,0x85,0x72,0x27,0xc5,0xfa,0xe9,0x53,0xdf,0x37,
    0x4a,0xcc,0x69,0x7a,0xd0,0x19,0x8c,0xeb,0x77,0x3a,0xe7,0xd0,0x39,0xeb,0x74,0x06,
    0xc0,0x4d,0xe7,0xbc,0xd3,0x19,0x88,0xee,0x9f,0x10,0x61,0x5a,0x6b,0x10,0x9d,0x21,
    0xa7,0x63,0xdc,0x79,0xa7,0x73,0x11,0x9d,0x76,0xa7,0x73,0x09,0xdc,0x74,0x86,0x9d,
    0x8e,0x72,0x97,0xc5,0x86,0xa9,0x75,0x19,0x9d,0x11,0xa7,0x63,0xdc,0xb0,0xd3,0xb9,
    0x82,0x4e,0x9d,0xd3,0xb9,0x0a,0x6e,0x3a,0xd7,0x9d,0xce,0xd5,0xe8,0x9b,0x0e,0x11,
    0xa6,0xb5,0xae,0xa1,0x93,0x75,0x3a,0xc6,0x5d,0x77,0x3a,0xb7,0xd1,0xb9,0xe5,0x74,
    0xee,0x80,0x9b,0xce,0xa8,0xd3,0x51,0xee,0xae,0xd8,0x28,0xb5,0xee,0xa2,0x33,0xe6,
    0x74,0x8c,0x1b,0x75,0x3a,0xf7,0xd1,0xb9,0xe7,0x74,0x1e,0x80,0x9b,0xce,0xb8,0xd3,
    0x51,0xee,0xa1,0xd8,0x38,0xb5,0x1e,0xa2,0x33,0xe1,0x74,0x8c,0x1b,0x77,0x3a,0x8f,
    0xd1,0x79,0xe4,0x74,0x9e,0x80,0x9b,0xce,0xa4,0xd3,0x51,0xee,0xa9,0xd8,0x24,0xb5,
    0x9e,0xa2,0x33,0xe5,0x74,0x8c,0x9b,0x74,0x3a,0xcf,0xd1,0x79,0xe6,0x74,0x5e,0x80,
    0x9b,0xce,0x2b,0xa7,0xa3,0xdc,0x4b,0xb1,0x57,0xd4,0x7a,0x89,0xce,0xb4,0xd3,0x31,
    0x4e,0x9f,0xbf,0xe5,0x76,0x5b,0x27,0xf6,0x07,0xf2,0x9a,0x15,0xfb,0x7c,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue *= params . invSamples;
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
