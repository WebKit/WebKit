// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x49,0x4f,0x55,0x41,
    0x10,0x85,0xfb,0xcd,0xa8,0xa8,0x08,0x22,0x38,0xe0,0x84,0x13,0xa8,0xe4,0xa9,0x3c,
    0xa3,0x41,0x14,0x4d,0x70,0x02,0x15,0x45,0x71,0x42,0x13,0x15,0x48,0x1c,0x80,0x85,
    0x0a,0x0b,0x07,0x48,0x9c,0x60,0xe1,0x00,0x0b,0x15,0x59,0x98,0x38,0x6d,0xfc,0x21,
    0xfe,0x22,0xe3,0x90,0x98,0x58,0xd5,0xef,0x2b,0x53,0xbe,0x97,0x14,0xf7,0x9e,0x73,
    0xaa,0xeb,0x74,0x75,0xf7,0x6d,0x52,0xc9,0xfa,0x5c,0x08,0x89,0x30,0x37,0x94,0x85,
    0x2f,0xa1,0xf8,0x5b,0x14,0x92,0xc2,0x84,0x30,0x2f,0x64,0xe3,0xf3,0x50,0x67,0x77,
    0x67,0xd3,0xed,0x3b,0x7d,0x4d,0xcd,0x85,0xbc,0xea,0x0b,0x42,0x2a,0xe6,0xa9,0xb6,
    0x50,0x50,0x5a,0x9e,0x1a,0x83,0x57,0xae,0x0f,0x29,0x5f,0x2e,0x71,0x59,0x62,0x40,
    0x62,0x58,0x62,0x54,0x62,0x5c,0x62,0x52,0x62,0x5a,0x62,0x56,0xa2,0x42,0x6a,0xe8,
    0x98,0x9c,0xd6,0x97,0xb7,0xf2,0xe8,0xa7,0xf5,0x42,0x38,0x1c,0x32,0x61,0x31,0x73,
    0xa9,0xe7,0x69,0x5c,0x02,0xae,0xcc,0x71,0x49,0xb8,0x0a,0xc7,0xa5,0xe0,0x6a,0x1d,
    0x97,0x86,0x5b,0xe1,0xb8,0x0c,0xdc,0x6a,0xc7,0x65,0xe1,0xd6,0x39,0x2e,0x07,0xb7,
    0xc9,0x71,0x65,0x70,0x5b,0x1c,0x37,0x07,0x2e,0x1f,0xfb,0x4a,0xfd,0x9b,0x9f,0xf6,
    0x78,0x48,0x9e,0x6b,0xe9,0xc7,0xf0,0x1a,0x87,0x3b,0x4a,0xf4,0x0e,0x74,0x1b,0xaf,
    0x6b,0xba,0xd2,0xe9,0x03,0xe0,0x04,0x78,0x18,0x6c,0xf9,0xa3,0xe0,0x14,0x78,0x1c,
    0x9c,0x06,0x4f,0x82,0x33,0xe0,0x69,0x70,0x16,0x3c,0x0b,0xd6,0xde,0xab,0xa4,0x6a,
    0x32,0xce,0x27,0x15,0xeb,0xe9,0xfb,0x12,0x79,0xcb,0xb2,0x76,0x35,0x92,0x9f,0x63,
    0x6c,0x12,0x3c,0x17,0x9c,0x8e,0x39,0xe9,0xb8,0xbf,0x3a,0x57,0xe5,0x5b,0xc0,0xe5,
    0x70,0xd5,0x82,0x2b,0xa9,0x65,0xb8,0x0a,0x1c,0xe2,0x3c,0xca,0xff,0xed,0x83,0x45,
    0x25,0x91,0xe5,0x59,0xe5,0x42,0xfd,0xaa,0xd9,0x8f,0xc5,0xf8,0x55,0xc7,0x39,0x17,
    0xb9,0xcd,0xf8,0xd5,0xe0,0xa7,0xf9,0xb5,0x68,0x39,0xa7,0xd7,0xe1,0x6f,0x78,0x2d,
    0xba,0xe6,0xd7,0x93,0x5f,0x15,0x3d,0x92,0x61,0x03,0x79,0x8a,0x37,0x96,0x8c,0xcb,
    0x73,0x5e,0x0c,0xb7,0x30,0x76,0xa9,0xfc,0x6d,0xa7,0x87,0x44,0xf8,0xff,0x67,0x58,
    0xbd,0x0e,0xf2,0xde,0x4e,0x2f,0x07,0xe3,0x1e,0x15,0x7f,0xcb,0xc4,0xfb,0x08,0x79,
    0x47,0xe1,0x8e,0x90,0xa7,0xb8,0x03,0x6e,0xb9,0xec,0xd7,0x31,0x6a,0xd8,0x3c,0xba,
    0xd8,0x2f,0xc3,0x67,0x98,0x8b,0xd6,0xea,0x61,0x8e,0x95,0xe0,0x4b,0x9c,0x25,0xdb,
    0xbf,0x4b,0x7c,0xe7,0x29,0x87,0x07,0xc0,0x56,0xef,0x06,0xfb,0x6f,0xfa,0x70,0x49,
    0xfe,0x68,0x49,0xfe,0x3d,0xbe,0x63,0xd3,0xc7,0x4b,0xf4,0xc7,0x9c,0x09,0xd3,0x27,
    0x4b,0xf4,0xe7,0x12,0x6d,0x4e,0x9f,0x2e,0xd1,0x5f,0x53,0xd3,0xf4,0x59,0xf4,0x9d,
    0xf2,0x15,0x24,0x99,0x6b,0x80,0xfb,0x29,0x8c,0x7e,0x1b,0xad,0x9c,0xe5,0xf9,0x9c,
    0xd7,0x93,0xc2,0x66,0xb9,0xab,0xe6,0x93,0x6f,0x5c,0x05,0x5c,0x22,0xae,0x6d,0x26,
    0x9e,0x95,0x45,0xe4,0xaa,0xb6,0x5f,0xb8,0xda,0xb8,0xef,0xc5,0xb3,0x58,0x43,0xfd,
    0x5c,0xdc,0xc7,0x22,0xff,0x84,0x71,0x2b,0x18,0xbb,0xcc,0x8d,0x5b,0xc9,0xb8,0x3a,
    0x37,0x6e,0x15,0xfc,0x23,0xc6,0xad,0x61,0xec,0x2a,0xc6,0xd9,0x5d,0xb6,0x84,0xf3,
    0xdb,0xca,0x19,0x5d,0x0f,0xff,0x55,0x72,0x36,0x70,0xb7,0xad,0xe7,0xec,0xfe,0x90,
    0x15,0x68,0xa4,0xb7,0xdf,0x92,0xaf,0x5a,0x83,0x44,0x23,0xeb,0xd2,0xe0,0x7a,0xde,
    0xea,0xee,0xb1,0x31,0xc9,0x55,0xae,0x09,0xfe,0x94,0x20,0x9d,0xd3,0x7b,0x38,0xcb,
    0xfb,0x25,0x35,0xac,0x96,0x3e,0xbf,0x4b,0x96,0xe6,0x7d,0x24,0x27,0xc3,0x98,0x06,
    0xd7,0xc3,0x36,0x7a,0xc8,0xbb,0x1e,0xb6,0xc3,0x5b,0x0f,0x3b,0xe0,0xac,0x87,0x82,
    0xeb,0x41,0xb5,0x66,0x89,0x02,0xbe,0xcd,0xae,0x87,0x5d,0x78,0x27,0x5c,0x0f,0xbb,
    0xe1,0xad,0x87,0x0f,0x70,0x96,0xa7,0x3d,0x58,0xad,0x82,0xeb,0xe1,0x13,0x39,0x8d,
    0x8c,0x69,0x76,0x3d,0xec,0xa1,0x87,0x16,0xd7,0x43,0x2b,0xbc,0xf5,0xb0,0x17,0xce,
    0x7a,0x68,0x73,0x3d,0xa8,0xb6,0x8f,0x33,0xae,0xbe,0xfa,0x7e,0x02,0xdf,0x03,0x78,
    0x7f,0x72,0x77,0x87,0xce,0xd1,0x72,0xdb,0xdc,0x1c,0x3f,0x93,0x57,0x60,0xdc,0x3e,
    0xe6,0xd3,0x1e,0xff,0x97,0x15,0xef,0x16,0xc5,0x7a,0x8f,0x74,0x72,0x87,0xf4,0xc8,
    0xfc,0xf4,0xfe,0x38,0x4e,0x4e,0xa7,0x3b,0x97,0x27,0xe9,0xab,0xcb,0x9d,0xcb,0x53,
    0xf0,0x76,0x9e,0xbb,0xf1,0x55,0xfe,0xac,0x70,0xfa,0x4d,0x9d,0xa6,0x5e,0x37,0xb5,
    0x7a,0xa2,0x56,0xac,0x75,0x86,0x5a,0xfa,0xdd,0x9e,0x83,0xff,0x26,0x39,0x8a,0xcf,
    0xc3,0xd5,0xb8,0x75,0xbb,0x00,0x5f,0xc7,0xba,0xf5,0xba,0x75,0x53,0xed,0xa2,0x44,
    0x2f,0x6b,0x71,0x31,0xae,0x73,0x2a,0xde,0x5f,0xa7,0x59,0x27,0xd3,0x7a,0x9d,0xcf,
    0x55,0x7c,0xba,0x9c,0xcf,0x35,0x78,0xf3,0xe9,0x77,0x3e,0xaa,0xf5,0x49,0xf4,0x53,
    0xab,0x0f,0x9f,0x01,0xe7,0x63,0x5a,0xbf,0xf3,0xb9,0x89,0xcf,0x0d,0xe7,0x73,0x0b,
    0xde,0x7c,0x86,0x9c,0x8f,0x6a,0x83,0x12,0x43,0xd4,0x1a,0xc4,0x67,0xd8,0xf9,0x98,
    0x36,0xe4,0x7c,0x6e,0xe3,0x93,0x77,0x3e,0x77,0xe0,0xcd,0x67,0xc4,0xf9,0xa8,0x76,
    0x57,0x62,0x84,0x5a,0x77,0xf1,0x19,0x75,0x3e,0xa6,0x8d,0x38,0x9f,0xfb,0xf8,0xdc,
    0x73,0x3e,0x0f,0xe0,0xcd,0x67,0xcc,0xf9,0xa8,0xf6,0x30,0x7e,0x7b,0xc5,0x5a,0x0f,
    0xf1,0x19,0x77,0x3e,0xa6,0x8d,0x39,0x9f,0x27,0xf8,0x3c,0x76,0x3e,0x4f,0xe1,0xcd,
    0x67,0xc2,0xf9,0xa8,0xf6,0x4c,0x62,0x82,0x5a,0xcf,0xf0,0x99,0x74,0x3e,0xa6,0x4d,
    0x38,0x9f,0x17,0xf8,0x3c,0x77,0x3e,0x2f,0xe1,0xcd,0x67,0xca,0xf9,0xa8,0xf6,0x4a,
    0x62,0x8a,0x5a,0xaf,0xf0,0x99,0x76,0x3e,0xa6,0x4d,0x39,0x9f,0x37,0xf8,0xbc,0x76,
    0x3e,0x6f,0xe1,0xcd,0xe7,0x9d,0xf3,0x51,0x6d,0x46,0xe2,0x1d,0xb5,0x66,0xf0,0x99,
    0x75,0x3e,0xa6,0xe9,0xf3,0x8f,0xdc,0x0c,0xbb,0x24,0xfe,0x02,0xe7,0x75,0xf3,0x46,
    0xf8,0x0b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = texture(sampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
