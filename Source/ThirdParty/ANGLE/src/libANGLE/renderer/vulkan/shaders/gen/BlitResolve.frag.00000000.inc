// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x5f,0x68,0xd6,0x65,
    0x14,0xc7,0x9f,0xdf,0xfb,0x77,0xb9,0xb1,0x94,0xe6,0xd4,0x6d,0x3a,0xcd,0x06,0xa1,
    0xb1,0xbc,0xb0,0x18,0x84,0x61,0x78,0x61,0x17,0xa2,0x59,0x30,0x2f,0x76,0xb3,0x60,
    0x37,0xef,0x45,0xc1,0x28,0x6f,0x76,0x61,0xc1,0x4b,0x78,0xb3,0x0b,0x6f,0x76,0x63,
    0x6a,0xb3,0x48,0x83,0x2e,0x22,0x4b,0x52,0x2a,0x87,0xb1,0x72,0x14,0xab,0xc4,0x81,
    0x56,0x0c,0x4a,0x06,0x25,0x83,0x92,0x81,0xda,0x22,0xa5,0xf3,0xfd,0xbd,0x9f,0xb3,
    0x0e,0xef,0x0b,0x67,0xbf,0xdf,0xf7,0xfb,0x3d,0xcf,0xf9,0x3e,0xe7,0xbc,0xcf,0xf3,
    0xae,0x58,0xd8,0x5a,0x4d,0x29,0x4b,0xab,0x52,0x4b,0x5a,0x9f,0xa5,0xfc,0xb3,0x26,
    0x15,0x92,0x5e,0x5b,0x53,0x25,0x7f,0xee,0xdd,0xf7,0xd2,0xbe,0xfe,0xd7,0x5e,0x1f,
    0xe9,0xdf,0xf9,0xd4,0x0e,0xe9,0xed,0xa9,0x98,0xe7,0x49,0x7b,0xd8,0x50,0xc9,0x9e,
    0x8a,0x57,0x5e,0xae,0xbd,0x2a,0xbe,0xc3,0xe2,0x90,0xc5,0xb0,0x45,0xcd,0x62,0xd4,
    0x62,0xcc,0xa2,0x6e,0x31,0x6e,0x31,0x61,0xb1,0xda,0x6a,0x68,0x4d,0x55,0xf5,0xed,
    0xad,0x23,0xf7,0x53,0xbd,0x94,0x9e,0x4f,0xe5,0xd4,0xd3,0xd8,0x4a,0xda,0xca,0xd3,
    0xb9,0x0c,0xae,0x25,0x70,0x05,0xb8,0xd5,0x81,0x2b,0xc2,0xad,0x0f,0x5c,0x09,0xae,
    0x27,0x70,0x65,0xb8,0xcd,0x81,0xab,0xc0,0x3d,0x16,0xb8,0x2a,0xdc,0xe3,0x81,0x6b,
    0x81,0x7b,0x22,0x70,0x0f,0xc1,0xed,0xc8,0xfb,0x2a,0xae,0xec,0x4f,0x3d,0x6a,0x26,
    0x9b,0xe8,0x47,0x78,0x18,0x9c,0x81,0x6b,0x60,0xcf,0x1f,0x05,0x17,0xc1,0x63,0xe0,
    0x12,0xb8,0x0e,0x2e,0x83,0xc7,0xc1,0x15,0xf0,0x04,0xd8,0x67,0x7c,0xc2,0x9e,0x8f,
    0x06,0x7f,0xe1,0x2d,0x01,0x4f,0x36,0xe9,0x93,0xe8,0xda,0xcf,0x23,0xf6,0xb7,0x90,
    0xe3,0x62,0xbe,0x1f,0xbd,0x77,0xda,0x5b,0x85,0xd9,0xad,0xb3,0xfc,0x2a,0xde,0x05,
    0x70,0x2b,0xb8,0x94,0xe7,0x94,0xac,0x46,0xe2,0x5c,0xa5,0xf4,0x0c,0xb8,0x03,0x6e,
    0xad,0xe1,0x2e,0x6a,0x39,0xee,0x06,0xa7,0xbc,0x8f,0xb6,0x95,0xef,0xc1,0xa3,0x8b,
    0xa8,0xf0,0xec,0x0e,0x21,0xbf,0x8d,0x7c,0x1f,0x3d,0xf8,0x6d,0x64,0x1e,0xe2,0xb6,
    0xe3,0xd7,0x8b,0x9f,0xf2,0x37,0xa3,0x55,0x83,0xde,0x87,0xbf,0xe3,0x6d,0xe8,0xca,
    0xdf,0x4e,0x7e,0x77,0xde,0x47,0x21,0xf5,0x93,0x27,0xfc,0x64,0xd3,0xba,0x01,0xce,
    0x8b,0xe3,0x3d,0x4d,0xfb,0xd8,0x4f,0x1f,0xaa,0x7b,0x00,0xad,0x0b,0x3c,0xc8,0x19,
    0xf0,0xb9,0x0d,0x72,0xbf,0x8a,0x61,0xfd,0x10,0x73,0x77,0x7d,0xb8,0x49,0x1f,0xe1,
    0x7b,0x70,0xbd,0x86,0xee,0x78,0xb4,0x29,0xff,0x30,0xf7,0xc9,0xf5,0xb1,0x26,0xfd,
    0x08,0xdf,0x8d,0xeb,0xf5,0x26,0xfd,0xa8,0xc5,0xee,0xa0,0x8f,0x37,0xe9,0xc7,0x2c,
    0xde,0x0c,0xfa,0x04,0xfa,0x06,0xeb,0xfc,0x38,0xb3,0xe0,0xe7,0x68,0xe5,0xe3,0x58,
    0x33,0x79,0x9b,0xf7,0xe3,0xd4,0x10,0x3e,0x01,0xd7,0x65,0x93,0x38,0x45,0xde,0x3b,
    0x70,0xa7,0xc8,0x13,0x9e,0x84,0xeb,0x36,0xc7,0x77,0xa9,0xf1,0xb4,0xdd,0xa2,0x02,
    0x33,0x4a,0xec,0xe5,0x6f,0x63,0x74,0xb7,0x76,0x71,0x96,0x3f,0xe2,0xbc,0x1e,0x34,
    0x56,0xfb,0xfb,0x18,0x2e,0x05,0xee,0x1c,0x9c,0xf6,0xfa,0x82,0x71,0x3a,0x2b,0x9f,
    0x90,0x2b,0xed,0x39,0xe3,0x34,0xb7,0x4f,0x39,0x8b,0xbd,0xd4,0x57,0xde,0x79,0xf8,
    0xb7,0x58,0xf7,0x19,0x6b,0xcf,0x87,0x75,0x17,0x58,0xd7,0x17,0xd6,0x5d,0x84,0xaf,
    0xb3,0xee,0x73,0xd6,0x5e,0x64,0x9d,0xce,0xe9,0x17,0xac,0xdb,0xc6,0x3a,0x9d,0xd1,
    0x2f,0xe1,0x3f,0xb4,0x1c,0x9d,0xdd,0x4b,0x70,0x3a,0xbb,0xf7,0x6c,0x02,0xd3,0xf4,
    0xf6,0x8f,0xe5,0x4b,0x9b,0xb2,0x98,0x66,0x2e,0x53,0xa1,0xe7,0xcb,0x78,0xea,0xf3,
    0x86,0xe5,0x8a,0xfb,0x0a,0xfe,0x45,0x43,0xda,0xd3,0x9a,0xac,0xc1,0x79,0xde,0xb2,
    0xd5,0xf0,0x5a,0x7a,0xde,0xb1,0x2c,0xe5,0xad,0xcd,0x1a,0x39,0x65,0xd6,0x4c,0x85,
    0x1e,0xbe,0xa6,0x87,0x81,0xd0,0xc3,0x37,0xf0,0xde,0xc3,0x15,0x38,0xef,0x61,0x36,
    0xf4,0x20,0x6d,0xc6,0x62,0x16,0xdf,0x99,0xd0,0xc3,0xb7,0x78,0x67,0xa1,0x87,0xef,
    0xe0,0xbd,0x87,0x8e,0xac,0xc1,0x79,0x9e,0x7a,0xf0,0x5a,0xb3,0xa1,0x87,0xce,0xac,
    0x91,0x33,0xcd,0x9a,0x99,0xd0,0xc3,0xf7,0xf4,0xb0,0x27,0xf4,0xf0,0x03,0xbc,0xf7,
    0xf0,0x23,0x9c,0xf7,0x30,0x17,0x7a,0x90,0x76,0xd5,0x62,0x0e,0x5f,0xbd,0x1f,0xc0,
    0xf7,0x1a,0xde,0x9d,0xd9,0xff,0x77,0x45,0x7b,0xf4,0xdc,0xb9,0xb0,0xc7,0x75,0xe4,
    0xcd,0xb2,0xee,0x2a,0xfb,0xd1,0x5d,0x38,0xc9,0x5d,0x12,0xd6,0xbd,0x39,0xcd,0x9d,
    0x19,0xb4,0xfd,0xe9,0xbe,0xbc,0x47,0xce,0xe9,0x70,0x2e,0xdf,0xa7,0xaf,0xa1,0x70,
    0x2e,0xcf,0xc0,0xfb,0x79,0x3e,0x8b,0xef,0x99,0xfc,0xf7,0xab,0x9c,0xdf,0xa9,0x0f,
    0xa8,0x77,0x96,0x5a,0xfa,0xed,0xbb,0x4e,0xad,0xfd,0xd4,0xd2,0xef,0xc5,0x0d,0xf8,
    0x2b,0x96,0x23,0xfc,0x13,0x5c,0x6f,0x98,0xdb,0xcf,0xf0,0x7d,0xcc,0x6d,0x3e,0xcc,
    0x4d,0xda,0x2f,0x16,0xf3,0xcc,0x42,0xef,0xcf,0x5a,0xce,0x21,0xf6,0xa0,0x39,0xb9,
    0x36,0x1f,0x7c,0x7e,0xc5,0x67,0x28,0xf8,0xfc,0x06,0xef,0x3e,0x0b,0xc1,0x47,0xda,
    0x4d,0x8b,0x05,0x6a,0xdd,0xc4,0x67,0x38,0xf8,0xb8,0xb6,0x10,0x7c,0x7e,0xc7,0x67,
    0x24,0xf8,0xfc,0x01,0xef,0x3e,0x8b,0xc1,0x47,0xda,0x2d,0x8b,0x45,0x6a,0xdd,0xc2,
    0xa7,0x16,0x7c,0x5c,0x5b,0x0c,0x3e,0x7f,0xe2,0x33,0x10,0x7c,0xfe,0x82,0x77,0x9f,
    0xa5,0xe0,0x23,0xed,0xb6,0xc5,0x12,0xb5,0x6e,0xe3,0x33,0x1a,0x7c,0x5c,0x5b,0x0a,
    0x3e,0x77,0xf0,0x39,0x1c,0x7c,0xee,0xc2,0xbb,0xcf,0x72,0xf0,0xb9,0x9b,0x73,0x29,
    0xe7,0x54,0xeb,0x1e,0x3e,0x63,0xc1,0xc7,0xb5,0xe5,0xe0,0xf3,0x2f,0x3e,0x47,0x82,
    0xcf,0x7d,0x78,0xf7,0xf1,0xcb,0x20,0x1f,0x69,0x0f,0xf8,0x67,0xa2,0x5a,0x0f,0xf0,
    0xa9,0x07,0x1f,0xd7,0xf4,0x74,0x9f,0x62,0xd6,0xf0,0x39,0x1a,0x7c,0x4a,0x59,0x83,
    0x77,0x9f,0x6a,0xf0,0x91,0x56,0xb6,0xa8,0x52,0x4b,0xef,0xf2,0x19,0x0f,0x3e,0xae,
    0x55,0x83,0xcf,0x2a,0x7c,0x8e,0x05,0x9f,0xd6,0xac,0xc1,0xbb,0x4f,0x7b,0xf0,0x91,
    0xd6,0x66,0xd1,0x4e,0xad,0x36,0x7c,0x26,0x82,0x8f,0x6b,0x7a,0xde,0xb7,0xa6,0x06,
    0x2c,0xfe,0x03,0xad,0x5f,0xf0,0xc4,0xf8,0x0b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2D color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = texture(sampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     broadcastColor(colorValue);
//
// }
