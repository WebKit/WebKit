// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x97,0xff,0x6b,0xd5,0x55,
    0x18,0xc7,0x3f,0xe7,0xde,0xbb,0x2f,0x6e,0x69,0xca,0x96,0xa6,0x6e,0xb1,0xe5,0x72,
    0xe6,0x97,0x69,0x7e,0xd7,0x79,0x35,0x59,0xba,0x99,0xa6,0xb9,0x21,0x69,0x66,0x61,
    0x98,0x69,0xf9,0xa5,0x34,0xfa,0x45,0xa8,0x2c,0x4d,0x05,0x2b,0x49,0x2b,0x47,0x96,
    0x23,0x52,0x92,0x24,0xb4,0x52,0xa2,0xb4,0x72,0x10,0xc3,0xa2,0x14,0x6a,0x83,0x72,
    0xe8,0x5f,0x10,0x49,0x62,0x6a,0x11,0x76,0x9e,0x73,0x5e,0xcf,0xee,0xd3,0x25,0x1b,
    0x1c,0x3e,0xf7,0xbc,0x9f,0x6f,0xef,0xe7,0x7d,0x9e,0xf3,0xb9,0x77,0xe9,0xd4,0x90,
    0xa2,0x24,0x71,0x49,0x49,0x52,0x9c,0xcc,0x73,0x49,0xf8,0xeb,0x97,0xa4,0x12,0xc7,
    0x73,0xac,0x7f,0x96,0x26,0x85,0x61,0xdf,0x38,0xaf,0x65,0x5e,0xdd,0xc6,0x67,0x56,
    0xd4,0x8d,0x9f,0x30,0x46,0xfc,0xfa,0x24,0xe9,0xe0,0x2f,0xb6,0x9b,0x93,0xa2,0x24,
    0xe3,0x9f,0xb2,0xd6,0x2e,0x5f,0xbd,0x4e,0xf0,0xa1,0x7e,0x5d,0xf0,0xab,0xaf,0xf7,
    0x13,0xbc,0x48,0x72,0xf8,0x4f,0x43,0x43,0x4e,0x89,0x49,0x92,0xa6,0xa4,0x20,0x19,
    0x19,0xcb,0x26,0x43,0x78,0x2a,0xe6,0xc0,0x8a,0x0d,0x96,0x02,0xeb,0x6b,0xb0,0x34,
    0x58,0xb9,0xc1,0x32,0x60,0xb7,0x1a,0xac,0x00,0xac,0xc2,0x60,0x85,0x60,0x55,0x06,
    0x2b,0x02,0xab,0x31,0x58,0x31,0xd8,0x30,0x83,0xf5,0x02,0x1b,0x69,0xb0,0x12,0xb0,
    0x31,0x06,0x2b,0x05,0x1b,0x6f,0xb0,0x9b,0xc0,0x26,0x1b,0xac,0x37,0xd8,0xb4,0xa0,
    0x53,0xba,0xa7,0x5f,0xd1,0x6c,0xa9,0x7f,0xde,0x8e,0x3e,0xba,0xaf,0x36,0x7b,0xd1,
    0xf9,0x36,0xf6,0x65,0x3e,0x2a,0x15,0xec,0xe9,0xa0,0x8d,0x7c,0xee,0xef,0x3f,0x15,
    0xd2,0xe7,0x08,0xef,0x5f,0x48,0xbd,0x8a,0xba,0xfb,0xea,0xcb,0xbd,0x47,0x1f,0x83,
    0x97,0xf9,0xd5,0xfc,0xd9,0xfc,0x99,0xba,0x17,0x0d,0x17,0x2d,0xea,0x9c,0xae,0xfb,
    0x41,0x7e,0x65,0x4b,0xb6,0xcd,0xd0,0xbd,0xe8,0xf9,0x51,0xe3,0xf2,0xec,0x2d,0x7e,
    0x5f,0x45,0x0d,0x39,0xbb,0x01,0x7e,0x5f,0xcd,0x3e,0xc5,0xbe,0x06,0xcd,0x33,0x01,
    0xcf,0x24,0x77,0xe0,0x2b,0x78,0x3d,0xfb,0xa1,0x26,0xbe,0x16,0x7f,0x89,0x97,0xfc,
    0x23,0xc8,0x97,0x84,0x7e,0xfb,0x06,0x8d,0xaa,0x59,0x55,0x3d,0xfd,0xfd,0xff,0xaa,
    0xea,0x79,0x66,0x92,0x51,0x9c,0xe3,0x48,0xea,0xcb,0xbe,0x0e,0x6c,0x04,0xfd,0x8c,
    0x86,0x8f,0xf8,0x8f,0xc1,0x56,0x6d,0xec,0x13,0x4d,0x3f,0x93,0x7a,0x62,0xa3,0x5d,
    0x9e,0x53,0xe1,0xab,0xfe,0x0d,0xcc,0xa2,0xda,0xe7,0x90,0x5f,0xed,0xf3,0x39,0x9b,
    0x81,0x3e,0xd3,0x62,0xfa,0xe7,0x6a,0xf6,0xfc,0xe9,0x7e,0xb0,0x3f,0xd7,0x25,0xfe,
    0xb9,0x98,0xfa,0x0f,0x82,0x2f,0xa1,0x1f,0xd9,0x2f,0xcd,0xab,0xbf,0x2c,0x6f,0xbf,
    0x0a,0x7d,0x25,0x7e,0x35,0xfc,0xab,0x8c,0x7d,0x1d,0x73,0xad,0xfb,0x2d,0x70,0x92,
    0xf3,0x79,0x85,0xcf,0x69,0x63,0xdf,0xc3,0x1d,0xd2,0xf9,0xd8,0x67,0xea,0xc9,0xfe,
    0x50,0xd8,0x3d,0xdf,0x20,0xf1,0x87,0xd1,0x2a,0x63,0xe2,0x8f,0x72,0xdf,0x74,0x7f,
    0x32,0xef,0x3c,0x4e,0x73,0x7f,0x84,0xef,0x79,0x6a,0x1f,0xa6,0xdf,0xf3,0xbc,0x73,
    0xd2,0xe1,0x5c,0x0a,0x42,0x5f,0x19,0xea,0x0b,0x76,0xd5,0x23,0xa2,0x7d,0x96,0x59,
    0x1c,0xc6,0xbc,0x2d,0xf0,0x8c,0x65,0xd6,0xee,0x04,0x1b,0x66,0x74,0x5e,0xc7,0x1c,
    0x0f,0xc7,0x3e,0xd3,0x67,0x90,0x39,0xb8,0x8b,0x59,0x19,0x4d,0x3e,0xf1,0x19,0x0b,
    0xfe,0xa2,0xf7,0x91,0xfd,0x38,0xe2,0xc6,0x12,0x37,0x89,0x3b,0x5f,0xc7,0xdc,0x64,
    0x99,0x81,0x29,0xe0,0x1f,0x7a,0x9f,0x3e,0xa1,0x97,0x88,0xc9,0xec,0x5c,0xf1,0xcc,
    0xb3,0xf0,0xf9,0xd3,0xfb,0xd7,0xf3,0x8e,0xc8,0xd2,0x8f,0x7c,0x5e,0xe8,0xe3,0x44,
    0x9b,0xbb,0xa9,0x29,0x7f,0xcf,0xa1,0xd7,0x4c,0xf0,0x66,0xaf,0x7e,0xb8,0x2b,0x2e,
    0x62,0xea,0x77,0xcd,0xe7,0xd0,0x5c,0xf2,0xbc,0xec,0xb5,0x10,0xbf,0xa9,0x2e,0xfa,
    0x14,0x10,0x33,0xcd,0xf4,0x70,0x0f,0x3d,0x34,0x98,0x1e,0x66,0x81,0x6b,0x0f,0xb3,
    0xc1,0xb4,0x87,0x26,0xd3,0xc3,0xec,0xf0,0xde,0x4a,0x02,0x26,0x75,0x1b,0x4d,0x0f,
    0x73,0xa9,0xed,0x4c,0x0f,0xf3,0xc0,0xb5,0x87,0x1a,0x17,0x31,0xf5,0x93,0x1e,0x34,
    0x57,0x93,0xe9,0xa1,0xde,0x45,0x9f,0x2c,0x31,0x8d,0xa6,0x87,0x05,0xf4,0x30,0xdf,
    0xf4,0x70,0x3f,0xb8,0xf6,0xb0,0x10,0x4c,0x7b,0x68,0x31,0x3d,0x2c,0x0c,0x7c,0x92,
    0x80,0x49,0xdd,0x66,0xe6,0x48,0xea,0x2e,0xa2,0x76,0xbd,0xcb,0xdd,0x55,0xe1,0xa8,
    0xbe,0x2d,0x86,0xe3,0x34,0xfc,0x9a,0x88,0x6b,0x86,0x8f,0xdc,0xe1,0x87,0xb8,0xbf,
    0x3a,0x73,0x0f,0xc3,0x79,0x99,0x99,0xb9,0x47,0xc0,0x5f,0x60,0xe6,0x96,0x83,0x49,
    0xde,0xf5,0xbc,0x43,0x1f,0x05,0x5f,0xe1,0xf7,0x8b,0xc3,0x33,0xe6,0x7e,0x9c,0x98,
    0xc7,0xc0,0x24,0xaf,0xc6,0xac,0x04,0xdf,0xee,0x7d,0x6a,0x83,0x6f,0xcc,0xb3,0x12,
    0x3e,0xf2,0xae,0x78,0x02,0x3e,0xab,0xe0,0x23,0x67,0xf5,0x24,0xf8,0x7a,0xee,0xfb,
    0x1a,0xb0,0x07,0x7c,0xbf,0x72,0xe7,0xd6,0xf6,0xd4,0x8e,0xda,0xac,0x31,0x67,0xb2,
    0x9e,0x7c,0xeb,0xcc,0x99,0x3c,0x05,0xae,0x67,0xf2,0x34,0x98,0x9e,0xc9,0x46,0x73,
    0x26,0x62,0xdb,0xe0,0xd7,0x46,0x74,0xde,0xc0,0x5c,0x09,0x8f,0x67,0xa9,0x9d,0x10,
    0x77,0x8d,0xcf,0x7f,0xf9,0xcf,0x92,0xeb,0x57,0x62,0xe4,0x79,0x82,0x5a,0xbf,0x11,
    0xd7,0x9b,0x98,0xab,0xa6,0x96,0xd8,0x2e,0xfa,0x75,0x89,0xb8,0x4b,0xe1,0xbd,0x54,
    0x14,0x6a,0x5d,0xa6,0xb7,0x41,0xc4,0xcb,0x77,0xe8,0x56,0x78,0xfc,0x81,0x5d,0x6c,
    0x2f,0x81,0x5d,0x01,0xaf,0x60,0x4e,0xae,0x91,0xf3,0xa2,0x89,0xfb,0x9d,0x5c,0x65,
    0x79,0x3e,0xc2,0xe9,0xba,0xaf,0x76,0x15,0xec,0x32,0x1c,0xb2,0x2e,0xe6,0xbd,0x44,
    0xec,0x45,0xee,0x8f,0x9c,0x41,0xad,0x8b,0x76,0xd5,0x43,0x35,0xda,0x84,0x46,0x8e,
    0x7e,0x4b,0xdd,0xbf,0x35,0xba,0x4e,0xcd,0xeb,0x46,0x23,0xe7,0x62,0x9c,0x6a,0x54,
    0xe2,0x72,0x1a,0x89,0x2d,0xe5,0x57,0x81,0xe3,0xdd,0xeb,0x72,0x1a,0x15,0xb9,0x9c,
    0x46,0x9b,0xf2,0x34,0x2a,0x76,0xd1,0x6e,0x35,0xea,0xe5,0x22,0xae,0x1a,0x95,0x92,
    0x53,0xf2,0x6b,0x5c,0x06,0x2e,0x65,0x79,0x3e,0xc2,0x49,0x35,0x12,0x4c,0x35,0x9a,
    0xe1,0x62,0x5e,0xe1,0x95,0x81,0xab,0x6a,0x34,0xdc,0x45,0x7b,0x2d,0x3c,0x55,0xa3,
    0xcd,0x68,0x94,0xa2,0xdf,0xca,0x3c,0x8d,0xfa,0x51,0x53,0x9e,0xaa,0x51,0x99,0x8b,
    0x71,0xaa,0x51,0x85,0xd1,0x48,0x6c,0xe5,0x7e,0x0d,0x20,0x6e,0x80,0xd1,0x68,0xa0,
    0xd1,0x68,0x73,0x9e,0x46,0x83,0x5c,0xb4,0x5b,0x8d,0x06,0xbb,0x88,0xab,0x46,0x95,
    0xe4,0x2c,0x37,0x1a,0xf5,0x87,0x4b,0x59,0x9e,0x4f,0x85,0xd1,0xa8,0xd2,0x68,0x34,
    0xd3,0xc5,0xbc,0xc2,0xab,0x3f,0x5c,0x55,0xa3,0x51,0x2e,0xda,0x45,0xab,0x14,0xf9,
    0xf4,0xee,0x6d,0x64,0x16,0xc5,0xaf,0x81,0x59,0x6b,0x21,0xa6,0xd2,0xe5,0xee,0xfc,
    0x56,0xee,0xfc,0x16,0x73,0xe7,0x5f,0x06,0xd7,0x3b,0xbf,0x0d,0x4c,0xef,0xfc,0x0e,
    0x73,0x0f,0xb7,0x85,0x77,0x54,0x92,0xec,0xa6,0xee,0x6e,0xf3,0x3e,0x79,0x83,0xdc,
    0x7b,0x4c,0xee,0x37,0xc1,0x35,0xf7,0x5b,0x60,0x9a,0xbb,0xd5,0xe4,0x16,0xdb,0x5e,
    0xbf,0x5a,0xc9,0xbd,0xd7,0xcc,0xc1,0xdb,0xf4,0x25,0xbf,0x2b,0x3e,0x27,0xd7,0x3b,
    0xe0,0xfb,0xd0,0x42,0xe3,0x5a,0xd1,0x42,0x7c,0xde,0xa5,0xe6,0x6e,0xfc,0xf7,0x52,
    0xb7,0xcd,0xd4,0x15,0x9f,0xfd,0x7e,0xb5,0x11,0xbf,0xdf,0xd4,0x7d,0xcf,0xd4,0x5d,
    0xe0,0x7f,0x29,0xc9,0x6f,0xb0,0xf7,0xc1,0x1a,0x5c,0xee,0x77,0x4b,0x2a,0x7c,0x77,
    0x15,0x06,0xfb,0x01,0xe2,0x74,0xc9,0x3b,0x5d,0xf0,0x83,0xc4,0x1e,0x08,0xb9,0x7a,
    0x85,0xb3,0xfa,0x80,0x5c,0x07,0xf9,0xed,0x54,0x60,0x7e,0xe3,0x49,0x4f,0xca,0xa9,
    0xcd,0x9c,0xef,0x6c,0x6a,0xb7,0x12,0xbf,0x1f,0xdf,0x1d,0xf8,0x6e,0x37,0xfc,0x77,
    0xfe,0x07,0xff,0xd7,0x6e,0xc0,0xff,0x55,0x78,0xee,0xc2,0x67,0xa7,0xe1,0xf9,0x3a,
    0x31,0xbb,0x6e,0xc0,0x53,0x6b,0xef,0x30,0x3c,0x67,0xb9,0xc8,0xb5,0x8d,0xf8,0xed,
    0xd4,0xa8,0x09,0xf3,0x10,0xed,0x87,0xc2,0xfd,0x8e,0xbf,0x4d,0x8f,0x80,0xeb,0x3c,
    0x7d,0xcc,0x3c,0x1d,0x35,0xf3,0xf4,0x09,0xb8,0xce,0xd3,0xa7,0x60,0x3a,0x4f,0xc7,
    0xcd,0xb9,0x8a,0xed,0x58,0x78,0x77,0x46,0x6e,0x27,0x4c,0xee,0x2f,0xc9,0x7d,0xd2,
    0xe4,0xfe,0x0a,0x5c,0x73,0x7f,0x0d,0xa6,0xb9,0xdb,0x4d,0x6e,0xb1,0x9d,0xf2,0xab,
    0x83,0xdc,0x1d,0xe6,0x7b,0xfa,0x5b,0x72,0x9f,0x36,0xdf,0xd3,0xdf,0x81,0x77,0xf0,
    0xbb,0xeb,0x7b,0xb0,0x55,0xa6,0xde,0x0f,0xe0,0xcb,0xa8,0x77,0xd6,0xd4,0x13,0xdb,
    0x19,0xbf,0xce,0x52,0xef,0x0c,0xdf,0x2f,0xa2,0xdb,0x04,0x17,0x39,0x1e,0x49,0x72,
    0xbf,0xcf,0xd4,0xef,0x2c,0xe7,0x21,0x7e,0x8d,0x2e,0xfa,0x74,0x10,0x73,0xc6,0xf0,
    0xf9,0x11,0x3e,0x13,0x0d,0x9f,0x9f,0xc0,0x95,0x4f,0x97,0xe1,0x23,0xb6,0x4e,0xbf,
    0xba,0xa8,0xd3,0x69,0xf8,0x4c,0x82,0x4f,0xa3,0x79,0x4f,0xa9,0x5f,0x97,0xe1,0xd3,
    0xe4,0xa2,0xcf,0x59,0x62,0x3a,0x0d,0x9f,0x9f,0xe1,0x73,0xd4,0xf0,0xf9,0x05,0x5c,
    0xf9,0x74,0x1b,0x3e,0x62,0x3b,0xe7,0x57,0x37,0x75,0xce,0x19,0x3e,0x53,0x5c,0xfc,
    0xbf,0xaf,0xc9,0xe5,0xe6,0x55,0xfd,0xba,0x0d,0x9f,0xb9,0x2e,0xfa,0x74,0x11,0x73,
    0x0e,0xdf,0x76,0x7c,0x4f,0x71,0xaf,0x64,0x56,0xbe,0x41,0xef,0xb4,0xa9,0x33,0xce,
    0xe5,0xf0,0x24,0x2f,0xb6,0xdd,0xd4,0xb9,0xd7,0xc5,0x5a,0xdd,0xc4,0x9c,0xc2,0xf7,
    0x38,0xbe,0xc7,0xb8,0x77,0xe2,0xfb,0x05,0xf9,0x8e,0x70,0xef,0x8a,0xb8,0xab,0xe9,
    0xbc,0x98,0xe3,0x26,0xff,0x1c,0x17,0x6b,0xb4,0x13,0x2f,0xf9,0xa6,0xfb,0x88,0x0b,
    0xd8,0xfe,0xf6,0x53,0x32,0xd9,0xaf,0x7f,0x00,0xe4,0x04,0x71,0x2c,0x90,0x12,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform sampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
