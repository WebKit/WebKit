// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xdf,0x6b,0x54,0x57,
    0x10,0xc7,0xcf,0xdd,0x5d,0xd7,0xa8,0x45,0x23,0xfe,0xc8,0x46,0x6c,0x12,0x37,0xa1,
    0x2f,0x29,0x12,0xb0,0x8a,0xa4,0x58,0xe2,0x4b,0xd6,0xb4,0xf1,0x21,0xc6,0x07,0xd1,
    0xa4,0xb5,0x2a,0xd4,0x7d,0x50,0x03,0xf6,0x35,0xa2,0xf9,0x07,0x12,0xd3,0x42,0x11,
    0x6a,0x12,0x63,0x1f,0x1a,0x91,0x6a,0x05,0xa9,0x20,0xa8,0x11,0xa3,0xc6,0x3f,0x40,
    0x45,0xa5,0x60,0x45,0x7c,0x12,0x9f,0xc4,0x68,0x94,0x38,0x73,0xef,0x67,0xe2,0xf4,
    0xb2,0x0b,0x87,0x73,0xe7,0x3b,0xf3,0xfd,0xce,0x9c,0x99,0xb3,0x27,0x9b,0x69,0x5c,
    0x18,0x42,0x14,0x16,0x87,0xaa,0xb0,0x26,0x0a,0xf1,0x6f,0x79,0xc8,0x04,0xfd,0x5c,
    0x12,0xf2,0xf1,0x5e,0xea,0xec,0xee,0x5c,0x7f,0xf4,0xe7,0x03,0xeb,0xbf,0xda,0xd8,
    0xa2,0xfe,0xa5,0x21,0x1b,0xc7,0xa9,0x6f,0x99,0xc4,0x2c,0x90,0x3d,0x27,0xeb,0xd0,
    0x8f,0xe5,0xc3,0x8a,0xf7,0xc8,0xaa,0x16,0x3c,0x17,0x6b,0x85,0xd0,0x46,0xac,0xae,
    0x6d,0x12,0xbd,0x32,0x49,0x13,0x1a,0xd9,0x0d,0x8b,0xc0,0x72,0x0e,0xcb,0x80,0x55,
    0x39,0x2c,0x0b,0xf6,0x99,0xc3,0x72,0x60,0xd5,0x5a,0xaf,0x44,0x18,0xb7,0x24,0x9e,
    0x3a,0xd9,0xf3,0xf3,0xba,0xb9,0x50,0x4f,0xde,0x02,0xfc,0xfa,0x54,0x3d,0xca,0xaf,
    0x27,0x8f,0xf2,0xd7,0xc9,0x5e,0x9c,0xf7,0x25,0xf6,0x3a,0xea,0x55,0xbb,0x3d,0xa5,
    0x5f,0x4a,0xe9,0x97,0x2a,0xe8,0x97,0x9c,0x7e,0x47,0x4a,0xbf,0x03,0x7d,0xab,0xbf,
    0x27,0x9e,0x45,0x08,0x6b,0xb1,0x07,0xff,0x97,0x6f,0x41,0x18,0xaa,0xa0,0x3f,0xe4,
    0xf4,0x87,0x53,0xfa,0xc3,0xe8,0x9b,0x3d,0x9a,0xd2,0x1b,0xab,0xa0,0x37,0xe6,0xf4,
    0xc6,0x53,0x7a,0xe3,0xe8,0x99,0xff,0x2e,0xf5,0xd6,0xca,0x5a,0x21,0xa7,0xc8,0xc4,
    0xfe,0x6c,0xec,0xd7,0xef,0x55,0x12,0xa3,0xf9,0x1a,0xd0,0xa8,0x0b,0x0b,0xe3,0x79,
    0xe5,0x2b,0xac,0x06,0x89,0x5d,0x25,0xfb,0x22,0x59,0x1a,0xf3,0x35,0xf6,0x6a,0x30,
    0xd5,0xaa,0x41,0x4b,0xe7,0xd1,0x8c,0x5d,0xc0,0x56,0x7e,0x2d,0xb1,0xaa,0xf7,0xb9,
    0x54,0x61,0xf7,0xa1,0x8e,0x39,0xd7,0x11,0xd7,0x40,0x7d,0xf5,0xe4,0x69,0x70,0x73,
    0x30,0x5d,0x3b,0xb7,0xd9,0x4d,0xf8,0x95,0xff,0x05,0xdf,0x79,0xfc,0xc9,0x9e,0xf4,
    0xc5,0xe2,0x5b,0x9c,0xad,0xfe,0x0d,0xb2,0xe6,0xe2,0xb3,0x65,0xc2,0x26,0x87,0xb7,
    0x2a,0x3e,0xf7,0x89,0xd7,0xc6,0x7c,0xb4,0xfe,0x76,0x57,0xbf,0xde,0xa3,0x76,0xf2,
    0x6f,0x9b,0xbf,0x33,0x49,0xfd,0x6a,0x77,0xb8,0xfa,0x95,0xd3,0x85,0x5d,0x23,0xf6,
    0x6e,0x74,0xb2,0xf0,0xf7,0xd0,0xb3,0xdd,0xf0,0xf7,0xf0,0x5f,0x8e,0x1c,0xbf,0x97,
    0xf3,0x6b,0xfc,0xf7,0xf8,0xfc,0x79,0xfb,0xc1,0xb4,0xce,0x41,0x57,0xa7,0xde,0xc7,
    0x41,0x78,0x27,0xa9,0x61,0x88,0x3c,0x6a,0x0f,0x83,0x29,0x6f,0xd4,0xf1,0xf4,0xde,
    0x8d,0xc2,0x3b,0x43,0xcc,0x18,0x3c,0xb5,0xc7,0x53,0xe7,0xbb,0x45,0x9f,0xcc,0xbe,
    0x43,0xef,0xbe,0x14,0x4b,0xcf,0x75,0x17,0xac,0x9f,0x65,0x71,0xcb,0xa3,0xe4,0xed,
    0xd8,0x24,0xf7,0x3f,0x83,0x46,0xa0,0x37,0x33,0x82,0xe8,0x1b,0xf7,0x46,0xac,0x69,
    0xf0,0x59,0xf9,0xd6,0x5e,0xdc,0xc3,0xaf,0xfb,0x56,0x89,0xd2,0xbb,0xf6,0x2d,0xf7,
    0x53,0xef,0xca,0x16,0xf4,0xbf,0x03,0xdf,0x2a,0x96,0xde,0x93,0x4e,0x66,0x53,0xc4,
    0x67,0x71,0xdb,0xf1,0x1d,0x17,0x2d,0xb5,0x77,0xe0,0xef,0x72,0xdc,0x6e,0xc7,0xdd,
    0xe1,0xb8,0x3b,0xf1,0x19,0x77,0x17,0xd8,0x76,0x6a,0xd3,0x79,0xfd,0xc0,0x4c,0x7b,
    0x1d,0x6f,0x2f,0xf8,0x4d,0x78,0xfb,0xe0,0x15,0x9c,0xd6,0x7e,0xe2,0xf6,0xc5,0x3d,
    0x4e,0xb0,0x03,0xe0,0x1a,0xf7,0x97,0x60,0x7a,0x7f,0x7f,0x02,0xdf,0x45,0xbf,0xca,
    0xf4,0xeb,0x9d,0xe4,0x52,0xdf,0x41,0x59,0x65,0x7a,0xa6,0xdf,0x6f,0x65,0x9f,0xc6,
    0x2e,0x3b,0x9d,0xc3,0xe8,0xec,0x44,0xa7,0xcf,0xe9,0xa8,0xef,0x88,0xac,0x3e,0x78,
    0x47,0x5c,0xef,0xef,0xd3,0xfb,0x82,0x3b,0xdf,0x03,0x70,0x3b,0xcb,0x43,0xb4,0x1f,
    0xb8,0x33,0x3f,0x02,0x6f,0x72,0x7d,0x7e,0xcc,0xff,0xbf,0x88,0xdf,0xf4,0x9e,0xe0,
    0xbb,0x03,0xf7,0x5f,0xb8,0xcd,0xae,0x37,0x4f,0xc1,0x5b,0x5c,0x8e,0xff,0xe0,0x3e,
    0x75,0xdc,0x67,0xe0,0xfa,0x0e,0x9c,0xe3,0xec,0xcf,0xc1,0x37,0xd0,0x9f,0x17,0x9c,
    0x53,0xf7,0x09,0x61,0x29,0xaf,0x10,0x25,0x71,0xad,0xc4,0x5a,0xde,0x97,0xf8,0x74,
    0xbe,0x53,0x60,0xaf,0x98,0xf7,0x4b,0xf4,0xac,0x6f,0xba,0xbf,0x96,0xb7,0x57,0x63,
    0x56,0xc3,0x29,0x13,0xff,0xc2,0xf5,0xeb,0x18,0xfd,0xd2,0xff,0xcb,0x45,0x6a,0x3c,
    0x0e,0x6e,0x73,0x1e,0x70,0xf3,0x51,0xdf,0x09,0x59,0x03,0xe4,0x39,0xe1,0xe6,0xf3,
    0xa6,0xc2,0x7c,0x66,0xc0,0x2d,0xdf,0x5b,0xb4,0x67,0x5c,0xef,0x66,0xc1,0xfd,0x7c,
    0xde,0xbb,0xf9,0xcc,0x3a,0xbd,0x0f,0xf8,0xac,0xc7,0x73,0x70,0xfd,0x7c,0x32,0x51,
    0x82,0xfb,0xf9,0x64,0xa3,0x84,0xab,0x3e,0xe3,0xe6,0xa2,0x04,0xf7,0xf3,0xc9,0x47,
    0x09,0x6e,0xf3,0xa9,0x8a,0x92,0x73,0xea,0x6e,0xf3,0xa9,0x8d,0x92,0xb8,0x56,0x34,
    0x2c,0xef,0xd2,0x28,0xf1,0xe9,0x7b,0x63,0xf3,0xa9,0x8e,0x92,0xfe,0xab,0x4f,0xf5,
    0xac,0x6f,0x03,0x6e,0x3e,0x35,0xc4,0xf4,0x11,0xaf,0xb9,0xac,0xa7,0xbf,0xd0,0xd3,
    0x26,0xd7,0x83,0x5f,0xc1,0xad,0xa7,0xbf,0x81,0xed,0x75,0xfd,0x3b,0xc5,0xbb,0x5b,
    0xc4,0xff,0x8d,0xcc,0xf1,0x14,0xb9,0xec,0xac,0xbf,0xc3,0xe9,0x65,0xce,0x23,0x6e,
    0xce,0xea,0x3b,0x2d,0x6b,0x84,0x7a,0x4f,0xbb,0x39,0x9f,0xa5,0xa6,0x36,0x57,0xd3,
    0x1f,0xe0,0x66,0xff,0xc9,0x5b,0x67,0xf5,0x4c,0xf0,0x9e,0x17,0x89,0xd5,0x7a,0x26,
    0x88,0xb3,0x73,0x9c,0xc7,0xd7,0xef,0xb0,0x0b,0xbc,0x91,0xfd,0x4e,0xeb,0xa2,0x7b,
    0x23,0x2f,0xb8,0x9c,0x7f,0xe3,0xb3,0xb8,0x4b,0x2e,0xe7,0x79,0x72,0x5e,0x22,0xce,
    0xf4,0x2f,0x93,0xb3,0xcb,0xdd,0xa9,0x7f,0x78,0x9b,0x7c,0xce,0x2b,0x4e,0xeb,0x32,
    0x5a,0x57,0x88,0x35,0xad,0xab,0x68,0x35,0x3b,0xec,0x1a,0xf5,0x37,0x3b,0xad,0xeb,
    0xae,0xfe,0x6b,0xae,0xfe,0x1b,0xf8,0x2c,0x6e,0xd2,0xe5,0xbc,0x4a,0xce,0x49,0xe2,
    0x4c,0x7f,0x8a,0x9c,0xb7,0x1c,0xef,0xb6,0xe3,0x4d,0xc1,0xbb,0xcd,0x9c,0xf5,0x0e,
    0xda,0x4c,0x47,0x52,0x6f,0xf4,0x74,0xfc,0xff,0x8a,0xc2,0x66,0x59,0x1f,0x01,0x95,
    0xba,0x8e,0x3e,0x3c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(set = 0, binding = 2)readonly buffer srcIndirect
// {
//
//     uint srcIndirectBuf[];
// };
//
// layout(set = 0, binding = 3)buffer dstIndirect
// {
//
//     uint dstIndirectBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndirectOffsetDiv4;
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint dstIndirectBufOffsetDiv4;
// };
//
// uint PullIndex(uint index)
// {
//     uint srcIndex = index + srcIndexOffset;
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     if(value == 0xFF)
//         value = 0xFFFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint indexCount = srcIndirectBuf[srcIndirectOffsetDiv4];
//     uint firstIndex = srcIndirectBuf[srcIndirectOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
//     if(gl_GlobalInvocationID . x == 0)
//     {
//         dstIndirectBuf[dstIndirectBufOffsetDiv4]= srcIndirectBuf[srcIndirectOffsetDiv4];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 1]= srcIndirectBuf[srcIndirectOffsetDiv4 + 1];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 2]= firstIndex & 1;
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 3]= srcIndirectBuf[srcIndirectOffsetDiv4 + 3];
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 4]= 0;
//     }
//
// }
