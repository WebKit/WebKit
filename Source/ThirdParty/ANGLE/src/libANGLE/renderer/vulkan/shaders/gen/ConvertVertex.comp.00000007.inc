// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0xe7,0x37,0x63,0x66,0x8c,0x75,0x0c,0x63,0x1b,0x63,0xa6,0x09,0x63,
    0x09,0x49,0x65,0x49,0x07,0x89,0x94,0x54,0x84,0x93,0x16,0x64,0x5a,0x28,0xa5,0xbd,
    0x24,0x09,0x89,0x2c,0xa9,0x2c,0x45,0x85,0x22,0x59,0x2a,0xa1,0x7d,0x3d,0x25,0x15,
    0xd2,0xa6,0x45,0x5a,0xce,0x21,0xd1,0xa6,0x5d,0x52,0xe8,0xb9,0xef,0xfb,0xb9,0xcd,
    0xf5,0x34,0x7f,0xf5,0x3b,0xe7,0x3d,0xbf,0xf7,0x7e,0xef,0xfa,0x7c,0x9f,0xfb,0x2c,
    0xbf,0x5f,0x5a,0xaa,0x38,0x33,0x8a,0x5c,0x94,0x1d,0x65,0x45,0xcd,0x5d,0x14,0x7f,
    0x72,0xa2,0x54,0x24,0xaf,0x95,0xa2,0x8c,0xf8,0xbb,0x47,0xaf,0xbe,0xbd,0x5a,0x5e,
    0x75,0x75,0x69,0xcb,0xb6,0x47,0xb7,0x16,0x7d,0xd5,0x28,0x2d,0xb6,0x13,0x5d,0x35,
    0x6f,0x53,0xc1,0x7f,0xa7,0xfb,0x67,0xc4,0x90,0x61,0x97,0x09,0xbe,0xcb,0x3f,0xd5,
    0x3d,0x9e,0x1e,0xc7,0x8a,0xa2,0xce,0xd8,0xca,0x73,0x92,0xb7,0x6e,0x94,0xa4,0x89,
    0x8a,0xf9,0x56,0xcc,0x81,0xa5,0x1b,0x2c,0x05,0x96,0x65,0xb0,0x34,0xb0,0xca,0x06,
    0x4b,0x07,0xab,0x6e,0xb0,0x0a,0x60,0x35,0x0d,0x96,0x01,0x56,0xc7,0x60,0x99,0x60,
    0xf9,0x06,0xcb,0x02,0x2b,0x34,0x58,0x45,0xb0,0xc3,0x0d,0x96,0x0d,0x56,0x62,0xb0,
    0x4a,0x60,0x2d,0x0c,0x56,0x19,0xac,0xb5,0xc1,0xaa,0x80,0xb5,0x35,0x58,0x55,0xb0,
    0x76,0xc2,0xbb,0x1f,0xa9,0x72,0xd0,0xc3,0x8f,0x70,0x30,0xf5,0x2b,0x3f,0x43,0x02,
    0x1e,0xc5,0x7e,0x08,0xfc,0x88,0xfd,0x50,0xff,0x7d,0xd8,0xbf,0xba,0x44,0x2e,0x82,
    0x67,0x91,0xb7,0x05,0xf1,0xb6,0x97,0x13,0x6f,0xbb,0x89,0xb7,0x23,0x88,0xb7,0x83,
    0x78,0x2a,0xef,0x62,0xec,0xf9,0xc8,0xcd,0x5c,0x22,0xd7,0xf5,0x4f,0xae,0x1f,0x45,
    0x2a,0xb6,0x4f,0x8b,0xe3,0xc9,0x7b,0x2d,0x6f,0x93,0x01,0xc7,0x51,0xfc,0x9d,0x1e,
    0xcf,0x45,0x26,0x75,0x15,0xf9,0x9a,0xb2,0x78,0x57,0x3c,0xcf,0x7b,0xe7,0xe0,0x53,
    0xe4,0xed,0x6b,0xd0,0x63,0x99,0xf8,0xe7,0xf1,0x9e,0x83,0xbe,0x36,0xef,0x79,0xc4,
    0xab,0x6f,0xe2,0xe5,0x61,0x53,0x48,0x3d,0x82,0x15,0x78,0x6b,0xed,0x93,0xff,0xfb,
    0x48,0x1d,0x8d,0xe9,0x17,0x89,0xd5,0x11,0xb9,0x09,0x98,0x8c,0xbb,0x84,0x31,0xc8,
    0x5c,0x34,0x47,0x6e,0x6a,0xfc,0x9b,0x61,0x9b,0x81,0x5e,0xbe,0x5b,0x31,0x57,0x6a,
    0xdf,0x86,0xba,0x55,0xdf,0x91,0xbe,0x55,0x7d,0xd7,0x40,0xee,0x85,0x7f,0x4d,0xef,
    0x75,0x9a,0xf1,0xeb,0xc3,0x1c,0x8b,0x2c,0x5c,0x0d,0x60,0x3e,0x1a,0x78,0x54,0x7b,
    0xae,0x80,0xde,0x1a,0x4c,0x7d,0xe7,0x93,0x7b,0x08,0xe3,0x13,0x79,0xa8,0xa9,0x47,
    0xf2,0x95,0x9a,0x79,0xbd,0x08,0x5d,0x86,0xd1,0x0f,0x67,0x0d,0x68,0x1d,0x23,0xb0,
    0x57,0xfd,0xd5,0xac,0x2f,0x95,0x47,0x99,0x3a,0x45,0xbe,0xd1,0x3f,0x07,0xd3,0xca,
    0xe4,0x31,0xac,0x1f,0x8d,0x77,0xab,0xf1,0x17,0x79,0x46,0xc0,0xd7,0x3c,0xe6,0x40,
    0xea,0x7b,0x80,0xf9,0x2f,0x31,0xf1,0x1f,0x94,0xf8,0xfe,0xa3,0xf2,0xa2,0x60,0xbe,
    0xd6,0xb0,0xae,0x55,0x5e,0xc7,0x9c,0x69,0xfc,0x4d,0x81,0xfd,0x7b,0xec,0x4f,0xb5,
    0xbd,0xfc,0x11,0x7d,0x99,0x82,0xe7,0x6d,0x86,0x67,0x59,0x73,0xdb,0xa8,0xeb,0x2b,
    0x6c,0xb6,0xc3,0xb3,0xc8,0x3b,0xc0,0x24,0xce,0xd7,0xf8,0xa5,0x61,0xbf,0x93,0x9c,
    0x5f,0x63,0xbf,0x93,0xfd,0xd8,0xa1,0xff,0x86,0x77,0x3b,0x0f,0x29,0xd6,0xa9,0xd6,
    0xdd,0xd4,0x25,0x7b,0x76,0x0b,0x2f,0x49,0x1c,0x59,0xc7,0x82,0x6d,0x62,0x4c,0xc7,
    0xf8,0x75,0x94,0xa2,0x97,0x22,0x72,0xef,0xf5,0x48,0x05,0x72,0x0a,0x8f,0xfb,0xe0,
    0x53,0xe5,0xbf,0x02,0x39,0xc3,0x95,0xc9,0xb2,0x0e,0x6b,0xb9,0x43,0xf5,0x79,0x81,
    0xbe,0x6e,0x20,0xd7,0x0b,0xec,0x1b,0x04,0xfa,0x86,0x81,0xbe,0x31,0x72,0x17,0x5f,
    0xa5,0x70,0xf0,0x0b,0xbc,0x48,0xcf,0x75,0x62,0xdc,0xbf,0x82,0x8b,0x8d,0xac,0xbf,
    0xdf,0x58,0xb3,0xa5,0xc6,0xe6,0x77,0xf0,0xc7,0xbc,0x8d,0xac,0xa1,0x3d,0xf8,0x09,
    0xfe,0x87,0x67,0x62,0x2f,0x9c,0xec,0xf3,0xf6,0x7b,0x62,0x2c,0x8a,0x31,0xe1,0x47,
    0xde,0xf7,0x7b,0xf6,0xe5,0x5d,0xb0,0xe3,0xbd,0xfd,0x3e,0x6a,0x90,0xf7,0xbf,0x78,
    0xff,0xd3,0xeb,0xff,0xc6,0xe7,0xef,0x38,0x47,0x7a,0x74,0x40,0x7a,0x91,0xd8,0xa2,
    0x97,0x49,0xdc,0xcb,0xb7,0xd6,0xe6,0x5c,0xc2,0xb3,0xd6,0x9f,0xe6,0x92,0xfa,0x53,
    0xc6,0x26,0xdd,0x25,0xf8,0x4a,0xea,0xaf,0xe0,0x12,0x3f,0xc1,0xa5,0x66,0x91,0xf7,
    0x7b,0xfc,0x00,0xf9,0xf7,0x1b,0xce,0x32,0xdd,0x7f,0x39,0xcb,0x72,0x09,0xae,0x39,
    0x2b,0x96,0x93,0x33,0xdb,0x25,0xf8,0x04,0x6f,0x23,0x72,0x25,0x97,0xf8,0x65,0x1b,
    0x9b,0xca,0xd4,0x3e,0x16,0x9b,0x2a,0x2e,0xb1,0x13,0x5c,0xb8,0x91,0x7e,0xa9,0x62,
    0xec,0xab,0xba,0xa4,0x87,0x34,0x6f,0x35,0xf2,0x2e,0x32,0xb5,0x55,0x77,0x09,0xae,
    0x73,0x95,0xe3,0x12,0x3f,0xc1,0x65,0xae,0x72,0x5d,0xd9,0x5c,0x89,0xae,0x86,0x7f,
    0x72,0xe1,0x55,0xde,0x85,0x67,0xe5,0x21,0xd7,0xe4,0xae,0x4d,0x6e,0xa9,0x4b,0xfa,
    0x54,0xe4,0xf6,0x3e,0x87,0xac,0xe7,0x3a,0x2e,0xb9,0x6f,0xe4,0xa1,0x97,0xbe,0xae,
    0x83,0xaf,0xe8,0xeb,0xbb,0xa4,0xd7,0x45,0x27,0x3d,0x5c,0xdf,0xf8,0xe6,0xbb,0xe4,
    0xac,0xac,0x87,0x5e,0x7a,0x3e,0xdf,0xe4,0x2d,0x30,0x79,0xa5,0xdf,0x0b,0x4c,0xdc,
    0x42,0x97,0xac,0x11,0xd1,0x49,0xef,0x17,0xc6,0x71,0x33,0x92,0x73,0x54,0x6c,0x59,
    0x23,0x0d,0x4d,0xbc,0xc3,0x5c,0xb2,0x4e,0x5f,0x87,0xf3,0x62,0x97,0x60,0x45,0xae,
    0xac,0x37,0x8b,0xe1,0xe1,0x20,0x3c,0x1c,0x34,0xfc,0x1e,0x1e,0xcc,0x59,0x23,0x97,
    0x60,0x8b,0x4c,0x3f,0x37,0x72,0x87,0xf6,0xf3,0x01,0xe3,0xdf,0x84,0xfc,0x62,0x2b,
    0xeb,0xb3,0x09,0x5c,0xc8,0xde,0x52,0xe2,0x92,0xbb,0x46,0x63,0x97,0xac,0x99,0x76,
    0xfe,0x39,0x46,0xfb,0x87,0x75,0x20,0x67,0xdb,0xb1,0xde,0x37,0x93,0x7d,0x57,0xdf,
    0xb3,0xc9,0x55,0xd9,0xd6,0x8a,0x8d,0xf6,0x4b,0x73,0xd6,0x76,0x53,0x63,0xd3,0x02,
    0x5c,0xfb,0xf4,0x08,0xfc,0x5a,0x18,0x9b,0x96,0xc4,0x57,0x9b,0xd6,0x60,0xad,0x0c,
    0x0f,0x47,0xe2,0xdb,0xda,0xe4,0x3b,0x8a,0x7c,0x6d,0x4c,0xac,0xb6,0xe0,0xea,0x77,
    0x34,0xbe,0x6d,0xe3,0xf5,0x97,0x8a,0x65,0x3b,0xee,0x6a,0xe5,0x8c,0xbb,0x8a,0x79,
    0xaf,0xca,0xb8,0xab,0x9b,0x7d,0xaf,0x1d,0xfb,0xae,0xe6,0x6c,0x8f,0xcf,0x64,0x62,
    0x76,0x00,0x6b,0x65,0xc6,0x74,0x1c,0x78,0x47,0xe6,0xa6,0x1d,0x98,0xc6,0xe8,0x44,
    0x5c,0xa9,0xb1,0x93,0xa9,0x31,0x87,0xbb,0xb6,0x7c,0x6a,0x98,0xba,0x72,0xa9,0xab,
    0x96,0xa9,0xab,0x73,0x70,0x1e,0x74,0x0f,0xe4,0xb3,0x02,0x79,0x60,0x20,0x9f,0x13,
    0xc8,0x83,0x02,0xf9,0x8a,0x40,0xbe,0x2e,0x90,0x27,0x04,0xf2,0x94,0x40,0x9e,0x13,
    0xc8,0xf7,0x1a,0x59,0xee,0x0a,0xf3,0x03,0xfd,0xea,0xe8,0xd0,0xf3,0xe7,0xc5,0x80,
    0xf7,0x2e,0xf0,0xa0,0xfd,0x70,0x02,0xfd,0xd0,0xd5,0xd8,0x74,0x03,0x9f,0xc8,0x3c,
    0x9c,0x88,0x5f,0x37,0xe6,0xa1,0x33,0x98,0xda,0xf7,0x08,0x62,0x9e,0x54,0x4e,0xcc,
    0x9e,0xe0,0x3a,0xdf,0x27,0xe3,0xd7,0x93,0x98,0xdd,0xc1,0xd4,0xfe,0x14,0xe6,0x42,
    0x63,0x9e,0x4a,0xcc,0x5e,0xc6,0xa6,0x37,0xb8,0xee,0xab,0xa7,0xe3,0xd7,0xdb,0xd8,
    0x9c,0x41,0x1c,0x3d,0x67,0xfa,0x82,0xc9,0x5d,0x73,0x09,0xd8,0x99,0xf8,0xf6,0xe5,
    0xec,0xec,0x6f,0xce,0x4e,0xd1,0xf5,0xf3,0x4f,0x7f,0x7a,0xa7,0x1f,0xfd,0x36,0x00,
    0xb9,0xbf,0xc9,0x75,0x36,0xfd,0x24,0xe3,0x19,0x88,0xac,0xba,0x73,0xa9,0x43,0x74,
    0xe7,0x20,0xeb,0xbe,0x78,0x1e,0x7b,0xc9,0x40,0xfa,0x49,0x6c,0xce,0x02,0x57,0xff,
    0x0b,0xe8,0x45,0x9d,0x93,0x0b,0xc1,0x5a,0xc5,0x1c,0x65,0xc4,0xf7,0xda,0x8b,0xb9,
    0xfb,0x96,0xa2,0x57,0xdf,0x61,0xe8,0x24,0xee,0x20,0x64,0xe5,0xf5,0x12,0x78,0x1d,
    0x6e,0xec,0x2f,0x05,0x5f,0x0e,0x3f,0x97,0x81,0x8d,0x80,0x9f,0x91,0x86,0x1f,0xd1,
    0x5d,0xee,0x9f,0xd9,0xf0,0x71,0xb9,0x89,0x73,0x25,0x63,0x5e,0x46,0x9c,0xab,0xc0,
    0x84,0xfb,0xa5,0xde,0x42,0xee,0x7c,0xd7,0x80,0xb7,0xe1,0x9e,0x3d,0x1a,0xdf,0x6b,
    0xd1,0x49,0xcd,0x57,0x20,0x6b,0xdc,0xeb,0x83,0xb8,0x37,0x80,0xd9,0xb8,0xa3,0xc1,
    0x47,0x71,0x3f,0xd7,0xb8,0x37,0xa1,0x93,0xb8,0xd7,0x21,0x2b,0x17,0x37,0xc3,0xc5,
    0x18,0x93,0x6b,0x2c,0xb8,0x72,0x71,0x0b,0x98,0x72,0x31,0xde,0x70,0x21,0xba,0x71,
    0xfe,0x99,0x04,0x17,0xe3,0x4c,0x9c,0x89,0xd4,0xac,0x7b,0xdb,0x6d,0xfc,0x2e,0x98,
    0x48,0x2d,0x13,0xc0,0xe4,0x8c,0x1a,0x8f,0xff,0x24,0xe3,0x3f,0x39,0x18,0xf3,0xed,
    0x60,0x7d,0xa8,0x63,0x9a,0xa9,0x43,0x74,0x53,0xfd,0x33,0x9d,0x38,0x53,0xc9,0x31,
    0xc5,0xdc,0xeb,0xa6,0xa1,0x9b,0x6e,0x72,0xdc,0xc1,0x7e,0xa5,0xf2,0x9d,0xe4,0x1c,
    0x47,0xcd,0x77,0xf1,0xdb,0xe5,0x4e,0x33,0x8e,0xbb,0xf1,0xbb,0xcb,0x9c,0x1f,0x33,
    0xc1,0x67,0x98,0xbc,0x33,0x83,0xbc,0xd3,0x4c,0x9e,0x59,0xec,0x7b,0xca,0xc3,0xac,
    0x80,0x87,0xf1,0xc8,0x23,0x91,0x67,0x1b,0xdf,0x7b,0x58,0x17,0xe2,0x3b,0x07,0x59,
    0xde,0xef,0x65,0x6d,0xe8,0x1a,0x9b,0xcb,0xb9,0x35,0x87,0x3d,0x54,0x73,0xcd,0x35,
    0x3d,0x36,0xcf,0xc4,0xbd,0x0f,0x2e,0x94,0xef,0xfb,0xc1,0xe6,0xc1,0xf7,0x42,0xc3,
    0xb7,0xe8,0x16,0xf8,0xe7,0x21,0xea,0x5b,0x40,0xcc,0xf9,0xfc,0x76,0x93,0xda,0x17,
    0xa2,0x7b,0xc8,0xe4,0x58,0x4c,0x8e,0xb5,0x3e,0x87,0xf4,0xec,0xc3,0xdc,0x1b,0x17,
    0xc3,0x79,0x49,0xbc,0x47,0x95,0xe1,0x1a,0x73,0x49,0x10,0x73,0x21,0x31,0xc5,0xfe,
    0x11,0xce,0x04,0xed,0xf7,0xa5,0x60,0xda,0xef,0x4b,0x03,0x2e,0x47,0x9a,0x7a,0x96,
    0x05,0x7b,0xee,0xf2,0x72,0xf6,0xdc,0x15,0xe0,0xba,0xe7,0x3e,0x8a,0xdf,0x0a,0x63,
    0xf3,0x58,0xd0,0xab,0x8f,0x83,0xd9,0x3d,0x77,0x25,0xbe,0x8f,0xc3,0xe7,0x2a,0xc3,
    0xa7,0xe8,0x9e,0xf0,0xcf,0xd3,0xd4,0xf8,0x84,0xa9,0xe9,0x49,0x6a,0x5a,0x63,0xf2,
    0x3d,0x05,0x2e,0x63,0x5c,0x8d,0x2c,0x63,0x5c,0x85,0xff,0xd3,0xc6,0xf6,0x19,0xce,
    0x68,0x95,0x9f,0xe5,0x0c,0x7e,0x95,0xde,0x7d,0x0e,0x9b,0x67,0x8d,0xcd,0xf3,0x9c,
    0xdb,0x6f,0x60,0xf3,0x02,0x76,0xcf,0x9b,0x9c,0x2f,0x04,0x39,0x57,0x19,0xff,0x97,
    0x38,0x97,0x47,0x73,0x47,0x7e,0x19,0x4c,0x7c,0x5f,0x44,0xd6,0xfb,0xf3,0x2b,0x9c,
    0xd9,0x72,0xc6,0xbc,0x12,0xdc,0x69,0xea,0xc2,0x51,0x6d,0xee,0x34,0x79,0xfc,0x7f,
    0x28,0xf9,0xea,0x99,0x18,0xaf,0x81,0x4b,0x8c,0xd7,0x82,0xbb,0x5b,0x01,0x31,0xea,
    0x9b,0x7b,0x51,0xbe,0x89,0xd7,0x80,0x78,0x0d,0xcd,0x9d,0x62,0x63,0x70,0xc7,0xd8,
    0x1c,0x95,0xfd,0x86,0x6d,0x16,0xf3,0x92,0xcc,0xc9,0x3a,0x33,0xe6,0x37,0xc1,0xb5,
    0x07,0xde,0x02,0x9b,0xc1,0x7c,0x6f,0x30,0xf3,0x2d,0xba,0xf5,0xfe,0xd9,0x4a,0xee,
    0xf5,0x26,0xce,0xdb,0xd4,0xa7,0xdc,0xbf,0x03,0xb6,0xc9,0xc4,0x7e,0x17,0x7c,0x84,
    0xd9,0xff,0xdf,0x07,0x2f,0xe5,0xff,0x0e,0x5d,0x0f,0x1f,0xa0,0x13,0xee,0x37,0x22,
    0x2b,0x6f,0x1f,0x32,0xfe,0xd3,0x7d,0x5c,0xf9,0x5f,0xe4,0x63,0xb0,0x01,0xf1,0xff,
    0x2b,0xc9,0x3e,0xf2,0x09,0xff,0x5b,0x74,0x40,0xaf,0x75,0x6e,0x81,0xa7,0xb5,0xd4,
    0xf9,0x29,0xb6,0x5b,0xc8,0xb5,0x19,0x4c,0x7a,0x64,0x03,0xe3,0xdc,0x6a,0x72,0x7f,
    0x46,0xee,0xd1,0xac,0xe3,0xcf,0xc1,0xb4,0xee,0x2f,0xc0,0x34,0xd6,0x17,0x41,0xac,
    0x0d,0xa6,0x96,0x2f,0x99,0x23,0x99,0xff,0x2f,0xcd,0xfc,0xa7,0xcc,0xff,0xa6,0x85,
    0x66,0xfe,0x8b,0x88,0x51,0x6c,0x7e,0x63,0x7f,0x5b,0xce,0xff,0x12,0xdf,0x81,0xeb,
    0xbc,0x7f,0xcf,0xbc,0x8f,0x32,0x36,0x3f,0x80,0xeb,0x3d,0x65,0x37,0x98,0xfd,0x5d,
    0xf2,0x23,0xb1,0x76,0x1b,0xbf,0x9f,0xa8,0x43,0xef,0x32,0x3f,0xf3,0xff,0x52,0x29,
    0xf6,0x32,0xee,0x9f,0xb1,0xd3,0xdf,0x61,0xff,0x00,0x8b,0x79,0xa8,0xaa,0x34,0x18,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           float value = uintBitsToFloat(valueAsUint);
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
