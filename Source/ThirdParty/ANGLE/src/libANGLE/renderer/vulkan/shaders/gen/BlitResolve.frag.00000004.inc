// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x96,0x59,0x4f,0x54,0x41,
    0x10,0x85,0x7b,0x16,0x66,0x50,0x51,0x11,0x44,0x70,0xc1,0x0d,0x37,0x50,0xc9,0xa8,
    0x8c,0xd1,0x20,0x8a,0x9a,0x08,0xea,0xb8,0xe0,0x82,0x2b,0x1a,0xa3,0x42,0x8c,0x0b,
    0x24,0x2e,0xf0,0xe0,0x02,0x31,0xa8,0xf0,0xe0,0x02,0x0f,0x6e,0x3c,0x98,0x28,0xfa,
    0xe0,0x0f,0xf1,0x17,0x19,0x97,0xc4,0xc4,0xaa,0x9e,0xaf,0x4c,0x39,0x93,0x54,0xee,
    0x3d,0xe7,0x54,0xd7,0xe9,0xea,0xee,0xdb,0x99,0x54,0xb2,0x21,0x1b,0x42,0x22,0xcc,
    0x0c,0xe5,0xe1,0x4b,0x28,0xfe,0xe6,0x85,0xa4,0x30,0x21,0xcc,0x0a,0x99,0xf8,0xec,
    0x28,0x1c,0x2f,0x34,0xdf,0xbe,0x73,0xa5,0xb9,0x25,0x9f,0x53,0x7d,0x4e,0x48,0xc5,
    0x3c,0xd5,0xe6,0x0a,0x4a,0xcb,0x53,0xe3,0xe6,0xa5,0x6b,0xb7,0x94,0xaf,0x90,0xb8,
    0x28,0xd1,0x27,0x31,0x20,0x31,0x24,0x31,0x22,0x31,0x2e,0x31,0x29,0x31,0x25,0x51,
    0x29,0x35,0x74,0x4c,0x56,0xeb,0xcb,0x5b,0x45,0xf4,0xd3,0x7a,0x21,0x74,0x86,0xb2,
    0x30,0x9f,0xb9,0x34,0xf0,0x34,0x2e,0x01,0x57,0xee,0xb8,0x24,0x5c,0xa5,0xe3,0x52,
    0x70,0x75,0x8e,0x4b,0xc3,0x2d,0x71,0x5c,0x19,0xdc,0x72,0xc7,0x65,0xe0,0x56,0x39,
    0x2e,0x0b,0xb7,0xce,0x71,0xe5,0x70,0x1b,0x1c,0x37,0x03,0x2e,0x17,0xfb,0x4a,0xfd,
    0x9b,0x9f,0xf6,0xd8,0x29,0xcf,0x95,0xf4,0x63,0x78,0x85,0xc3,0x85,0x12,0xbd,0x80,
    0x6e,0xe3,0x75,0x4d,0x97,0x3a,0xbd,0x0f,0x9c,0x00,0x0f,0x80,0x2d,0x7f,0x08,0x9c,
    0x02,0x8f,0x80,0xd3,0xe0,0x71,0x70,0x19,0x78,0x12,0x9c,0x01,0x4f,0x81,0xb5,0xf7,
    0x6a,0xa9,0x9a,0x8c,0xf3,0x49,0xc5,0x7a,0xfa,0xbe,0x40,0xde,0x32,0xac,0x5d,0xad,
    0xe4,0x67,0x19,0x9b,0x04,0xcf,0x04,0xa7,0x63,0x4e,0x3a,0xee,0xaf,0xce,0x55,0xf9,
    0x56,0x70,0x05,0x5c,0x8d,0xe0,0x2a,0x6a,0x19,0xae,0x06,0x87,0x38,0x8f,0x8a,0x7f,
    0xfb,0x60,0x51,0x45,0x64,0x78,0x56,0xbb,0x50,0xbf,0x1a,0xf6,0x63,0x3e,0x7e,0x35,
    0x71,0xce,0x45,0x6e,0x3d,0x7e,0xb5,0xf8,0x69,0x7e,0x1d,0x5a,0xd6,0xe9,0xf5,0xf8,
    0x1b,0x5e,0x89,0xae,0xf9,0x0d,0xe4,0x57,0x47,0x8f,0x64,0x58,0x43,0x9e,0xe2,0xb5,
    0x25,0xe3,0x72,0x9c,0x17,0xc3,0xad,0x8c,0xd5,0x75,0xda,0xcb,0xfc,0x75,0x9d,0x16,
    0x0a,0xbb,0x0f,0x9c,0x08,0xff,0xff,0x0c,0xab,0x77,0x07,0xef,0xfb,0xe8,0xad,0x23,
    0x9e,0xc1,0xe2,0x6f,0x91,0xcc,0xe5,0x00,0x79,0x07,0xe1,0x0e,0x90,0xa7,0xb8,0x00,
    0xb7,0x58,0xf6,0xef,0x30,0x35,0x6c,0x5e,0x5d,0xec,0x9f,0xe1,0x6e,0xd6,0x57,0x6b,
    0x9d,0x62,0xce,0x55,0xe0,0x0b,0x9c,0xad,0xbd,0xd4,0xbe,0xc0,0x77,0x9f,0x72,0xb8,
    0x0f,0x6c,0xf5,0xae,0xd3,0xa7,0xe9,0x03,0x25,0xf9,0x43,0x25,0xf9,0xf7,0xf9,0xae,
    0x4d,0x1f,0x29,0xd1,0x47,0x39,0x23,0xa6,0x8f,0x97,0xe8,0xcf,0x25,0xda,0x9d,0x3e,
    0x59,0xa2,0xbf,0x96,0x18,0x76,0xfa,0x14,0xfa,0x56,0xf9,0x2a,0x92,0xcc,0x35,0xc0,
    0xfd,0x14,0x46,0xbf,0x95,0x36,0xce,0xf6,0x6c,0xce,0x6f,0x97,0xb0,0x19,0xee,0xae,
    0xd9,0xe4,0x1b,0x57,0x09,0xa7,0x7b,0x77,0x54,0xb8,0x6c,0xbc,0x5f,0x8b,0xb9,0xaa,
    0xed,0x16,0xae,0x2e,0xee,0x7b,0xf1,0x6c,0xd6,0x52,0x3f,0x1b,0xf7,0xb1,0xc8,0x8f,
    0x32,0x6e,0x09,0x63,0x17,0xb9,0x71,0x4b,0x19,0x57,0xef,0xc6,0x2d,0x83,0x7f,0xcc,
    0xb8,0x15,0x8c,0x5d,0xc6,0x38,0xbb,0xdb,0x16,0x70,0x9e,0xdb,0x38,0xb3,0xab,0xe1,
    0xbf,0x4a,0xce,0x1a,0xee,0xba,0xd5,0x9c,0xe5,0x1f,0xb2,0x02,0x4d,0xf4,0xf6,0x5b,
    0xf2,0x55,0x6b,0x94,0x68,0x62,0x5d,0x1a,0x5d,0xcf,0x1b,0xdd,0xbd,0xf6,0x48,0x72,
    0x95,0x6b,0x86,0x3f,0x26,0x48,0xe7,0xf4,0x01,0xce,0xf2,0x7e,0x49,0x0d,0xab,0xa5,
    0xcf,0xef,0x92,0xa5,0x79,0x9f,0xc8,0x29,0x63,0x4c,0xa3,0xeb,0x61,0x13,0x3d,0xe4,
    0x5c,0x0f,0x9b,0xe1,0xad,0x87,0x2d,0x70,0xd6,0x43,0xde,0xf5,0xa0,0x5a,0x8b,0x44,
    0x1e,0xdf,0x16,0xd7,0xc3,0x36,0xbc,0x13,0xae,0x87,0xed,0xf0,0xd6,0xc3,0x47,0x38,
    0xcb,0xd3,0x1e,0xac,0x56,0xde,0xf5,0x30,0x4d,0x4e,0x13,0x63,0x5a,0x5c,0x0f,0x3b,
    0xe8,0xa1,0xd5,0xf5,0xd0,0x06,0x6f,0x3d,0xec,0x84,0xb3,0x1e,0xda,0x5d,0x0f,0xaa,
    0xed,0xe2,0x8c,0xab,0xaf,0xbe,0x1f,0xc1,0x77,0x0f,0xde,0xd3,0xee,0xee,0xd0,0x39,
    0x5a,0x6e,0xbb,0x9b,0xe3,0x67,0xf2,0xf2,0x8c,0xdb,0xc5,0x7c,0xf4,0x6e,0xd8,0xcf,
    0xdd,0xa2,0x58,0xef,0x91,0x43,0xdc,0x21,0xdd,0x32,0xbf,0xc3,0xd1,0xaf,0x98,0x73,
    0xc8,0x9d,0xcb,0x63,0xf4,0xd5,0xe5,0xce,0xe5,0x71,0x78,0x3b,0xcf,0x27,0xf0,0x55,
    0xfe,0x94,0x70,0x7a,0x8f,0x9c,0xa4,0xde,0x09,0x6a,0xe9,0x9d,0x73,0x9a,0x5a,0xdd,
    0xd4,0xd2,0xef,0xf6,0x0c,0xfc,0x37,0xc9,0x51,0x7c,0x16,0xae,0xd6,0xad,0xdb,0x39,
    0xf8,0x7a,0xd6,0xad,0xc7,0xad,0x9b,0x6a,0xe7,0x25,0x7a,0x58,0x8b,0xf3,0x71,0x9d,
    0x53,0xf1,0xfe,0x3a,0xc9,0x3a,0x99,0xd6,0xe3,0x7c,0x2e,0xe3,0xd3,0xe5,0x7c,0xae,
    0xc0,0x9b,0x4f,0xaf,0xf3,0x51,0xed,0xaa,0x44,0x2f,0xb5,0xae,0xe2,0xd3,0xe7,0x7c,
    0x4c,0xeb,0x75,0x3e,0x37,0xf0,0xb9,0xee,0x7c,0x6e,0xc2,0x9b,0x4f,0xbf,0xf3,0x51,
    0x4d,0xff,0x7c,0xf5,0x53,0xeb,0x16,0x3e,0x03,0xce,0xc7,0xb4,0x7e,0xe7,0x73,0x07,
    0x9f,0x9c,0xf3,0xb9,0x0b,0x6f,0x3e,0x83,0xce,0x47,0xb5,0x7b,0x12,0x83,0xd4,0xba,
    0x87,0xcf,0x90,0xf3,0x31,0x6d,0xd0,0xf9,0x3c,0xc0,0xe7,0xbe,0xf3,0x79,0x08,0x6f,
    0x3e,0xc3,0xce,0xe7,0x61,0xfc,0xee,0x8a,0x77,0xb3,0xd6,0x7a,0x84,0xcf,0x88,0xf3,
    0x31,0x6d,0xd8,0xf9,0x3c,0xc1,0x67,0xd4,0xf9,0x3c,0x85,0x37,0x9f,0x31,0xe7,0xa3,
    0xda,0x33,0x89,0x31,0x6a,0x3d,0xc3,0x67,0xdc,0xf9,0x98,0x36,0xe6,0x7c,0x5e,0xe0,
    0xf3,0xdc,0xf9,0xbc,0x84,0x37,0x9f,0x09,0xe7,0xa3,0xda,0x2b,0x89,0x09,0x6a,0xbd,
    0xc2,0x67,0xd2,0xf9,0x98,0x36,0xe1,0x7c,0xde,0xe0,0xf3,0xda,0xf9,0xbc,0x85,0x37,
    0x9f,0xf7,0xce,0x47,0xb5,0x77,0x12,0xef,0xa9,0xf5,0x0e,0x9f,0x29,0xe7,0x63,0x9a,
    0x3e,0xff,0xc8,0xcd,0xb0,0x4d,0xe2,0x2f,0xdb,0xb5,0x43,0x01,0x08,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = texture(isampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
