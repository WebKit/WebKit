// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x5d,0x65,
    0x10,0x86,0xbf,0x73,0xff,0xf5,0xa6,0xa6,0xfe,0x34,0x69,0xf5,0xb6,0xa6,0x56,0x82,
    0x90,0x52,0xbb,0x50,0x31,0x88,0xa2,0x50,0xd0,0x45,0xa1,0x55,0xc1,0x74,0x91,0xcd,
    0x05,0xbb,0x30,0xa0,0x8b,0x28,0xdd,0x64,0x51,0xc1,0x08,0xdd,0x64,0xd1,0x4d,0x36,
    0xb5,0xd6,0x54,0xd1,0x8a,0x1b,0xf1,0xa7,0x68,0xf1,0x27,0x28,0xb1,0x06,0x25,0x6a,
    0x30,0xa0,0xad,0x04,0xb4,0x04,0xb4,0x04,0xb4,0x04,0x4d,0x0d,0xd4,0x3a,0xef,0x39,
    0xcf,0xa4,0xc3,0xbd,0x30,0xf7,0x3b,0xf3,0xbe,0x33,0xf3,0x7e,0xf3,0x9d,0xf9,0x4e,
    0xb9,0xb4,0xa3,0x9e,0x52,0x96,0xae,0x4f,0x8d,0xb4,0x25,0x4b,0xf9,0xef,0xc6,0x54,
    0x4a,0x7a,0x6c,0xa6,0x5a,0xbe,0x3e,0xba,0xf7,0xc9,0xbd,0xbb,0x9e,0x7f,0xe1,0xe9,
    0x5d,0xf7,0xdc,0xbb,0x5b,0xfc,0x0d,0xa9,0x9c,0xc7,0x89,0xeb,0x36,0xaf,0x62,0xab,
    0xec,0xd9,0xf6,0x33,0xcf,0x09,0xef,0x31,0x3b,0x60,0xd6,0x36,0x1b,0x31,0x1b,0x35,
    0x1b,0x33,0x1b,0x37,0x9b,0x30,0x9b,0x34,0xdb,0x68,0x35,0x94,0x53,0x57,0x7d,0x7b,
    0xea,0xc9,0xf5,0x54,0x2f,0xa5,0xc7,0x52,0x35,0x6d,0x2d,0xb6,0x92,0x76,0xb0,0x3a,
    0x96,0x81,0x35,0x02,0x56,0x02,0xdb,0x18,0xb0,0x32,0xd8,0xe6,0x80,0x55,0xc0,0x5a,
    0x01,0xab,0x82,0xf5,0x05,0xac,0x06,0x76,0x67,0xc0,0xea,0x60,0x77,0x05,0xac,0x01,
    0xb6,0x33,0x60,0xd7,0x81,0xed,0xce,0xfb,0x2a,0xaf,0xef,0x4f,0x3d,0xea,0x4c,0xb6,
    0xd1,0x8f,0xfc,0x36,0x7e,0x86,0x3f,0x82,0xef,0xf1,0xa3,0xf8,0x65,0xfc,0x31,0xfc,
    0x0a,0xfe,0x38,0x7e,0x15,0x7f,0x02,0xbf,0x86,0x3f,0x89,0xef,0x67,0x7c,0xdc,0xd6,
    0x3b,0x82,0xbe,0xfc,0xed,0xc1,0x9f,0xea,0xe0,0xa7,0xe0,0xb5,0x9f,0x9b,0xed,0xbf,
    0x94,0xfb,0xe5,0x7c,0x3f,0xa5,0xfc,0x3d,0x97,0x73,0x2d,0x9d,0x5d,0xaf,0xc5,0xd7,
    0xd1,0x16,0xb7,0xc9,0xfc,0x26,0x5c,0x06,0xdf,0xc5,0x3b,0xae,0xe0,0xdf,0x42,0x7c,
    0x25,0x8f,0xab,0x58,0x4e,0x11,0x2b,0xfc,0x01,0xfc,0x1e,0x30,0xd5,0x6b,0x51,0x2f,
    0xe5,0x7d,0x75,0xad,0xbf,0x17,0xb7,0x26,0x56,0x63,0x6d,0x05,0x53,0xfd,0x6d,0xbc,
    0x9f,0xad,0xd4,0x97,0x7f,0x3b,0xd8,0x40,0xc7,0x7e,0x15,0xbf,0x1d,0xae,0x1e,0xf8,
    0x7e,0xf4,0xdd,0x1f,0x80,0x57,0xfc,0x4e,0xe2,0x5b,0x79,0x0f,0xa5,0x74,0x37,0x71,
    0x2d,0xe6,0x21,0xe6,0x0d,0x32,0x3f,0xee,0xef,0xe9,0xd8,0xc7,0x3e,0xfa,0x50,0xdd,
    0xfd,0x70,0x4d,0xfc,0x21,0x66,0xa2,0x8b,0x3e,0x86,0xb8,0x6f,0xe5,0x90,0x3f,0xcc,
    0x7b,0x70,0xbe,0xdd,0xc1,0x1f,0xe4,0xdc,0x9d,0x1f,0x81,0x77,0x7f,0xb4,0x23,0xfe,
    0x10,0xf7,0xcb,0xf9,0xb1,0x0e,0xfe,0x30,0x67,0xe7,0xfc,0x78,0x07,0x7f,0xc4,0xec,
    0xe1,0xc0,0x4f,0x74,0xf0,0x47,0xcd,0x5e,0x0c,0xfc,0x24,0xfc,0x16,0xeb,0xfc,0x18,
    0xbd,0xf3,0x79,0x5a,0xff,0xb9,0xaf,0x33,0x79,0x85,0xe7,0x63,0xd4,0x90,0x7f,0x1c,
    0xec,0x56,0x3b,0x89,0x13,0xc4,0xbd,0x06,0x76,0x82,0x38,0xf9,0x53,0x60,0xb7,0x99,
    0xe2,0xeb,0xd4,0xb8,0xcf,0x6e,0x55,0x89,0x33,0x4a,0xec,0xe5,0xb2,0x21,0xba,0x6b,
    0x0f,0x32,0xbb,0xef,0x32,0x9f,0x8f,0x1b,0xaa,0x77,0xf5,0x1e,0x58,0x0a,0xd8,0xfb,
    0x60,0xda,0xeb,0x7e,0xc3,0x34,0x2b,0x1f,0x10,0x2b,0xee,0x11,0xc3,0x34,0x67,0x1f,
    0x32,0x8b,0x7d,0xd4,0x57,0xdc,0x69,0xf0,0x97,0xc9,0xfb,0x88,0xdc,0xd3,0x21,0xef,
    0x63,0xf2,0xfa,0x43,0xde,0x19,0xf0,0x97,0xc8,0xfb,0x84,0xdc,0x33,0xe4,0x69,0x4e,
    0x3f,0x25,0x6f,0x80,0x3c,0xcd,0xe8,0x67,0xe0,0xef,0x58,0x8c,0x66,0xf7,0x73,0x30,
    0xcd,0xee,0xaa,0x9d,0xc0,0x0c,0xbd,0xad,0x59,0xbc,0xb8,0x69,0xb3,0x19,0xce,0x65,
    0x3a,0xf4,0xfc,0x05,0x9a,0x29,0x9f,0x8b,0x4a,0x8e,0x7d,0x09,0xfe,0x84,0x79,0xda,
    0xd3,0x4d,0x59,0x81,0x79,0xdc,0xbf,0x56,0xc3,0x6b,0x69,0xfd,0xdb,0xa2,0x14,0xd7,
    0x93,0x15,0x31,0x55,0x72,0xa6,0x43,0x0f,0x5f,0xd1,0xc3,0x60,0xe8,0xe1,0x2c,0xb8,
    0xf7,0xf0,0x35,0x98,0xf7,0x30,0x17,0x7a,0x10,0x37,0x6b,0x36,0x87,0xee,0x6c,0xe8,
    0xe1,0x1b,0xb4,0xb3,0xd0,0xc3,0xb7,0xe0,0xde,0xc3,0xa6,0xac,0xc0,0x3c,0x4e,0x3d,
    0x78,0xad,0xb9,0xd0,0x43,0x6f,0x56,0xc4,0xcc,0x90,0x33,0x1b,0x7a,0xf8,0x8e,0x1e,
    0xf6,0x84,0x1e,0xbe,0x07,0xf7,0x1e,0x7e,0x00,0xf3,0x1e,0x16,0x42,0x0f,0xe2,0xe6,
    0xcd,0x16,0xd0,0x9d,0xcf,0xbf,0x1d,0x85,0xee,0x8f,0x68,0xf7,0x66,0xd7,0xee,0x8a,
    0xf6,0xe8,0xb1,0x0b,0x61,0x8f,0x9b,0x89,0x9b,0x23,0x6f,0x9e,0xfd,0xe8,0x2e,0xbc,
    0xca,0x5d,0x92,0xaf,0x7b,0x73,0x92,0x3b,0xf3,0x94,0xed,0x4f,0xf7,0xe5,0x0d,0x62,
    0x4e,0x86,0xb9,0x7c,0x93,0xbe,0x86,0xc3,0x5c,0xbe,0x05,0xee,0xf3,0x7c,0x0a,0x5d,
    0xe1,0x43,0x86,0xe9,0x7b,0xf6,0x36,0xf5,0x4e,0x51,0x4b,0xdf,0xbe,0x9f,0xa8,0xb5,
    0x8f,0x5a,0xfa,0x16,0xfc,0x0c,0x7e,0xd6,0x62,0xe4,0x9f,0x03,0xeb,0x0b,0xe7,0x76,
    0x1e,0xbc,0x9f,0x73,0x5b,0x0c,0xe7,0x26,0xee,0x17,0xb3,0x45,0xce,0x42,0xcf,0x0f,
    0x59,0xcc,0x01,0xf6,0xa0,0x73,0x72,0x6e,0x31,0xe8,0xfc,0x8a,0xce,0x70,0xd0,0xf9,
    0x0d,0xdc,0x75,0x96,0x82,0x8e,0xb8,0x0b,0x66,0x4b,0xd4,0xba,0x80,0x4e,0x3b,0xe8,
    0x38,0xb7,0x14,0x74,0x7e,0x47,0xe7,0x60,0xd0,0xf9,0x03,0xdc,0x75,0x96,0x83,0x8e,
    0xb8,0x8b,0x66,0xcb,0xd4,0xba,0x88,0xce,0x48,0xd0,0x71,0x6e,0x39,0xe8,0xfc,0x89,
    0xce,0x60,0xd0,0xf9,0x0b,0xdc,0x75,0x56,0x82,0x8e,0xb8,0x4b,0x66,0x2b,0xd4,0xba,
    0x84,0xce,0x68,0xd0,0x71,0x6e,0x25,0xe8,0xfc,0x83,0xce,0xa1,0xa0,0xb3,0x0a,0xee,
    0x3a,0x6b,0x41,0x67,0x35,0xaf,0x91,0x72,0x4c,0xb5,0x2e,0xa3,0x33,0x16,0x74,0x9c,
    0x5b,0x0b,0x3a,0x57,0xd0,0x39,0x1c,0x74,0xfe,0x03,0x77,0x9d,0x2c,0xbb,0xa6,0x23,
    0xee,0xaa,0xbe,0xcf,0x59,0x51,0xeb,0x2a,0x3a,0xe3,0x41,0xc7,0x39,0xad,0xae,0x53,
    0xc9,0x0a,0x9d,0x23,0x41,0xa7,0x9a,0x15,0xb8,0xeb,0x34,0x82,0x8e,0xb8,0x9a,0x59,
    0x83,0x5a,0x7a,0x96,0xce,0x44,0xd0,0x71,0xae,0x11,0x74,0x9a,0xe8,0x1c,0x0d,0x3a,
    0x5d,0x59,0x81,0xbb,0x4e,0x77,0xd0,0x11,0xb7,0xc1,0xac,0x9b,0x5a,0x1b,0xd0,0x99,
    0x0c,0x3a,0xce,0x69,0xbd,0x62,0x5f,0x86,0xfb,0xcd,0xfe,0x07,0x64,0x0e,0xf1,0x49,
    0x08,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture2D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = texture(isampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     broadcastColor(colorValue);
//
// }
