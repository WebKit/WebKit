// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndirectLineLoop.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndirectLineLoop_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0x6b,0x4b,0xd4,0x51,
    0x10,0xc6,0x8f,0xbb,0xeb,0x7a,0xc9,0xd6,0xcd,0x34,0x8b,0xbc,0x5b,0x5b,0x59,0xad,
    0xbd,0x70,0xb7,0x35,0x31,0x5c,0x14,0x77,0x8b,0x45,0xf2,0x52,0x08,0x82,0x25,0x28,
    0xa8,0xa0,0x60,0x9a,0xf6,0x46,0xf2,0x03,0x45,0xf4,0xe5,0xba,0x13,0x34,0x73,0xfc,
    0x8d,0x4c,0x7f,0x14,0x8e,0xe7,0x3f,0xcf,0xcc,0xf3,0xcc,0xe5,0x9c,0xb3,0xe9,0xd4,
    0x68,0x4b,0x08,0x4d,0xa1,0x3d,0xb4,0x86,0xb3,0x70,0xfe,0x77,0x2d,0xa4,0x04,0x09,
    0xe1,0x4a,0xc8,0xc6,0xbd,0xd6,0x58,0x6e,0x14,0x0f,0x8f,0x36,0x8b,0x13,0xa5,0x27,
    0xea,0xcf,0x85,0x74,0x8c,0x53,0x5f,0xa7,0xc4,0x34,0xcb,0x9e,0x91,0xb5,0xb7,0xb1,
    0xb3,0xaf,0xf8,0xb0,0xac,0xbc,0xe0,0x99,0xa8,0x15,0xc2,0x0c,0xb1,0x51,0x4b,0xd0,
    0x36,0xd9,0xb3,0x70,0xea,0xf2,0xbf,0x9d,0xbc,0x37,0xa3,0xdd,0x7c,0x61,0x8f,0xb2,
    0xd7,0x24,0x9f,0x62,0x69,0xf8,0x1d,0xb2,0x8f,0x5c,0xf8,0xce,0xed,0x61,0x6c,0xe5,
    0x77,0x26,0xf8,0x86,0x35,0x81,0x65,0x1c,0x96,0x02,0x6b,0x25,0x8f,0x61,0xaa,0x3b,
    0x1c,0x67,0x10,0x42,0x1f,0x76,0xe9,0xbf,0xba,0x9b,0x43,0xf9,0x92,0x3a,0xcb,0xae,
    0xce,0x4a,0xa2,0xce,0x0a,0x75,0x9a,0xfe,0x62,0x42,0x6f,0xe9,0x12,0xbd,0x25,0xa7,
    0xb7,0x92,0xd0,0x5b,0x41,0xcf,0xe6,0x7a,0x4c,0xbd,0xb7,0x64,0x5d,0x97,0x2c,0xa9,
    0xe8,0x4f,0x47,0xbe,0x7e,0xf7,0x48,0x8c,0xe6,0x1b,0x42,0xa3,0x5f,0x3c,0x76,0x16,
    0x03,0xcc,0xb8,0x2d,0xfa,0x33,0x51,0x47,0x39,0x8a,0x4d,0x61,0x77,0x38,0x9d,0xab,
    0xe8,0x68,0xee,0x87,0xd8,0x39,0x74,0x07,0x98,0x6d,0xd6,0x2d,0xd5,0xcc,0xa3,0xdf,
    0x89,0x66,0x9e,0xfb,0x61,0x39,0xbb,0xf8,0xb6,0xf8,0x1e,0xf2,0x65,0xc9,0xa1,0xfb,
    0x6d,0xb0,0x5e,0xb1,0x07,0xf1,0xa5,0x89,0xb7,0x7a,0x06,0xd1,0x1f,0x72,0xf3,0x31,
    0xbe,0xcd,0x4f,0xe3,0x47,0xf1,0x79,0xfd,0x02,0x58,0xb7,0x64,0xb9,0xc7,0x8c,0x4a,
    0x6e,0x46,0x7a,0xbe,0x25,0xf8,0x4f,0xa9,0xa5,0x4c,0x3e,0xb5,0x2b,0x60,0x36,0x93,
    0xc9,0x84,0x3d,0x8b,0xbe,0xea,0x2e,0x3a,0x5d,0x3d,0xe7,0x45,0x74,0x97,0xe1,0x2c,
    0xa1,0xab,0xf6,0x8a,0xd3,0x51,0xce,0x36,0x7d,0x9b,0xbd,0xc7,0x3d,0x32,0xfb,0x03,
    0xef,0xee,0x91,0x58,0x3a,0x8f,0x63,0xb0,0x02,0xab,0x2c,0x67,0x94,0x82,0x13,0xd0,
    0xfa,0x29,0x88,0xbe,0xe5,0x1f,0x62,0x9d,0x80,0xff,0x91,0x6f,0x9d,0xd9,0x47,0xfc,
    0xba,0x57,0x25,0xaa,0x2b,0xde,0xb1,0xf3,0xf3,0xd3,0x73,0x9f,0x26,0x6f,0x37,0x78,
    0x55,0x2c,0x3d,0xbf,0x1b,0xdc,0x9b,0x1c,0x3e,0x8b,0xeb,0xc5,0x77,0x26,0x5a,0x59,
    0xde,0x58,0x37,0xe7,0x6b,0xdc,0x7e,0xc7,0xed,0x73,0xdc,0x01,0x7c,0x5a,0x87,0x9e,
    0xe1,0x1d,0xce,0x79,0xc4,0xc5,0xdc,0x05,0xff,0x22,0x31,0x7a,0x8e,0xf7,0xc1,0x0a,
    0xf4,0x37,0x46,0x7f,0xbf,0x25,0x5e,0x7d,0x0f,0x64,0x8d,0xd1,0xa3,0x7e,0xff,0x92,
    0xfd,0x04,0x7b,0x0c,0xfb,0x31,0xb6,0xee,0xdf,0x42,0x4b,0xcc,0x73,0x4a,0x5e,0x8d,
    0x99,0x93,0x55,0x94,0xf5,0x95,0x9c,0x13,0xf8,0xb5,0xd7,0xef,0x92,0x67,0x1c,0xbf,
    0xe5,0x9d,0xc0,0x1e,0x47,0xb7,0xe8,0x66,0xfb,0x8c,0xd9,0x4e,0xba,0x9e,0xa6,0xc0,
    0x6d,0x66,0xd3,0x60,0xa7,0x0e,0x9b,0x61,0x3e,0xa7,0x6e,0x8e,0x55,0xee,0x65,0x0e,
    0xce,0x73,0xe9,0xbf,0x4a,0xac,0xf1,0xe6,0xe0,0xcc,0x26,0x7a,0xd5,0xda,0x3e,0xd3,
    0xcf,0x3c,0xbd,0xd8,0x0c,0xeb,0xae,0x97,0xf9,0xf8,0x1b,0x14,0x22,0xa6,0xbc,0x9a,
    0xeb,0xe5,0xc5,0x25,0xbd,0xbc,0x04,0xb7,0xfc,0x0d,0xb0,0x5e,0x57,0xf7,0x82,0xab,
    0xbb,0x41,0xdd,0x0b,0xf4,0x67,0xbc,0x57,0x70,0xac,0x6e,0xcb,0x5f,0x77,0x67,0xf4,
    0x89,0x98,0x71,0xe2,0x7d,0x6d,0xaf,0xa9,0x6d,0xd6,0xd5,0xf6,0x06,0xdc,0xea,0x58,
    0xe5,0xfd,0xe5,0xf0,0x69,0x1d,0xab,0xe8,0x5a,0x1d,0x6b,0xf8,0x0a,0x0e,0x5b,0xe7,
    0x4e,0x17,0x9c,0xd6,0x5b,0x77,0xa7,0xd7,0x5d,0xce,0x77,0xf8,0x2c,0x6e,0xc3,0xe5,
    0x5c,0x23,0xe7,0x06,0x71,0xa6,0xbf,0x49,0x4e,0xff,0x66,0xb6,0x1c,0x6f,0x13,0xde,
    0x16,0x77,0xd4,0x78,0x3b,0xf0,0xb6,0x1d,0x6f,0xd7,0xf1,0x76,0xe0,0xed,0x26,0x78,
    0xfb,0xf0,0xf6,0x1c,0x76,0x40,0x8f,0x5e,0xeb,0xbd,0xeb,0xf1,0xc0,0xf5,0x78,0x88,
    0xcf,0xe2,0x8e,0x5c,0xce,0x7d,0x72,0x1e,0x11,0xe7,0xdf,0x9f,0xee,0x7f,0xe5,0x57,
    0xb3,0x22,0xeb,0x1f,0x6b,0xef,0x11,0x8d,0xb0,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)readonly buffer srcIndirectBuf
// {
//
//     uint indirectBuf[];
// };
//
// layout(set = 0, binding = 1)buffer dstIndirectBuf
// {
//
//     uint indexIndirectBuf[];
// };
//
// layout(set = 0, binding = 2)buffer dstIndexBuf
// {
//
//     uint dstData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint indirectBufferOffsetDiv4;
//
//     uint indexIndirectBufOffsetDiv4;
//
//     uint dstDataOffsetDiv4;
// };
//
// void main()
// {
//
//     uint vertexCount = indirectBuf[indirectBufferOffsetDiv4];
//     uint firstVertex = indirectBuf[indirectBufferOffsetDiv4 + 2];
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     for(uint i = 0;i < vertexCount;i ++)
//     {
//         dstData[dstDataOffsetDiv4 + i]= firstVertex + i;
//     }
//     if(vertexCount > 1)
//     {
//         dstData[dstDataOffsetDiv4 + vertexCount]= firstVertex;
//         vertexCount ++;
//     }
//
//     indexIndirectBuf[indexIndirectBufOffsetDiv4]= vertexCount;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 1]= indirectBuf[indirectBufferOffsetDiv4 + 1];
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 2]= 0;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 3]= 0;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 4]= indirectBuf[indirectBufferOffsetDiv4 + 3];
// }
