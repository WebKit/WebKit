// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x97,0xff,0x4f,0xd5,0x65,
    0x14,0xc7,0x9f,0xe7,0x02,0x57,0x90,0x51,0x0a,0x16,0x09,0x58,0xe4,0x35,0x97,0x13,
    0xaf,0xe5,0x84,0x30,0xc7,0xb7,0x75,0x8d,0x72,0xa8,0xc0,0x45,0xc5,0x89,0x02,0x86,
    0x4b,0x72,0x32,0xbe,0xdc,0x1f,0x9a,0xa1,0xb8,0x56,0xfd,0x54,0x7f,0x41,0x7f,0x41,
    0xd8,0xca,0xcd,0x1f,0xc5,0x70,0x95,0x5f,0x7e,0xcc,0x2d,0xd7,0x8a,0x55,0xc8,0x2c,
    0x5c,0x6d,0x4d,0x7f,0x10,0x8d,0xc6,0xe8,0x9c,0xcf,0xf3,0x3e,0xf8,0xe6,0x16,0xdb,
    0xb3,0xcf,0xe7,0xbc,0xcf,0xf3,0x9c,0xf3,0x7a,0x9e,0xf3,0xf9,0x1c,0x3e,0x37,0x27,
    0x96,0x58,0xe1,0x9c,0x77,0x2b,0x5d,0xbe,0xfb,0xc4,0xbb,0xe8,0x6f,0xb5,0x8b,0x39,
    0xbd,0x2d,0x74,0xf1,0xe8,0xda,0xdc,0x92,0x6e,0x49,0x8e,0x64,0xfa,0x92,0xdb,0xab,
    0x5f,0x52,0xff,0x13,0x2e,0x27,0x9a,0xa7,0xbe,0x27,0xdd,0x0a,0x97,0x27,0xd7,0x5c,
    0x19,0xa7,0x7a,0xfb,0x07,0x54,0x4f,0xcb,0x18,0x97,0xb1,0x4a,0xd6,0xe7,0x46,0xf1,
    0x9c,0x6b,0xc4,0xfc,0x28,0x9e,0xa8,0xe9,0x28,0xbe,0x73,0xe5,0xb0,0xbb,0xe4,0x1a,
    0x8f,0xd6,0x38,0xf7,0x86,0x44,0x3c,0x12,0x50,0x5c,0x02,0xd7,0x66,0xc9,0xa9,0x5a,
    0x0c,0xf3,0xbb,0xe5,0xba,0x7e,0xc9,0x17,0xec,0xe7,0x29,0xfe,0x38,0xe2,0x97,0xc1,
    0x9e,0xcc,0x9a,0x3f,0x89,0xf9,0x16,0x5b,0xed,0xb5,0xf0,0xdd,0xc0,0x5a,0xb5,0x4b,
    0x24,0x63,0x2c,0x9a,0x9b,0x13,0xed,0x5a,0xef,0x9f,0x92,0x39,0xca,0x5a,0x89,0xf5,
    0xa5,0x62,0x17,0x82,0x5f,0xfd,0x9b,0xe1,0x2f,0xc6,0x7e,0xd6,0x88,0x5a,0x42,0x7a,
    0x29,0xd6,0x56,0x88,0xfd,0x0c,0xd6,0x05,0x2d,0x37,0xca,0xa9,0x67,0xa6,0xfa,0x4e,
    0xd8,0x65,0xd0,0xd4,0x5f,0x81,0xfb,0x38,0xc5,0xd3,0x33,0xca,0x27,0x3b,0x89,0x39,
    0x66,0xef,0xc8,0xe2,0x4a,0xe1,0x9c,0x94,0xbb,0x0d,0xb1,0x72,0x10,0xbf,0x1d,0xbe,
    0x36,0xe4,0x6f,0x47,0x3d,0x3d,0xad,0xef,0xc0,0xbe,0x75,0xfe,0x7e,0xf8,0xe2,0x88,
    0xd7,0x89,0x7b,0xce,0x7f,0x18,0xf5,0xaf,0x40,0x9d,0x3b,0xa1,0x3d,0x8b,0x9a,0x76,
    0x21,0xd6,0x51,0x70,0x1e,0x41,0x6e,0xb5,0xbb,0xe9,0xcc,0x7b,0x70,0x6e,0xc6,0xa2,
    0x76,0x2f,0xb1,0xf4,0x61,0x6e,0x27,0x58,0x86,0xa3,0xfa,0x05,0xad,0x4a,0x9e,0x29,
    0xad,0xd1,0x18,0xf8,0x3b,0x68,0x7f,0xe3,0x88,0x69,0x73,0xbe,0xc4,0x99,0x26,0xa2,
    0x67,0xa0,0xc0,0x5d,0xc6,0x9e,0xf0,0x7a,0x2c,0xfd,0xc5,0xa2,0x3d,0x84,0xdc,0x5f,
    0x41,0xbb,0x8c,0xb8,0x6a,0x4f,0xd2,0xf3,0xf1,0xb5,0x5c,0x7b,0x96,0x58,0xe2,0xd1,
    0xf9,0xde,0xc0,0x39,0xa4,0x30,0xec,0xbc,0xde,0x93,0x44,0xf7,0x16,0x17,0x17,0xcd,
    0x1e,0x15,0xfb,0x2e,0xd9,0x67,0xc4,0xbe,0x43,0xf6,0x59,0xb1,0x67,0xc8,0x1e,0x13,
    0xfb,0xb6,0xd8,0x35,0xb2,0x9f,0x18,0x6a,0xe1,0x50,0xe3,0x47,0xa2,0xe8,0xfb,0x5a,
    0x87,0xda,0x9f,0xc7,0xfe,0xf7,0xc9,0x7b,0xac,0x7b,0xff,0x1c,0xda,0x79,0xac,0xd1,
    0x3d,0x7f,0x80,0x73,0xb9,0x00,0xbf,0x9e,0xcf,0x39,0x68,0x17,0xa1,0xab,0xd6,0x24,
    0x9a,0x3e,0x0f,0xdf,0xe1,0x99,0xe9,0x40,0x1e,0x65,0xba,0x09,0xbd,0x49,0x2c,0xad,
    0xd3,0xf7,0xa8,0x6d,0x2f,0x7c,0x75,0x78,0x76,0x6e,0xc1,0xd7,0x26,0xb1,0x74,0xdd,
    0x0f,0xd0,0x1c,0x69,0x3f,0x42,0x8b,0x45,0xb9,0xf3,0xa2,0x1a,0xff,0x84,0xb9,0xea,
    0x7b,0x28,0x3b,0x9d,0xc6,0x9a,0x79,0x89,0xab,0xbe,0x29,0x19,0xd3,0xd8,0xff,0x14,
    0xed,0xf7,0x67,0xc4,0xba,0x45,0xfb,0xd5,0x98,0xfa,0xec,0xfc,0x02,0xbf,0xee,0xf1,
    0x53,0x89,0xa3,0x79,0x7e,0x85,0xfe,0xb7,0xc4,0xb1,0x78,0x7a,0x7d,0x20,0xf1,0xd4,
    0x7f,0x1b,0x2c,0x79,0x98,0x3b,0x05,0x9e,0x59,0xe2,0xd1,0x39,0x33,0x32,0x66,0xb1,
    0x7e,0x86,0x78,0xee,0x10,0x4f,0x0c,0x35,0xfb,0x02,0x3c,0xbf,0xc1,0x7f,0x81,0x78,
    0x7e,0x87,0xae,0x3c,0x16,0x6f,0x96,0x78,0xee,0x82,0x69,0x1a,0x73,0x67,0xe8,0xcc,
    0xfe,0xc0,0xd9,0x97,0x82,0x31,0xee,0x1f,0x33,0xaa,0xef,0x4f,0x19,0xff,0x20,0xa6,
    0xde,0x7f,0x26,0xa7,0xaf,0xe7,0xff,0x17,0xe2,0xa6,0x50,0xe3,0x6f,0x51,0x97,0x7b,
    0xf0,0xdd,0xc4,0xb3,0xa0,0xbd,0xea,0x3e,0xfa,0x97,0x6a,0xf5,0x92,0xe3,0x3e,0xe6,
    0x19,0xc3,0x2a,0x1f,0x7c,0xc5,0x60,0x68,0x22,0x06,0xf5,0xad,0x96,0xa1,0x9a,0x32,
    0xe8,0xfd,0x39,0xe4,0x2a,0xa6,0x75,0x96,0xab,0xc4,0x87,0x5c,0xea,0xb3,0xe7,0x6e,
    0x8d,0x0f,0xba,0xd9,0x4f,0xfb,0xc0,0x74,0x15,0x71,0x4a,0x7d,0xd0,0x74,0x9e,0xf1,
    0xa9,0x66,0x7c,0x6b,0x91,0x27,0x01,0xbe,0x46,0xe2,0x53,0x5f,0x99,0x8c,0x46,0xf0,
    0x95,0x11,0x5f,0x39,0xad,0x33,0xbe,0x0a,0xf0,0x95,0x13,0xcf,0x3a,0x1f,0x74,0xb3,
    0x9f,0xcb,0xe2,0xab,0xf4,0x41,0x5b,0x47,0x7c,0x95,0xc4,0xb7,0x1e,0x79,0x92,0xe0,
    0x6b,0x20,0x3e,0xf5,0x25,0x64,0x34,0x80,0x2f,0x41,0x7c,0x1b,0x68,0x9d,0xf1,0xbd,
    0x00,0xbe,0x0d,0xc4,0xb3,0xd1,0x07,0xdd,0xec,0x17,0xb3,0xf8,0x36,0xf9,0xa0,0x6d,
    0x24,0xbe,0x4d,0xc4,0xb7,0x19,0x79,0x76,0x80,0xaf,0x9e,0xf8,0xd4,0x57,0xa5,0xeb,
    0xc0,0x57,0x45,0x7c,0x5b,0x68,0x9d,0xf1,0x25,0xc1,0xb7,0x85,0x78,0xb6,0xfa,0xa0,
    0x9b,0xfd,0x72,0x16,0xdf,0x36,0x1f,0xb4,0xad,0xc4,0xb7,0x8d,0xf8,0xb6,0x23,0x4f,
    0x0a,0x7c,0x75,0xc4,0xa7,0xbe,0x6a,0x8d,0x0d,0xbe,0x6a,0xe2,0xab,0xa1,0x75,0xc6,
    0xf7,0x0a,0xf8,0x6a,0x88,0xa7,0xd6,0x07,0xdd,0xec,0x57,0xb3,0xf8,0x76,0xfa,0xa0,
    0xd5,0x12,0x9f,0x6a,0xfa,0x3e,0x5b,0xde,0x3a,0xd8,0x76,0x4e,0xf5,0xb0,0xad,0xae,
    0x0d,0xb0,0xed,0x39,0x6c,0x84,0x6d,0xef,0x8d,0x5e,0xc7,0xb1,0xdf,0x07,0x78,0x17,
    0x3b,0xb0,0xdf,0x79,0xea,0x4b,0xea,0x9b,0x8b,0xee,0xc3,0xba,0x39,0xda,0xdb,0x43,
    0xbc,0xc7,0xbd,0xd4,0xd3,0x1f,0x41,0x6f,0x17,0x4b,0x7b,0xd7,0xbb,0x3e,0x68,0x63,
    0x88,0xa9,0x0c,0x16,0x6b,0x1e,0x3d,0x49,0xe7,0x7d,0xe4,0xc3,0x1c,0xe5,0xd2,0x35,
    0x73,0x98,0x1b,0x07,0xaf,0xf6,0x9c,0xf7,0x71,0x3e,0x0b,0xd4,0xa3,0xac,0xff,0x68,
    0x93,0xfe,0xbf,0xfe,0x13,0xc3,0x07,0xe6,0x02,0x71,0xe7,0xa0,0x26,0x0b,0xe8,0x3f,
    0x6a,0xc7,0xa8,0xfe,0xaf,0x61,0xbe,0xf5,0x9f,0x0c,0xd5,0x5f,0x7d,0x29,0x19,0x19,
    0x70,0xa5,0xa8,0xfe,0xbb,0x50,0x7f,0xfd,0x5f,0x6d,0xb9,0x5e,0x47,0xae,0x5d,0x54,
    0xef,0x66,0x1f,0x74,0xb3,0xdf,0xf4,0x81,0xc9,0xea,0xbf,0xdb,0x07,0xad,0xd9,0x3f,
    0xe6,0xdb,0x4d,0x7c,0x2d,0xe0,0xb3,0xfe,0x33,0x42,0x7c,0xea,0xdb,0x23,0x63,0x04,
    0x7c,0x7b,0x88,0x6f,0x2f,0xf8,0x46,0x89,0x6f,0x1f,0xf8,0xf6,0x12,0x4f,0xab,0x0f,
    0xba,0xd9,0xed,0x59,0x7c,0x69,0x1f,0xb4,0x56,0xe2,0x4b,0x13,0xdf,0x7e,0xf0,0x59,
    0xff,0x19,0x26,0x3e,0xf5,0x1d,0x90,0x31,0x0c,0xbe,0x03,0xc4,0x77,0x10,0x7c,0x67,
    0x88,0xaf,0x13,0x7c,0x07,0x89,0xe7,0x90,0x0f,0xba,0xd9,0x87,0xb3,0xf8,0xba,0x7c,
    0xd0,0x0e,0x11,0x5f,0x17,0xf1,0x1d,0x05,0x9f,0xf5,0x9f,0x21,0xe2,0x53,0x5f,0xb7,
    0x8c,0x21,0xf0,0x75,0x13,0x5f,0x0f,0xf8,0xce,0x12,0x5f,0x2f,0xf8,0x7a,0x88,0xe7,
    0x98,0x0f,0xba,0xd9,0x7d,0x59,0x7c,0xc7,0x7d,0xd0,0x8e,0x11,0xdf,0x71,0xe2,0x7b,
    0x1b,0x7c,0xd6,0x7f,0x06,0x89,0x4f,0x7d,0x27,0x64,0x0c,0x82,0xef,0x04,0xf1,0xf5,
    0x83,0x6f,0x8c,0xf8,0xde,0x01,0x5f,0x3f,0xf1,0x9c,0xf4,0x41,0x37,0xfb,0x54,0x16,
    0xdf,0x80,0x0f,0xda,0x49,0xe2,0x1b,0x40,0xff,0xb0,0xbc,0x83,0xb0,0xed,0x9c,0x86,
    0x60,0x5b,0x5d,0x87,0x61,0xdb,0x73,0x38,0x02,0xdb,0xde,0x9b,0x8c,0x5f,0xfe,0x7e,
    0xeb,0xd5,0x7a,0xc1,0x87,0x3e,0xf4,0x83,0x79,0xf4,0x8d,0x0c,0xf5,0xaa,0x7c,0xbf,
    0xbc,0x57,0x15,0xd1,0xd9,0xa8,0xaf,0x40,0x46,0x11,0x62,0x16,0xd0,0x39,0xac,0xf4,
    0xff,0xed,0x55,0x85,0x3e,0xe8,0xd6,0xab,0x4e,0xfb,0xa0,0x69,0x7e,0x8f,0xfe,0x63,
    0xb1,0x8a,0x88,0xef,0x63,0xcc,0x51,0xe6,0xd3,0xc8,0xa9,0x2c,0x13,0x6e,0x39,0xcb,
    0x25,0xb9,0x9f,0x40,0xaf,0xbb,0x84,0xbc,0xfa,0x5b,0xe0,0x0a,0x7e,0x07,0x8c,0xe2,
    0x37,0xc0,0x37,0xf8,0x86,0xb6,0x6f,0xd9,0xab,0xc8,0xc1,0xdf,0xb7,0xd7,0xa0,0xa9,
    0xdc,0x2a,0x1c,0xfa,0x5d,0x7c,0x1d,0x73,0xaf,0xd1,0xef,0x97,0xb7,0x24,0xe6,0x15,
    0xc4,0xbc,0x8e,0x3d,0x18,0xc3,0x44,0xd4,0xf3,0xbc,0xab,0x95,0xf1,0x2f,0x51,0xce,
    0x09,0xfc,0xe4,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// shared uint intersectingWidgets[32];
//
// void accumulateWidgets(const uint localId)
// {
//
//     if(localId < 16)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 16];
//         if(localId < 8)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//             if(localId < 4)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//                 if(localId < 2)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                     if(localId < 1)
//                     {
//                         intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                     }
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     if(localId < 32)
//     {
//         intersectingWidgets[localId]= uint(intersects)<< localId;
//         accumulateWidgets(localId);
//         if(localId == 0)
//         {
//             ballot . x = intersectingWidgets[0];
//         }
//     }
//     else
//     {
//         const uint graphLocalId = localId - 32;
//         intersectingWidgets[graphLocalId]= uint(intersects)<< graphLocalId;
//         accumulateWidgets(graphLocalId);
//     }
//     if(localId == 0)
//     {
//         ballot . y = intersectingWidgets[0];
//     }
//
//     return ballot;
//
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 8);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 8);
//
//     uvec2 culledWidgets;
//
//     culledWidgets = cullWidgets(0, blockCoordLow, blockCoordHigh);
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
