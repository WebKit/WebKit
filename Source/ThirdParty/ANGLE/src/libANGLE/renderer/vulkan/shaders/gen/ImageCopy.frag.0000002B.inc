// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000002B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000002B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0x6f,0xce,0x8f,0x73,0x0e,0x42,0x3c,0x08,0x28,0x51,0x61,0xa9,0xb0,0xd9,
    0x30,0x38,0x15,0x19,0x41,0xba,0x61,0x86,0xae,0x2c,0x44,0x53,0x2a,0x78,0x91,0x0b,
    0x27,0x54,0x9c,0x1e,0x38,0x6b,0xe9,0x5a,0x6b,0x8d,0x14,0xde,0xa4,0x15,0xcc,0x31,
    0x6b,0x0a,0x5b,0xc1,0x96,0xc1,0xec,0x45,0x5b,0xaf,0x5a,0x6b,0x45,0x23,0xed,0xe1,
    0x8f,0x69,0x3d,0x6c,0x6d,0x5d,0xd7,0x7d,0x3e,0x97,0xbb,0x3a,0xab,0xc9,0x76,0xef,
    0xc7,0xfd,0xbd,0x9e,0xbe,0xdf,0xeb,0xba,0xef,0x1b,0x92,0xd4,0xf6,0x6c,0x08,0x65,
    0xa1,0x32,0x54,0x84,0x5f,0x43,0xf1,0x67,0x63,0x48,0x09,0x52,0xfc,0xde,0x27,0xdf,
    0xaa,0x90,0x89,0xfb,0xfd,0x07,0x8f,0x1c,0xec,0x98,0x2c,0x8c,0x76,0x74,0x3d,0x90,
    0x53,0xbf,0x9a,0x90,0x44,0x7f,0xb5,0xd5,0x86,0x6c,0x28,0x97,0xaf,0xae,0x89,0xe3,
    0xe3,0x79,0xc5,0xab,0x65,0x7d,0x21,0xab,0x4e,0xfc,0x14,0xcf,0x6a,0x0e,0xf9,0xad,
    0x3a,0xe6,0xd4,0x98,0x10,0x0e,0x84,0x74,0x68,0xa0,0xee,0x76,0xbe,0x86,0x95,0x81,
    0x55,0x38,0x2c,0x05,0x56,0xe7,0xb0,0x04,0xac,0xd1,0x61,0xe5,0x60,0xb7,0x3a,0x2c,
    0x0d,0x76,0x87,0xc3,0x32,0x60,0x77,0x39,0x2c,0x0b,0xd6,0xea,0xb0,0x0a,0xb0,0x1d,
    0x0e,0xdb,0x00,0xb6,0xd3,0x61,0x95,0x60,0x39,0x87,0x55,0x81,0x75,0x39,0xec,0x16,
    0xb0,0x6e,0x87,0x55,0x83,0x3d,0x1c,0xfb,0x94,0xdc,0xd0,0xab,0x3d,0xdb,0x27,0xdf,
    0x6d,0xf4,0xc7,0xf6,0x5b,0xdd,0x5e,0xfb,0xbc,0x85,0x7d,0x83,0x44,0xa5,0xa2,0x3d,
    0x89,0xbd,0xd1,0xdf,0x37,0x89,0x4f,0x06,0x9d,0xda,0xd7,0x26,0xd9,0x67,0xd1,0xaf,
    0xf6,0xcd,0xe2,0x59,0x89,0x5d,0x6d,0x55,0x68,0x29,0x8f,0x58,0x79,0xe4,0x5b,0x86,
    0x96,0x5e,0xf6,0xd5,0x2e,0x57,0x0d,0xfe,0x56,0xab,0x9e,0x5c,0x21,0xf2,0xaa,0xbb,
    0xd1,0x57,0xab,0xa9,0xab,0xfe,0x26,0xcb,0x7c,0xb4,0x7e,0x23,0xfd,0x6e,0xa0,0x7e,
    0x63,0xac,0x53,0xc4,0xda,0xd1,0xb6,0x19,0x3e,0xea,0xdf,0x84,0x2d,0xeb,0xec,0x2d,
    0x4e,0xcf,0x16,0xec,0xf5,0xf1,0xdc,0xa4,0x62,0x2f,0xdb,0xe1,0x6d,0x7d,0xb6,0xb8,
    0x76,0xce,0x8e,0xd9,0xef,0xa5,0x8e,0xd9,0x77,0xd1,0x0b,0xed,0xc3,0x1e,0x72,0x6a,
    0x9d,0x66,0xa9,0xd0,0xc7,0xbe,0x2c,0xfc,0xfb,0xc7,0xf6,0xb7,0x4b,0xdf,0xf7,0xca,
    0xb7,0x0f,0x5e,0x8f,0x80,0xef,0x45,0xa7,0xee,0xf7,0x95,0xf0,0xe9,0x2f,0xd9,0x0f,
    0xd2,0x77,0x8d,0x3f,0x8c,0xae,0x8c,0xb3,0x0f,0xb1,0x57,0x7e,0xc7,0xe1,0x93,0x38,
    0xfb,0x78,0x49,0x9f,0xa6,0x38,0xef,0xb6,0x3f,0x5f,0xd2,0xe7,0x8b,0x9c,0x5f,0xad,
    0x77,0x95,0x5c,0x7b,0xe0,0x7b,0x95,0x3b,0x9f,0xc4,0xbe,0xa4,0x23,0xaf,0x72,0xf8,
    0x2a,0xf6,0x87,0x20,0xda,0xcb,0xdd,0x9c,0xb1,0x5a,0x7a,0x37,0x20,0x0c,0x6a,0xb8,
    0xd7,0xb5,0x2c,0xeb,0x53,0x9e,0xb3,0xba,0x11,0x7b,0x9f,0x64,0x68,0xe2,0x6e,0x6f,
    0x62,0xee,0xbb,0xf1,0x69,0x06,0x7f,0x47,0x7c,0x74,0x7f,0x1b,0x71,0xcd,0xc4,0xe9,
    0xdc,0xef,0x24,0xae,0x85,0x38,0x3b,0xab,0x8a,0x7f,0x26,0x3e,0x5b,0xdd,0x9b,0xa0,
    0x67,0xe1,0x77,0x61,0xde,0x06,0x9f,0xbf,0xc4,0xdf,0xde,0x86,0x36,0xf4,0xb4,0xc6,
    0x19,0xa4,0x63,0x6f,0x76,0x50,0x53,0x7f,0xde,0xa2,0x5f,0x77,0x83,0x1f,0x96,0x9d,
    0x72,0xfa,0x12,0xcc,0xfc,0xfe,0x94,0x1c,0x96,0x4b,0xbf,0xbf,0x89,0x97,0xfa,0x7d,
    0x8f,0x4f,0x9a,0x98,0x56,0xa7,0x61,0x27,0x1a,0xda,0x9d,0x86,0x7b,0xc0,0x4d,0x43,
    0x07,0x98,0x69,0xc8,0x39,0x0d,0x6a,0xeb,0xe4,0x9d,0xd2,0xba,0x9d,0x4e,0xc3,0xfd,
    0xd4,0x2e,0x73,0x1a,0xba,0xc0,0x4d,0xc3,0x57,0x60,0xe6,0xa7,0x1a,0x2c,0x57,0xce,
    0x69,0x58,0xc3,0xa7,0x8d,0x98,0x4e,0xa7,0xe1,0x41,0x34,0xec,0x72,0x1a,0xba,0xc1,
    0x4d,0xc3,0x43,0x60,0xa6,0xa1,0xd7,0x69,0x50,0x5b,0x4f,0x3c,0x77,0xc5,0xba,0x3d,
    0x9c,0xa3,0x6c,0xcc,0x57,0xac,0xbd,0xe6,0xee,0x9a,0x72,0x34,0xdf,0x5e,0xc7,0xf1,
    0x07,0xfc,0x72,0xc4,0xf5,0xc0,0x47,0xef,0xe0,0xa3,0xdc,0x3f,0x3b,0x73,0xfb,0xe1,
    0xdc,0xef,0xce,0xdc,0x01,0xf0,0xb7,0x39,0x73,0x8f,0x81,0x69,0xde,0x97,0x79,0x1b,
    0x1f,0x07,0x1f,0x95,0xbd,0xde,0xf5,0x27,0xc8,0x7d,0x92,0x98,0x27,0xc1,0xfa,0x5d,
    0xcc,0x00,0xf8,0xb4,0xf8,0xe8,0xfe,0x10,0x79,0x06,0xe0,0xa3,0x77,0xfd,0x08,0x7c,
    0x06,0xe1,0xa3,0xb3,0x7a,0x0a,0x5c,0xf3,0xe8,0x9b,0x7c,0x14,0x6c,0x48,0x2a,0xe9,
    0x3d,0x3d,0x46,0xed,0x43,0xf4,0xe6,0xa8,0x9b,0xc9,0xd3,0xe4,0x1b,0x72,0x33,0x79,
    0x06,0xdc,0x66,0xf2,0x2c,0x98,0xcd,0x64,0xc4,0xcd,0x44,0x6d,0xc3,0xb2,0xc6,0xe8,
    0xf3,0x30,0xe7,0x4a,0xf3,0x3c,0x47,0xed,0x24,0x6a,0xa8,0x88,0x6f,0xd1,0xf3,0x60,
    0xc7,0xdc,0x7d,0x4f,0x45,0x6e,0x99,0x68,0x1f,0x25,0xce,0xd6,0x94,0xe4,0x52,0xfc,
    0x04,0xb1,0xa3,0x31,0xd7,0x86,0xa8,0xeb,0x24,0x79,0x4e,0xf0,0xe6,0xa4,0x79,0xf7,
    0x12,0x66,0x3f,0x02,0xa7,0x31,0xa7,0xf7,0x05,0xf4,0x8e,0x3b,0xbd,0x2f,0x82,0x9b,
    0xde,0x97,0xc0,0x4c,0x6f,0xde,0xe9,0x55,0xdb,0x44,0x7c,0xa3,0x8a,0xb9,0x27,0x9c,
    0xde,0x57,0x9c,0xde,0x2b,0xe4,0x7a,0x15,0x7c,0x1b,0x9c,0x2c,0x2e,0xcf,0x79,0x54,
    0x9f,0xd7,0xa8,0x39,0x86,0xff,0x04,0x75,0x0b,0xae,0xae,0xfa,0x4c,0xca,0x2a,0x10,
    0x3f,0xe9,0xea,0xbe,0xfe,0x1f,0x7d,0x7e,0xe3,0x26,0x7d,0x3e,0x45,0x9c,0xad,0x33,
    0xf4,0xf9,0x34,0xb1,0xa7,0x5c,0x9f,0xdf,0x24,0xcf,0xe9,0xff,0xe9,0xb3,0x71,0x2a,
    0xa0,0x49,0x63,0x7e,0x24,0x26,0x4f,0xfc,0x64,0xc9,0x4c,0x46,0x9c,0xef,0x3a,0xb3,
    0x1c,0x26,0xae,0xe0,0xe6,0xf5,0x2e,0xf3,0x9a,0x72,0xf3,0x3a,0x03,0x6e,0xf3,0x3a,
    0x0b,0x66,0xf3,0x9a,0x71,0x7d,0x3b,0x1b,0xef,0x53,0x08,0xe7,0xa8,0x3b,0xed,0x74,
    0xbd,0x47,0xed,0x75,0x74,0x65,0xe9,0x91,0xe9,0x9a,0x21,0xe6,0x9c,0xe3,0xf3,0x3e,
    0x7c,0xce,0x3b,0x3e,0x1f,0x80,0x1b,0x9f,0x0f,0xc1,0x8c,0xcf,0x9c,0xe3,0xa3,0xb6,
    0x59,0x59,0xf3,0xe4,0x9e,0x75,0x73,0xbc,0x00,0x97,0x84,0x77,0x57,0x39,0x7e,0xed,
    0x70,0x7b,0xd3,0xe6,0x88,0x9d,0x77,0xef,0xc2,0x47,0xf0,0xba,0xe8,0xde,0x85,0x8f,
    0xc1,0xd7,0x78,0xe7,0x2f,0x81,0x0d,0x3a,0xae,0x97,0xc1,0xfb,0xe1,0xba,0xe8,0xb8,
    0xaa,0x6d,0x41,0xd6,0x22,0xf5,0x16,0x1c,0xaf,0x6f,0xd0,0xb7,0xee,0xfe,0x1e,0x98,
    0xdf,0xa2,0x9b,0xed,0x35,0x7c,0xe6,0x89,0x59,0x70,0x7c,0x3e,0x81,0x4f,0x8b,0xe3,
    0xf3,0x29,0xb8,0xf1,0x59,0x76,0x7c,0xd4,0xb6,0x24,0x6b,0x99,0x3a,0x4b,0x8e,0xcf,
    0xb7,0xf0,0xb9,0xc6,0x0c,0x95,0x8f,0xf9,0x2d,0x3b,0x3e,0xd7,0xf1,0x59,0x24,0x66,
    0xc9,0xf1,0xb9,0x02,0x9f,0x29,0xc7,0xe7,0x73,0x70,0xe3,0xb3,0xea,0xf8,0xa8,0x6d,
    0x45,0xd6,0x2a,0x75,0x56,0x1c,0x9f,0xef,0xf8,0xbf,0xf1,0xba,0x3b,0x4f,0xe6,0xb7,
    0xea,0xf8,0xfc,0x82,0xcf,0x32,0x31,0x2b,0x25,0x33,0x9e,0x73,0xbe,0x3f,0x73,0x1e,
    0x66,0x89,0x5b,0x2d,0x39,0xa7,0x33,0xce,0xf7,0x27,0xce,0xf7,0x34,0x71,0x73,0xf1,
    0x7f,0xb6,0x24,0xfe,0xaf,0xa6,0xb6,0xbf,0x65,0x6a,0xdd,0xb2,0xfe,0x01,0x5a,0x6c,
    0x1f,0x83,0x10,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
