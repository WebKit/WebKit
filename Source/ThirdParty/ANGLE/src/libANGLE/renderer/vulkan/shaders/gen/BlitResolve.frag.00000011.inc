// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000011.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000011[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xd9,0x4e,0x94,0x41,
    0x10,0x85,0x7b,0x76,0x40,0x50,0x98,0x61,0x13,0x59,0x04,0x04,0x05,0x95,0x8c,0x3a,
    0x63,0x30,0xc8,0xa2,0x30,0x20,0x32,0x2a,0xbb,0x28,0xe8,0x48,0x00,0x05,0xa3,0x60,
    0x80,0x0b,0x2f,0x4c,0xbc,0x30,0x3e,0x82,0xbe,0x84,0xcf,0x67,0x5c,0x12,0x13,0xab,
    0xfa,0xff,0x9a,0x54,0xf8,0x93,0x9e,0xee,0x3a,0x7d,0x6a,0x39,0xdd,0x5d,0x93,0x88,
    0xf7,0x66,0x9c,0x8b,0xb9,0x1a,0x57,0xe5,0xde,0xba,0xe8,0x6b,0x70,0x71,0x41,0xa2,
    0xf9,0x5b,0xce,0xc9,0x5e,0xb5,0x5b,0x9a,0x5f,0xad,0x94,0xd6,0x96,0x2b,0x47,0xbb,
    0x9b,0xdb,0x3b,0x87,0x95,0xa3,0xe3,0x9d,0xfd,0xad,0xbd,0x77,0x95,0x9d,0x8f,0x1f,
    0x0e,0x0e,0x8f,0x85,0x7b,0xc6,0xa5,0xbd,0xcf,0x4c,0x79,0xa9,0x3c,0x74,0x74,0xbc,
    0x3d,0x54,0x28,0xe6,0x35,0xd6,0x59,0x97,0xf0,0x31,0x75,0xef,0x9c,0xcb,0xb8,0xa4,
    0xcc,0x3a,0xde,0x6f,0xee,0xed,0x2b,0x5e,0x2b,0x63,0x4a,0x46,0xbd,0xf0,0x14,0xcf,
    0x68,0x0c,0x59,0xd5,0xfa,0x98,0xea,0xe3,0xdc,0x03,0x97,0x72,0x8d,0xd4,0xd6,0xcb,
    0x1c,0xb0,0x18,0x58,0x95,0xc1,0xe2,0x60,0xf5,0x06,0x4b,0x80,0xb5,0x1a,0x2c,0x09,
    0xd6,0x6e,0xb0,0x14,0xd8,0x45,0x83,0xa5,0xc1,0x2e,0x19,0x2c,0x03,0x76,0xc5,0x60,
    0x55,0x60,0xd7,0x0c,0x56,0x0d,0x96,0xf7,0xba,0x12,0x27,0xf5,0xa9,0xc6,0x29,0x34,
    0x7e,0xcf,0x45,0xf6,0x8c,0xac,0x7b,0xd0,0x17,0xec,0x6e,0x34,0xaa,0x3d,0x77,0x6a,
    0x7f,0x8e,0x7d,0x8d,0x97,0x93,0xdf,0xb8,0xb7,0x13,0x5e,0xab,0xae,0x9b,0x65,0x95,
    0x46,0x4b,0x8b,0xf0,0x33,0x68,0x89,0x63,0xd7,0x60,0x27,0x3d,0x27,0xe9,0x6b,0xd1,
    0x5c,0x8a,0x8f,0x60,0xd7,0x82,0x35,0x89,0x9d,0x25,0x56,0xb0,0x73,0xd8,0xfa,0x75,
    0x0a,0x33,0x9c,0x4b,0x18,0x59,0x46,0x9a,0x39,0x67,0x86,0xe6,0x6b,0xe2,0x7c,0x1a,
    0xc9,0xd7,0xe4,0x6b,0x8e,0xb0,0xab,0xe4,0x6b,0x21,0x9f,0xf2,0x5b,0xd9,0xcb,0x98,
    0xfd,0x0e,0xf2,0x07,0xbb,0x87,0x7d,0xe5,0xf7,0xc2,0xcf,0xf9,0x1c,0x71,0xd7,0x0f,
    0x4f,0xed,0xcb,0xa7,0xfc,0xf2,0xdc,0x5f,0xb0,0x47,0xf0,0xd5,0x38,0x93,0xbc,0x9f,
    0x2c,0x75,0x4e,0xf2,0x66,0x15,0x3b,0x2f,0xac,0x12,0x39,0x62,0xc4,0x3c,0x3d,0x6b,
    0x8c,0x69,0xd6,0x25,0x62,0x4c,0xfb,0x3b,0x8c,0xbe,0x36,0xa9,0x6d,0x16,0xde,0x43,
    0xb0,0x59,0x78,0x6a,0xcf,0x81,0x5d,0x90,0x8c,0x8f,0x88,0x11,0xea,0x9c,0xe7,0x3e,
    0x83,0xbd,0x4c,0x5d,0x1a,0x6b,0x05,0x0d,0x59,0xee,0xfb,0x19,0x77,0x91,0xc0,0x7e,
    0x41,0xdd,0x7a,0xff,0xb7,0xe5,0xbd,0xc6,0x59,0x3b,0x38,0xbf,0x05,0xd1,0x7e,0x18,
    0xe5,0xad,0xd4,0xf1,0x1e,0x16,0x04,0x4d,0xd3,0x9b,0x75,0xf0,0x03,0x56,0x0f,0x16,
    0xf3,0xb5,0xa5,0xfc,0x5d,0x34,0xc0,0xd5,0xbd,0x7b,0x82,0xb5,0xfa,0x73,0x8b,0xee,
    0xba,0x85,0xf8,0x19,0x7f,0x0e,0x11,0xfe,0x15,0xbf,0x76,0x7c,0xdb,0x8c,0x5f,0x27,
    0x7e,0x1d,0xc6,0xaf,0x0b,0xfc,0x0b,0x7e,0xdd,0xf8,0x76,0xe1,0x17,0x7a,0xb7,0x99,
    0xf7,0x31,0xca,0x1b,0xe8,0x03,0xff,0x21,0x9c,0x7e,0x7a,0xb9,0x8f,0xb7,0xf1,0x4b,
    0x4e,0x60,0x10,0x6d,0x7f,0x85,0xaf,0x7b,0x03,0x32,0x06,0x39,0x97,0x01,0xa3,0xf9,
    0x3a,0x39,0xf5,0xfb,0x2c,0x5c,0xc5,0x86,0xc0,0x17,0xc5,0xd2,0x9a,0xb6,0xc0,0x02,
    0xef,0x8f,0xc4,0x08,0xb1,0x74,0xfe,0x29,0x2c,0xe5,0xbd,0x81,0x93,0xc2,0x67,0xc0,
    0x68,0xb8,0x81,0x86,0xbc,0xd1,0x70,0x13,0x3c,0x68,0xb8,0x05,0x16,0x34,0x14,0x8d,
    0x06,0xdd,0x2b,0xc8,0x28,0x92,0xb7,0x60,0x34,0x0c,0x93,0x3b,0x66,0x34,0xdc,0x01,
    0x0f,0x1a,0x5e,0x83,0x05,0x9e,0x6a,0x08,0xb1,0x8a,0x46,0xc3,0x2e,0x9c,0x41,0x7c,
    0x0a,0x46,0xc3,0x5d,0x34,0x8c,0x18,0x0d,0xa3,0xe0,0x41,0xc3,0x18,0x58,0xd0,0x30,
    0x61,0x34,0xe8,0xde,0xb8,0x8c,0x09,0xf2,0xea,0xfa,0x09,0x79,0xef,0x93,0x7b,0xd7,
    0xf4,0x9e,0xd6,0x18,0xb8,0x13,0xa6,0xc6,0x3d,0x78,0x45,0xfc,0xc6,0xa9,0xa7,0xe4,
    0xff,0xbb,0xa3,0xde,0x54,0x5b,0xfb,0xb0,0x4c,0x0f,0xae,0x4a,0x7d,0xda,0x7f,0x8f,
    0xe1,0x94,0xcd,0xbb,0x5c,0x40,0xd7,0xbc,0x79,0x97,0x8b,0xe0,0xe1,0x3d,0x2f,0x91,
    0x77,0x11,0xbf,0x15,0x1f,0x33,0xf2,0x5b,0xc6,0x4f,0x7b,0xf5,0x29,0xf8,0x01,0xf7,
    0xb0,0x06,0x16,0xee,0xea,0x39,0xb1,0x6c,0xdf,0xad,0x83,0x45,0x7d,0x97,0xf6,0xbd,
    0xbe,0x01,0x77,0xfd,0x24,0x46,0xca,0xf7,0xfc,0x4b,0x34,0x6c,0xe0,0xaf,0x77,0x50,
    0x01,0xd7,0xef,0x13,0x75,0xbc,0x02,0x1f,0x93,0x3b,0x98,0xc2,0xfe,0x27,0x19,0x86,
    0x65,0xfc,0x07,0x8e,0x59,0x7a,0xd8,0x38,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragStencilRefARB = int(texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x);
//
// }
