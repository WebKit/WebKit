// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x08,0xf2,0x10,0x50,0x42,0xc5,0x12,0xa5,0x87,0x18,
    0x62,0x81,0x91,0x80,0x49,0x46,0x92,0x51,0x2a,0x9a,0x95,0x58,0x46,0x92,0x68,0x21,
    0x95,0x98,0x69,0x52,0x3e,0x30,0x25,0x2d,0xad,0xa4,0x7c,0xf4,0x12,0x2b,0xd1,0x54,
    0xd4,0xfa,0x23,0xfa,0x8b,0x9a,0x1e,0x33,0xcd,0xb4,0xd7,0xb9,0xbf,0xc5,0x7c,0x73,
    0xc7,0x8a,0x99,0x3d,0xe7,0xec,0x6f,0xad,0xfd,0xad,0x6f,0xad,0xbd,0xce,0xba,0x24,
    0x13,0x0b,0xd2,0x51,0x94,0x13,0x15,0x44,0xf9,0xd1,0x2f,0x51,0xe6,0x6f,0x46,0x94,
    0x08,0x48,0x14,0x15,0x46,0xa9,0xf8,0xb9,0xba,0x6b,0x43,0x57,0xfd,0xd0,0x9e,0xbe,
    0xfa,0xc6,0xa6,0x06,0xb3,0x17,0x47,0xc9,0xd8,0xcf,0x6c,0x25,0x51,0x3a,0xca,0x0d,
    0x4f,0x5b,0xbb,0x7a,0x77,0x0e,0x1a,0x5e,0x14,0xd6,0xed,0xb0,0x4a,0x83,0x9f,0xe1,
    0x69,0xe3,0x08,0x6f,0x45,0x31,0xa7,0x9d,0x89,0xa2,0xce,0x28,0x2f,0x2a,0x27,0xde,
    0x02,0x9e,0x8e,0xe5,0x80,0xe5,0x0b,0x96,0x00,0x2b,0x15,0x2c,0x09,0x56,0x21,0x58,
    0x2e,0xd8,0x5d,0x82,0xe5,0x81,0xcd,0x15,0x2c,0x05,0x76,0x8f,0x60,0x69,0xb0,0x85,
    0x82,0xe5,0x83,0xdd,0x2f,0xd8,0x34,0xb0,0xc5,0x82,0x15,0x80,0x35,0x08,0x56,0x08,
    0xd6,0x28,0xd8,0x74,0xb0,0x66,0xc1,0x8a,0xc0,0x5a,0xe3,0x3a,0x25,0xa7,0xf2,0xb5,
    0x9a,0xad,0x0a,0xcf,0x1a,0xea,0xe3,0xfb,0xf9,0xb2,0xb7,0x3a,0xcf,0x63,0x5f,0x1e,
    0x4e,0x25,0x62,0x7b,0x32,0xae,0x8d,0xbd,0xcf,0x0c,0x3e,0x29,0xf2,0xb4,0xba,0x56,
    0x86,0x7d,0x9a,0xfc,0x13,0x31,0x9e,0x1b,0xe7,0x98,0x66,0xcd,0x0a,0x27,0x0b,0xf0,
    0x37,0xdf,0x42,0x72,0xcb,0xc5,0x77,0x3a,0x3c,0x86,0xb7,0xb0,0x2f,0x12,0xee,0x62,
    0xfc,0x3d,0x76,0x19,0x5c,0x51,0xac,0xb3,0x74,0xaa,0xce,0xae,0xc1,0x56,0xd9,0xff,
    0x2c,0xf7,0xb1,0xf8,0x15,0xd4,0xbf,0x9c,0xf8,0x15,0x71,0x9c,0x0c,0x56,0x47,0xae,
    0xb3,0xd0,0x63,0xfe,0x95,0xd8,0xd2,0x62,0xaf,0x96,0x7c,0xe6,0x61,0x2f,0x8b,0xfb,
    0x28,0x11,0xd7,0xb6,0x0e,0xdd,0x5e,0x77,0xf3,0xbb,0x57,0x34,0x3b,0x4f,0x1d,0xbd,
    0xe5,0xfe,0x4b,0x89,0xeb,0xf6,0x65,0xd4,0xc6,0xea,0xb2,0x82,0x18,0x1e,0xf7,0x31,
    0xf8,0x0c,0xaf,0x0a,0x0a,0xda,0xb1,0xe7,0x10,0x33,0xfb,0x69,0x67,0x1e,0xe7,0xbd,
    0x9d,0xdc,0x6d,0xbf,0x0a,0xcc,0x63,0x76,0x64,0xed,0xd7,0xf0,0x9d,0xd8,0xf9,0xa7,
    0xc9,0x35,0x85,0xa6,0x67,0x79,0x4f,0x8a,0x7f,0x37,0x77,0xe7,0xfb,0x4d,0x92,0xb3,
    0xe9,0xdb,0x22,0x7c,0x2f,0x91,0x43,0x19,0x7c,0xaf,0xf0,0xae,0x7c,0x3b,0xb2,0x6a,
    0x3f,0xc2,0x37,0x65,0xfe,0x1f,0xe1,0xaf,0xf1,0x4e,0x67,0xdd,0xe5,0x05,0xbe,0x19,
    0x8f,0x7f,0x45,0xfa,0xf6,0x16,0xb1,0x56,0x50,0x8f,0x5b,0xcc,0x9d,0x64,0x5c,0xfb,
    0xbc,0xd8,0x2f,0x97,0x7a,0x18,0xf6,0x47,0x40,0xf2,0xf0,0xcd,0x97,0xbe,0xf0,0xfd,
    0x1c,0xd9,0xdb,0xfd,0xac,0xcc,0xda,0x0f,0xcb,0xde,0xfa,0xe1,0x3c,0xfb,0x36,0xbe,
    0x93,0x12,0xee,0x7b,0x6d,0x40,0x8b,0x99,0x55,0x25,0x2c,0xbf,0xcb,0x41,0xbe,0xbf,
    0x19,0xd8,0xdb,0x83,0xa2,0x4a,0xe6,0xd5,0x4c,0x7a,0xb7,0x0d,0x9f,0x2a,0xf0,0x23,
    0xc1,0xc7,0xf6,0xb3,0x39,0x57,0x15,0xe7,0x9c,0x8c,0xf5,0xcf,0x16,0xff,0xb9,0xe4,
    0x64,0xb6,0x39,0xec,0x8d,0xdf,0x7a,0xfc,0x6e,0xf8,0xab,0xf1,0xf7,0xef,0xd2,0xf0,
    0x6b,0xc1,0x67,0xbe,0xcc,0x43,0xeb,0xfb,0xdf,0x03,0x47,0x2d,0xba,0xff,0x0a,0xfe,
    0x3e,0x17,0x6b,0xa9,0xe3,0x42,0xb8,0xad,0x0e,0xf7,0x51,0xbb,0x1a,0xb8,0x53,0xcc,
    0x4b,0xc3,0x3f,0x60,0xff,0x00,0x98,0x9f,0x59,0x24,0x67,0x4c,0xef,0x22,0x7c,0xfe,
    0x0c,0xdc,0x1e,0xa3,0x56,0xf4,0x2f,0x46,0x7f,0x9d,0xe8,0x7f,0x10,0xdc,0xf5,0xd7,
    0x83,0xb9,0xfe,0x06,0xd1,0x6f,0xb6,0x25,0xcc,0x67,0xe3,0x5e,0x22,0x5a,0x1e,0x42,
    0xcb,0x52,0xd1,0xff,0x30,0xb8,0xeb,0x6f,0x04,0xf3,0x33,0x4d,0x72,0xc6,0xf4,0x37,
    0xe1,0x63,0xfa,0x3d,0x46,0x83,0xe8,0x7f,0x04,0xfd,0xcb,0x44,0x7f,0x33,0xb8,0xeb,
    0x7f,0x14,0xcc,0xf5,0xb7,0x88,0x7e,0xb3,0x2d,0x8f,0x7b,0x2f,0xc3,0xbd,0x5c,0xee,
    0xbd,0x15,0x2d,0xd6,0x77,0x99,0x7e,0xcc,0x60,0xad,0x32,0x3f,0xbc,0x27,0xda,0xd0,
    0xe8,0x3c,0x2d,0xf0,0xd8,0x4c,0x79,0x82,0x79,0xe2,0x3d,0xf9,0x24,0x9a,0x3b,0x24,
    0xd6,0x6a,0x70,0xdf,0x77,0x12,0xfb,0x10,0x3d,0xfa,0x14,0x3e,0x9d,0xf0,0xd8,0xcc,
    0xe9,0x82,0x67,0x8d,0xd4,0xf7,0x19,0xf0,0xf5,0xc1,0x27,0x15,0x6b,0xcf,0x9c,0x8d,
    0x04,0x5b,0x07,0x96,0x13,0xbf,0xa7,0xe2,0x79,0xb5,0x1e,0xdf,0x75,0x70,0x78,0x8c,
    0x0d,0xc4,0xe8,0x96,0x18,0x1b,0xc1,0xb7,0x06,0x65,0x36,0x23,0x9e,0x23,0xc7,0xf5,
    0xcc,0x90,0x8d,0xd4,0x65,0x25,0x36,0xbf,0xab,0xe7,0xe1,0xda,0x24,0x77,0xf5,0x02,
    0xb8,0xdf,0xd5,0x8b,0x60,0x7e,0x57,0x3d,0x72,0x57,0x66,0xdb,0x1c,0x56,0x3f,0x35,
    0xde,0x0c,0xb7,0xcd,0xcb,0x97,0x99,0x2b,0x5b,0x84,0x7b,0x2b,0x78,0x1b,0xbf,0x13,
    0xbd,0xf8,0xac,0x0d,0x53,0xc9,0x66,0xea,0xab,0x60,0xbd,0x32,0x47,0x12,0xd4,0xc4,
    0xec,0xdb,0xe0,0xf0,0x75,0x34,0xc4,0x32,0xbc,0x8f,0xb3,0xdb,0x84,0xfb,0xb5,0x29,
    0xee,0x69,0xf1,0x7e,0x3b,0x58,0x1f,0xb3,0x32,0x4f,0x7e,0x13,0xbc,0x36,0xdb,0xe9,
    0x99,0x1e,0xf2,0xe9,0x97,0x5a,0xed,0xa4,0x56,0x3b,0x24,0x9f,0xd7,0xc1,0xbd,0x56,
    0x6f,0x80,0x79,0xad,0x76,0x49,0xad,0xcc,0x36,0x60,0xff,0x3b,0xc2,0x3d,0x20,0xb5,
    0x1a,0xbc,0x43,0xad,0xde,0x04,0xbf,0x0e,0xf7,0x5b,0x60,0x35,0x68,0x74,0x1e,0x7b,
    0xfe,0x16,0xee,0xdd,0x7c,0xde,0x46,0x43,0x3f,0xfe,0x03,0xe8,0x18,0x12,0x1d,0xe6,
    0xb3,0x3b,0xac,0x21,0xce,0xef,0x16,0x1d,0x7b,0xee,0xa0,0xe3,0x1d,0x70,0xaf,0xeb,
    0xde,0xac,0x3b,0x7b,0x17,0x6c,0xef,0xbf,0xdc,0xd9,0x3e,0x38,0x7c,0x1d,0xe3,0xce,
    0xf6,0x73,0x76,0x9f,0x70,0xbf,0x97,0x75,0x67,0x07,0xc0,0xf6,0xff,0xc7,0x9d,0x1d,
    0xa0,0x1e,0x9e,0xcf,0x50,0xd6,0x1d,0xf6,0x08,0xff,0xfb,0xf0,0xdb,0x77,0x57,0x16,
    0xcf,0xbc,0x0c,0x16,0x09,0x76,0x10,0x2c,0x47,0xb0,0x43,0x60,0x09,0xc1,0x0e,0x83,
    0x25,0xe3,0x5c,0x33,0xdf,0xdd,0x11,0x38,0x0f,0x72,0xe6,0x30,0x3a,0x87,0xb1,0x79,
    0x2f,0x1d,0xa5,0x97,0x46,0xa4,0xce,0x1f,0x82,0x7b,0x2f,0x1d,0x03,0xf3,0x5e,0x1a,
    0x95,0x3b,0x34,0xdb,0xf1,0xb0,0x4e,0x91,0xe3,0x71,0xc9,0xf1,0x04,0xbf,0xdf,0x36,
    0x23,0xed,0xff,0x8e,0x93,0x60,0x27,0xe4,0xff,0x03,0xf7,0xfd,0x78,0xca,0x37,0x53,
    0xef,0x4f,0xc0,0x4e,0x4a,0xbd,0x13,0x52,0xef,0x61,0x7c,0xac,0xbe,0xa3,0xc4,0x3e,
    0x25,0x79,0x7d,0x4a,0x5e,0xa7,0x25,0xaf,0xcf,0xc0,0x3d,0xaf,0xcf,0xc1,0x3c,0xaf,
    0x31,0xc9,0xcb,0x6c,0x67,0xc2,0x3a,0x07,0xf7,0x19,0xe9,0xcd,0x2f,0xd0,0xaa,0xbd,
    0xf9,0x25,0xb8,0xfb,0x9c,0xc5,0xc7,0x7f,0x6b,0xcf,0xe2,0x63,0x7a,0xc7,0xe0,0x3c,
    0x27,0xb3,0xf4,0x2b,0xf4,0x5e,0x90,0x59,0xfa,0x35,0xb8,0x9d,0x3f,0xcf,0xde,0x6d,
    0xdf,0xf0,0xbf,0xd0,0xaf,0xcc,0xed,0x6f,0xc1,0xba,0x25,0xbf,0xef,0xc0,0x3b,0xc8,
    0x6f,0x5c,0xf2,0x33,0xdb,0xc5,0xb0,0xc6,0xd1,0x72,0x51,0xb4,0x5f,0x42,0xbb,0xff,
    0xce,0x5e,0x92,0x6f,0xdd,0xfd,0xc7,0x45,0xcb,0xf7,0x59,0x5a,0x7e,0x00,0xab,0x16,
    0x2d,0x3f,0x82,0xbb,0x96,0x09,0xd1,0x62,0xb6,0xcb,0x61,0x4d,0xc0,0x7d,0x59,0xb4,
    0x5c,0x45,0xcb,0x15,0xb4,0x5c,0x15,0x2d,0xee,0x3f,0x21,0x5a,0x7e,0xca,0xd2,0x72,
    0x0d,0x6c,0x44,0xb4,0x5c,0x07,0x77,0x2d,0x93,0xa2,0xc5,0x6c,0x37,0xc2,0x9a,0x84,
    0xfb,0x86,0x68,0xb9,0x29,0xf7,0x6e,0x5a,0x6e,0x52,0x23,0xd3,0xe2,0xfe,0x93,0x59,
    0x77,0x3c,0x96,0xd5,0xa3,0xa3,0xd2,0xf3,0x3f,0xc3,0x67,0x5c,0xb7,0xd9,0xff,0x1d,
    0xbe,0xf6,0xe6,0xb0,0xfe,0x01,0xdb,0x18,0xa8,0x3f,0x24,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
