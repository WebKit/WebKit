// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndexIndirectLineLoop.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndexIndirectLineLoop_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x6d,0x68,0x96,0x65,
    0x14,0xbe,0xcf,0xfb,0xbe,0x6e,0xa6,0x51,0x4e,0xb7,0xf4,0xad,0xdc,0x97,0xd5,0x8f,
    0xb7,0xb1,0x72,0x68,0x8d,0x34,0xb7,0xe9,0x0f,0xa3,0x86,0xd2,0xc7,0x28,0xb7,0xb6,
    0x14,0xd2,0x14,0xdd,0xa6,0x73,0x6e,0x81,0x09,0xba,0x95,0x3f,0x24,0x64,0x65,0x05,
    0xba,0xe1,0x46,0x7f,0x72,0x43,0x82,0xfd,0x8b,0xc8,0xfd,0x88,0xdc,0x5c,0x21,0x08,
    0x96,0xa0,0x30,0xc1,0x12,0x26,0x58,0xe6,0x82,0xbe,0x4b,0xbb,0xcf,0x73,0x5f,0x67,
    0xbb,0x7c,0x7a,0x07,0x0f,0xcf,0xee,0xeb,0x9c,0x73,0x9d,0x73,0x5f,0xd7,0xfd,0x3c,
    0xcf,0x9b,0x4c,0x2c,0xc9,0x75,0x4e,0xdc,0x1c,0x37,0xdb,0xf5,0x8a,0x8b,0xfe,0xf2,
    0x5c,0xc2,0xe9,0xbf,0x73,0x5d,0x4e,0x74,0x5f,0x5b,0xfb,0x62,0x6d,0xf9,0xee,0xf6,
    0xd7,0xcb,0x97,0x2d,0x7f,0x5c,0xe3,0xf7,0xb8,0x64,0x94,0xa7,0xb1,0x7b,0x7d,0xce,
    0x2c,0x7f,0x4f,0xf9,0xab,0x79,0xd3,0xb6,0x16,0xc5,0x5b,0xfd,0x35,0xcf,0xe3,0xa9,
    0x88,0xcb,0xb9,0x6a,0xe4,0xea,0xf5,0x8c,0xcf,0xce,0x0b,0x6d,0xdc,0x12,0xdc,0x0d,
    0x13,0x60,0x29,0xc2,0x12,0xc0,0x66,0x13,0x96,0x04,0x76,0x37,0x61,0x29,0x60,0xf3,
    0x74,0x5e,0x9f,0x61,0xb5,0x6b,0x7d,0xa4,0xd0,0xdf,0x73,0xa6,0x79,0x53,0xae,0x08,
    0x7d,0x17,0xa1,0xbe,0x28,0x36,0x8f,0xd6,0x17,0xa1,0x8f,0xd6,0x97,0xf8,0x7b,0xe9,
    0x74,0x2c,0xac,0x4b,0x30,0xaf,0xae,0xab,0xee,0xe0,0x9f,0x15,0xed,0x37,0xce,0x57,
    0x4d,0x7c,0xab,0x63,0x7c,0xab,0xc1,0x67,0xeb,0xfa,0xd8,0xbc,0x0d,0xb1,0x79,0x1b,
    0xb2,0xf0,0x37,0x10,0x7f,0x63,0x8c,0xbf,0x11,0xfc,0xa6,0x47,0x6b,0xe4,0xad,0x73,
    0x0f,0x62,0x3d,0x1a,0x9b,0x7f,0x2c,0x0b,0xff,0x18,0xf1,0x8f,0xc7,0xf8,0xc7,0xc1,
    0x6f,0xf1,0x9b,0xe0,0x4f,0xfb,0x6b,0x81,0xef,0x9a,0x88,0xe2,0xc9,0x28,0xae,0xff,
    0x17,0xf8,0x1c,0xed,0x57,0x0c,0x8e,0x42,0x97,0x1b,0xf9,0x95,0x93,0xe5,0x2a,0xf6,
    0xb9,0xf3,0xfd,0xfd,0x2e,0x9c,0xa5,0x15,0x58,0x2f,0x00,0xa6,0x5c,0xf9,0xe0,0x52,
    0x3f,0x1e,0xc5,0xba,0x00,0xbd,0xb4,0xfe,0x3e,0xe4,0xe6,0x50,0x3c,0x8d,0xfc,0xc5,
    0x7e,0x2a,0x3b,0x1f,0x85,0xf0,0xbd,0x10,0x75,0xc5,0xe0,0x28,0x42,0xdf,0x62,0xd2,
    0xd1,0x78,0x4c,0x07,0xcd,0x7f,0x18,0x31,0xeb,0xa3,0xf7,0x4c,0x6c,0xae,0x32,0xe8,
    0x6c,0xf1,0x0a,0x7f,0xdd,0xbe,0x3d,0x13,0xaf,0x84,0x8e,0x3a,0x57,0x15,0xcd,0xa5,
    0xe7,0xa7,0x0a,0x7d,0x6a,0xd0,0xa7,0x1a,0x73,0xe9,0x7a,0x75,0x6c,0xae,0x67,0xc1,
    0xab,0x3c,0xf5,0xc4,0xa3,0xe7,0xa4,0x1e,0x3c,0xaf,0xa2,0xa6,0x01,0x3c,0xba,0x6e,
    0x24,0x1e,0xad,0xd9,0x8c,0xf5,0x42,0xbf,0x6e,0x06,0x4f,0x12,0xf5,0x2d,0xd8,0x5b,
    0x33,0xea,0x5b,0xf0,0xec,0x0b,0xd5,0xef,0x24,0x7d,0x76,0x21,0xa6,0x78,0xbe,0x67,
    0x6d,0xc7,0x3e,0x47,0x69,0x3e,0x3d,0x67,0xa3,0xc8,0x3f,0x83,0xde,0x63,0xe0,0xd7,
    0xf5,0x78,0x6c,0xbe,0x09,0xcc,0x63,0xeb,0xc9,0x98,0xbe,0x3f,0x43,0xa7,0x32,0xbf,
    0xd2,0x39,0x6f,0x02,0xcb,0xe0,0x7a,0xc2,0x9f,0xf7,0x04,0x6a,0x1c,0xb8,0xfe,0xf0,
    0x88,0xbe,0xd3,0x7e,0xf7,0xab,0x29,0xe0,0x7f,0xfb,0xff,0x75,0x2f,0xbf,0x20,0xae,
    0xf7,0x1a,0x9f,0xa5,0x67,0xab,0x09,0xe7,0x51,0xcf,0xc2,0xd3,0xe8,0xfb,0x1a,0xf0,
    0x1a,0xbf,0xd2,0x73,0xb1,0x11,0xda,0x96,0x22,0x66,0x79,0x9b,0x10,0xdb,0xef,0xb9,
    0x74,0xbd,0x05,0xf1,0xcd,0x54,0xfb,0x06,0xd5,0x6e,0xa1,0xda,0xad,0x88,0xe9,0x1c,
    0xaa,0x6d,0x1b,0xf4,0xdf,0x49,0x39,0xbb,0x81,0x7f,0xea,0x73,0x54,0xef,0x3d,0xc0,
    0x32,0xd8,0x5f,0x27,0xf6,0xf7,0x97,0xcf,0xd7,0x58,0x87,0xbf,0x3a,0xb1,0x47,0xfd,
    0xff,0x4f,0x7f,0x9f,0xc2,0xba,0x13,0xeb,0xfd,0x58,0xeb,0xfd,0x57,0xff,0xec,0x6a,
    0x9f,0x83,0x12,0xe6,0xd1,0x9c,0x43,0xfe,0xea,0xa6,0xd8,0xdb,0x12,0x66,0xd2,0xd8,
    0x31,0xb9,0x33,0xd6,0x4d,0xb1,0xf7,0x62,0xb1,0x2e,0x8a,0xf5,0xc4,0x62,0x07,0x24,
    0x68,0xa7,0xb1,0x23,0xe8,0x77,0x12,0x7b,0x3c,0x88,0xb8,0xd6,0xfe,0xe6,0xf7,0xd5,
    0x85,0xb8,0xed,0x33,0x8a,0x2b,0x3f,0xf6,0x71,0x80,0xf4,0x3f,0x84,0xbd,0xa4,0xc9,
    0xdf,0x7f,0xe0,0x6f,0x01,0xe9,0xfa,0x2f,0xf0,0x2f,0x51,0x77,0x0b,0x58,0x9a,0xb8,
    0xf4,0xb0,0x2b,0xd7,0x2d,0xca,0x4b,0xe0,0x43,0x98,0x26,0x7f,0x93,0xe2,0xa6,0xbf,
    0x31,0x1a,0xb7,0x1e,0x29,0x09,0xb1,0x31,0xd4,0xe6,0xa0,0x56,0xbd,0xfb,0x0a,0x58,
    0xae,0x04,0xbc,0x8c,0x7a,0xcc,0x91,0x50,0x9b,0x4b,0xb5,0x73,0x25,0xe0,0xfa,0xbe,
    0x19,0x82,0x4e,0x87,0x49,0x63,0xf5,0xb5,0x07,0x7a,0xe8,0x7d,0xd0,0x57,0xe5,0xc0,
    0xaf,0xc3,0xa8,0x57,0x1f,0xbb,0xc0,0x77,0x04,0x1a,0xb3,0x4e,0x1f,0x40,0xa7,0x32,
    0xd2,0xe9,0x43,0xe0,0xd6,0xf3,0x23,0x60,0x19,0xc2,0x8e,0x82,0x5f,0x67,0xfb,0x04,
    0xd8,0x31,0xe4,0x1e,0xc5,0x39,0xed,0x23,0xff,0x34,0xd6,0xeb,0xaf,0x61,0xcc,0xdb,
    0x4b,0xde,0x1f,0xc7,0x9e,0xec,0x7c,0x0f,0x50,0x9d,0xc6,0xfa,0xfd,0x35,0x80,0xba,
    0x7e,0xf2,0xea,0x63,0x9c,0x45,0xde,0x4f,0x9e,0x84,0xfd,0x54,0xd2,0x7e,0xe6,0x4b,
    0xc0,0x4d,0xeb,0x7c,0x99,0xa9,0x33,0xae,0x02,0x09,0x79,0x1a,0x33,0x8f,0x17,0x8a,
    0x9b,0xfe,0xee,0x17,0x90,0xc7,0x8b,0x24,0xc4,0xcc,0xa7,0xfb,0xc1,0xc7,0x1e,0x3f,
    0x20,0x01,0x2f,0x03,0xa6,0xef,0xf7,0xc5,0x12,0xde,0xf1,0x1a,0x3b,0x83,0x77,0x7e,
    0xa1,0x04,0xfc,0x2d,0x70,0x17,0x49,0xc0,0x8c,0xbb,0x44,0x42,0x3f,0xc5,0x8d,0xfb,
    0x21,0x09,0x1e,0x2b,0xcf,0x69,0x60,0x8f,0x48,0xc8,0xd5,0xd8,0x2a,0xaf,0xa1,0xce,
    0xa7,0x98,0x9e,0x11,0xd3,0x6e,0x80,0x9e,0xc5,0x77,0x31,0x73,0x2f,0x74,0xec,0x27,
    0x3f,0x4e,0xd0,0x19,0x53,0x3f,0x86,0xc8,0x8f,0x13,0xd1,0x39,0x73,0x11,0xa6,0x9c,
    0x83,0xa4,0xe1,0x49,0xf0,0xb2,0x1f,0xe5,0x59,0xfc,0x78,0x4c,0x02,0x6e,0x7e,0x2c,
    0x95,0x99,0x3a,0xe3,0xaa,0x90,0x90,0xb7,0x94,0xfc,0x58,0x46,0x7e,0x54,0x90,0x1f,
    0xcb,0x25,0xc4,0x4c,0xb3,0x27,0xc1,0xc7,0x7e,0x54,0x4a,0xc0,0xd9,0x8f,0xa7,0xe0,
    0x47,0x25,0xf9,0xb1,0x42,0x02,0x6e,0x7e,0xac,0x94,0x80,0x19,0xf7,0x2a,0x09,0xfd,
    0x56,0x92,0x1f,0x35,0x78,0x0e,0x2a,0xc9,0x8f,0x35,0x12,0x72,0x6b,0xe0,0x87,0xce,
    0xb7,0x06,0x7e,0x98,0x76,0x43,0xe4,0xc7,0xfb,0x98,0x79,0x00,0x3a,0x0e,0xe2,0xf9,
    0xee,0x43,0xee,0x30,0x69,0xfa,0x5c,0x16,0x4d,0x6b,0x25,0xe0,0xa6,0xe9,0xba,0x2c,
    0x67,0x7c,0xbd,0x84,0xbc,0x75,0xa4,0xe9,0xf3,0xa4,0xe9,0x7a,0xd2,0xf4,0x05,0x09,
    0x31,0xdb,0xf7,0x4b,0x59,0xce,0x78,0x9d,0x04,0x9c,0x35,0x7d,0x19,0x9a,0xd6,0x91,
    0xa6,0xaf,0x48,0xc0,0x4d,0xd3,0x0d,0x12,0x30,0xe3,0x6e,0x90,0xd0,0x6f,0x03,0x69,
    0xda,0x24,0xe1,0xfd,0x52,0x47,0x9a,0x6e,0x94,0x90,0xdb,0x04,0x4d,0x75,0x3e,0xc5,
    0x6c,0x7f,0x9f,0xb9,0xff,0xef,0xf9,0x73,0x9c,0xe5,0x74,0x4c,0xcf,0x3e,0xd2,0x5e,
    0xbf,0x61,0xaa,0xff,0x10,0x38,0x86,0x29,0xd6,0x83,0xe7,0x60,0x08,0x5c,0xc3,0xe0,
    0xe9,0x06,0x4f,0x77,0xec,0xfb,0xda,0x45,0xcf,0xd1,0x17,0xb1,0xf7,0xda,0x08,0x3d,
    0x47,0x1a,0x3b,0xe5,0xaf,0x11,0xd4,0x9d,0x22,0x7f,0xb7,0x66,0xf1,0x77,0x9b,0x04,
    0xdc,0xfc,0xdd,0x9e,0xc5,0xdf,0x1d,0x12,0xf2,0xb6,0x93,0xbf,0x2d,0xe4,0xef,0x0e,
    0xf2,0xb7,0x55,0x42,0xcc,0x3c,0xd8,0x95,0xc5,0xdf,0x36,0x09,0x38,0xfb,0xdb,0x0e,
    0x7f,0xdb,0xc8,0xdf,0x3d,0x12,0x70,0xf3,0xb7,0x43,0x02,0x66,0xdc,0x6f,0x4a,0xe8,
    0xd7,0x41,0xfe,0xee,0xc5,0xb7,0xa9,0x8d,0xfc,0xdd,0x27,0x21,0x77,0x2f,0xfc,0xd5,
    0xf9,0xf6,0x91,0xbf,0xa7,0xc9,0x5f,0xd5,0xdc,0xb4,0x1b,0x21,0xbf,0xde,0xc1,0x3e,
    0xba,0x90,0xcf,0xba,0x7e,0x8d,0x6f,0x5d,0x9a,0x74,0xfd,0x06,0xb8,0xe9,0x75,0x16,
    0xbf,0x57,0x4b,0x11,0xd3,0x39,0xce,0x82,0xd7,0xe6,0x38,0x87,0x58,0x86,0xb4,0x3f,
    0x8f,0xdf,0x80,0x19,0xe2,0xfa,0x96,0x7e,0x03,0x9e,0xa7,0x9e,0xdf,0x21,0x66,0x79,
    0x17,0xa8,0xe7,0x39,0xf4,0xbc,0x80,0x3c,0xe3,0xbf,0x88,0x9e,0xfc,0x1b,0xf3,0x12,
    0xd5,0x5d,0x44,0xdd,0x25,0xfc,0x96,0xb4,0xba,0xcb,0xa8,0x9b,0x20,0xec,0x0a,0x66,
    0x9d,0x20,0xae,0xef,0x69,0xd6,0x2b,0x34,0xeb,0x0f,0x88,0x59,0xde,0x55,0xea,0x79,
    0x19,0x3d,0xaf,0x22,0xcf,0xf8,0xaf,0xa1,0xe7,0x24,0x61,0xd7,0xd1,0x73,0x92,0xb8,
    0x7e,0xa4,0x9e,0xd7,0xa9,0xe7,0x4f,0x88,0x59,0xde,0x0d,0xea,0x79,0x0d,0x3d,0x6f,
    0x20,0x8f,0x7f,0xeb,0x4e,0x45,0xbf,0xe7,0xc4,0x3f,0x37,0xe2,0xfe,0x03,0xb6,0x15,
    0x25,0x01,0x24,0x11,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcData[];
// };
//
// layout(set = 0, binding = 2)readonly buffer cmd
// {
//
//     uint cmdData[];
// };
//
// layout(set = 0, binding = 3)buffer dstCmd
// {
//
//     uint dstCmdData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint cmdOffsetDiv4;
//
//     uint dstCmdOffsetDiv4;
//
//     uint srcOffset;
//
//     uint dstOffsetDiv4;
//
//     uint isRestartEnabled;
// };
//
// uint GetIndexValue(uint index)
// {
//
//     index += srcOffset >>(2 - 1);
//
//     uint srcBlock = srcData[index >> 1];
//
//     uint srcShift =((index & 0x1)<< 4);
//
//     uint value =(srcBlock >> srcShift)& 0xffff;
//     return value;
//
// }
//
// void PutIndexValue(uint index, uint value)
// {
//
//     uint dstIndex = dstOffsetDiv4 +(index >> 1);
//
//     uint srcBlock = dstData[dstIndex];
//
//     uint srcShift =((index & 0x1)<< 4);
//
//     srcBlock &= ~(0xffff << srcShift);
//
//     srcBlock |= value << srcShift;
//
//     dstData[dstIndex]= srcBlock;
//
// }
//
// void main()
// {
//
//     uint indexCount = cmdData[cmdOffsetDiv4];
//     uint firstIndex = cmdData[cmdOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     uint workingCount = 0;
//     uint srcIdx = firstIndex;
//     uint indicesRemaining = indexCount;
//     uint lineSize = 0;
//     uint firstIndexValue = 0;
//     while(indicesRemaining > 0)
//     {
//         uint indexValue;
//         uint restartValue = 0xffff;
//         indexValue = GetIndexValue(srcIdx ++);
//         if(lineSize == 0)
//         {
//             firstIndexValue = indexValue;
//         }
//         indicesRemaining --;
//         if((isRestartEnabled == 1)&&(indexValue == restartValue))
//         {
//
//             if(lineSize > 1)
//             {
//                 PutIndexValue(workingCount ++, firstIndexValue);
//             }
//             if(lineSize > 0)
//             {
//                 PutIndexValue(workingCount ++, restartValue);
//             }
//             lineSize = 0;
//         } else {
//             PutIndexValue(workingCount, indexValue);
//             workingCount ++;
//             lineSize ++;
//         }
//     }
//     if(lineSize > 1)
//     {
//         PutIndexValue(workingCount, firstIndexValue);
//         workingCount ++;
//     }
//
//     dstCmdData[dstCmdOffsetDiv4]= workingCount;
//     dstCmdData[dstCmdOffsetDiv4 + 1]= cmdData[cmdOffsetDiv4 + 1];
//     dstCmdData[dstCmdOffsetDiv4 + 2]= 0;
//     dstCmdData[dstCmdOffsetDiv4 + 3]= cmdData[cmdOffsetDiv4 + 3];
//     dstCmdData[dstCmdOffsetDiv4 + 4]= cmdData[cmdOffsetDiv4 + 4];
// }
