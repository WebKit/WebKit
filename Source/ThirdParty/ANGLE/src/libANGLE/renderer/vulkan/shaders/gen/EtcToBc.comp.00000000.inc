// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x5c,0x0b,0xd8,0x96,0x53,
    0xba,0xfe,0xbe,0xff,0xfb,0xdf,0xf3,0x6f,0xa4,0x13,0x8d,0x48,0x33,0x8c,0x63,0x69,
    0x3b,0x46,0x27,0x6d,0x87,0x8c,0x61,0x10,0x32,0x34,0x6a,0x4a,0x22,0x83,0x84,0x5d,
    0x21,0x7b,0x30,0x0e,0xa1,0xf2,0x97,0x72,0x18,0x29,0x8a,0x08,0xe3,0xb0,0x27,0x6d,
    0x3b,0xae,0x31,0x3b,0x2a,0xa1,0x49,0x07,0x23,0xc7,0x64,0xb0,0x95,0xc1,0x60,0xa4,
    0x52,0xd9,0xef,0xfd,0xdd,0xf7,0xf3,0xbf,0xcf,0xff,0xd5,0x7f,0x5d,0xef,0xf5,0x7d,
    0xeb,0xbe,0x9f,0xe7,0x59,0xcf,0x7a,0xd6,0x5a,0xcf,0x5a,0xef,0xfb,0xae,0xef,0xaf,
    0xd4,0xfd,0x34,0x2a,0x55,0xca,0xa5,0xb4,0x14,0x97,0x66,0x37,0x94,0xaa,0x7f,0x3b,
    0x95,0xea,0x4a,0x65,0x7d,0x76,0xd6,0x67,0x0f,0x7d,0xf6,0xd6,0xe7,0xd1,0xf9,0x67,
    0x56,0x0a,0xab,0x72,0x7d,0x4e,0x3c,0xed,0xc4,0xce,0x97,0x5f,0x31,0xa4,0xf3,0x21,
    0x87,0x76,0x81,0xfe,0x8f,0x4a,0x95,0xaa,0x1d,0x70,0x3b,0xe6,0x76,0x83,0xfc,0xb3,
    0x3e,0xbf,0x2e,0x1e,0x34,0xec,0x12,0xe0,0x7d,0x72,0xfa,0xa4,0xfc,0xba,0x39,0x07,
    0x5b,0xe4,0x36,0xea,0xab,0x36,0x4b,0xa5,0xa3,0xa4,0x83,0xeb,0xf8,0x5c,0x6b,0x21,
    0xdd,0x29,0xfd,0x54,0x9f,0x86,0x95,0x85,0xd5,0x3b,0xac,0x4e,0x58,0xec,0xb0,0x8a,
    0xb0,0x06,0x87,0xd5,0x0b,0x6b,0xe1,0xb0,0x40,0x58,0x6b,0x87,0x85,0xc2,0x76,0x71,
    0x58,0x24,0xac,0x3d,0xda,0x90,0x5b,0xb7,0x7a,0xfb,0xe4,0x56,0xd1,0xa6,0x2c,0xff,
    0xfe,0x63,0x95,0x4f,0x52,0x79,0x57,0xc9,0xa2,0xad,0x25,0x71,0xf8,0x0e,0x6e,0x5f,
    0x95,0x7f,0x91,0x3b,0xf0,0x93,0x52,0xc1,0xa3,0xdc,0xb1,0xa9,0x5c,0x29,0x7d,0x1b,
    0x14,0xdc,0x71,0x61,0x73,0x59,0x94,0x3b,0x2a,0x26,0x90,0x45,0xb9,0x9d,0xd9,0x09,
    0x59,0x4f,0x3b,0x71,0xdf,0x25,0xd4,0x6b,0x95,0x7b,0x0d,0xbf,0x3b,0xe6,0x58,0x45,
    0x6d,0x68,0x93,0xcb,0xa3,0xcd,0x7b,0xc8,0xf6,0xce,0x79,0x39,0x52,0x1c,0xea,0xaa,
    0x78,0x7d,0x35,0xb6,0x91,0x2e,0xc8,0x27,0x92,0x2f,0x8b,0x4f,0xc5,0x25,0xd2,0x6f,
    0xa1,0xef,0xa6,0xbf,0x93,0xf8,0x16,0xd5,0x58,0xd7,0x95,0x5a,0x4a,0xae,0xb5,0xe4,
    0xea,0x25,0xd7,0x41,0x72,0xa8,0xbb,0x6d,0xee,0xe1,0x3e,0xaa,0x07,0xb2,0x88,0xd9,
    0x3e,0xea,0x5b,0x94,0x0f,0x92,0x1c,0xca,0xfb,0xcb,0xa7,0x33,0xf2,0xab,0x93,0x2b,
    0xf7,0x73,0x3c,0x64,0xfb,0xcb,0x67,0xe3,0x07,0xa8,0x9f,0xad,0x3c,0x50,0xe3,0xc8,
    0xca,0xe7,0x69,0x6c,0x58,0x79,0xa8,0x7c,0xb5,0xf2,0x45,0x6a,0x93,0x95,0x47,0x68,
    0x4c,0x59,0x79,0x64,0x7e,0x75,0x70,0xe5,0xd1,0x8a,0x89,0xf9,0x33,0x56,0xfa,0xed,
    0xf3,0xf2,0x2d,0xaa,0x6b,0xac,0x93,0xbf,0xb5,0x3a,0xa7,0x4a,0xa5,0x03,0xf2,0xa8,
    0x80,0xbb,0x4d,0x36,0x46,0xc8,0xd7,0x5b,0x9d,0xec,0x38,0xc5,0xc3,0xca,0xe3,0x15,
    0x5b,0x2b,0x4f,0xd0,0x7c,0x30,0x5b,0xb7,0xcb,0xd6,0x38,0xc9,0x4e,0x70,0xb2,0x8d,
    0x35,0x71,0x9a,0xa8,0x7e,0x31,0xdd,0x49,0x92,0x19,0x2a,0x6e,0x82,0xe3,0xee,0x10,
    0xd7,0x4f,0x7e,0x7a,0xbb,0x93,0x4b,0x1c,0x97,0x26,0x3b,0xc5,0xb5,0x67,0xa2,0x78,
    0x93,0xbd,0x33,0xbf,0x52,0x27,0x7b,0x97,0xf3,0x77,0xa0,0x78,0xe3,0xee,0x56,0x7d,
    0xe3,0x64,0xc7,0x73,0xf7,0x48,0x6f,0xe8,0x76,0xb8,0x3f,0xc8,0x57,0xab,0x7f,0xbc,
    0xe3,0xee,0xad,0x69,0xa3,0xe7,0xa6,0xba,0x36,0xd6,0x72,0xf7,0x39,0xbd,0x71,0x35,
    0xdc,0x34,0xf9,0xd2,0xcf,0x71,0xd6,0xde,0xe9,0x9a,0x7f,0x26,0x7b,0xbf,0xb0,0x46,
    0xe9,0x78,0x3b,0x0f,0xb8,0xf8,0x4e,0x54,0x3c,0x8c,0x9b,0xe1,0xda,0x3b,0xae,0x89,
    0x6b,0x55,0x1d,0x5f,0x33,0x35,0x86,0x6e,0x57,0x1f,0xde,0xa1,0x3e,0xb8,0x4b,0x31,
    0xbc,0x47,0x31,0xb9,0x57,0x6d,0xbc,0x4f,0x3e,0xdf,0xaf,0x3a,0x67,0x68,0x9e,0xce,
    0xd2,0x78,0xb8,0xc5,0xf9,0x3f,0x27,0xbf,0x7e,0xc8,0xaf,0xfd,0xf2,0x19,0x87,0xf9,
    0xbd,0x20,0xbf,0x76,0xcf,0x7b,0xd0,0x72,0x6a,0xa8,0xf1,0x18,0x6e,0xe7,0x82,0xcd,
    0x45,0xe2,0x21,0xdf,0x4d,0xe5,0x97,0x85,0x81,0x5f,0xec,0xf4,0x6d,0xfe,0x2c,0xab,
    0x99,0x4f,0x2b,0x14,0xc3,0x7d,0xe5,0xc3,0x2a,0xe5,0x8a,0xb7,0xa4,0xeb,0x73,0xc1,
    0xfb,0xca,0xe7,0x56,0x5e,0xed,0xe6,0x3a,0xca,0x1f,0x34,0xcd,0x97,0xb0,0x9a,0x6b,
    0xd6,0x48,0x67,0xb5,0x38,0x93,0xfb,0xb0,0x26,0x27,0xac,0xad,0xae,0x7d,0x45,0xf9,
    0x73,0xad,0x71,0x56,0xfe,0x56,0x6b,0x83,0x95,0x31,0xd1,0x5a,0x39,0x7b,0x7b,0x94,
    0x8b,0x9c,0x81,0x72,0xdf,0x32,0x73,0x12,0x72,0xc4,0x69,0x65,0xb6,0x03,0x98,0xe9,
    0x9f,0x5e,0x46,0x1b,0x5d,0x0e,0x2c,0x33,0x67,0x36,0xe5,0xc0,0x32,0xd7,0x1b,0x2b,
    0x9f,0x59,0xe6,0x7a,0x7b,0x40,0x3e,0x13,0x61,0xef,0x57,0xe5,0x62,0x3c,0x4e,0x56,
    0x4e,0x83,0x4d,0xd8,0x81,0xee,0x99,0x65,0xc6,0xff,0xec,0x32,0xfb,0x1c,0x3a,0x88,
    0x09,0x62,0x7a,0x47,0x99,0x63,0xd4,0x2e,0xc3,0x27,0x97,0x39,0x1e,0xec,0xb2,0xba,
    0xdf,0x2a,0xb3,0xc1,0x56,0x7e,0x57,0x8b,0xbe,0x95,0x0f,0xae,0xe3,0x9a,0x65,0xe5,
    0x1e,0x79,0xb9,0xa5,0x2b,0x0f,0xca,0xcb,0x3b,0x28,0x16,0x2d,0x2a,0xcc,0x9d,0x7d,
    0xab,0xfe,0x04,0xd5,0xef,0x3b,0x55,0x38,0xf6,0x39,0xe6,0x89,0xb5,0xac,0x70,0x9e,
    0x7c,0xee,0xec,0xb4,0xca,0xb1,0xdd,0x9c,0x4c,0xeb,0x0a,0xe7,0x17,0x70,0x93,0x69,
    0x53,0xc1,0x58,0x2e,0x64,0xda,0x56,0x58,0x7f,0x1b,0x27,0xb3,0x73,0xfe,0xbd,0xbb,
    0x93,0xd9,0xa5,0x42,0x9f,0x77,0x76,0x32,0xed,0xf2,0xef,0xa7,0x38,0x99,0x1f,0x57,
    0xb8,0xee,0xb4,0x73,0x32,0xbb,0x56,0xb8,0x96,0x5b,0xb9,0x7d,0x5e,0xbe,0xd0,0xe9,
    0xec,0x56,0xa1,0x4c,0x7b,0xa7,0xb3,0x7b,0xfe,0xfd,0x40,0xa7,0xd3,0x21,0x2f,0xff,
    0xb7,0xd3,0xd9,0xa3,0x42,0x19,0xe0,0xe8,0x6b,0xc4,0xab,0x63,0x85,0x31,0x42,0x4c,
    0xd0,0x66,0xb4,0x09,0x3e,0xc3,0x27,0xd4,0x01,0x1d,0xf4,0xf5,0x9e,0x15,0xad,0xd7,
    0x2a,0x1f,0x57,0xe1,0x7a,0x70,0x90,0xe6,0x26,0xca,0x7d,0x84,0x59,0xf9,0xa4,0x4a,
    0xb1,0x1f,0xf8,0xa5,0xbe,0xfb,0xb9,0x7a,0x46,0xa5,0x98,0x17,0x28,0x0f,0xad,0x14,
    0x6b,0xf9,0x88,0x0a,0x65,0xeb,0x1d,0x3f,0xb2,0xc2,0xb5,0x19,0x79,0x0d,0xfc,0xa8,
    0x0a,0xe7,0x37,0xfa,0x7b,0xac,0x78,0x93,0xbd,0xb2,0xc2,0xdc,0x83,0x32,0xf6,0x08,
    0xcf,0x70,0x1b,0xda,0xcb,0xca,0xfb,0x69,0x0f,0x66,0xe5,0x33,0xaa,0xe5,0x6b,0x9b,
    0xf8,0x01,0xd5,0xf2,0xef,0x8e,0xb1,0xf2,0xe0,0xbc,0x7c,0x73,0xdb,0x7b,0x7a,0x5a,
    0xf9,0xdc,0xbc,0x3c,0xe3,0xd8,0xb6,0x4d,0xf2,0x43,0xf2,0xf2,0x1b,0xa3,0xd7,0xf6,
    0xc0,0x78,0xc7,0xdc,0x3a,0xaf,0x9e,0x3a,0x90,0x03,0x67,0x72,0x97,0xe7,0xdf,0x87,
    0xb7,0xac,0xf4,0xea,0xa6,0x98,0x60,0xff,0x57,0x76,0x7e,0x3c,0x58,0xad,0xf7,0x83,
    0xa3,0xac,0x1d,0x8f,0xd6,0x33,0xee,0x4d,0xf9,0xac,0xbe,0xd8,0x4f,0xa0,0xbc,0xbe,
    0x9e,0x71,0x42,0xcc,0xf6,0x0f,0x38,0x37,0xea,0xaa,0xfb,0xbc,0xa4,0x74,0x7c,0x40,
    0x4e,0x5b,0xc6,0xa6,0xbf,0xb2,0x3e,0x77,0xcd,0xa3,0xfd,0xf3,0x9c,0x84,0x1c,0xfa,
    0xe8,0x04,0x09,0x02,0xeb,0xa6,0xf2,0x2f,0x84,0x81,0xff,0x55,0xc0,0x5c,0xe3,0xf7,
    0x10,0x1b,0x72,0xec,0x87,0xfc,0x0f,0xf5,0x1d,0x13,0xb2,0xbe,0x72,0x4d,0x7d,0x75,
    0xd5,0xbc,0x4f,0x1b,0xc7,0x86,0xc4,0x20,0xdb,0x4d,0xe5,0xe3,0xc2,0xa2,0x2f,0xf0,
    0xf5,0x84,0xd0,0xf2,0x11,0xf3,0x2c,0xf6,0xae,0xc0,0xfa,0x6b,0xbf,0x86,0xf1,0x8c,
    0x98,0xbc,0x9c,0xb1,0xef,0xfd,0x7c,0x5f,0x9c,0x71,0xbe,0x8f,0x76,0xe3,0xfe,0x95,
    0x8c,0xf9,0xac,0x9f,0x1b,0x3b,0xaf,0x66,0x1c,0x23,0xfe,0xb2,0x5c,0xf5,0x9a,0x93,
    0xef,0xe7,0x72,0xd8,0x12,0x67,0x7b,0xb4,0xc3,0xff,0x9a,0x31,0x97,0xd8,0x65,0xf8,
    0xd2,0x8c,0xb9,0xdf,0x2e,0x6b,0xcf,0xeb,0xce,0xef,0xbe,0x2e,0x77,0x2e,0xcb,0xb8,
    0x46,0xdb,0x65,0xf2,0xcb,0x33,0xae,0x6b,0x76,0x95,0xf3,0x7e,0x83,0xfc,0x57,0x19,
    0xbf,0xa3,0x3d,0xa7,0x36,0x70,0x0c,0x3c,0xd0,0xc0,0x31,0x50,0x29,0x15,0xdc,0x23,
    0x39,0x76,0x58,0x1e,0x8b,0x3a,0xcd,0xa7,0x92,0xf8,0x0d,0x39,0x12,0x68,0xbe,0x62,
    0xfd,0x9e,0x9a,0x72,0xac,0x75,0x53,0x6e,0x2f,0x47,0xcd,0xcb,0x2d,0x5d,0x19,0xf9,
    0x60,0x5f,0x57,0xc6,0x7a,0x36,0x26,0x28,0xca,0x58,0x9f,0x3a,0x86,0x2c,0x7f,0x97,
    0xd7,0x76,0xa2,0xfa,0xf8,0xfb,0xfc,0x3b,0xe6,0xec,0x49,0x21,0xeb,0xc7,0x67,0x0f,
    0xed,0xdd,0x4f,0x0f,0x99,0x43,0x4e,0xce,0xb5,0xa0,0x77,0x46,0x48,0xec,0xf4,0xb0,
    0x18,0xb7,0x37,0xa8,0xef,0xcf,0x0c,0xc9,0x63,0x0c,0xf4,0xce,0x31,0xcc,0xa5,0x5f,
    0x85,0xcc,0x39,0xb0,0xdf,0x43,0x63,0xe9,0xac,0x90,0xf8,0xfc,0x5c,0x06,0xe5,0xb3,
    0x43,0x62,0x58,0xa3,0x17,0x09,0x3b,0x47,0x18,0xf2,0x91,0x61,0x03,0x43,0xca,0xf6,
    0x57,0x9d,0xc0,0x7e,0x23,0x3d,0x70,0xa7,0x0a,0x1b,0x1c,0xd2,0x97,0x6a,0xf6,0x10,
    0x76,0x6e,0x48,0x1c,0xf2,0x7d,0x73,0x04,0xfe,0x1e,0x9b,0x11,0x37,0x59,0xab,0x67,
    0xa8,0xea,0x59,0xe6,0xea,0x39,0x5f,0xe5,0xa1,0xae,0x9e,0x61,0xd2,0x2d,0xbb,0x7a,
    0x2e,0x0c,0x89,0x9f,0xef,0xea,0x39,0x3e,0x23,0x7e,0x6c,0x46,0x59,0xab,0xe7,0xe2,
    0x90,0xed,0x44,0x8e,0xb5,0x58,0x0c,0x17,0x86,0xb1,0x7c,0x8a,0xe2,0x7a,0x69,0x48,
    0x59,0x70,0xd7,0x0a,0xbb,0x2c,0xa4,0x5d,0x70,0x63,0x74,0x2f,0x77,0x45,0x48,0x1c,
    0xb1,0xc7,0x3e,0x6c,0xcf,0x80,0x7b,0xb3,0x7e,0x2e,0xf6,0x7b,0x05,0xc4,0xc7,0x28,
    0x57,0xfc,0x2c,0x20,0x66,0x3a,0x7b,0x4b,0x67,0xa8,0xd3,0xd9,0x27,0x20,0x6e,0x3a,
    0xfb,0x06,0xc4,0x4e,0xd1,0x5c,0xde,0x2f,0xa0,0x1d,0xe0,0x4f,0xe6,0x18,0x72,0xde,
    0x01,0x01,0xfd,0x01,0xf7,0x87,0x5c,0x0f,0xe3,0xbf,0x93,0x70,0x8c,0xbd,0x03,0x95,
    0xc3,0x36,0xe5,0x1c,0xf0,0xce,0xf9,0x05,0x0c,0xe3,0x0f,0xdf,0x37,0xe6,0x9f,0x27,
    0x6a,0x3c,0x02,0x7f,0x51,0x75,0x1d,0x22,0xbb,0xc8,0x29,0x8b,0x84,0x75,0x15,0x86,
    0x9c,0x82,0xbe,0x81,0x8f,0xdd,0x02,0xe2,0x25,0xf5,0x21,0xb0,0xee,0x01,0xdb,0x05,
    0xce,0xe4,0x7a,0x4a,0xce,0xfa,0x10,0x58,0xaf,0x80,0xb2,0xe0,0x4c,0xf7,0x68,0xe9,
    0x02,0x33,0xb9,0xe3,0x02,0xe2,0xb0,0x87,0x58,0x21,0x47,0x9f,0xa8,0xfc,0x6c,0xf6,
    0x7f,0x19,0xd0,0x67,0x3f,0x46,0x4e,0x55,0xcc,0x7d,0xbf,0xf7,0x0d,0x88,0xa3,0xdf,
    0x2d,0xce,0xa7,0x05,0xc4,0xcd,0x87,0xd3,0x03,0xda,0x3b,0xcd,0xd9,0xef,0x27,0xfb,
    0x25,0xe7,0xff,0x99,0x01,0x65,0xfb,0xa9,0x5f,0xb1,0x46,0x9c,0xa5,0x7e,0x1d,0xad,
    0x7e,0x85,0xdc,0xd9,0xc2,0x4d,0xaf,0x7f,0x40,0x5d,0xe0,0x43,0x72,0x19,0xac,0x41,
    0xbf,0x56,0x9b,0x06,0xe6,0x32,0xc8,0x5b,0xe7,0x08,0xeb,0xef,0xc6,0xcc,0x00,0xd9,
    0x1e,0xe1,0xc6,0xcc,0xc0,0x80,0xf8,0xa3,0xb9,0x0c,0xfa,0xfe,0x37,0x01,0x31,0xe4,
    0x56,0xf4,0xff,0x60,0xd7,0xff,0xe0,0x06,0xe5,0xd7,0x05,0xea,0xff,0x41,0x41,0x31,
    0xc7,0xae,0x0a,0x59,0x67,0xa5,0x3a,0x1f,0xb8,0x4e,0xdc,0x10,0x12,0xf7,0xd7,0x7c,
    0xf9,0x77,0x63,0x48,0x7e,0x94,0xf2,0x06,0xb0,0xb1,0x21,0xf1,0x57,0xb3,0xc2,0xee,
    0xad,0x21,0x71,0xfc,0xbd,0x24,0xec,0xb6,0x90,0x38,0xf6,0x2c,0x26,0x37,0x5e,0x72,
    0x65,0x27,0x37,0x21,0x14,0x5e,0xbd,0x7f,0x22,0x76,0x7b,0x48,0xfd,0x09,0x2e,0x3f,
    0x4c,0x94,0x6e,0x9d,0xd3,0x9d,0x14,0x12,0x47,0x1c,0x4c,0xf7,0x8e,0x90,0xfa,0x93,
    0x9c,0xee,0x14,0xe9,0x56,0x9c,0xee,0x9d,0x21,0xf1,0x15,0xae,0xde,0xbb,0x42,0xea,
    0xdf,0xe9,0x74,0xaf,0x51,0xcc,0xea,0x5c,0xcc,0xa6,0x86,0xc4,0xfd,0x65,0x31,0xbb,
    0x2f,0x24,0xef,0x63,0x76,0x7f,0x48,0xdc,0xc7,0x6c,0x46,0x48,0xdc,0xc7,0x6c,0x66,
    0x48,0xdc,0xc7,0xec,0x21,0xc9,0xf9,0x98,0xcd,0x0a,0x89,0xfb,0x98,0x3d,0x1c,0x52,
    0x7f,0x96,0xf3,0x7d,0xb6,0x74,0x7d,0xcc,0x1e,0x0d,0x89,0xfb,0x98,0x3d,0x16,0x52,
    0xff,0x51,0xa7,0xfb,0x47,0xe9,0xfa,0x98,0x3d,0x11,0x12,0xf7,0x31,0x7b,0x32,0xa4,
    0x3e,0x38,0xcb,0xb1,0xbf,0x0b,0x19,0x4b,0x70,0xc8,0x3d,0x83,0x35,0x16,0x2f,0x70,
    0x63,0xf1,0x19,0xc5,0xb5,0xec,0xe2,0xfa,0x42,0x48,0xdc,0x5f,0x16,0xd7,0xbf,0x84,
    0xe4,0x7d,0x5c,0x5f,0x0c,0x89,0xfb,0xb8,0x2e,0x08,0x89,0xfb,0xb8,0x2e,0x0c,0x89,
    0xfb,0xb8,0xbe,0x2c,0x39,0x1f,0xd7,0xc5,0x21,0x71,0x1f,0xd7,0x57,0x42,0xea,0x2f,
    0x76,0xb1,0x79,0x4d,0xba,0x3e,0xae,0x4b,0x42,0xe2,0x3e,0xae,0x7f,0x0d,0xa9,0xbf,
    0xc4,0xe9,0xbe,0x2e,0x5d,0x1f,0xd7,0x65,0x21,0x71,0x1f,0xd7,0xe5,0x21,0xf5,0x97,
    0x39,0xdd,0x67,0x15,0xb3,0x92,0x8b,0xd9,0x9b,0x21,0x71,0x7f,0x59,0xcc,0x56,0x85,
    0xe4,0x7d,0xcc,0xde,0x09,0x89,0xfb,0x98,0xbd,0x17,0x12,0xf7,0x31,0x7b,0x3f,0x24,
    0xee,0x63,0xf6,0x81,0xe4,0x7c,0xcc,0xd6,0x84,0xc4,0x7d,0xcc,0x3e,0x0c,0xa9,0xbf,
    0xc6,0xf9,0xfe,0x91,0x74,0x7d,0xcc,0x3e,0x0e,0x89,0xfb,0x98,0x7d,0x12,0x52,0xff,
    0x63,0xa7,0xfb,0xa9,0x74,0x7d,0xcc,0xd6,0x86,0xc4,0x7d,0xcc,0xd6,0x85,0xd4,0x5f,
    0xeb,0xc6,0xe2,0xbc,0x90,0xb1,0x5c,0x57,0x33,0x16,0xf1,0xf9,0xad,0xf6,0x61,0x2b,
    0x32,0x8e,0x59,0xe4,0x4a,0xc8,0x5f,0xe0,0x72,0xed,0xa5,0xca,0xb5,0xfd,0xb5,0xcf,
    0xbb,0xcc,0xe5,0x5a,0x70,0x23,0xf2,0xeb,0x32,0xd9,0x1c,0xe1,0xc6,0xf7,0x15,0x01,
    0xed,0xfa,0x3d,0xca,0x7f,0x04,0xc4,0xb1,0xf7,0x31,0xfb,0x23,0x03,0xe2,0x68,0x07,
    0xfc,0x33,0x5b,0x97,0xc9,0x3f,0xc8,0x8c,0x0a,0xe8,0x07,0x7c,0x1e,0xa9,0x3a,0x7b,
    0xe6,0xbe,0x8c,0xd1,0x7a,0x6b,0x75,0x76,0x8a,0xb6,0xad,0xb3,0x73,0x44,0x1c,0xfe,
    0x63,0x8d,0xc1,0xf3,0xc5,0x2e,0x11,0xf7,0xb2,0xe0,0x6c,0xfd,0xfa,0xb7,0x88,0xf8,
    0x22,0xad,0x5f,0x07,0x45,0xc4,0xb0,0xc6,0xbd,0x28,0xec,0xe0,0x88,0x78,0xa3,0xd6,
    0x55,0xd8,0x3f,0x24,0x22,0xfe,0x98,0xda,0x73,0x78,0xd4,0x3c,0x5e,0x3d,0xa2,0x22,
    0x5e,0xe0,0xba,0xa2,0xce,0x88,0x6d,0xec,0x1a,0x15,0x7e,0x76,0x93,0x9f,0x3e,0x36,
    0xdd,0x23,0xe2,0x16,0x1b,0xd3,0xc3,0xa7,0xc5,0xa6,0x67,0xc4,0x3a,0x11,0xaf,0xee,
    0xb2,0x8f,0x7a,0xb7,0xc6,0x45,0xbd,0x90,0xe9,0x95,0x5f,0xbf,0x94,0x3e,0xbe,0x9f,
    0x9c,0xef,0xe0,0xb1,0x27,0xef,0xad,0x98,0x59,0xdc,0xca,0x6e,0x1f,0x0e,0xbf,0x8e,
    0x8e,0xb8,0x27,0x46,0x3b,0x4f,0xd1,0xfd,0xca,0x31,0x11,0x71,0xbb,0xae,0xcf,0x65,
    0x81,0x1f,0x1b,0xf1,0x99,0x19,0xf8,0xf9,0xc2,0x8e,0x8b,0x58,0x07,0xb8,0x31,0x7a,
    0x2e,0xd7,0x27,0x22,0x8e,0xb6,0xa3,0x7c,0x42,0x44,0x0c,0xf7,0x53,0x37,0x08,0x3b,
    0x29,0x22,0x8e,0x7b,0x2f,0xb4,0x1d,0xed,0x81,0xef,0x68,0xc3,0xab,0xb9,0x1f,0xd5,
    0xbd,0x8f,0x62,0xf6,0xad,0xf6,0x0b,0xb6,0xd7,0xe9,0x1b,0x91,0xb3,0xf2,0x19,0x92,
    0x7b,0x25,0xd7,0xaa,0xee,0x73,0x22,0x62,0x03,0xb4,0x9f,0x35,0x7b,0x67,0x49,0x0e,
    0x01,0xf0,0xf6,0xce,0x8e,0xc8,0x99,0xfe,0x00,0xe9,0x5f,0x54,0xa3,0x3f,0x48,0xfa,
    0x93,0x6b,0xfc,0x19,0x1c,0x91,0x33,0xfd,0xa1,0xd2,0x1f,0x28,0x7d,0xdb,0x33,0x0d,
    0x8b,0xe8,0x3b,0xfc,0x33,0xec,0xa2,0x88,0xf5,0x0f,0x70,0xd8,0xf0,0x88,0x36,0x87,
    0x46,0xc5,0x38,0x1c,0x11,0x51,0xff,0x71,0x8d,0x9d,0xcb,0x22,0x62,0x7b,0x68,0x8f,
    0xb4,0xc5,0x8d,0x07,0x70,0x97,0x63,0xac,0x69,0x3c,0x5c,0xee,0x62,0x3a,0x52,0x6d,
    0x18,0x50,0x6a,0xbe,0x7f,0x1c,0x15,0x91,0x33,0xb9,0xab,0x5c,0xec,0xbd,0xdc,0xd5,
    0x11,0xb9,0x97,0xe4,0xeb,0x98,0x88,0xd8,0x68,0xe5,0x29,0x60,0xd7,0x44,0xb4,0x37,
    0xc6,0xd9,0xbb,0x56,0xf6,0xce,0xd3,0xfd,0x82,0xd9,0xbb,0x2e,0x22,0x67,0x72,0x37,
    0x48,0xee,0xa2,0x1a,0xb9,0x1b,0x23,0x72,0x26,0x37,0x56,0x72,0x13,0x6a,0xe4,0x6e,
    0x89,0xc8,0x99,0xdc,0x38,0xc9,0x0d,0xac,0x91,0x1b,0x1f,0x91,0x33,0xb9,0x46,0xc9,
    0x0d,0xad,0x91,0x9b,0x18,0x91,0x33,0xb9,0xc9,0x92,0xb3,0x67,0x08,0x96,0xaf,0xa7,
    0x44,0xe4,0x1a,0x5d,0xbe,0xbe,0x27,0x22,0x8e,0x3c,0x84,0x7c,0x86,0xfb,0x71,0x3c,
    0x9b,0xb5,0x3c,0x75,0x6f,0xc4,0x7b,0xf4,0x7b,0x5c,0x9e,0x9a,0x1a,0x11,0xb7,0x9c,
    0x37,0x4d,0xf3,0xd7,0xef,0xd9,0xef,0x8f,0xf8,0x3c,0x02,0xf7,0x1e,0x76,0x4f,0xf0,
    0x40,0x44,0xd9,0xfb,0x5d,0xce,0x99,0x11,0x11,0x5f,0xe6,0xda,0x33,0x33,0x22,0x6e,
    0x7a,0x0f,0x4b,0x0f,0xb6,0x4c,0xef,0x91,0x88,0x78,0x7f,0xa7,0x37,0x3b,0x22,0x6e,
    0x7d,0xfc,0x78,0x44,0x5b,0xb3,0x95,0x8f,0x9e,0x76,0x79,0x10,0xf9,0xfc,0x89,0xbc,
    0xfc,0xb4,0xc6,0x1f,0xbe,0x5b,0xce,0x7b,0x2a,0xa2,0xee,0x68,0xe5,0x3c,0x93,0x79,
    0xda,0xe5,0xbc,0xbf,0x67,0x5c,0x13,0x30,0x6e,0x21,0xef,0xf5,0xff,0x24,0xfd,0xe9,
    0xca,0xbf,0xaf,0xbb,0x7a,0xc1,0xcd,0xc9,0xaf,0xe7,0x65,0x73,0x8e,0x72,0x1a,0xf2,
    0xcd,0xb3,0x11,0xc7,0x25,0xc6,0x5b,0x75,0x2c,0x29,0x0f,0x3d,0x17,0x91,0xb3,0x3c,
    0xf4,0xba,0x74,0x9f,0x57,0xde,0x43,0x5b,0xff,0x2c,0x7f,0x1f,0x77,0xf6,0xe6,0x47,
    0x1c,0x6b,0x18,0x47,0x13,0x9d,0xbd,0x97,0x22,0x72,0x7f,0xcd,0x8a,0x7b,0xb1,0x45,
    0x11,0x6d,0x4c,0x75,0xfa,0x2f,0x47,0xc4,0xed,0xba,0x56,0xfa,0x8b,0x23,0xda,0x00,
    0xdf,0x90,0xe7,0x70,0x60,0xaf,0x46,0xcc,0xd9,0x9d,0xc4,0xe3,0x19,0x3d,0x9e,0xc7,
    0x7b,0x7f,0x5f,0x57,0xfc,0x20,0xff,0x43,0xc6,0x76,0xa1,0xfd,0xaf,0x2a,0x1e,0x90,
    0xdd,0xa2,0x1c,0xbb,0xcc,0xe5,0x95,0x15,0x11,0x73,0x90,0xe5,0x95,0x95,0x11,0x31,
    0xcb,0x2b,0x9b,0x5d,0x5e,0x01,0xf7,0x06,0xd6,0x19,0xd9,0x79,0xc3,0xcd,0x8b,0x55,
    0x2e,0x5f,0xf8,0xf9,0xf3,0x56,0x44,0xce,0xe4,0xde,0x75,0xf9,0xa7,0x9f,0x93,0x7b,
    0x2f,0x22,0x67,0x79,0xe5,0xfd,0x88,0x18,0xe6,0x93,0x8d,0xd5,0x35,0xd2,0x5d,0xed,
    0xd6,0xff,0x0f,0x23,0xe2,0x7e,0xac,0xfe,0x3d,0x22,0x6e,0x63,0xf5,0xa3,0x88,0xf6,
    0xfe,0xee,0xfc,0xf8,0x3f,0xd9,0x5a,0x5b,0xe3,0xc7,0xa7,0x11,0x39,0xab,0xf3,0x33,
    0xc9,0x8d,0x75,0x75,0xfe,0x23,0x22,0x8e,0x7d,0x9d,0xe9,0x7d,0x1e,0x11,0xb7,0x3a,
    0xbf,0x88,0x68,0xeb,0x73,0x57,0xe7,0x57,0x6e,0xfd,0xf0,0x31,0xfa,0x3a,0x22,0x67,
    0x72,0xdf,0x4a,0x6e,0x62,0x8d,0xdc,0xfa,0x88,0x9c,0xc9,0x6d,0x94,0x5c,0xbf,0x1a,
    0xb9,0x4d,0x11,0x39,0xf3,0x77,0x8b,0xe4,0x3e,0x74,0xeb,0x7e,0x25,0x66,0x5e,0xe8,
    0x1c,0x15,0xcf,0x1a,0xea,0x63,0xca,0x82,0xb3,0xb1,0x1b,0xc6,0xec,0x43,0xbc,0xe7,
    0x31,0x2c,0x8e,0x19,0x53,0xbc,0xeb,0xb1,0x9c,0x94,0xc4,0x94,0x05,0x67,0x58,0x16,
    0x13,0xff,0x22,0x2a,0x74,0x77,0x88,0xd9,0x5e,0x6f,0x6f,0xc7,0x98,0x6d,0xf3,0xf6,
    0x5a,0xc4,0x94,0xdd,0xd1,0xd9,0x6b,0x19,0x13,0x47,0xfb,0x9e,0xd4,0x78,0x6d,0x15,
    0xb3,0x1e,0x70,0xb3,0x15,0x97,0xd6,0x31,0xf1,0xfe,0x7a,0x7f,0x68,0xed,0x6b,0x1b,
    0xb3,0x8d,0xe0,0x91,0x8f,0x5b,0xd6,0xe4,0xe3,0x5d,0x62,0x3e,0x23,0x85,0x9c,0xe5,
    0xe3,0x76,0x31,0x71,0xcb,0xc7,0xbb,0xc6,0xdb,0xe6,0xe3,0xdd,0xe2,0x6d,0xf3,0xf1,
    0xee,0x31,0x65,0xc1,0x59,0x3f,0x74,0x88,0x89,0xfb,0x7c,0xbc,0x47,0x4c,0xdc,0xf4,
    0xf6,0x94,0x9e,0xcf,0xc7,0x7b,0xc5,0xc4,0xfd,0x18,0xff,0x59,0x4c,0x1c,0x73,0xb4,
    0x53,0xdc,0x3c,0xf7,0xee,0x93,0x97,0x3b,0x69,0x8e,0xee,0xe3,0xe2,0xb7,0x7f,0xcc,
    0xfa,0xa0,0x6b,0xf9,0xf4,0x80,0x98,0xb8,0xe5,0x63,0xd3,0xc3,0xa7,0xe5,0xe3,0x4f,
    0x94,0x8f,0x31,0xdf,0x21,0x0f,0x9b,0xb6,0x1f,0x3e,0x50,0x36,0x2d,0x1f,0x1f,0xe9,
    0x7c,0x01,0xd7,0x25,0xbf,0x0e,0x95,0x4d,0x7c,0xb7,0xfc,0x77,0x88,0xc6,0x01,0xfa,
    0x7d,0x93,0xf2,0xd3,0x91,0x92,0x3b,0xd4,0xc9,0x1d,0xa1,0xf1,0x87,0xf1,0xf6,0x45,
    0x8d,0xdc,0x91,0x71,0x91,0xf3,0xfe,0x96,0xd1,0x26,0xea,0x38,0x42,0x75,0x5a,0x4e,
    0xee,0x19,0x93,0xf7,0x39,0xf9,0x28,0xb5,0x19,0xb1,0xb0,0x3c,0xdf,0x3b,0x66,0xbe,
    0x39,0xca,0x8d,0xff,0x63,0x62,0xe2,0xed,0x9c,0x4f,0xc7,0xc5,0xc4,0xed,0xb2,0xdc,
    0xdd,0x27,0x66,0x5d,0xe0,0x2d,0x77,0xff,0x3c,0x2e,0x72,0x37,0x78,0x9f,0xbb,0x37,
    0xdb,0x9e,0x37,0x2e,0xf2,0xf1,0x29,0x31,0xf7,0x7f,0x96,0x8f,0x4f,0x8d,0x89,0x59,
    0x3e,0xfe,0xde,0xc5,0x17,0x5c,0xdf,0xfc,0xfa,0x44,0x76,0xf0,0xdd,0x72,0xc3,0x19,
    0x31,0xe7,0x3c,0xde,0xbf,0x8e,0x73,0xe3,0xa6,0x5f,0x4c,0xae,0x69,0x4f,0x2c,0xb9,
    0xcf,0x4b,0xcd,0xe5,0xce,0x8e,0xc9,0xd9,0xb8,0x3c,0x47,0x72,0x78,0x17,0x6a,0x32,
    0x03,0x62,0xe2,0x76,0x4f,0x35,0x30,0x26,0x76,0x66,0xb9,0xc8,0x83,0xbf,0x89,0x69,
    0x6b,0xa0,0xab,0xf3,0xdc,0xb8,0xc8,0x6f,0x3e,0xf7,0x0e,0x89,0xc9,0x99,0xdc,0xf9,
    0x71,0x91,0x2f,0xfd,0x1e,0xf4,0x82,0x98,0x9c,0xad,0x15,0xc3,0x62,0x62,0xfd,0xdc,
    0x1e,0xf4,0xc2,0x98,0xf6,0x86,0xb9,0x36,0x5c,0xec,0xec,0x99,0xad,0x4b,0x62,0xe2,
    0xd6,0x86,0xe1,0x31,0xb1,0x33,0x5c,0x1b,0x2e,0x8d,0x69,0x6f,0x78,0x5c,0xe8,0x5d,
    0x11,0x33,0x77,0x9a,0xaf,0xa3,0xe2,0x62,0x5f,0xe8,0xef,0x0d,0x46,0xc7,0xe4,0xcc,
    0xd7,0x2b,0x63,0x62,0x8d,0xce,0xd7,0xab,0x62,0xda,0xbb,0xd2,0xe5,0x99,0x31,0x2e,
    0xcf,0x58,0x1d,0xd7,0xc4,0xc4,0x07,0xd5,0xf4,0xe9,0x7f,0xc6,0xe4,0x4c,0xee,0x3a,
    0xc9,0xa1,0xef,0x27,0x3a,0xb9,0xeb,0x63,0x72,0x26,0x77,0xa3,0xe4,0xec,0x8c,0x8d,
    0xc9,0xdd,0x14,0x93,0x33,0xb9,0x5b,0x24,0x87,0x81,0xec,0xeb,0xbd,0x35,0x26,0x67,
    0x72,0xe3,0x25,0x37,0xbd,0x66,0x2c,0x4d,0x88,0xc9,0x59,0x0c,0x1a,0x63,0x8e,0x43,
    0x7f,0xef,0x3d,0x49,0xd8,0x50,0x17,0x97,0x3b,0x62,0xca,0x4e,0x72,0xba,0x53,0x62,
    0xc6,0xcb,0xeb,0xde,0x25,0xcc,0xeb,0xde,0x1d,0x53,0xf6,0x2e,0xa7,0xfb,0x87,0x98,
    0xb1,0xf2,0xba,0x53,0x85,0x79,0xdd,0xfb,0x62,0xca,0x4e,0x75,0xba,0xd3,0x63,0x8e,
    0xe5,0x46,0xa7,0xfb,0x80,0xb0,0x71,0x4e,0x77,0x46,0x4c,0xd9,0x07,0x9c,0xee,0x83,
    0x31,0x63,0xef,0x75,0x67,0x09,0xf3,0xba,0x0f,0xc7,0x94,0x9d,0xe5,0x74,0x67,0xc7,
    0xec,0x0f,0xaf,0xfb,0x98,0x30,0xaf,0xfb,0x78,0x4c,0xd9,0xc7,0x9c,0xee,0x13,0x31,
    0xc7,0xae,0x6f,0xef,0x53,0xc2,0x7c,0x7b,0x9f,0x8e,0x29,0xfb,0x94,0xd3,0xfd,0x53,
    0xcc,0xfe,0xf5,0xba,0xcf,0x08,0xf3,0xba,0x73,0x63,0xca,0x3e,0xe3,0x74,0x9f,0x8d,
    0xd9,0xe7,0x5e,0x77,0x9e,0x30,0xaf,0xfb,0x5c,0x4c,0xd9,0x79,0x2e,0xb7,0xbe,0x10,
    0xb3,0xdf,0x11,0xc7,0xa7,0x1d,0xfe,0x62,0xcc,0x3e,0x45,0x8c,0xe6,0x2a,0x67,0x03,
    0x5f,0x10,0x93,0x7b,0xc1,0xc9,0x2e,0x8e,0xd9,0x87,0x88,0xc9,0x73,0x4e,0xf6,0xd5,
    0x98,0x1c,0x64,0x6d,0xcd,0x7f,0x2d,0xe6,0xb3,0xa2,0x15,0xee,0x5d,0xc7,0x92,0x98,
    0xb8,0xd9,0x5b,0x1a,0x13,0xb3,0xcb,0xd6,0x95,0xd7,0x63,0xd6,0xbf,0xd4,0xd9,0x5b,
    0x26,0x7b,0xfd,0x9d,0xbd,0xe5,0x31,0x71,0xb3,0xb7,0x32,0x26,0x66,0x97,0xd9,0x7b,
    0x23,0xa6,0x8f,0x2b,0xdd,0x9a,0xf2,0x56,0xcc,0x7a,0xde,0x70,0xd8,0x3b,0x31,0x71,
    0xbc,0xcf,0x7e,0x51,0xd8,0x7b,0x31,0x71,0x60,0x26,0xf7,0xbe,0xda,0xfa,0x9e,0x5b,
    0x8f,0x3e,0x70,0xeb,0xd1,0xfb,0x35,0xeb,0xd1,0xf7,0x5a,0x47,0x3e,0x71,0xbe,0xae,
    0x8b,0xf9,0xcc,0xe2,0x6c,0x3d,0x93,0xb0,0x39,0xfd,0x8f,0xb8,0x78,0x66,0x04,0xb9,
    0x7f,0xc6,0x7c,0xae,0x31,0x40,0xcf,0x2d,0x0c,0xff,0x2a,0xa6,0xac,0x5d,0xd6,0xd6,
    0xaf,0x63,0x72,0xff,0x74,0xed,0xfa,0x26,0x66,0x7d,0x5f,0x6b,0x2c,0x01,0x5b,0x1f,
    0x13,0x7f,0xcd,0xb5,0x75,0xa3,0x30,0xb4,0x75,0x81,0xb0,0x4d,0x31,0x65,0xc1,0xf9,
    0xb6,0x7c,0xef,0xf6,0x08,0xe5,0x06,0xb6,0x1f,0xeb,0x24,0xde,0xbd,0x7f,0xe2,0xb8,
    0x6f,0x33,0x62,0xe0,0x36,0x69,0x4d,0xc5,0x7e,0x12,0x6b,0xf0,0xb4,0x06,0xae,0xc3,
    0x0b,0xf4,0xac,0xd2,0xf0,0xe9,0x0e,0x5f,0x55,0x6a,0xbe,0xa6,0x6f,0x76,0xb6,0x71,
    0xe8,0x0c,0xfb,0x00,0xec,0x57,0xe0,0x83,0xf7,0xe9,0x6b,0xd5,0x5b,0xdd,0xcb,0x64,
    0x05,0x07,0xfb,0x1f,0x65,0xdc,0x7b,0x81,0x9b,0xd6,0xd0,0x9c,0x7b,0x37,0x63,0xbd,
    0xe0,0xa6,0x8b,0xf3,0xf7,0x78,0x5b,0x5c,0x1d,0x5b,0x33,0xde,0x13,0x56,0xef,0x95,
    0x73,0x59,0xef,0xdb,0x67,0xaa,0x1f,0x1c,0x7c,0xd9,0xec,0xea,0x58,0x93,0xf1,0x5e,
    0x1c,0xdc,0x47,0x35,0xdc,0x2a,0xd5,0x0f,0xee,0x5d,0x71,0xfe,0x39,0xde,0x56,0x57,
    0xc7,0x26,0xd5,0x81,0xe7,0x92,0xf0,0xc5,0xfb,0xb6,0x2e,0xe3,0xb3,0x40,0x70,0x9f,
    0x39,0x0e,0x75,0x7c,0xa0,0x7d,0x27,0xb8,0x35,0x35,0xdc,0x9b,0x19,0x63,0x0e,0x6e,
    0x95,0x38,0xec,0x8f,0x0e,0x4a,0x8a,0xfd,0x11,0x64,0x30,0x58,0x81,0xc1,0x27,0x7c,
    0xb7,0x7d,0x6b,0x7d,0xc2,0xf1,0x8b,0x79,0x3f,0x5b,0xcf,0xed,0x82,0x84,0x78,0xa3,
    0xce,0xbe,0x35,0xdd,0x03,0x25,0xdc,0x5b,0x80,0xb7,0xbd,0x62,0x94,0x70,0x9d,0x07,
    0x67,0xeb,0x5f,0x9c,0x70,0x0f,0x10,0x49,0xde,0xd6,0xf2,0x34,0xd9,0xf6,0x9e,0xa1,
    0x21,0xd9,0xf6,0x9e,0x61,0x87,0x84,0xb2,0xe0,0x6c,0xef,0xff,0xa3,0x84,0xb8,0xbf,
    0x67,0xd8,0x31,0x21,0x6e,0x7a,0xad,0xa4,0xe7,0xef,0x19,0x5a,0x27,0xc4,0xfd,0x3d,
    0x43,0x9b,0x84,0xb8,0xb5,0x61,0x67,0xb5,0x15,0xf6,0x10,0xbb,0x8e,0x2e,0x76,0x88,
    0x7d,0xbb,0xbc,0xdc,0x51,0xb1,0xc3,0x77,0x8b,0x47,0xfb,0x84,0xba,0xb0,0x67,0xed,
    0xe9,0x90,0xd0,0x0e,0x30,0xbb,0xb7,0xd8,0x23,0x21,0x6e,0xf7,0x16,0x66,0x0b,0x9f,
    0xd6,0x8f,0xdf,0x65,0xec,0x67,0x18,0x81,0x7c,0x3b,0x71,0xd5,0x7b,0xf1,0x8c,0xf5,
    0xa0,0xd0,0x5e,0x1c,0xee,0xdb,0x70,0x6e,0x05,0xe7,0xde,0x7a,0xe7,0x2d,0x45,0xce,
    0xdd,0x33,0xe1,0x59,0x96,0x58,0xf5,0x5b,0xde,0xdd,0x2b,0x21,0x67,0x7e,0xef,0x9d,
    0x10,0x83,0x5d,0xcb,0x4f,0xfb,0x25,0xc4,0xed,0xb2,0x5c,0xb4,0x7f,0xc2,0xb1,0x09,
    0xde,0x72,0xe7,0x01,0x49,0x91,0x3b,0xc1,0xfb,0xdc,0x69,0x63,0xec,0xa0,0xa4,0x18,
    0xdb,0x1b,0x33,0x8e,0x7d,0xcc,0x85,0x03,0x14,0x4b,0x6b,0xf7,0x7a,0xb5,0x1b,0x1c,
    0x62,0x00,0xee,0x61,0x7b,0xc7,0x90,0xf0,0x7d,0xc8,0x7a,0x3d,0x93,0x3a,0x42,0xb6,
    0xf1,0x69,0x63,0xf5,0xfe,0x06,0xca,0x4d,0xd7,0x79,0x4c,0xb4,0x07,0x67,0x87,0x66,
    0x08,0xb7,0x6b,0xb6,0xda,0x39,0x53,0x1c,0x7c,0xde,0xe8,0xcf,0x3e,0x24,0xe4,0x4a,
    0xa5,0x02,0xeb,0x21,0xac,0xec,0xb0,0x5e,0xc2,0xf0,0x7e,0xeb,0x11,0x9d,0xd1,0x18,
    0x17,0xf0,0xdd,0x04,0xc6,0xce,0x04,0xf7,0xde,0x08,0xf8,0xf8,0xfc,0x9a,0xa0,0x77,
    0x3d,0xf8,0xfe,0x47,0xb5,0x6d,0x62,0x40,0xdf,0xa7,0x6b,0x4c,0x98,0xcc,0x04,0xf7,
    0x3e,0x68,0x92,0xec,0xa2,0xbd,0x13,0x65,0x0b,0x75,0x4c,0x71,0x75,0x40,0x66,0x72,
    0x7e,0x4d,0x91,0xfe,0xe4,0xa0,0xb8,0x87,0xba,0x3b,0x60,0xbb,0xac,0x7c,0x6f,0xc0,
    0x36,0x59,0x79,0x5a,0xc0,0xf6,0xd8,0xfb,0x8e,0xe9,0x01,0x75,0x20,0x37,0x4d,0x75,
    0x5d,0x9d,0x34,0x7f,0x0f,0xf6,0x6b,0xf4,0x89,0xfa,0x01,0xdf,0xcf,0x29,0x73,0x8c,
    0x9e,0x93,0x14,0xe7,0x1e,0x1b,0x75,0xd6,0x1f,0x1c,0xec,0x0e,0x74,0x1c,0xea,0x18,
    0xab,0x9c,0x02,0x6e,0x50,0x42,0x1e,0x67,0xc3,0xcc,0xaf,0x73,0x13,0xda,0x33,0xbf,
    0x86,0x24,0xc4,0xec,0xba,0x56,0xba,0xe7,0x25,0xd4,0x1f,0xe2,0xc6,0xf6,0xf9,0x9a,
    0x67,0xe7,0xb8,0x76,0x5e,0x90,0x10,0x37,0x7b,0xc3,0x12,0x62,0x76,0xdd,0x24,0x7b,
    0x17,0x26,0xb4,0x39,0x2c,0x29,0xde,0xe1,0xfc,0x36,0x21,0x6e,0xe5,0x8b,0x13,0xb6,
    0xc1,0xf6,0x52,0xc3,0x13,0x62,0x90,0x43,0x3f,0x5e,0xad,0xd8,0x5c,0xea,0x74,0x2e,
    0x93,0x8e,0xc5,0xe3,0x8a,0xed,0xc4,0xc3,0xda,0x34,0x32,0x21,0x8f,0xb3,0x75,0xf6,
    0x6e,0x69,0x74,0x42,0x7c,0x59,0x56,0xd8,0xbc,0x32,0x21,0x6e,0x7e,0x5c,0x95,0xb0,
    0x9e,0x2b,0x6b,0xfc,0xb8,0xda,0xcd,0xc3,0x16,0x0d,0xf4,0x17,0xfd,0x76,0x95,0xfa,
    0xd1,0xc6,0xf5,0x35,0x09,0x79,0x7f,0xf6,0xe7,0xda,0x84,0xf8,0x35,0xae,0x9f,0xaf,
    0x73,0xbe,0x83,0x87,0xef,0xc3,0x75,0xe6,0xf3,0xfa,0x84,0xbc,0xd9,0xbc,0x49,0x36,
    0xcb,0xce,0xe6,0xcd,0xb2,0x77,0x93,0xb3,0x39,0xd6,0xd9,0xbc,0xb9,0xc6,0xe6,0x2d,
    0x09,0x79,0xb3,0x39,0x5e,0x36,0xeb,0x9c,0xcd,0x09,0xb2,0x39,0xde,0xd9,0xbc,0xdd,
    0xd9,0x9c,0x50,0x63,0xb3,0x31,0x21,0x6f,0xfa,0x53,0xe4,0x8f,0xf7,0xe9,0x4e,0xa7,
    0x3f,0xa5,0x46,0xff,0xae,0x84,0xbc,0xe9,0x4f,0x95,0xae,0xaf,0xff,0x3e,0xa7,0x3f,
    0xb5,0x46,0x7f,0x5a,0x42,0xde,0xf4,0x67,0x4a,0xd7,0xeb,0x3f,0xe8,0xf4,0x67,0xd6,
    0xe8,0x3f,0x94,0x90,0x3f,0x4f,0xe3,0xe9,0xe1,0xed,0x8c,0xa7,0xc1,0xe2,0x66,0x6f,
    0x87,0xb3,0xf7,0x98,0x8f,0x26,0xd4,0x85,0xcc,0xa5,0xfa,0x1d,0xd2,0x63,0x09,0x71,
    0x8c,0xa1,0xc7,0x35,0x86,0x1e,0xd7,0x18,0x02,0xdf,0xaa,0x81,0x32,0x18,0x57,0x77,
    0xe7,0xdf,0x57,0x8a,0x83,0x5f,0x2d,0x1b,0x78,0x1e,0x19,0xdc,0x2b,0x49,0xc1,0xa1,
    0x3d,0x3b,0x29,0xd7,0x81,0xfb,0x9b,0xb8,0xa7,0x95,0x0b,0x9f,0x4c,0xc8,0xe3,0x9e,
    0x68,0x3d,0xf6,0x2b,0xe2,0x2d,0xef,0x80,0x7f,0x2a,0xbf,0xde,0x94,0x3f,0x4f,0x69,
    0x2e,0xc3,0x9f,0x39,0x09,0xc7,0x1d,0xc6,0x09,0xfa,0x75,0x72,0x6e,0x13,0xbe,0xcc,
    0x4d,0xc8,0xc1,0x5f,0x93,0x9d,0x27,0x39,0xf4,0xdf,0x34,0x27,0xfb,0x7c,0x42,0xce,
    0xcb,0xfe,0x45,0xf6,0x20,0xf7,0x90,0x93,0x9d,0x9f,0x90,0xf3,0xb2,0x0b,0x13,0xd6,
    0x07,0x3b,0xf3,0x9d,0xec,0xe2,0x84,0xdc,0xc2,0xea,0xda,0x19,0x56,0xb1,0x57,0xb4,
    0x76,0x76,0x10,0x3f,0x4f,0x31,0x78,0x4d,0x31,0x43,0xfc,0x90,0x77,0x57,0xb8,0xf6,
    0x83,0x5b,0x82,0xbd,0x93,0xda,0xbf,0xa4,0x3a,0x1e,0x58,0xc7,0xd2,0x84,0x67,0xbe,
    0xa1,0x3b,0x21,0xc7,0xe0,0xcf,0x72,0xd5,0xb9,0x54,0xfd,0x68,0x7a,0x2b,0x5c,0x3f,
    0xa2,0xef,0x16,0x2a,0xae,0xcb,0x65,0x1f,0xb2,0x2b,0x25,0xbb,0xd2,0xed,0x69,0xfe,
    0xa6,0xfe,0x69,0x2c,0x35,0x1f,0x17,0xe8,0x8f,0x67,0xe5,0xff,0x5b,0x09,0xfb,0x7f,
    0x80,0xfc,0xff,0xcc,0xf9,0x0f,0xee,0xed,0xfc,0x7a,0x47,0x7a,0x6f,0xab,0xae,0xcf,
    0x54,0x7e,0x47,0xf3,0x1b,0xed,0x79,0x4f,0xb1,0xe5,0xed,0x02,0x63,0xf6,0xbe,0x62,
    0x56,0x2f,0xde,0x64,0x3f,0x90,0x6c,0xd9,0xc9,0xae,0x71,0xb2,0x1f,0x54,0xe3,0xce,
    0xb1,0xf9,0xa1,0x70,0xb3,0xb7,0xc6,0xd9,0xf9,0x48,0x76,0xea,0x9c,0x9d,0x8f,0x9d,
    0x9d,0x8f,0x9c,0x9d,0x4f,0x9c,0x1d,0xd8,0xfc,0xd8,0xf5,0xc5,0xa7,0x09,0xcf,0xc5,
    0x7f,0xe2,0xfa,0x62,0x9d,0x6c,0x7f,0x5a,0xd3,0xe6,0xcf,0x5c,0x5f,0xb4,0x6e,0xe0,
    0x39,0x7b,0xc4,0x65,0x9d,0xe2,0x64,0xf3,0xf1,0x73,0xad,0x1d,0x36,0xa6,0xbe,0x4c,
    0x88,0x41,0xe7,0xdc,0x32,0x7d,0xfa,0xca,0xcd,0xf1,0x2f,0x95,0x2b,0x86,0x8a,0xfb,
    0x66,0x3b,0xdc,0x1c,0xf5,0xd9,0xfa,0x84,0xd8,0x57,0x49,0x71,0x06,0x11,0xbf,0xa7,
    0xc4,0x59,0x7e,0x7b,0x87,0xb0,0x21,0xa1,0x1c,0x70,0xdc,0x23,0x20,0xe7,0x54,0xdf,
    0xb9,0x38,0xbb,0x1b,0x6a,0xec,0x6e,0x96,0xdd,0x6f,0x92,0xc2,0xce,0xd6,0x84,0x78,
    0xad,0x9d,0x1f,0x9c,0x9d,0xad,0xb2,0x73,0x56,0x99,0xeb,0x74,0x5d,0x4a,0x0e,0xed,
    0x47,0x7d,0x86,0x07,0x0e,0xff,0x21,0x29,0xee,0x2f,0x92,0x94,0x3a,0x25,0xf7,0xae,
    0x2c,0x4d,0x89,0xf7,0x73,0xef,0xa8,0xb3,0x94,0xf8,0x64,0x77,0x6f,0xb2,0x83,0x74,
    0xcb,0x4e,0xf7,0x47,0x29,0x71,0xff,0x7e,0x7b,0xc7,0x94,0xf8,0x08,0xf7,0x7e,0xbb,
    0x45,0x4a,0x9b,0xe0,0xcc,0x5e,0x4b,0xd9,0xab,0x73,0xf6,0x5a,0xa5,0xc4,0xfb,0x39,
    0xdd,0xd6,0x29,0xf5,0x5b,0x39,0xdd,0x5d,0x52,0xb6,0xd1,0xb7,0xa3,0x5d,0x4a,0xdc,
    0xb7,0xe3,0xc7,0x29,0x71,0xdf,0x8e,0xf6,0xd2,0xf5,0xed,0xd8,0x2d,0x25,0xee,0xdb,
    0xb1,0x7b,0x4a,0xdc,0xb7,0xa3,0x43,0x4a,0x9b,0xbb,0x3b,0x5f,0x3a,0xca,0x9e,0x6f,
    0xc7,0x4f,0x52,0xe2,0xbe,0x1d,0x3f,0x4d,0xa9,0x0f,0xce,0xee,0x2d,0xe7,0x04,0x6c,
    0x1f,0x38,0xe4,0x84,0xb9,0x6e,0xdf,0x0a,0xee,0x99,0xfc,0x9a,0xab,0x7d,0x2b,0xbe,
    0xdb,0xfa,0xf6,0x3f,0xda,0xb7,0x5a,0xf9,0x79,0xed,0x5b,0xad,0xfc,0x82,0xdb,0xb7,
    0x56,0x73,0x75,0x40,0x1d,0xc8,0x81,0xb3,0xb9,0x33,0x3f,0x60,0x1f,0x58,0xf9,0xa5,
    0x80,0x6d,0xb1,0x7b,0x87,0x85,0x01,0xef,0xab,0xed,0x77,0x8b,0xbf,0xd7,0x9c,0xed,
    0x94,0x52,0x76,0xbe,0x9b,0x77,0x5d,0x52,0x96,0x3b,0xa5,0x05,0x76,0xb0,0xe4,0x3c,
    0x76,0x58,0x4a,0x7f,0x80,0xfd,0x5e,0xd8,0x11,0x29,0xf1,0x2e,0x0e,0xeb,0x9e,0x52,
    0x1f,0x98,0xe5,0x8f,0x1e,0x29,0x65,0xc1,0x59,0x5b,0x7b,0xa5,0xf4,0xf3,0x46,0xc9,
    0x1c,0x95,0x52,0x0e,0xf8,0x75,0xc2,0x7a,0xa7,0xc4,0xf1,0xdb,0xa0,0x4b,0x74,0xcf,
    0xf7,0xef,0x29,0x71,0xdc,0xb3,0x55,0xdf,0xdf,0xa4,0xc5,0x3d,0x1b,0xb8,0xe9,0x6a,
    0xbf,0xed,0x91,0x8f,0x4d,0x29,0xf3,0x9f,0x2a,0xf7,0x49,0x89,0xd9,0x7d,0xf4,0xf1,
    0x29,0x31,0xcc,0xbb,0xa7,0xd4,0xbf,0x27,0xa4,0xc4,0x97,0x95,0x8a,0x79,0xfe,0x8b,
    0x94,0xb8,0xbd,0x73,0x5c,0x28,0xfd,0x93,0x24,0x0b,0xde,0xea,0x3c,0x59,0x6d,0x6b,
    0x3a,0xe3,0x9d,0x52,0x0e,0xf8,0xf5,0xc2,0x4e,0x4b,0x89,0xa3,0x5e,0xe4,0x4f,0x1b,
    0x2f,0x73,0x75,0x9f,0x54,0x9d,0x07,0x0d,0xac,0x0b,0x39,0x15,0xf2,0x18,0x4b,0xe6,
    0xe3,0xd2,0x80,0xe3,0xaf,0xb5,0xc6,0xe0,0x72,0x37,0x06,0xc1,0x2d,0xcb,0xaf,0xe5,
    0xb2,0x89,0xef,0xe6,0xef,0xca,0x80,0x76,0xfb,0xbb,0x73,0x6a,0x6f,0x06,0xc4,0xe1,
    0x8b,0xdd,0xa3,0xae,0xd2,0x18,0x7a,0x53,0xe7,0xef,0xdf,0x96,0xad,0xb7,0x83,0x22,
    0x26,0x0f,0x36,0x50,0x6e,0x99,0xec,0x42,0xce,0xea,0x5c,0xee,0xda,0xd1,0xb3,0x81,
    0x75,0xa2,0x6d,0xd0,0x81,0x8d,0x87,0x54,0xcf,0x7b,0x01,0xdb,0x32,0x4a,0xfa,0xab,
    0xa5,0xbf,0xda,0xd5,0xf3,0x50,0x03,0xe5,0xac,0xbd,0x86,0xcf,0x12,0x6e,0x73,0xb1,
    0xe9,0x6c,0x65,0x40,0x9d,0x8b,0xfc,0xd9,0xca,0x80,0xf2,0x6b,0x55,0x8f,0xdd,0x57,
    0x4e,0x71,0x7e,0x76,0x57,0xbc,0x71,0xaf,0x0a,0x9f,0x57,0x3b,0x6e,0x6f,0xc7,0xc1,
    0xd6,0x6a,0xdd,0x47,0x7e,0x59,0x73,0x9e,0xf2,0x8b,0xfc,0xfa,0x52,0xb6,0xbf,0x90,
    0xcc,0xbf,0x6a,0xee,0x6b,0xbf,0x01,0x2e,0x99,0x6f,0x82,0x62,0x8d,0xc2,0xff,0x0e,
    0xc0,0x1a,0xd5,0x74,0x1e,0x20,0x20,0x06,0x7f,0xff,0x25,0xf9,0xef,0x6a,0xca,0xff,
    0x0a,0x8a,0xbd,0xe8,0x5e,0x0d,0xd4,0x81,0xcd,0x0d,0xaa,0x63,0x88,0xf6,0xdd,0x9b,
    0x82,0x62,0x3d,0x82,0x1c,0xd6,0x23,0xcb,0x67,0x9b,0x03,0xf2,0x1b,0xe4,0xef,0x56,
    0xe7,0x2f,0xb8,0x2d,0xf9,0xb5,0x55,0xf5,0x6d,0x71,0x73,0x2b,0x5f,0xb6,0xaa,0x7a,
    0x58,0xbf,0xaa,0xff,0x7b,0x40,0xbf,0x5f,0x41,0xac,0xca,0x3a,0xaf,0x6a,0x7a,0x5b,
    0x5d,0x2c,0xfb,0x34,0x50,0x06,0xbe,0x43,0x67,0x8b,0xea,0x0d,0xc2,0xa2,0x5e,0x3c,
    0x1b,0xa9,0xcf,0xcb,0x81,0x7e,0xf7,0x81,0xef,0x36,0x5e,0xe3,0xb0,0xf9,0x33,0x06,
    0x93,0xc1,0xa7,0x3d,0x63,0x48,0x42,0x3e,0x5f,0x41,0xbd,0x90,0xaf,0x97,0x3f,0x99,
    0x64,0xf1,0x69,0xe3,0xe8,0xe1,0x06,0xca,0xc3,0x77,0x8c,0x01,0xc8,0x59,0x1f,0x7e,
    0xe9,0xfc,0x3e,0x46,0x7e,0x63,0xcc,0xa0,0x0d,0x59,0x58,0x70,0xdd,0x1a,0xa8,0x0b,
    0xee,0x61,0x71,0x4d,0xe7,0x1f,0xf4,0x1b,0x1e,0xfc,0x46,0xc4,0xc6,0x68,0x8b,0x90,
    0x3a,0xe0,0x2e,0xd0,0x9e,0x61,0xa7,0xb0,0xe8,0xa3,0x16,0x3a,0x93,0x8c,0xb8,0xb4,
    0x0d,0x9b,0xff,0x3e,0xa2,0x4d,0x5e,0xee,0xa2,0x76,0xb4,0xd1,0x6f,0x8b,0x70,0x36,
    0x7a,0x4e,0x46,0x1f,0x1f,0xd1,0x9e,0xcf,0xf0,0xb9,0x19,0x6d,0x83,0xaf,0xb8,0x35,
    0x75,0x60,0xba,0xed,0x19,0xf6,0x61,0x29,0x71,0x7f,0xd9,0x79,0xec,0x0b,0x53,0xf2,
    0xfe,0x3c,0xf6,0xc5,0x29,0x71,0x7f,0x1e,0x7b,0x78,0x4a,0xdc,0x9f,0xc7,0xbe,0x34,
    0x25,0xee,0xcf,0x63,0x5f,0x26,0x39,0x7f,0x1e,0xfb,0xf2,0x94,0xb8,0x3f,0x8f,0x7d,
    0x45,0x4a,0xfd,0xcb,0xdd,0xfa,0x3d,0x52,0xba,0xfe,0x3c,0xf6,0xa8,0x94,0xb8,0x3f,
    0x8f,0x3d,0x3a,0xa5,0xfe,0x28,0xa7,0x7b,0x95,0x74,0xfd,0x79,0xec,0xab,0x53,0xe2,
    0xfe,0x3c,0xf6,0x98,0x94,0xfa,0x57,0x3b,0xdd,0xc1,0xe9,0xb6,0x67,0xd8,0xaf,0x4b,
    0x89,0xfb,0xcb,0x62,0x76,0x7d,0x4a,0xde,0xc7,0xec,0xc6,0x94,0xb8,0x8f,0xd9,0xcd,
    0x29,0x71,0x1f,0xb3,0xb1,0x29,0x71,0x1f,0xb3,0x5b,0x25,0xe7,0x63,0x76,0x5b,0x4a,
    0xdc,0xc7,0x6c,0x5c,0x4a,0xfd,0xdb,0x9c,0xef,0x13,0xa4,0xeb,0x63,0x76,0x7b,0x4a,
    0xdc,0xc7,0xac,0x31,0xa5,0xfe,0xed,0x4e,0x77,0x92,0x74,0x7d,0xcc,0xee,0x48,0x89,
    0xfb,0x98,0x4d,0x4e,0xa9,0x0f,0xce,0xce,0xb0,0x0f,0x49,0x19,0x4b,0x70,0x78,0xbe,
    0x8b,0xdf,0x1d,0x02,0xb3,0xf9,0xf1,0x80,0xf6,0x5c,0xbd,0x82,0xe2,0xd9,0xf5,0x8c,
    0x94,0xff,0x1b,0x04,0x1c,0xde,0xbd,0xe1,0xbe,0x72,0x66,0xca,0xdf,0x2c,0xf6,0x77,
    0xbf,0x2d,0x7a,0x30,0x25,0x6e,0xcf,0xe8,0x1f,0x4a,0x89,0x0d,0xd0,0x6f,0xca,0x2d,
    0x97,0xce,0x4a,0xc9,0x99,0xde,0x23,0x35,0x7a,0xb3,0x53,0x62,0xb5,0xe7,0x57,0x1f,
    0x4d,0xc9,0x99,0xde,0xe3,0x35,0x7a,0x7f,0x4c,0x89,0xd5,0x9e,0x67,0x7d,0x22,0x25,
    0xd7,0xf4,0x5e,0x36,0x65,0x9b,0x46,0x94,0x8a,0xf6,0x3c,0xad,0xf6,0x3c,0xe5,0xec,
    0xff,0x57,0x4a,0xdc,0xce,0x2b,0xcc,0x91,0xde,0x48,0x77,0x4e,0xe0,0x99,0x94,0x72,
    0x73,0xd2,0xe6,0xe7,0x26,0xe6,0xa6,0xe4,0x2c,0x86,0xcf,0xa6,0xfc,0x3d,0xf9,0x03,
    0xce,0x8f,0x79,0x29,0x71,0xef,0xc7,0x73,0xf2,0x63,0x9e,0xf3,0xe3,0xf9,0x94,0xb8,
    0xf9,0xf1,0x67,0xe9,0x8d,0x74,0xfb,0xe5,0x17,0x52,0xca,0xfd,0xd9,0xed,0xa7,0xfe,
    0x92,0x12,0xf7,0xef,0x25,0xfe,0x37,0x25,0x8e,0xbe,0xc7,0x6f,0x58,0x67,0x96,0x8a,
    0x67,0xfb,0x2f,0xa5,0xfc,0x5d,0x2b,0xe2,0x35,0x37,0x2d,0x9e,0xed,0x2f,0x48,0xc9,
    0x59,0x5b,0x16,0xa5,0xb4,0xd3,0xa8,0xbd,0x17,0xb0,0x97,0x53,0xca,0x2d,0x72,0x63,
    0xe9,0xb5,0x94,0x38,0xfa,0xcd,0xee,0xf3,0x97,0xa4,0xec,0xff,0xd7,0xdc,0xbe,0x71,
    0xa9,0xdb,0x37,0x2e,0x49,0x8b,0xe7,0xec,0xb6,0xb6,0xed,0x13,0x32,0x5f,0x0f,0xd2,
    0xfa,0xb9,0x57,0x56,0xe4,0xe6,0xa5,0x9a,0x6b,0xb6,0xb6,0xee,0xbd,0x1d,0xce,0xd6,
    0xd6,0xb5,0x29,0x75,0x21,0x53,0xdd,0x2f,0xa4,0x45,0x2e,0x07,0xb7,0x2e,0xbf,0x80,
    0x21,0x97,0xaf,0x73,0xed,0xed,0x2c,0x1d,0xe8,0xda,0x9e,0xf9,0xc0,0x8c,0xb8,0xc9,
    0x1c,0x94,0xb1,0x3e,0x2f,0x73,0x70,0x46,0xdc,0xf6,0xde,0x87,0x66,0xc4,0xa0,0x6b,
    0x7b,0xed,0xc3,0x32,0xe2,0xf8,0x2d,0xbb,0xed,0xb5,0x0f,0xcf,0x88,0x63,0xaf,0x7d,
    0xb1,0x62,0xd0,0x35,0x23,0x6e,0x7b,0xe7,0x23,0x33,0x62,0x4d,0xbf,0x79,0xc8,0x88,
    0xe1,0x37,0xf0,0x76,0x9e,0xa9,0x87,0x7e,0x0b,0x0d,0xce,0xee,0x47,0x7a,0x66,0xc4,
    0xed,0xbd,0x9b,0xc5,0xb8,0x57,0x46,0xce,0xf6,0xa6,0xbd,0x33,0xea,0xf5,0xd2,0x7b,
    0x11,0x8b,0x0b,0x3e,0x6d,0x9d,0xbd,0x40,0xfb,0x30,0xac,0x7b,0x90,0x47,0xcc,0x6c,
    0x4f,0xfc,0x55,0xca,0x7e,0x5b,0xa1,0x67,0x35,0x1b,0x5d,0xac,0xc1,0x7d,0x0d,0x7b,
    0xb2,0xf9,0x75,0x5a,0x9c,0x95,0xfc,0x56,0xfb,0xf0,0x7d,0xc2,0x62,0xcf,0xbe,0x3e,
    0x25,0x3e,0xd6,0xe5,0xbb,0xef,0x52,0xd6,0x0f,0x0e,0xfe,0x6d,0x94,0xad,0x0d,0x35,
    0xe5,0x8d,0xce,0xdf,0x61,0x0d,0xd4,0xfb,0x5a,0x79,0x12,0xb2,0x16,0xab,0xcd,0x35,
    0xfe,0xd6,0x67,0x6e,0xdf,0x95,0x73,0x5b,0x90,0x6f,0x33,0xed,0xbb,0x9c,0xbf,0xa5,
    0xac,0xf0,0xd7,0xee,0x27,0xca,0x19,0x71,0xef,0x6f,0x5d,0x46,0x7f,0xcb,0x8a,0x67,
    0xbd,0x6c,0x55,0x6a,0xca,0xf8,0x34,0x7f,0x7f,0xdb,0x40,0xbd,0x2d,0xf2,0x17,0xb2,
    0xb6,0xef,0x8a,0xb2,0xe6,0xfe,0xb6,0x72,0xfe,0x82,0x8b,0xf3,0xab,0x95,0x6c,0xc6,
    0x6e,0x9c,0xa4,0xf2,0xa3,0xbf,0x7f,0x56,0x91,0x11,0x1f,0xe9,0xd6,0x8e,0x1d,0x32,
    0xc6,0x2b,0x73,0xba,0x3b,0x4a,0x17,0xff,0x47,0xc1,0xf2,0x4e,0x8b,0x8c,0xb8,0x3f,
    0x8b,0xdf,0x32,0xa3,0xef,0x2d,0xd4,0x36,0xf3,0xa3,0x95,0x6b,0xdb,0xf0,0x06,0xca,
    0xa0,0xbd,0x2d,0xe5,0xaf,0x71,0x97,0x34,0xb0,0x6e,0x70,0x3b,0x88,0xb3,0x7d,0x59,
    0x1b,0x37,0xbf,0x2f,0xd1,0xde,0xd9,0xb8,0x9d,0x1d,0x37,0xbc,0xa1,0x38,0x47,0x5c,
    0x3d,0x5b,0xaa,0x39,0x3c,0xc7,0x61,0xbb,0x6a,0x4e,0xcf,0x29,0x15,0xe7,0x69,0xda,
    0x67,0xc4,0x07,0xba,0xb3,0x33,0xbb,0x65,0xd4,0x6f,0xef,0xde,0x1f,0xed,0x9e,0x11,
    0xb7,0x36,0xef,0x91,0x11,0x6b,0x93,0x15,0x6b,0xed,0x4f,0x32,0xe2,0xf0,0xeb,0xe4,
    0xdc,0x12,0xf6,0x1b,0x07,0x86,0xdc,0x03,0x82,0xab,0xd7,0xff,0x9b,0xa8,0xd3,0xff,
    0x18,0x40,0xac,0xda,0x6a,0x2f,0xd9,0xc5,0xed,0x25,0x17,0x68,0x2f,0x79,0xaa,0x9e,
    0x59,0x1a,0xbe,0x48,0x7b,0xc9,0x05,0xfa,0xbd,0x91,0xd7,0x6f,0xab,0xfd,0x30,0xe4,
    0xa6,0x34,0xb0,0x5e,0xc4,0x1f,0x3a,0x5d,0xdc,0xfe,0xfd,0x30,0xe5,0x56,0x3b,0x53,
    0xda,0xd5,0xed,0x6f,0xc1,0x1d,0x9e,0x5f,0x5d,0x65,0xf3,0x70,0xf7,0x1b,0xf6,0x23,
    0x42,0xfe,0xb6,0x78,0xba,0x5b,0xff,0x8f,0x0c,0x89,0xdf,0x64,0x39,0x29,0x24,0xf6,
    0xa1,0x5b,0x7f,0xba,0x87,0xc4,0xcd,0x4e,0x0f,0xd9,0x69,0x74,0x76,0x7a,0x86,0xc4,
    0xcd,0x4e,0xaf,0x90,0x98,0xb7,0x73,0x54,0x48,0xdc,0x7e,0xeb,0xde,0x3b,0xa4,0xed,
    0xa3,0x94,0x37,0x80,0x1d,0x1d,0xf2,0x37,0xd8,0xbd,0xf5,0x7f,0x13,0xf0,0x7f,0x34,
    0xfa,0xe8,0x7f,0x68,0x9c,0x8b,0xff,0x3d,0x17,0x52,0x66,0x8a,0xee,0x33,0xac,0x9d,
    0x5d,0xc3,0xe6,0xbf,0x73,0xc7,0xe7,0x96,0x3c,0xc2,0x5d,0xf3,0xeb,0xff,0x01,0x9a,
    0xb7,0x11,0x20,0xf8,0x4f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(alphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(alphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = alphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = alphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//     if(alphaBits == 1){
//         int active_lane_index = subgroupClusteredMax(controlFlag ? int(gl_SubgroupInvocationID): - 1, 16);
//         if(active_lane_index != - 1){
//             color565 = subgroupShuffle(color565, active_lane_index);
//         }
//         if(punchthrough && result . a == 0){
//             indices = 3;
//         }
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(alphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
