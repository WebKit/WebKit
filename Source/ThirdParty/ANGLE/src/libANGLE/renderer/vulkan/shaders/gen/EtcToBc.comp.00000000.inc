// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x5c,0x0b,0xd8,0x56,0x53,
    0xda,0x7e,0xdf,0xef,0xfd,0xf6,0xf9,0x45,0x07,0x45,0x44,0x0e,0x33,0xc3,0x84,0x8c,
    0xe3,0x6f,0xa4,0x72,0xce,0xa1,0x46,0x42,0x0e,0x8d,0x42,0x07,0x87,0x3f,0xa5,0xdf,
    0x94,0x10,0xa5,0x8c,0x1a,0x92,0x4c,0xdf,0x08,0x21,0xd2,0x20,0x34,0x61,0xc2,0x0c,
    0xfd,0x7e,0x9a,0x09,0x83,0x19,0x9a,0x86,0x0e,0xce,0x72,0x16,0x32,0xa3,0xc8,0x21,
    0xff,0xbe,0xdf,0xfb,0x7e,0xbe,0xfd,0x7c,0x6f,0x7d,0xd7,0xb5,0xae,0x77,0xaf,0xfb,
    0x39,0xac,0xe7,0x79,0xd6,0x5a,0xcf,0x5a,0x7b,0xef,0xb5,0xbf,0x4a,0xc3,0xce,0x51,
    0xa9,0x52,0x2e,0xa5,0xa5,0xb8,0xf4,0x70,0xb5,0x54,0xfb,0x6b,0x5d,0x6a,0x28,0x95,
    0xf5,0xdb,0x45,0xbf,0xdd,0xf4,0x7b,0x88,0x7e,0x0f,0xcb,0x7f,0xb3,0x52,0x58,0xe3,
    0xeb,0xd9,0xeb,0x84,0x5e,0x5d,0x2e,0xfc,0xd5,0xe0,0x2e,0xfb,0xee,0xf7,0x33,0xc8,
    0x6f,0x5e,0xaa,0xd4,0xf4,0x80,0xb6,0x45,0xae,0x37,0xc8,0x7f,0x1b,0xf3,0x72,0xfe,
    0x99,0xe7,0x0e,0x07,0xde,0x33,0x27,0xf7,0xce,0xcb,0xa4,0x1c,0x6c,0x95,0xeb,0x68,
    0xac,0xe9,0x2c,0x95,0x0e,0x96,0x0c,0xca,0x51,0xb9,0xd4,0xd3,0x34,0xa7,0xb4,0xb3,
    0x7e,0x0d,0x2b,0x0b,0x6b,0x74,0x58,0x83,0xb0,0xd8,0x61,0x15,0x61,0x55,0x87,0x35,
    0x0a,0x6b,0xe5,0xb0,0x40,0xd8,0x96,0x0e,0x0b,0x85,0x6d,0xed,0xb0,0x48,0x58,0x47,
    0xf8,0x90,0x6b,0xb7,0x76,0x7b,0xe6,0x5a,0xe1,0x53,0x96,0x5f,0x6f,0xa3,0x7a,0x6f,
    0xd5,0xb7,0x15,0x2f,0x7c,0x2d,0x89,0x86,0x6b,0xd0,0x7e,0xaa,0xfa,0xf1,0xb9,0x01,
    0x3b,0x95,0x0a,0x3a,0xea,0x3b,0x36,0xd7,0x2b,0xa5,0x6f,0x83,0x82,0xd6,0x2b,0x6c,
    0xc9,0x8b,0xfa,0x8e,0x8a,0x09,0x78,0x51,0xef,0x60,0x7a,0x42,0xb6,0xd3,0x41,0xb4,
    0xef,0x13,0xca,0xb5,0xcd,0xad,0x86,0xdd,0x3b,0xe6,0x58,0x45,0x3e,0xb4,0xcb,0xf9,
    0xe1,0xf3,0x0e,0xd2,0xbd,0x55,0x5e,0x8f,0x14,0x87,0x86,0x1a,0xde,0x58,0x8b,0x6d,
    0xa4,0x02,0xfe,0x44,0xfc,0x65,0xd1,0x53,0xd1,0x12,0xc9,0xb7,0xd2,0xb5,0xc9,0xb7,
    0x16,0xbd,0x55,0x2d,0xd6,0x0d,0xa5,0x36,0xe2,0xdb,0x52,0x7c,0x8d,0xe2,0xeb,0x24,
    0x3e,0xb4,0xdd,0x3e,0xb7,0x70,0x57,0xb5,0x03,0x5e,0xc4,0x6c,0x57,0xf5,0x2d,0xea,
    0x7b,0x8b,0x0f,0xf5,0xdd,0x64,0xd3,0x49,0x79,0xd9,0xc3,0xd5,0xfb,0x39,0x3a,0x78,
    0xfb,0xcb,0x66,0xa3,0x0f,0x50,0x3f,0x5b,0x7d,0xa0,0xc6,0x91,0xd5,0x87,0x68,0x6c,
    0x58,0x7d,0xa8,0x6c,0xb5,0xfa,0x30,0xf9,0x64,0xf5,0x91,0x1a,0x53,0x56,0x1f,0x9d,
    0x97,0x4e,0xae,0x3e,0x46,0x31,0x31,0x7b,0x26,0x4b,0xbe,0x63,0x5e,0xff,0x8d,0xda,
    0x9a,0xec,0xf8,0xaf,0xae,0xcd,0xa9,0x52,0x69,0xf7,0x3c,0x2a,0xa0,0x5d,0x23,0x1d,
    0x23,0x65,0xeb,0xd5,0x8e,0x77,0x8a,0xe2,0x61,0xf5,0x6b,0x15,0x5b,0xab,0x4f,0xd5,
    0x7c,0x30,0x5d,0xd7,0x49,0xd7,0x14,0xf1,0x4e,0x75,0xbc,0xd3,0xea,0xe2,0x74,0xbd,
    0xfa,0xc5,0x64,0x7f,0x2b,0x9e,0xa1,0xa2,0x4d,0x75,0xb4,0xe9,0xa2,0xf5,0x93,0x9d,
    0x5e,0x6f,0x53,0x89,0xe3,0xd2,0x78,0x7f,0xe7,0xfc,0xb9,0x5e,0x74,0xe3,0xbd,0x21,
    0x2f,0xa9,0xe3,0x9d,0xe1,0xec,0x1d,0x28,0xba,0xd1,0x6e,0x54,0x7b,0x53,0xa4,0xc7,
    0xd3,0x6e,0x92,0xdc,0xd0,0x4d,0xd0,0x6e,0x96,0xad,0xd6,0xfe,0xb5,0x8e,0x36,0xb3,
    0xce,0x47,0x4f,0xbb,0xc5,0xf9,0x58,0x4f,0xbb,0xd5,0xc9,0x4d,0xa9,0xa3,0xdd,0x26,
    0x5b,0xfa,0x39,0x9a,0xf9,0x3b,0x4b,0xf3,0xcf,0x78,0x6f,0x17,0x36,0x4d,0x32,0x5e,
    0xcf,0x1d,0x2e,0xbe,0xd7,0x2b,0x1e,0x46,0x9b,0xed,0xfc,0x9d,0xd2,0x4c,0x6b,0x5b,
    0x1b,0x5f,0x77,0x6a,0x0c,0x5d,0xa7,0x3e,0x9c,0xae,0x3e,0x98,0xa1,0x18,0xde,0xa4,
    0x98,0xcc,0x94,0x8f,0xb7,0xca,0xe6,0xdb,0xd5,0xe6,0x6c,0xcd,0xd3,0xbb,0x34,0x1e,
    0x7e,0xe3,0xec,0x5f,0x90,0x97,0x1f,0xf2,0xd2,0x39,0x9f,0x71,0x98,0xdf,0x8b,0xf3,
    0xb2,0x7d,0xde,0x83,0x96,0x53,0x43,0x8d,0xc7,0x70,0x13,0x05,0x3a,0x9f,0x11,0x1d,
    0xfc,0x5d,0x55,0x7f,0x56,0x18,0xe8,0x7f,0x73,0xf2,0x36,0x7f,0x96,0xd4,0xcd,0xa7,
    0xa5,0x8a,0xe1,0x4f,0x65,0xc3,0x72,0xe5,0x8a,0x15,0x92,0xf5,0xb9,0xe0,0x0d,0xe5,
    0x73,0xab,0xbf,0xe9,0xe6,0x3a,0xea,0x6f,0x35,0xcf,0x97,0xb0,0x96,0x6b,0xde,0x96,
    0xcc,0x9b,0xa2,0x19,0xdf,0x3b,0x75,0x39,0xe1,0xa3,0xda,0xda,0x57,0xd4,0x3f,0xd5,
    0x1a,0x67,0xf5,0xb5,0x5a,0x1b,0xac,0x8e,0x89,0xd6,0xd6,0xe9,0xdb,0xa1,0x5c,0xe4,
    0x0c,0xd4,0xfb,0x96,0x99,0x93,0x90,0x23,0x4e,0x28,0xd3,0x0f,0x60,0x26,0x7f,0x62,
    0x19,0x3e,0xba,0x1c,0x58,0x66,0xce,0x6c,0xce,0x81,0x65,0xae,0x37,0x56,0x3f,0xb9,
    0xcc,0xf5,0x76,0xf7,0x7c,0x26,0x42,0xdf,0x29,0xe5,0x62,0x3c,0x36,0x29,0xa7,0x41,
    0x27,0xf4,0x40,0xf6,0xe4,0x32,0xe3,0x7f,0x5a,0x99,0x7d,0x0e,0x19,0xc4,0x04,0x31,
    0x9d,0x5e,0xe6,0x18,0xb5,0x62,0x78,0x53,0x99,0xe3,0xc1,0x8a,0xb5,0xbd,0xa2,0x4c,
    0x87,0xad,0xfe,0x9a,0x16,0x7d,0xab,0xef,0xd3,0xc0,0x35,0xcb,0xea,0xdd,0xf2,0x7a,
    0x1b,0x57,0x3f,0x33,0xaf,0x6f,0xa6,0x58,0xb4,0xaa,0x30,0x77,0xf6,0xad,0xd9,0x13,
    0xd4,0xae,0x5b,0x57,0x38,0xf6,0x39,0xe6,0x89,0xb5,0xa9,0x70,0x9e,0x7c,0xea,0xf4,
    0xb4,0xcd,0xb1,0xed,0x1c,0xcf,0x96,0x15,0xce,0x2f,0xe0,0xc6,0xd3,0xae,0x82,0xb1,
    0x5c,0xf0,0xb4,0xaf,0xb0,0xfd,0x76,0x8e,0x67,0xab,0xfc,0xfa,0x20,0xc7,0xb3,0x75,
    0x85,0x36,0x6f,0xe5,0x78,0x3a,0xe4,0xd7,0x7d,0x1c,0xcf,0x36,0x15,0xae,0x3b,0x1d,
    0x1c,0xcf,0xb6,0x15,0xae,0xe5,0x56,0xef,0x98,0xd7,0xcf,0x73,0x32,0xdb,0x55,0xc8,
    0xd3,0xd1,0xc9,0x6c,0x9f,0x5f,0xef,0xe9,0x64,0x3a,0xe5,0xf5,0x47,0x9d,0xcc,0x0e,
    0x15,0xf2,0x00,0x47,0x5f,0x23,0x5e,0x3b,0x56,0x18,0x23,0xc4,0x04,0x3e,0xc3,0x27,
    0xd8,0x0c,0x9b,0xd0,0x06,0x64,0xd0,0xd7,0x3f,0xaa,0x68,0xbd,0x56,0xfd,0xc8,0x0a,
    0xd7,0x83,0xbd,0x35,0x37,0x51,0xef,0x29,0xcc,0xea,0xbd,0x2b,0xc5,0x7e,0xe0,0x17,
    0xba,0xf6,0x73,0xf5,0xa4,0x4a,0x31,0x2f,0x50,0x1f,0x5a,0x29,0xd6,0xf2,0x91,0x15,
    0xf2,0x36,0x3a,0xfa,0xe8,0x0a,0xd7,0x66,0xe4,0x35,0xd0,0x2f,0xaa,0x70,0x7e,0xa3,
    0xbf,0x27,0x8b,0x6e,0xbc,0x17,0x57,0x98,0x7b,0x50,0xc7,0x1e,0xe1,0x61,0x6e,0x43,
    0x7b,0x58,0xbd,0xb3,0xf6,0x60,0x56,0x3f,0xa9,0x56,0x1f,0xdf,0x4c,0x1f,0x50,0xab,
    0x8f,0x3b,0xdc,0xea,0x67,0xe5,0xf5,0x49,0xed,0x6f,0xea,0x6e,0xf5,0x41,0x79,0x7d,
    0xf6,0x11,0xed,0x9b,0xf9,0x07,0xe7,0xf5,0x97,0xc7,0x7c,0xd4,0x0d,0xe3,0x1d,0x73,
    0x6b,0x48,0x23,0x65,0xc0,0x07,0x9a,0xf1,0x5d,0x98,0x5f,0x8f,0x68,0x53,0xe9,0xd1,
    0x55,0x31,0xc1,0xfe,0xaf,0xec,0xec,0x98,0x53,0x6b,0xf7,0xad,0x83,0xcd,0x8f,0x7b,
    0x1b,0x19,0xf7,0xe6,0x7c,0xd6,0x58,0xec,0x27,0x50,0x5f,0xd7,0x58,0xc4,0x14,0xf2,
    0xad,0x73,0xe2,0xfa,0xaf,0xbf,0xee,0x66,0xf5,0x36,0x79,0xfd,0xfb,0xef,0xc6,0x76,
    0x37,0xbb,0xda,0x06,0xe4,0x69,0xa3,0x5f,0xc4,0x7a,0xaf,0x80,0x73,0xaa,0xa1,0xb6,
    0x3f,0x4c,0x4a,0xbf,0x08,0xa8,0x53,0x5b,0xcd,0xe6,0xbf,0xb2,0x7e,0xb7,0xcd,0x7b,
    0xe9,0xb8,0x9c,0x08,0x3e,0xf4,0x6d,0x1f,0x31,0x02,0xeb,0xaa,0xfa,0xf1,0xc2,0x40,
    0x1f,0x10,0x30,0x47,0xf9,0xbd,0xc7,0x86,0x1c,0xfb,0x21,0xff,0x43,0x7b,0xc7,0x84,
    0x6c,0xaf,0x5c,0xd7,0x5e,0x43,0x6d,0xbd,0xa0,0x8e,0x63,0x43,0x62,0xe0,0xed,0xaa,
    0x7a,0xaf,0xb0,0xe8,0x43,0x5c,0xf6,0x09,0x2d,0x8f,0x31,0x3f,0x63,0xcf,0x0b,0xac,
    0xbf,0xf6,0x79,0x98,0x07,0x88,0xe5,0xbf,0x32,0x8e,0x19,0x9f,0x27,0x5e,0xce,0x98,
    0x27,0xc6,0xb8,0xf9,0xf2,0x4a,0xc6,0x3c,0xd8,0xcf,0x8d,0xb9,0x65,0x19,0xc7,0x96,
    0x2f,0x96,0xe3,0x96,0x3b,0xfe,0x7e,0x2e,0xf7,0xad,0x70,0xba,0xc7,0x38,0x7c,0x65,
    0xc6,0x1c,0x64,0xc5,0xf0,0x57,0x33,0xae,0x19,0x56,0xcc,0x9f,0xd7,0x9c,0xdd,0x7d,
    0x5d,0xce,0x7d,0x3d,0xe3,0xda,0x6e,0xc5,0xf8,0xdf,0xc8,0xb8,0x1e,0x5a,0x29,0xe7,
    0xfd,0x06,0xfe,0xef,0x33,0x5e,0xc3,0x9f,0xd3,0xab,0x1c,0x03,0xf3,0xaa,0x1c,0x03,
    0x95,0x52,0x41,0x5b,0x90,0x63,0xfb,0xe7,0xb1,0x68,0xd0,0x3c,0x2c,0x89,0xfe,0x75,
    0x8e,0x04,0x9a,0xe7,0x58,0xf7,0xef,0x49,0x39,0x46,0xbb,0xda,0x9a,0x10,0xb5,0xac,
    0x6f,0xed,0xea,0xc8,0x23,0x7b,0xba,0x3a,0xd6,0xc1,0x09,0x41,0x51,0xc7,0xba,0xb6,
    0x4b,0xc8,0xfa,0x57,0x79,0x6b,0x7d,0xd5,0xc7,0xdf,0xe6,0xd7,0x98,0xeb,0x27,0x84,
    0x6c,0x1f,0xbf,0xdd,0xb4,0xe7,0x3f,0x2d,0x64,0xee,0x39,0x2e,0x97,0x82,0x5c,0xff,
    0x90,0xd8,0x69,0x61,0x31,0x6e,0xaf,0x54,0xdf,0x9f,0x1e,0x92,0x8e,0x31,0x70,0x48,
    0x8e,0x61,0x0e,0x0e,0x08,0x99,0xab,0xa0,0xbf,0x9b,0xc6,0xd2,0xc0,0x90,0xf8,0xa2,
    0x9c,0x07,0xf5,0x33,0x42,0x62,0x58,0xdb,0x9f,0x11,0x36,0x48,0x18,0xf2,0x98,0x61,
    0x43,0x42,0xf2,0xf6,0x57,0x9b,0xb5,0xbc,0x26,0x39,0xd0,0x8e,0x17,0x76,0x4e,0x48,
    0x5b,0x6a,0x59,0x47,0xd8,0xb9,0x21,0x71,0xf0,0xf7,0xcd,0x11,0xd8,0x7b,0x7c,0x46,
    0xdc,0x78,0xad,0x9d,0x61,0x6a,0x67,0x89,0x6b,0xe7,0x7c,0xd5,0x87,0xb9,0x76,0x46,
    0x48,0xb6,0xec,0xda,0xb9,0x20,0x24,0x7e,0xbe,0x6b,0xe7,0xc4,0x8c,0xf8,0xf1,0x19,
    0x79,0xad,0x9d,0x0b,0x43,0xfa,0x89,0xdc,0x6c,0xb1,0x18,0x25,0x0c,0x63,0xb9,0x8f,
    0xe2,0x3a,0x3a,0x24,0x2f,0x68,0xe3,0x85,0x8d,0x09,0xa9,0x17,0xb4,0xb1,0xba,0x07,
    0xbc,0x24,0x24,0x8e,0xd8,0x63,0xff,0xd6,0x39,0xe0,0x9e,0xae,0x9f,0x8b,0xfd,0x6e,
    0x01,0xf1,0xb1,0xca,0x15,0xbb,0x07,0xc4,0x4c,0x66,0x0f,0xc9,0x0c,0x75,0x32,0x5d,
    0x02,0xe2,0x26,0xb3,0x67,0x40,0xac,0x8f,0xe6,0xf2,0xcf,0x02,0xea,0x01,0x3e,0x3f,
    0xc7,0x90,0xf3,0xf6,0x0e,0x68,0x0f,0x68,0x37,0xe7,0x72,0x18,0xff,0xfb,0x08,0xc7,
    0xd8,0xdb,0x4f,0x39,0xec,0x9b,0x9c,0x06,0x7c,0xdf,0xbc,0x00,0xc3,0xf8,0xc3,0xf5,
    0xfa,0xfc,0xb7,0xaf,0xc6,0x23,0xf0,0xbf,0xa8,0xad,0x03,0xa5,0x17,0x39,0xe5,0x19,
    0x61,0xdd,0x85,0x21,0xa7,0xa0,0x6f,0x60,0xe3,0x21,0x01,0xf1,0x92,0xfa,0x10,0xd8,
    0xa1,0x01,0xfd,0x02,0xcd,0xf8,0x0e,0x17,0x9f,0xf5,0x21,0xb0,0x23,0x02,0xf2,0x82,
    0x66,0xb2,0x47,0x4b,0x16,0x98,0xf1,0xf5,0x0a,0x88,0x43,0x1f,0x62,0x85,0x1c,0xdd,
    0x57,0xf9,0xd9,0xf4,0x9f,0x18,0xd0,0x66,0x3f,0x46,0x4e,0x56,0xcc,0x7d,0xbf,0x9f,
    0x12,0x10,0x47,0xbf,0x5b,0x9c,0x4f,0x0d,0x88,0x9b,0x0d,0xa7,0x05,0xd4,0x77,0xaa,
    0xd3,0xff,0x4b,0xe9,0x2f,0x39,0xfb,0x4f,0x0f,0xc8,0xfb,0x4b,0xf5,0x2b,0xd6,0x88,
    0x81,0xea,0xd7,0x31,0xea,0x57,0xf0,0x9d,0x21,0xdc,0xe4,0xce,0x0c,0x28,0x0b,0x7c,
    0x30,0xd6,0xd0,0xfc,0xf7,0x2c,0xf9,0x34,0x30,0xe7,0x41,0xde,0x1a,0x24,0xec,0x4c,
    0x37,0x66,0x06,0x4b,0xf7,0x48,0x37,0x66,0x86,0x04,0xc4,0xef,0xcd,0x79,0xd0,0xf7,
    0x43,0x03,0x62,0xc8,0xad,0xe8,0xff,0x73,0x5c,0xff,0x83,0x76,0x76,0x5e,0x86,0xab,
    0xff,0xcf,0x0e,0x8a,0x39,0x36,0x3e,0x64,0x9b,0x95,0xda,0x7c,0xe0,0x3a,0x71,0x75,
    0x48,0xdc,0x97,0x45,0xb2,0xef,0x9a,0x90,0xf4,0x8b,0x94,0x37,0x80,0x4d,0x0d,0x89,
    0x2f,0xcb,0x0a,0xbd,0xd3,0x42,0xe2,0xf8,0xfb,0xab,0xb0,0xeb,0x43,0xe2,0xd8,0xeb,
    0x18,0xdf,0x74,0xf1,0x95,0x1d,0x5f,0x53,0x48,0x7c,0x72,0xed,0xbe,0x8b,0xd8,0xef,
    0x42,0xca,0x37,0xb9,0xfc,0x30,0x43,0xb2,0x0d,0x4e,0xf6,0xc6,0x90,0x38,0xe2,0x60,
    0xb2,0x37,0x85,0x94,0xbf,0xd1,0xc9,0xce,0x94,0x6c,0xc5,0xc9,0xde,0x12,0x12,0x5f,
    0xea,0xda,0xbd,0x35,0xa4,0xfc,0x2d,0x4e,0x76,0xa2,0x62,0xd6,0xe0,0x62,0x36,0x3b,
    0x24,0xee,0x8b,0xc5,0xec,0xce,0x90,0x74,0x1f,0xb3,0xbb,0x42,0xe2,0x3e,0x66,0xf7,
    0x84,0xc4,0x7d,0xcc,0xe6,0x86,0xc4,0x7d,0xcc,0xee,0x13,0x9f,0x8f,0xd9,0xfd,0x21,
    0x71,0x1f,0xb3,0x79,0x21,0xe5,0xef,0x77,0xb6,0xcf,0x97,0xac,0x8f,0xd9,0x03,0x21,
    0x71,0x1f,0xb3,0x07,0x43,0xca,0x3f,0xe0,0x64,0xff,0x28,0x59,0x1f,0xb3,0x05,0x21,
    0x71,0x1f,0xb3,0x87,0x43,0xca,0x83,0x66,0x39,0xf6,0xd7,0x21,0x63,0x09,0x1a,0x72,
    0xcf,0x39,0x1a,0x8b,0xc3,0xdd,0x58,0x7c,0x5c,0x71,0x2d,0xbb,0xb8,0x2e,0x0e,0x89,
    0xfb,0x62,0x71,0x7d,0x3a,0x24,0xdd,0xc7,0xf5,0x6f,0x21,0x71,0x1f,0xd7,0xe7,0x43,
    0xe2,0x3e,0xae,0x2f,0x84,0xc4,0x7d,0x5c,0xff,0x21,0x3e,0x1f,0xd7,0x17,0x43,0xe2,
    0x3e,0xae,0x2f,0x85,0x94,0x7f,0xd1,0xc5,0xe6,0x9f,0x92,0xf5,0x71,0x5d,0x1a,0x12,
    0xf7,0x71,0xfd,0x57,0x48,0xf9,0xa5,0x4e,0xf6,0x15,0xc9,0xfa,0xb8,0x2e,0x0b,0x89,
    0xfb,0xb8,0x2e,0x0f,0x29,0xbf,0xcc,0xc9,0x3e,0xa1,0x98,0x95,0x5c,0xcc,0x5e,0x0f,
    0x89,0xfb,0x62,0x31,0x7b,0x23,0x24,0xdd,0xc7,0xec,0xed,0x90,0xb8,0x8f,0xd9,0xaa,
    0x90,0xb8,0x8f,0xd9,0xbb,0x21,0x71,0x1f,0xb3,0xf7,0xc5,0xe7,0x63,0xf6,0x41,0x48,
    0xdc,0xc7,0xec,0xc3,0x90,0xf2,0x1f,0x38,0xdb,0x3f,0x96,0xac,0x8f,0xd9,0x27,0x21,
    0x71,0x1f,0xb3,0xd5,0x21,0xe5,0x3f,0x71,0xb2,0x9f,0x49,0xd6,0xc7,0xec,0xf3,0x90,
    0xb8,0x8f,0xd9,0x9a,0x90,0xf2,0x9f,0xbb,0xb1,0xf8,0x64,0xc8,0x58,0xae,0xa9,0x1b,
    0x8b,0xf8,0x5d,0xab,0x7d,0xd8,0x9b,0x19,0xc7,0x2c,0x72,0x25,0xf8,0x87,0xbb,0x5c,
    0x3b,0x5a,0xb9,0xb6,0xbf,0xf6,0x79,0x63,0x5c,0xae,0x05,0xed,0x22,0xac,0x33,0xd2,
    0x79,0x91,0x1b,0xdf,0x97,0x04,0xd4,0xeb,0xf7,0x28,0x97,0x06,0xc4,0xb1,0xf7,0x31,
    0xfd,0x63,0x03,0xe2,0xf0,0x03,0xf6,0x99,0xae,0x31,0xb2,0x0f,0x3c,0x97,0x05,0xb4,
    0x03,0x36,0x8f,0x55,0x9b,0xdd,0x73,0x5b,0x26,0x68,0xbd,0xb5,0x36,0xf7,0x89,0x36,
    0x6e,0x73,0xdf,0x88,0x38,0xec,0xc7,0x1a,0x83,0xe7,0x92,0xfb,0x47,0xdc,0xcb,0x82,
    0x66,0xeb,0xd7,0x7f,0x45,0xc4,0x9f,0xd1,0xfa,0x75,0x40,0x44,0x0c,0x6b,0xdc,0x5f,
    0x84,0xfd,0x3c,0x22,0x3e,0x4d,0xeb,0x2a,0xf4,0x1f,0x18,0x11,0xbf,0x4f,0xfe,0x74,
    0x8b,0x5a,0xc6,0xeb,0xb0,0xa8,0x88,0x17,0x68,0xdd,0xf3,0x02,0x0c,0x3e,0x76,0x8f,
    0x0a,0x3b,0x0f,0x91,0x9d,0x3e,0x36,0x87,0x46,0xc4,0x2d,0x36,0x26,0x87,0x5f,0x8b,
    0xcd,0xe1,0x11,0xdb,0x44,0xbc,0x0e,0x95,0x7e,0xb4,0xdb,0x98,0x14,0xed,0x82,0xe7,
    0x88,0xbc,0x9c,0x28,0x79,0x5c,0x1f,0x97,0xef,0xe0,0xb1,0x27,0xef,0xa9,0x98,0x59,
    0xdc,0xca,0x6e,0x1f,0x0e,0xbb,0x8e,0x8e,0xb8,0x27,0x86,0x9f,0x7d,0x74,0xbf,0x72,
    0x4c,0x44,0xdc,0xca,0x84,0x9c,0x17,0xf8,0xb1,0x11,0x9f,0xb5,0x81,0xbe,0x48,0x58,
    0xaf,0x88,0x6d,0x80,0x36,0x56,0xcf,0xf3,0x7a,0x47,0xc4,0xe1,0x3b,0xea,0x7d,0x22,
    0x62,0xb8,0x9f,0xba,0x52,0xd8,0x09,0x11,0x71,0xdc,0x7b,0xc1,0x77,0xf8,0x03,0xdb,
    0xe1,0xc3,0xf3,0xb9,0x1d,0xb5,0xbd,0x8f,0x62,0xb6,0x56,0xfb,0x05,0xdb,0xeb,0x9c,
    0x12,0x91,0x66,0xf5,0xfe,0xe2,0x7b,0x2e,0x97,0xaa,0xed,0x73,0x22,0x62,0x03,0xb4,
    0x9f,0x35,0x7d,0x03,0xc5,0x87,0x00,0x78,0x7d,0x67,0x44,0xa4,0x99,0xfc,0x60,0xc9,
    0x0f,0xab,0x93,0x3f,0x5b,0xf2,0x4d,0x75,0xf6,0x9c,0x13,0x91,0x66,0xf2,0xc3,0x24,
    0x3f,0x50,0xf2,0xb6,0x67,0x1a,0x11,0xd1,0x76,0xd8,0x67,0xd8,0xff,0x44,0x6c,0x7f,
    0xb0,0xc3,0x46,0x45,0xd4,0x39,0x2c,0x2a,0xc6,0xe1,0x45,0x11,0xe5,0xef,0xd7,0xd8,
    0x19,0x13,0x11,0xdb,0x41,0x7b,0xa4,0x8a,0x1b,0x0f,0xa0,0x5d,0x9c,0x97,0x65,0x1a,
    0x0f,0x17,0xbb,0x98,0x8e,0x95,0x0f,0x03,0x4a,0x2d,0xf7,0x8f,0x97,0x45,0xa4,0x19,
    0xdf,0x78,0x17,0x7b,0xcf,0x77,0x45,0x44,0xda,0x5f,0x65,0xeb,0x84,0x88,0xd8,0x18,
    0xe5,0x29,0x60,0x13,0x23,0xea,0x9b,0xe0,0xf4,0x5d,0x25,0x7d,0x43,0x74,0xbf,0x60,
    0xfa,0x26,0x45,0xa4,0x19,0xdf,0xd5,0xe2,0x1b,0x56,0xc7,0x77,0x4d,0x44,0x9a,0xf1,
    0x4d,0x15,0xdf,0xd4,0x3a,0xbe,0xeb,0x22,0xd2,0x8c,0xef,0xb7,0xe2,0x1b,0x58,0xc7,
    0x37,0x3d,0x22,0xcd,0xf8,0x6e,0x10,0xdf,0xd0,0x3a,0xbe,0x19,0x11,0x69,0xc6,0x77,
    0xb3,0xf8,0xec,0x19,0x82,0xe5,0xeb,0x99,0x11,0x69,0xd3,0x5c,0xbe,0x9e,0x15,0x11,
    0x47,0x1e,0x42,0x3e,0xc3,0xfd,0x38,0x9e,0xe9,0x5a,0x9e,0xba,0x23,0xe2,0x3d,0xfa,
    0x2c,0x97,0xa7,0x66,0x47,0xc4,0x2d,0xe7,0xcd,0xd1,0xfc,0xf5,0x7b,0xf6,0xbb,0x22,
    0x3e,0x8f,0xc0,0xbd,0x87,0xdd,0x13,0xdc,0x1d,0x91,0xf7,0x2e,0x97,0x73,0xee,0x89,
    0x88,0x2f,0x71,0xfe,0xcc,0x8d,0x88,0x9b,0xdc,0x3c,0xc9,0x41,0x97,0xc9,0xfd,0x21,
    0x22,0xde,0xdf,0xc9,0xcd,0x8f,0x88,0x5b,0x1f,0x3f,0x14,0x51,0xd7,0x7c,0xe5,0xa3,
    0x47,0x5d,0x1e,0x44,0x3e,0x5f,0x90,0xd7,0x1f,0xd5,0xf8,0xc3,0xb5,0xe5,0xbc,0x47,
    0x22,0xca,0x8e,0x51,0xce,0x33,0x9e,0x47,0x5d,0xce,0xfb,0x3c,0xe3,0x9a,0x80,0x71,
    0x0b,0x7e,0x2f,0xff,0x67,0xc9,0xcf,0x52,0xfe,0x7d,0xc5,0xb5,0x0b,0xda,0x63,0xf0,
    0x4d,0x3a,0x1f,0x53,0x4e,0x43,0xbe,0x79,0x22,0xe2,0xb8,0xc4,0x78,0xc3,0x58,0xb2,
    0x3c,0xf4,0x54,0x44,0x9a,0xe5,0xa1,0x57,0x24,0xbb,0x48,0x79,0x0f,0xbe,0xfe,0x55,
    0xf6,0x3e,0xe4,0xf4,0x3d,0x1b,0x71,0xac,0x61,0x1c,0xcd,0x70,0xfa,0x9e,0x8b,0x48,
    0x5b,0x99,0x15,0xf7,0x62,0x7f,0x8f,0xa8,0x63,0xb6,0x93,0xff,0x47,0x44,0xdc,0xca,
    0x78,0xc9,0xbf,0x18,0x51,0x07,0xe8,0xd5,0x3c,0x87,0x03,0x5b,0x12,0x31,0x67,0xef,
    0x21,0x3a,0x9e,0xed,0xe3,0x39,0xbe,0xb7,0xf7,0x15,0xc5,0x0f,0xfc,0x59,0x95,0x7e,
    0xc1,0xff,0x25,0x8a,0x07,0x78,0x2b,0xca,0xb1,0xcb,0x5c,0x5e,0x59,0x11,0x31,0x07,
    0x59,0x5e,0x59,0x19,0x11,0xb3,0xbc,0xd2,0xe0,0xf2,0x0a,0x68,0xaf,0x62,0x9d,0x89,
    0xa9,0xe7,0x55,0x37,0x2f,0xde,0x70,0xf9,0xc2,0xcf,0x9f,0x37,0x23,0xd2,0x8c,0xef,
    0x1d,0x97,0x7f,0xfa,0x39,0xbe,0x55,0x11,0x69,0x96,0x57,0xde,0x8d,0x88,0x61,0x3e,
    0xd9,0x58,0xfd,0x40,0xb2,0x6f,0xba,0xf5,0xff,0xc3,0x88,0xb8,0x1f,0xab,0x1f,0x45,
    0xc4,0x6d,0xac,0x7e,0x1c,0x51,0xdf,0x47,0xce,0x8e,0x4f,0xa5,0xeb,0xa3,0x3a,0x3b,
    0x3e,0x8b,0x48,0xb3,0x36,0xbf,0x10,0xdf,0x64,0xd7,0xe6,0xbf,0x23,0xe2,0xd8,0xd7,
    0x99,0xdc,0x7f,0x22,0xe2,0xd6,0xe6,0x97,0x11,0x75,0xfd,0xc7,0xb5,0xf9,0x95,0x5b,
    0x3f,0x7c,0x8c,0xbe,0x8e,0x48,0x33,0xbe,0x6f,0xc5,0x77,0x7d,0x1d,0xdf,0x77,0x11,
    0x69,0xc6,0xf7,0x83,0xf8,0xfa,0xd5,0xf1,0xe1,0xe1,0xdd,0x0f,0x2e,0x0f,0x54,0x62,
    0xf2,0xbd,0xe3,0xd6,0xfd,0x24,0x66,0x5e,0xd8,0x37,0x2a,0x9e,0x35,0xa4,0x31,0x79,
    0x41,0xb3,0xb1,0x5b,0x8d,0xd9,0x87,0x78,0x3f,0x64,0xd8,0xe6,0x31,0x63,0x8a,0x77,
    0x44,0x96,0x93,0xb6,0x88,0xc9,0x0b,0x9a,0x61,0xad,0x63,0xe2,0x5f,0x46,0x85,0x6c,
    0xdb,0x98,0xfe,0x7a,0x7d,0xed,0x62,0xfa,0xe6,0xf5,0xb5,0x8f,0xc9,0xdb,0xce,0xe9,
    0xdb,0x3a,0x26,0x0e,0xff,0xe6,0x6b,0xbc,0x76,0x88,0xd9,0x0e,0x68,0x73,0x15,0x97,
    0x6d,0x62,0xe2,0xfd,0xf5,0xde,0xd1,0xfc,0xeb,0x18,0xd3,0x47,0xd0,0x91,0x8f,0xb7,
    0xae,0xcb,0xc7,0xdb,0xc7,0x7c,0x46,0x0a,0x3e,0xcb,0xc7,0x9d,0x62,0xe2,0x96,0x8f,
    0x77,0x8c,0x37,0xce,0xc7,0x3b,0xc7,0x1b,0xe7,0xe3,0x1f,0xc5,0xe4,0x05,0xcd,0xfa,
    0xe1,0xc7,0x31,0x71,0x9f,0x8f,0x7f,0x12,0x13,0x37,0xb9,0xce,0x92,0xf3,0xf9,0x78,
    0xb7,0x98,0xb8,0x1f,0xe3,0xbb,0xc7,0xc4,0x31,0x47,0xf7,0x89,0x5b,0xe6,0xde,0x2e,
    0xe8,0x6f,0xcd,0xd1,0x2e,0x2e,0x7e,0x7b,0xc5,0x6c,0x0f,0xb2,0x96,0x4f,0xf7,0x8e,
    0x89,0x5b,0x3e,0x36,0x39,0xfc,0x5a,0x3e,0xfe,0xb7,0xf2,0x31,0xe6,0x3b,0xf8,0xa1,
    0xd3,0xf6,0xc3,0xfb,0x49,0xa7,0xe5,0xe3,0x83,0x9d,0x2d,0xa0,0xed,0x9f,0x97,0xae,
    0xd2,0x89,0x6b,0xcb,0x7f,0x07,0x6a,0x1c,0xa0,0xdf,0xd1,0x9f,0x68,0xfb,0x60,0xf1,
    0x75,0x75,0x7c,0x3d,0x34,0xfe,0x30,0xde,0xbe,0x8c,0x5a,0xf2,0x1d,0x1c,0x17,0x39,
    0xef,0x9d,0x8c,0x3a,0xd1,0x46,0x0f,0xb5,0x69,0x39,0xf9,0xf0,0x98,0x74,0x9f,0x93,
    0x8f,0x94,0xcf,0x88,0x85,0xe5,0xf9,0x9e,0x31,0xf3,0xcd,0x91,0x6e,0xfc,0x1f,0x13,
    0x13,0xef,0xe4,0x6c,0xea,0x15,0x13,0xb7,0x62,0xb9,0xbb,0x77,0xcc,0xb6,0x40,0xb7,
    0xdc,0x7d,0x5c,0x5c,0xe4,0x6e,0xd0,0x7d,0xee,0x6e,0xb0,0x3d,0x6f,0x5c,0xe4,0xe3,
    0x7e,0x31,0xf7,0x7f,0x96,0x8f,0x4f,0x8e,0x89,0x59,0x3e,0x2e,0xbb,0x7c,0x0c,0xda,
    0x29,0x79,0x59,0xad,0x78,0xe0,0xda,0x72,0x43,0x7f,0xcd,0x79,0xbc,0xb7,0x9d,0xe2,
    0xc6,0xcd,0x2f,0x63,0xd2,0x9a,0xf7,0xc4,0xe2,0xfb,0xb4,0xd4,0x92,0xef,0x8c,0x98,
    0x34,0x1b,0x97,0x83,0xc4,0x87,0x77,0xa8,0xc6,0x33,0x38,0x26,0x6e,0xf7,0x54,0x43,
    0x62,0x62,0x27,0x97,0x8b,0x3c,0x38,0x34,0xa6,0xae,0x21,0xae,0xcd,0x73,0xe3,0x22,
    0xbf,0xf9,0xdc,0x7b,0x5e,0x4c,0x9a,0xf1,0x9d,0x1f,0x17,0xf9,0xd2,0xef,0x41,0x87,
    0xc7,0xa4,0xd9,0x5a,0x31,0x22,0x26,0xd6,0xcf,0xed,0x41,0x2f,0x88,0xa9,0x6f,0x84,
    0xf3,0xe1,0x42,0xa7,0xcf,0x74,0xfd,0x2a,0x26,0x6e,0x3e,0x8c,0x8a,0x89,0x9d,0xe4,
    0x7c,0x18,0x1d,0x53,0xdf,0xa8,0xb8,0x90,0xbb,0x24,0x66,0xee,0x34,0x5b,0x2f,0x8b,
    0x8b,0x7d,0xa1,0xbf,0x37,0xb8,0x3c,0x26,0xcd,0x6c,0x1d,0x17,0x13,0x9b,0xe6,0x6c,
    0x1d,0x1f,0x53,0xdf,0x38,0x97,0x67,0x26,0xb8,0x3c,0x63,0x6d,0x4c,0x8c,0x89,0x9f,
    0x59,0xd7,0xa7,0x57,0xc6,0xa4,0x19,0xdf,0x24,0xf1,0xa1,0xef,0xaf,0x77,0x7c,0x93,
    0x63,0xd2,0x8c,0xef,0x1a,0xf1,0xd9,0xd9,0x1c,0xe3,0x9b,0x12,0x93,0x66,0x7c,0xd7,
    0x89,0x0f,0x03,0xd9,0xb7,0x3b,0x2d,0x26,0xcd,0xf8,0xa6,0x8b,0x6f,0x56,0xdd,0x58,
    0x6a,0x8a,0x49,0xb3,0x18,0xdc,0x10,0x73,0x1c,0xfa,0x7b,0xef,0x1b,0x85,0x0d,0x75,
    0x71,0xb9,0x29,0x26,0xef,0x8d,0x4e,0x76,0x66,0xcc,0x78,0x79,0xd9,0x5b,0x85,0x79,
    0xd9,0xdb,0x62,0xf2,0xde,0xea,0x64,0x6f,0x8f,0x19,0x2b,0x2f,0x3b,0x5b,0x98,0x97,
    0xbd,0x33,0x26,0xef,0x6c,0x27,0xfb,0xfb,0x98,0x63,0x79,0x9a,0x93,0xbd,0x5b,0xd8,
    0x14,0x27,0x7b,0x4f,0x4c,0xde,0xbb,0x9d,0xec,0xbd,0x31,0x63,0xef,0x65,0xef,0x17,
    0xe6,0x65,0xe7,0xc5,0xe4,0xbd,0xdf,0xc9,0xce,0x8f,0xd9,0x1f,0x5e,0xf6,0x41,0x61,
    0x5e,0xf6,0xa1,0x98,0xbc,0x0f,0x3a,0xd9,0x05,0x31,0xc7,0xae,0xf7,0xf7,0x11,0x61,
    0xde,0xdf,0x47,0x63,0xf2,0x3e,0xe2,0x64,0xff,0x1c,0xb3,0x7f,0xbd,0xec,0xe3,0xc2,
    0xbc,0xec,0xc2,0x98,0xbc,0x8f,0x3b,0xd9,0x27,0x62,0xf6,0xb9,0x97,0x7d,0x52,0x98,
    0x97,0x7d,0x2a,0x26,0xef,0x93,0x2e,0xb7,0x2e,0x8e,0xd9,0xef,0x88,0xe3,0xa3,0x0e,
    0xff,0x5b,0xcc,0x3e,0x45,0x8c,0x16,0x2a,0x67,0x03,0x7f,0x3e,0x26,0x6d,0xb1,0xe3,
    0x7d,0x31,0x66,0x1f,0x22,0x26,0x4f,0x39,0xde,0x25,0x31,0x69,0xe0,0xb5,0x35,0xff,
    0x9f,0x31,0x9f,0x15,0x2d,0x75,0xef,0x3a,0x96,0xc6,0xc4,0x4d,0xdf,0xcb,0x31,0x31,
    0x2b,0xb6,0xae,0xbc,0x12,0xb3,0xfd,0x97,0x9d,0xbe,0x65,0xd2,0xd7,0xdf,0xe9,0x5b,
    0x1e,0x13,0x37,0x7d,0x2b,0x63,0x62,0x56,0x4c,0xdf,0xab,0x31,0x6d,0x5c,0xe9,0xd6,
    0x94,0x37,0x63,0xb6,0xf3,0xaa,0xc3,0xde,0x8e,0x89,0xe3,0x7d,0xf6,0x5f,0x84,0xad,
    0x8a,0x89,0x03,0x33,0xbe,0x77,0xe5,0xeb,0x2a,0xb7,0x1e,0xbd,0xef,0xd6,0xa3,0x77,
    0xeb,0xd6,0xa3,0xb2,0xd6,0xa3,0xd5,0xce,0xd6,0x35,0x31,0x9f,0x59,0x9c,0xa1,0x67,
    0x12,0x36,0xa7,0xff,0x1d,0x17,0xcf,0x8c,0xc0,0xb7,0x2e,0xe6,0x73,0x8d,0xc1,0x7a,
    0x6e,0x61,0xf8,0x57,0x31,0x79,0xad,0x98,0xaf,0x5f,0xc7,0xa4,0xad,0x73,0x7e,0xad,
    0x8f,0xd9,0xde,0xd7,0x1a,0x4b,0xc0,0xbe,0x8b,0x89,0x2f,0x77,0xbe,0xfe,0x20,0x0c,
    0xbe,0x2e,0x16,0x06,0xa3,0xc0,0xfb,0x43,0xdc,0xd2,0x17,0xfc,0xda,0x1e,0x61,0xb3,
    0x2a,0xfd,0xc7,0x3a,0x89,0x77,0xef,0xab,0xdd,0xfe,0xa1,0x5c,0x25,0x06,0x1a,0x74,
    0xad,0xd6,0x7e,0x12,0x6b,0xf0,0xbd,0x55,0xae,0xc3,0x8b,0xf5,0xac,0xd2,0xf0,0xfb,
    0x1c,0xbe,0xbc,0xd4,0x72,0x4d,0x6f,0x70,0xed,0x56,0xab,0xdc,0x07,0x60,0xbf,0x02,
    0x1b,0xbc,0x4d,0x1b,0x32,0xb6,0x0b,0x5a,0xd9,0xd1,0xa0,0x7f,0x4d,0xc6,0xbd,0x17,
    0x68,0xf7,0xd6,0xd1,0x3e,0xcc,0xd8,0x2e,0x68,0xf7,0x89,0xe6,0xef,0xf1,0x2a,0xae,
    0x8d,0xb4,0xca,0x7b,0x42,0xdc,0x23,0xc2,0x16,0x6f,0xdb,0x57,0x6a,0x1f,0x34,0xd8,
    0xd2,0xe0,0xda,0xf8,0x34,0xe3,0xbd,0x38,0x68,0x6b,0xea,0x68,0xef,0xaa,0x7d,0xd0,
    0x3e,0x14,0xcd,0x3f,0xc7,0x6b,0x74,0x6d,0x84,0x8a,0x2d,0x9e,0x4b,0xc2,0x16,0x6f,
    0xdb,0xba,0x8c,0xcf,0x02,0x41,0x83,0x2d,0x15,0xd7,0xc6,0x6a,0xed,0x3b,0x41,0xfb,
    0xb4,0x8e,0xb6,0x2a,0x63,0xcc,0x41,0x7b,0x57,0x34,0xec,0x8f,0x0e,0x70,0xfb,0x23,
    0xf0,0x84,0x79,0xfd,0x00,0xd9,0x84,0x6b,0xdb,0xb7,0xa6,0x09,0xc7,0x2f,0xe6,0xfd,
    0x5c,0x3d,0xb7,0xcb,0x12,0xe2,0xd3,0x74,0x66,0xae,0xf9,0x1e,0x28,0xe1,0xde,0x02,
    0x74,0xdb,0x2b,0x6e,0x96,0x70,0x9d,0x07,0xcd,0xd6,0xbf,0xcd,0x13,0xee,0x01,0x36,
    0x13,0xbf,0xad,0xe5,0xad,0x92,0x8d,0xef,0x19,0xda,0x24,0x1b,0xdf,0x33,0xb4,0x4d,
    0xc8,0x0b,0x9a,0xed,0xfd,0xb7,0x4c,0x88,0xfb,0x7b,0x86,0x76,0x09,0x71,0x93,0xeb,
    0x20,0x39,0x7f,0xcf,0xb0,0x4d,0x42,0xdc,0xdf,0x33,0x6c,0x9b,0x10,0x37,0x1f,0xb6,
    0x93,0xaf,0xed,0x14,0xbb,0x5d,0x5c,0xec,0x10,0xfb,0x4e,0x79,0x7d,0x17,0xc5,0x0e,
    0xd7,0x16,0x8f,0x9d,0x12,0xca,0x42,0x9f,0xf9,0xf3,0xe3,0x84,0x7a,0x80,0xd9,0xbd,
    0xc5,0x4f,0x12,0xe2,0x76,0x6f,0x61,0xba,0x76,0x71,0xfd,0x58,0xa9,0xb2,0x9f,0xd1,
    0x37,0xe0,0xef,0x24,0x5a,0xed,0x1e,0x3a,0x63,0x3b,0xa0,0xed,0x24,0x1a,0xee,0xdb,
    0x70,0x6e,0x05,0xe7,0xe5,0x0e,0xc9,0x3d,0x45,0xce,0xed,0x9c,0xf0,0x2c,0xcb,0xe6,
    0x6a,0xdf,0xf2,0xee,0x6e,0x09,0x69,0x66,0xf7,0x1e,0x09,0x31,0xe8,0xb5,0xfc,0xf4,
    0xb3,0x84,0xb8,0x15,0xcb,0x45,0x7b,0x25,0x1c,0x9b,0xa0,0x5b,0xee,0xdc,0x3b,0x29,
    0x72,0x27,0xe8,0x3e,0x77,0xda,0x18,0x3b,0xc0,0x8d,0xed,0xa0,0xca,0xb1,0x8f,0xb9,
    0xb0,0xb7,0x62,0x69,0x7e,0x37,0xc8,0x6f,0xd0,0x10,0x03,0xd0,0xee,0xb6,0x77,0x0c,
    0x09,0xdf,0x87,0x80,0x07,0xba,0x7b,0x48,0x37,0x7e,0x6d,0xac,0xde,0x5f,0x25,0xdf,
    0x2c,0x9d,0xe3,0x84,0x3f,0x38,0x3b,0xf4,0x07,0xe1,0x56,0xe6,0xca,0xcf,0xf9,0xa2,
    0xc1,0x66,0xd8,0xd5,0x7c,0xf6,0x21,0x21,0xad,0x54,0x2a,0xb0,0xc3,0x84,0x95,0x1d,
    0x76,0x84,0x30,0xbc,0xdf,0xba,0x47,0x67,0x34,0x7e,0x1b,0xf0,0xdd,0x04,0xc6,0x4e,
    0x93,0x7b,0x6f,0x04,0x7c,0x7a,0x5e,0x9a,0xf4,0xae,0x07,0xd7,0xf3,0xe4,0xdb,0x8c,
    0x80,0xb6,0xcf,0xd2,0x98,0x30,0x9e,0x26,0xf7,0x3e,0xe8,0x46,0xe9,0x85,0xbf,0x33,
    0xa4,0x0b,0x6d,0xcc,0x74,0x6d,0x80,0xe7,0xe6,0xbc,0xcc,0x94,0xfc,0xcd,0x41,0x71,
    0x0f,0x75,0x5b,0x40,0xbf,0xac,0x7e,0x47,0x40,0x9f,0xac,0x3e,0x27,0xa0,0x3f,0xf6,
    0xbe,0xe3,0xf7,0x01,0x65,0xc0,0x37,0x47,0x6d,0x5d,0x91,0xb4,0x7c,0x0f,0x76,0x16,
    0xfa,0x44,0xfd,0x80,0xeb,0xd3,0xcb,0x1c,0xa3,0x83,0x92,0xe2,0xbc,0xe4,0x34,0x7d,
    0x23,0x00,0x1a,0xf4,0x0e,0x71,0x34,0xb4,0x31,0x59,0x39,0x05,0xb4,0xb3,0x13,0xd2,
    0x71,0x36,0xcc,0xec,0x3a,0x37,0xa1,0x3e,0xb3,0xeb,0xbc,0x84,0x98,0x95,0xf1,0x92,
    0xfd,0xef,0x84,0xf2,0xe7,0xb9,0xb1,0x7d,0xbe,0xe6,0xd9,0x20,0xe7,0xe7,0xf0,0x84,
    0xb8,0xe9,0x1b,0x91,0x10,0xb3,0x72,0x95,0xf4,0x5d,0x90,0x50,0xe7,0x88,0xa4,0x78,
    0x87,0x33,0x32,0x21,0x6e,0xf5,0x0b,0x13,0xfa,0x60,0x7b,0xa9,0x51,0x09,0xb1,0x91,
    0xca,0xfb,0x57,0x28,0x36,0xa3,0x9d,0xcc,0x18,0xc9,0x58,0x3c,0x2e,0xd9,0x44,0x3c,
    0xcc,0xa7,0xb1,0x09,0xe9,0x38,0x5b,0x67,0xef,0x96,0x2e,0x4f,0x88,0xbf,0x9e,0x15,
    0x3a,0xc7,0x25,0xc4,0xcd,0x8e,0xf1,0x09,0xdb,0x19,0x57,0x67,0xc7,0x15,0x6e,0x1e,
    0x76,0xac,0xd2,0x5e,0xf4,0xdb,0x78,0xf5,0xa3,0x8d,0xeb,0x89,0x09,0xe9,0xfe,0xec,
    0xcf,0x55,0x09,0xf1,0x89,0xae,0x9f,0x27,0x39,0xdb,0x41,0x87,0xed,0x23,0x74,0xb6,
    0x73,0x72,0x42,0xba,0xe9,0x9c,0x22,0x9d,0x65,0xa7,0xf3,0x5a,0xe9,0x9b,0xe2,0x74,
    0x4e,0x75,0x3a,0xaf,0xad,0xd3,0x79,0x5d,0x42,0xba,0xe9,0x9c,0x2e,0x9d,0x0d,0x4e,
    0x67,0x93,0x74,0x4e,0x77,0x3a,0x7f,0xe7,0x74,0x36,0xd5,0xe9,0xbc,0x21,0x21,0xdd,
    0xe4,0x67,0xca,0x1e,0x6f,0xd3,0x2d,0x4e,0x7e,0x66,0x9d,0xfc,0xad,0x09,0xe9,0x26,
    0x3f,0x5b,0xb2,0xbe,0xfd,0x3b,0x9d,0xfc,0xec,0x3a,0xf9,0x39,0x09,0xe9,0x26,0x3f,
    0x57,0xb2,0x5e,0xfe,0x5e,0x27,0x3f,0xb7,0x4e,0xfe,0xbe,0x84,0xf4,0x21,0x1a,0x4f,
    0xf3,0x36,0x31,0x9e,0xce,0x12,0x6d,0xfe,0x26,0x68,0xf6,0x1e,0xf3,0x81,0x84,0xb2,
    0xe0,0xb9,0x40,0xdf,0x2f,0x3d,0x98,0x10,0xc7,0x18,0x7a,0x48,0x63,0xe8,0x21,0x8d,
    0x21,0xd0,0x3b,0x55,0xc9,0x83,0x71,0x35,0x27,0xbf,0x5e,0x29,0x1a,0xec,0xda,0xbe,
    0xca,0x73,0xcc,0xa0,0xbd,0x94,0x14,0xb4,0xda,0x1a,0xab,0x5c,0x07,0xda,0x6b,0xa2,
    0x3d,0xa8,0x5c,0xf8,0x70,0x42,0x3a,0xee,0x89,0xd6,0xe5,0x76,0xbc,0x2e,0xba,0xe5,
    0x1d,0xd0,0x1f,0xc1,0xf8,0x97,0x3d,0x8f,0x68,0x2e,0xc3,0x9e,0xc7,0x12,0x8e,0x3b,
    0x8c,0x13,0xf4,0x6b,0x53,0xae,0x13,0xb6,0x2c,0x4c,0x48,0x83,0xbd,0xc6,0xfb,0xa4,
    0xf8,0xd0,0x7f,0x73,0x1c,0xef,0xa2,0x84,0x34,0xcf,0xfb,0xb4,0xf4,0x81,0xef,0x3e,
    0xc7,0xfb,0x6c,0x42,0x9a,0xe7,0x7d,0x21,0x61,0x7b,0xd0,0xf3,0xac,0xe3,0x7d,0x31,
    0x21,0xed,0x85,0xda,0xda,0x19,0xd6,0xb0,0x97,0xb4,0x76,0x76,0x12,0xfd,0x31,0xc5,
    0xe0,0x9f,0x8a,0x19,0xe2,0x87,0xbc,0xbb,0xc2,0xf9,0x0f,0xda,0xd2,0xbc,0xac,0x90,
    0xff,0x4b,0x6b,0xe3,0x81,0x6d,0xbc,0x9c,0xf0,0xac,0x38,0x64,0xa7,0xe6,0x18,0xec,
    0x59,0xae,0x36,0x5f,0x56,0x3f,0x9a,0xdc,0x0a,0xd7,0x8f,0xe8,0xbb,0x17,0x14,0xd7,
    0xe5,0xd2,0x0f,0xde,0x95,0xe2,0x5d,0xe9,0xf6,0x34,0xaf,0xa9,0x7f,0xa6,0x95,0x5a,
    0x8e,0x0b,0xf4,0xc7,0x9f,0x64,0xff,0x9b,0x09,0xfb,0x7f,0x80,0xec,0xff,0xc2,0xd9,
    0x0f,0xda,0x5b,0x79,0x79,0x5b,0x72,0x6f,0xa9,0xad,0x2f,0x54,0x7f,0x5b,0xf3,0x1b,
    0xfe,0xac,0x52,0x6c,0x4b,0xa5,0x22,0x66,0xef,0x2a,0x66,0x8d,0xa2,0x1b,0xef,0xfb,
    0xe2,0x2d,0x3b,0xde,0x0f,0x1c,0xef,0xfb,0xb5,0xb8,0x73,0x6c,0x7e,0x28,0xdc,0xf4,
    0x7d,0xe0,0xf4,0x7c,0x2c,0x3d,0x0d,0x4e,0xcf,0x27,0x4e,0xcf,0xc7,0x4e,0xcf,0x6a,
    0xa7,0x07,0x3a,0x3f,0x71,0x7d,0xf1,0x59,0xc2,0xf3,0xf4,0xab,0x5d,0x5f,0xac,0x91,
    0xee,0xcf,0xea,0x7c,0xfe,0xc2,0xf5,0xc5,0x0e,0x55,0x9e,0xcf,0x47,0x5c,0xd6,0x28,
    0x4e,0x36,0x1f,0xff,0xa3,0xb5,0xc3,0xc6,0xd4,0xda,0x84,0x18,0x64,0x06,0x95,0x69,
    0xd3,0x57,0x6e,0x8e,0xaf,0x55,0xae,0x18,0x2a,0xda,0xfa,0x4d,0xd0,0x16,0xa8,0xcf,
    0xbe,0x4b,0x88,0x7d,0x95,0x14,0x67,0x10,0xf1,0x1d,0x26,0xbe,0x01,0xb0,0x77,0x08,
    0x1b,0x12,0xf2,0x01,0xc7,0x3d,0x02,0x72,0x4e,0xed,0x9d,0x8b,0xd3,0xbb,0xa1,0x4e,
    0x6f,0x43,0x4a,0xbd,0xeb,0x93,0x42,0x4f,0x63,0x4a,0xbc,0x5e,0x4f,0x90,0x16,0x7a,
    0xc0,0x03,0x3d,0xa7,0x96,0xb9,0x4e,0xc7,0xa2,0xc1,0x7f,0xb4,0x67,0x78,0xe6,0x70,
    0xc8,0x5b,0xac,0x5a,0xa5,0x94,0xf9,0xb5,0x62,0xdf,0x3a,0x25,0x86,0x6f,0x0c,0xaa,
    0x9a,0xab,0x6d,0xd2,0xe2,0xec,0x07,0xe8,0xe7,0xeb,0xcc,0x76,0xdb,0x94,0x34,0xbb,
    0x57,0x69,0x97,0x12,0xf3,0x67,0xa5,0xda,0xa7,0xc4,0x9b,0xdc,0x3d,0xcd,0xd6,0xe2,
    0xf3,0x67,0xa5,0x3a,0xa4,0xc4,0x47,0xba,0x77,0xe0,0xdb,0xa4,0x94,0xef,0xe0,0xda,
    0xe8,0x28,0xd9,0x06,0xc7,0xb7,0x5d,0x4a,0xde,0x8e,0xce,0xaf,0x9d,0x52,0xfa,0x6c,
    0x7e,0xed,0x9c,0x12,0xf3,0x7e,0xfd,0xc8,0xf9,0xb5,0xb3,0xf3,0xeb,0xc7,0x29,0x69,
    0xd6,0xe6,0x2e,0x29,0x31,0xef,0xd7,0xae,0x29,0x71,0xef,0x57,0x67,0xf1,0x79,0xbf,
    0x76,0x4b,0x89,0x7b,0xbf,0x76,0x4f,0x29,0xbf,0x9b,0x6b,0xa3,0x8b,0x64,0xbd,0x5f,
    0x7b,0xa6,0xe4,0x05,0xcd,0xee,0x3d,0x1f,0x0b,0xe8,0x2f,0x68,0xc8,0x19,0x0b,0xdd,
    0xbe,0x16,0xb4,0xc7,0xf3,0xb2,0x50,0xfb,0x5a,0x5c,0xdb,0xfa,0xf7,0x7f,0xda,0xd7,
    0x5a,0x7d,0x91,0xf6,0xb5,0x56,0x5f,0xec,0xf6,0xb5,0xb5,0x5c,0x1e,0x50,0x06,0x7c,
    0x8b,0x83,0xe2,0xde,0xe1,0x85,0x80,0xf7,0xd5,0xf6,0xbd,0xe3,0x44,0xc5,0xf7,0xe7,
    0x8a,0x6f,0xab,0xb4,0x98,0x77,0x07,0xa9,0xfe,0x73,0x87,0xf5,0x10,0x9f,0xc7,0x0e,
    0x4d,0xd9,0x1e,0xb0,0x89,0xc2,0x8e,0x48,0x89,0x1f,0xe4,0xb0,0xa3,0x52,0xca,0x1f,
    0x94,0x16,0xf9,0xe3,0xe8,0x94,0xbc,0xa0,0x99,0x2f,0xc7,0xa6,0xb4,0xf3,0xd7,0xe2,
    0xe9,0x95,0x92,0x0f,0xf8,0x15,0xc2,0x7a,0xa7,0xc4,0xf1,0x4d,0xd1,0x70,0xdd,0xf3,
    0xfd,0x22,0x25,0x8e,0x7b,0x36,0xd4,0xfb,0xa4,0xc5,0x3d,0x1b,0x68,0xb3,0xe4,0xbf,
    0xed,0x91,0x8f,0x4f,0xc9,0x73,0xb9,0xea,0x27,0xa4,0xc4,0xec,0x3e,0xfa,0xc4,0x94,
    0x18,0xe6,0xdd,0x03,0xea,0xbf,0x7e,0x29,0xf1,0x25,0xa5,0x62,0x9e,0x9f,0x9c,0x12,
    0xb7,0x77,0x8e,0x4f,0x4b,0xfe,0x54,0xf1,0x82,0x6e,0x6d,0xf6,0x97,0x6f,0xf6,0x5e,
    0xf2,0xf4,0x94,0x7c,0xc0,0x27,0x08,0x1b,0x98,0x12,0x47,0xbb,0xc8,0x9f,0x36,0x1e,
    0x16,0xea,0x3e,0x09,0x3c,0x3f,0xa9,0xb2,0x2d,0xe4,0x54,0xf0,0x63,0xac,0x98,0x8d,
    0x2f,0x07,0x1c,0x5f,0xdb,0x69,0x8c,0x2d,0x77,0x63,0x0c,0xb4,0x65,0x79,0x59,0x2e,
    0x9d,0xb8,0x36,0x7b,0x57,0x06,0xd4,0xdb,0xdf,0x9d,0x53,0x7b,0x3d,0x20,0x0e,0x5b,
    0xec,0x1e,0xf5,0x0d,0x8d,0xa1,0xd7,0x75,0xfe,0xfe,0x2d,0xe9,0x7a,0x2b,0x28,0x62,
    0xf2,0x40,0x95,0x7c,0x4b,0xa4,0x17,0x7c,0xd6,0xe6,0x72,0xe7,0xc7,0x31,0x55,0xb6,
    0x09,0xdf,0x20,0x03,0x1d,0xbf,0x57,0x3b,0xab,0x02,0xfa,0x72,0x99,0xe4,0xdf,0x93,
    0xfc,0x7b,0xae,0x9d,0x07,0xab,0xe4,0x33,0x7f,0x0d,0x7f,0x48,0xb8,0xcd,0xb5,0xe6,
    0xb3,0x95,0x01,0x65,0x86,0xf9,0xb3,0x95,0x01,0xf9,0x3f,0x57,0x3b,0x76,0x5f,0x39,
    0xd3,0xd9,0x79,0x94,0xe2,0x8d,0x7b,0x55,0xd8,0xfc,0x9e,0xa3,0xed,0xe3,0x68,0xd0,
    0xf5,0x9e,0xee,0x23,0xd7,0xd6,0x9d,0xa7,0xfc,0x12,0x32,0xd2,0xfd,0xa5,0x78,0xbe,
    0xa9,0xbb,0xaf,0x5d,0x8f,0x6f,0xc5,0xc4,0xb3,0x3e,0x28,0xd6,0x28,0xfc,0xcf,0x01,
    0xac,0x51,0xcd,0xe7,0x01,0x02,0x62,0xb0,0xf7,0x1b,0xf1,0x7f,0x5f,0x57,0xff,0x26,
    0x28,0xf6,0xa2,0x7b,0x55,0x29,0x03,0x9d,0x1b,0xd4,0xc6,0x60,0xed,0xbb,0x4b,0x61,
    0xb1,0x1e,0x81,0x0f,0xeb,0x91,0xe5,0xab,0x06,0x7d,0x0c,0xbc,0x41,0xf6,0x36,0x86,
    0x85,0xbd,0xa0,0x55,0xf2,0xd2,0xa8,0xef,0x2f,0x2a,0x61,0x31,0xce,0x23,0xc9,0x61,
    0xfd,0xc2,0x65,0xac,0x36,0x10,0xab,0x48,0xe7,0x55,0x4d,0x0e,0xbf,0x16,0xcb,0x13,
    0xaa,0xe4,0x81,0xed,0xb1,0xf4,0xa3,0xdd,0xcc,0xb7,0x9b,0xd3,0x53,0xfc,0x2f,0x05,
    0xc9,0xe3,0xda,0xc6,0xeb,0xe6,0x61,0xcb,0x67,0x0c,0xc6,0x93,0x85,0xc5,0x33,0x86,
    0x2d,0x42,0x3e,0x5f,0x41,0xbb,0xe0,0x4f,0x65,0x4f,0x6b,0xf1,0xe2,0xd7,0xc6,0xd1,
    0x1f,0xab,0xe4,0x87,0xed,0x47,0xe9,0x99,0x8c,0xf5,0xe1,0x5a,0x37,0x06,0xfa,0xc8,
    0x6e,0x8c,0x19,0xf8,0xd0,0xda,0xf9,0xd4,0xb3,0x4a,0x59,0xd0,0xfe,0x28,0x5a,0xf3,
    0xf9,0x07,0x7d,0xc3,0x83,0x6f,0x44,0x9a,0xd7,0xdc,0x90,0x32,0xa0,0x9d,0xa3,0x3d,
    0xc3,0x56,0xae,0x8f,0xda,0xeb,0x4c,0x32,0xe2,0xd2,0x31,0x6c,0xf9,0x7d,0xc4,0xb6,
    0x79,0x7d,0x7f,0xf9,0xb1,0xad,0xbe,0x2d,0xc2,0xd9,0xe8,0x27,0x33,0xda,0xb8,0x40,
    0x7b,0x3e,0xc3,0x17,0x65,0xd4,0x0d,0x7a,0xc5,0xad,0x85,0xff,0x9d,0x6e,0x7c,0x86,
    0x7d,0x54,0x4a,0xdc,0x17,0x3b,0x8f,0x3d,0x3a,0x25,0xdd,0x9f,0xc7,0xbe,0x38,0x25,
    0xee,0xcf,0x63,0x5f,0x9a,0x12,0xf7,0x6b,0xf1,0xd8,0x94,0xb8,0x3f,0x8f,0x7d,0xb9,
    0xf8,0xfc,0x5a,0x3c,0x2e,0x25,0xee,0xcf,0x63,0x8f,0x4f,0x29,0x3f,0xce,0xad,0xc5,
    0x13,0x24,0xeb,0xcf,0x63,0x4f,0x4c,0x89,0xfb,0xf3,0xd8,0x57,0xa6,0x94,0x9f,0xe8,
    0x64,0xaf,0x92,0xac,0x3f,0x8f,0x3d,0x29,0x25,0xee,0xcf,0x63,0x4f,0x4e,0x29,0x3f,
    0xc9,0xc9,0x0e,0x4f,0x37,0x3e,0xc3,0x7e,0x6d,0x4a,0xdc,0x17,0x8b,0xd9,0xd4,0x94,
    0x74,0x1f,0xb3,0xeb,0x53,0xe2,0x3e,0x66,0xd3,0x53,0xe2,0x3e,0x66,0x4d,0x29,0x71,
    0x1f,0xb3,0x1b,0xc4,0xe7,0x63,0x36,0x23,0x25,0xee,0x63,0x76,0x63,0x4a,0xf9,0x19,
    0xce,0xf6,0x9b,0x25,0xeb,0x63,0x36,0x33,0x25,0xee,0x63,0x76,0x4b,0x4a,0xf9,0x99,
    0x4e,0xf6,0x36,0xc9,0xfa,0x98,0xcd,0x4a,0x89,0xfb,0x98,0xdd,0x9e,0x52,0x1e,0x34,
    0x3b,0xc3,0x7e,0x41,0xca,0x58,0x82,0x86,0xe7,0xbb,0xf8,0xee,0x10,0x98,0xcd,0x8f,
    0x79,0x29,0xf7,0x29,0x47,0x04,0xc5,0xb3,0xeb,0x3f,0xa4,0xfc,0x9f,0x22,0xa0,0xe1,
    0xdd,0x1b,0xee,0x2b,0xe7,0xa7,0xfc,0x66,0xb1,0xbf,0xfb,0xb6,0xe8,0x81,0x94,0xb8,
    0x3d,0xa3,0x7f,0x30,0x25,0x36,0x40,0xdf,0xa2,0x5b,0x2e,0x7d,0x28,0x25,0xcd,0xe4,
    0x16,0xd4,0xc9,0x3d,0x9c,0x12,0xab,0x3f,0xbf,0xfa,0x48,0x4a,0x9a,0xc9,0xfd,0xa9,
    0x4e,0xee,0xcf,0x29,0xb1,0xfa,0xf3,0xac,0x8f,0xa5,0xa4,0xd9,0xfb,0xd1,0x85,0x29,
    0x7d,0x1a,0x59,0x2a,0xfc,0xf9,0x5f,0xf9,0xb3,0xd0,0xe9,0x7f,0x22,0x25,0x6e,0xe7,
    0x15,0x9e,0x94,0xdc,0x68,0x77,0x4e,0xe0,0xa9,0x94,0x7c,0xa0,0xf9,0x73,0x13,0x8b,
    0x52,0xd2,0x9a,0xcf,0x35,0xa6,0xfc,0x0e,0x7d,0x9e,0xb3,0xe3,0xe9,0x94,0xb8,0xb7,
    0xe3,0x19,0xd9,0xf1,0xb4,0xb3,0xe3,0xd9,0x94,0xb8,0xd9,0xf1,0x9c,0xe4,0x46,0xbb,
    0xf3,0x7a,0xcf,0xa7,0xe4,0x7b,0xce,0xed,0xa7,0x5e,0x48,0x89,0xfb,0xf7,0x12,0x7f,
    0x4f,0x89,0xa3,0xef,0xf1,0x0d,0xeb,0x9d,0xa5,0xe2,0xd9,0xfe,0x4b,0x29,0xbf,0x6b,
    0x45,0xbc,0x16,0xa5,0xc5,0xb3,0xfd,0x25,0x29,0x69,0xe6,0xcb,0xd2,0x94,0x7a,0xa6,
    0x69,0xef,0x05,0xec,0x5f,0x29,0xf9,0x96,0xba,0xb1,0xb4,0x3c,0x25,0x8e,0x7e,0xb3,
    0xfb,0xfc,0x15,0x29,0xfb,0x7f,0xb9,0xdb,0x37,0xbe,0xea,0xf6,0x8d,0x2b,0xd2,0xe2,
    0x39,0xbb,0xad,0x6d,0x5d,0x42,0xe6,0xeb,0x33,0xb5,0x7e,0xee,0x95,0x15,0xb9,0xf9,
    0x55,0xcd,0x35,0x5b,0x5b,0xf7,0xd9,0x04,0xcd,0xd6,0xd6,0xb5,0x29,0x65,0xc1,0x83,
    0x5c,0xfe,0x6d,0x5a,0xe4,0x72,0xd0,0xd6,0xe5,0x05,0x18,0x72,0xf9,0x3a,0xe7,0xef,
    0x81,0x92,0x81,0xac,0xed,0x99,0xbb,0x66,0xc4,0x8d,0xa7,0x7b,0xc6,0xf6,0x3c,0x4f,
    0x8f,0x8c,0xb8,0xed,0xbd,0x0f,0xc9,0x88,0x41,0xd6,0xf6,0xda,0x87,0x66,0xc4,0xf1,
    0x0d,0xbc,0xed,0xb5,0x0f,0xcb,0x88,0x63,0xaf,0x7d,0xbe,0x62,0x70,0x78,0x46,0xdc,
    0xf6,0xce,0x47,0x66,0xc4,0xac,0xaf,0x7b,0x66,0xc4,0xf0,0xed,0xbc,0x9d,0x67,0x3a,
    0x5a,0xdf,0x42,0x83,0x66,0xf7,0x23,0xc7,0x64,0xc4,0xed,0xbd,0x9b,0xc5,0xf8,0xd8,
    0x8c,0x34,0xdb,0x9b,0xf6,0xce,0x28,0x77,0xac,0xce,0xea,0x5a,0x5c,0xf0,0x6b,0xeb,
    0xec,0xaf,0xb4,0x0f,0xc3,0xba,0x07,0x7e,0xc4,0xcc,0xf6,0xc4,0xdf,0xa7,0xec,0xb7,
    0xa5,0x7a,0x56,0x13,0x64,0x45,0xac,0x41,0xdb,0x90,0x97,0xc6,0x8c,0x3a,0x37,0xa4,
    0xc5,0x59,0xc9,0xb2,0xfa,0xaf,0x4b,0x58,0xec,0xd9,0x1b,0x32,0xe2,0x93,0x5d,0xbe,
    0xab,0x64,0x6c,0xbf,0x41,0xf6,0x05,0xd2,0xd5,0x58,0x57,0xc7,0xaf,0xd9,0x3b,0xaa,
    0x4a,0xb9,0x0d,0xca,0x93,0xe0,0xb5,0x58,0xc5,0x59,0x4b,0x7b,0x5b,0x39,0x7b,0x41,
    0x4b,0xf2,0xb2,0x85,0x74,0x26,0x59,0x61,0x6f,0xd5,0xd9,0x6b,0xf7,0x13,0x9b,0x65,
    0xc4,0xbd,0xbd,0x9b,0xcb,0xde,0xcd,0x64,0x5f,0x2b,0xe9,0xda,0xa2,0xae,0xde,0xca,
    0xd9,0x7b,0x51,0x95,0x72,0x68,0x0f,0xf6,0x82,0xd7,0xf6,0x5d,0x6d,0xeb,0xec,0xed,
    0xe4,0xec,0x05,0x6d,0x4b,0xbc,0x53,0x94,0xce,0x2d,0xdd,0x38,0x69,0x2f,0x3b,0xfa,
    0x3b,0xdb,0xb6,0xca,0x88,0x8f,0x76,0x6b,0x47,0x87,0x8c,0xf1,0xda,0xca,0xc9,0x6e,
    0x2b,0x59,0xfc,0xff,0x05,0xcb,0x3b,0x1d,0x33,0xe2,0xfe,0x2c,0xfe,0xf6,0x19,0x6d,
    0xef,0x28,0xdf,0xcc,0x8e,0x4e,0xce,0xb7,0x4b,0xab,0xe4,0x81,0xbf,0xdb,0xcb,0x5e,
    0xa3,0x5d,0x52,0x65,0xdb,0xa0,0x75,0x10,0xcd,0xf6,0x65,0x3b,0xba,0xf9,0x7d,0x89,
    0xf6,0xce,0x46,0xdb,0xd9,0xd1,0x2e,0xad,0x16,0xe7,0x88,0x6b,0xef,0x4c,0x35,0x87,
    0x17,0x38,0x6c,0x17,0xcd,0xe9,0x05,0xa5,0xe2,0x3c,0xcd,0xae,0x19,0xf1,0x81,0xee,
    0xec,0xcc,0x4f,0x33,0xca,0xef,0xea,0xde,0x1f,0x75,0xce,0x88,0x37,0x3f,0xa3,0xc8,
    0x88,0xed,0x98,0x15,0x6b,0x6d,0x97,0x8c,0x38,0xec,0x3a,0x2e,0xd7,0x84,0xfd,0xc6,
    0x7e,0x21,0xf7,0x80,0xa0,0x35,0xea,0xff,0x4d,0x34,0xe8,0x7f,0x0c,0x20,0x56,0x1d,
    0xb5,0x97,0xdc,0xdf,0xed,0x25,0x97,0x68,0x2f,0x79,0xba,0x9e,0x59,0x1a,0xbe,0x54,
    0x7b,0xc9,0x25,0xfa,0xde,0xc8,0xcb,0x77,0xd4,0x7e,0x18,0x7c,0x77,0x54,0xd9,0x2e,
    0xe2,0x0f,0x99,0xfd,0xdd,0xfe,0xfd,0x20,0xe5,0x56,0x3b,0x53,0xda,0xdd,0xed,0x6f,
    0x41,0xeb,0x96,0x97,0xee,0xd2,0xd9,0xcd,0x7d,0xc3,0xde,0x23,0xe4,0xb7,0xc5,0xb3,
    0xdc,0xfa,0x7f,0x70,0x48,0xfc,0x2a,0xfb,0x0e,0x2b,0x24,0xf6,0x8e,0x5b,0x7f,0x0e,
    0x0d,0x89,0x9b,0x9e,0xc3,0xa4,0x67,0x9a,0xd3,0x73,0x78,0x48,0xdc,0xf4,0x1c,0x11,
    0x12,0xf3,0x7a,0x8e,0x0c,0x89,0xdb,0xb7,0xee,0x3d,0x43,0xea,0x3e,0x52,0x79,0x03,
    0xd8,0xd1,0x21,0xbf,0xc1,0xee,0xa9,0xff,0x9b,0x80,0xff,0xa3,0xd1,0x5b,0xff,0x43,
    0x63,0x10,0xfe,0x47,0x5d,0x48,0x9e,0x3b,0x74,0x9f,0x61,0x7e,0x76,0x0f,0x5b,0x7e,
    0xe7,0x8e,0xdf,0xef,0xf3,0x08,0x1f,0x90,0x97,0xff,0x07,0x78,0xf5,0xe8,0xd4,0x30,
    0x50,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(alphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     uvec3 quant = uvec3(round(vec3(color)* vec3(31.0 / 255.0, 63.0 / 255.0, 31.0 / 255.0)));
//     return(quant . r << 11)|(quant . g << 5)| quant . b;
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(alphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = alphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = alphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//     if(alphaBits == 1){
//         int active_lane_index = subgroupClusteredMax(controlFlag ? int(gl_SubgroupInvocationID): - 1, 16);
//         if(active_lane_index != - 1){
//             color565 = subgroupShuffle(color565, active_lane_index);
//         }
//         if(punchthrough && result . a == 0){
//             indices = 3;
//         }
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(alphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
