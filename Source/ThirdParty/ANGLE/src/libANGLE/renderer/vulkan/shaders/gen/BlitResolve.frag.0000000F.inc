// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000F.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000F[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5d,0x4f,0x13,0x41,
    0x14,0x86,0x67,0x77,0xe9,0x6e,0xad,0xb4,0x85,0xb6,0x50,0x1b,0x8b,0x54,0xda,0x44,
    0x02,0xb8,0x25,0x6a,0x91,0x56,0x0b,0xd4,0x80,0x22,0x94,0xf8,0x81,0xe8,0xa5,0x31,
    0xf1,0xc6,0x0b,0xb9,0xd1,0x6b,0x2f,0xfc,0x3b,0xfe,0x3e,0xe3,0x47,0x62,0xe2,0x39,
    0xd3,0x67,0xcc,0x89,0x9b,0x4c,0x67,0xe6,0x3d,0xef,0xf9,0x78,0x67,0xce,0x34,0x89,
    0xbb,0x99,0x73,0x91,0x2b,0xb9,0xa2,0x7b,0xe3,0x66,0xdf,0xa2,0x8b,0x05,0x71,0xee,
    0xaa,0x4b,0xfd,0xfc,0x64,0x7a,0x3e,0xcd,0x3f,0x7d,0x7e,0x9f,0xdf,0x1b,0x6c,0xab,
    0xbd,0xe2,0x12,0xcf,0x53,0x5b,0xd5,0x65,0x6e,0x4e,0x66,0x1d,0x1f,0xdf,0x7d,0xb8,
    0x54,0xbc,0x2c,0x63,0x4f,0xc6,0x82,0xf0,0x14,0xcf,0xcc,0x7a,0x5e,0xe3,0xc9,0xaa,
    0xec,0xe3,0xab,0xbf,0x73,0xc7,0xae,0xe0,0xea,0xe4,0xee,0x32,0x07,0x2c,0x02,0x2b,
    0x1a,0x2c,0x06,0x5b,0x30,0x58,0x02,0x76,0xcd,0x60,0x73,0x60,0x6d,0x83,0x15,0xc0,
    0x3a,0x06,0x4b,0xc1,0x7a,0x06,0xcb,0xc0,0xd6,0x0d,0x56,0x04,0xdb,0x32,0xd8,0x15,
    0xb0,0x6d,0xaf,0x2b,0xf9,0x57,0x9f,0x6a,0xdc,0x43,0xe3,0x32,0xfb,0x89,0xcc,0x6b,
    0xe8,0x0b,0xfb,0x9b,0xec,0xeb,0xe2,0x15,0xfb,0x7d,0xe2,0xb5,0xe8,0x7a,0x49,0x38,
    0x29,0xb5,0xea,0x39,0x34,0x65,0x9f,0x51,0x6f,0xec,0xe3,0x26,0x72,0x6f,0x33,0xbb,
    0xda,0x34,0x57,0x09,0xdd,0x1d,0xf9,0x9d,0xc7,0x4f,0xf1,0x07,0xec,0xcb,0x26,0x56,
    0x05,0x7e,0xc8,0x55,0x23,0x96,0x7e,0x37,0x84,0x1d,0xce,0xa1,0xc2,0x48,0x19,0x25,
    0xe6,0x9a,0x19,0x9a,0xaf,0xc1,0x79,0xd4,0xc9,0xd7,0xf0,0x71,0x67,0xd8,0x26,0x5a,
    0x96,0x89,0xaf,0xfc,0x26,0xb6,0xcc,0xd8,0xdb,0xec,0xd5,0xbe,0x82,0x5d,0xe3,0x37,
    0xa4,0xca,0x0e,0xbc,0x9a,0x39,0xb7,0xe0,0xb7,0xc1,0xfd,0x84,0xfd,0x00,0x5f,0x8d,
    0x33,0xa6,0x3f,0x4a,0xd4,0x35,0xa6,0x3f,0x15,0x6b,0x09,0x6b,0x1f,0x5b,0x44,0xcc,
    0xc8,0x8c,0x50,0xeb,0x01,0xeb,0x7d,0x62,0xe8,0x7e,0xf2,0x5f,0x0d,0x87,0xc4,0x54,
    0xfe,0x11,0xf9,0x53,0xce,0xfa,0x98,0xb5,0xda,0x77,0xa4,0x77,0x62,0xee,0xc9,0x81,
    0xfd,0x14,0x44,0x7b,0x73,0xcc,0x3d,0x56,0xb9,0xab,0x67,0x72,0x1a,0x15,0x7a,0xbd,
    0xca,0x08,0x35,0x5e,0xd2,0x0f,0x8b,0xd8,0x27,0x12,0xa1,0xc9,0x1b,0x58,0xe2,0xac,
    0xc7,0x70,0x5a,0xe0,0x5f,0x85,0xa3,0xfb,0xeb,0xf8,0xb5,0xf0,0x5b,0xf1,0x77,0x3e,
    0xf3,0x6b,0xe3,0xa7,0xe7,0xbc,0x0a,0xfe,0x4d,0x38,0x1d,0xfa,0x77,0x95,0xf3,0xff,
    0x21,0x95,0xf7,0xa8,0xe7,0xb7,0xf0,0xd7,0xcc,0x3b,0x52,0x3d,0xba,0x7e,0x21,0x7e,
    0xaa,0xfb,0x16,0x39,0xf5,0xfb,0xc2,0x79,0xad,0x83,0xbf,0x94,0x9d,0xd6,0xf4,0x1c,
    0x2c,0xf0,0x7e,0x49,0x8c,0x10,0x4b,0xe7,0xef,0xc2,0x52,0xde,0x2b,0x38,0x05,0x7c,
    0xba,0x46,0xc3,0x26,0x1a,0x36,0x8c,0x86,0x2d,0xf0,0xa0,0xe1,0x36,0x58,0xd0,0xd0,
    0x37,0x1a,0xd4,0x96,0xcb,0xe8,0x93,0x37,0x37,0x1a,0xee,0x90,0x3b,0x32,0x1a,0xee,
    0x82,0x07,0x0d,0xe7,0x60,0x81,0xa7,0x1a,0x42,0xac,0xbe,0xd1,0x70,0x01,0xa7,0x87,
    0x4f,0x6e,0x34,0xec,0xa0,0x61,0x60,0x34,0xdc,0x07,0x0f,0x1a,0x76,0xc1,0x82,0x86,
    0x91,0xd1,0xa0,0xb6,0xa1,0x8c,0x11,0x79,0x87,0xf4,0x91,0xe6,0x7d,0x48,0xee,0x0b,
    0xd3,0xdf,0x5a,0x63,0xe0,0x8e,0x4c,0x8d,0xaf,0xe1,0xf5,0xf1,0x1b,0x52,0x8f,0xbe,
    0x81,0x47,0xf4,0xbf,0xd6,0xac,0xbd,0xfe,0x98,0x9a,0x0f,0xe1,0xa4,0xfe,0x3f,0x6e,
    0x86,0x87,0xf3,0x7b,0x4a,0x4c,0x67,0xb0,0x13,0xb0,0xc8,0xdf,0x65,0xea,0xdf,0xc9,
    0x29,0xdc,0x13,0x62,0xbc,0x95,0x6a,0xf4,0x4d,0x4c,0xc9,0xab,0xf6,0x03,0xfa,0x5b,
    0xe3,0xe8,0xdb,0x3d,0xc3,0xee,0xfc,0xdb,0x4e,0xfc,0xfb,0x56,0xec,0x8f,0x44,0xde,
    0x95,0xf1,0x17,0xd3,0x48,0xc0,0x0a,0xe8,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
// }
