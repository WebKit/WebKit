// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000F.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000F[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x5b,0x4f,0x53,0x51,
    0x10,0x85,0x77,0x7b,0xe8,0x05,0xb5,0xd0,0x46,0xdb,0x8a,0x31,0x52,0xad,0x0f,0x26,
    0x0a,0xe1,0x41,0x4d,0x13,0xa3,0xd1,0x07,0x2a,0x98,0xaa,0x50,0xf4,0x01,0x95,0x20,
    0xa2,0xa6,0x28,0xd6,0x54,0x68,0xec,0x83,0x51,0xc1,0x9f,0xe3,0xef,0x33,0x5e,0x12,
    0x13,0x67,0x9d,0x7e,0x9b,0x4c,0x3c,0xc9,0x9c,0x7d,0x66,0xcd,0x75,0xcd,0x9e,0x93,
    0x64,0x9b,0x85,0x10,0x32,0xe1,0x58,0x28,0x86,0x6f,0x61,0xfc,0x54,0x42,0xd6,0x90,
    0x10,0x8e,0x87,0x7c,0x7a,0xde,0xed,0xac,0x75,0xe6,0xf7,0xf6,0x5f,0xce,0x5f,0xbd,
    0xb6,0x20,0xfb,0x54,0x48,0x52,0x3f,0xd9,0xa6,0x43,0x21,0x4c,0xd8,0x29,0x79,0xb7,
    0xb5,0xd3,0x17,0x5e,0x36,0x69,0xa7,0x67,0x92,0xe2,0x05,0xf7,0x7d,0x42,0xf9,0xec,
    0xab,0x9c,0xe6,0x57,0x7c,0x08,0x4b,0x21,0x17,0x6a,0xd4,0x6e,0x72,0x46,0x2c,0x03,
    0x56,0x74,0x58,0x16,0xac,0xec,0xb0,0x04,0xec,0xb4,0xc3,0x26,0xc0,0xce,0x3a,0x2c,
    0x07,0xd6,0x70,0x58,0x1e,0xec,0xa2,0xc3,0x0a,0x60,0x97,0x1c,0x56,0x04,0xbb,0xe2,
    0xb0,0x49,0xb0,0x85,0x94,0x57,0x72,0xd4,0x9f,0x38,0xb6,0xe1,0x58,0x43,0x5f,0xb6,
    0xf3,0x02,0xfc,0xa2,0x7e,0x1e,0xfd,0xa4,0x45,0x65,0x53,0x3d,0x49,0xb9,0xe8,0xbb,
    0x6a,0x3e,0x79,0x7a,0xd5,0x1c,0xea,0xa6,0x17,0xe8,0x37,0x9b,0xe6,0x4d,0x42,0x09,
    0xbb,0x6c,0x53,0x76,0x96,0xe0,0xdd,0xb0,0xf7,0x34,0x71,0xc2,0x6f,0xa0,0x97,0x5d,
    0xae,0x0a,0xfe,0xb1,0x56,0x95,0x5c,0x7a,0xce,0xd9,0x4d,0xc5,0x39,0x54,0x90,0x3c,
    0x52,0xe2,0xac,0x3a,0x51,0xbd,0x3a,0xf3,0xa8,0x51,0xaf,0xce,0x7d,0x08,0xbb,0x0c,
    0x97,0x19,0xf2,0xcb,0xff,0x0c,0xb6,0x82,0xb3,0xcf,0xa2,0xcb,0xde,0xc0,0xae,0xfc,
    0xa7,0xac,0xcb,0x26,0x7e,0x55,0xee,0x2a,0xb8,0xb8,0x39,0xee,0x27,0xea,0x2d,0x62,
    0x95,0x67,0x91,0xfd,0x28,0xd1,0xd7,0x22,0xfb,0x99,0xa4,0xfd,0x4c,0xda,0x5d,0x8c,
    0x6d,0x19,0x72,0x66,0x9c,0xc4,0x5e,0x97,0x8e,0xee,0x6d,0x9c,0x43,0xfa,0xf2,0x7f,
    0x3d,0x74,0xc8,0x29,0xff,0xfb,0xd4,0xcf,0x33,0xeb,0x15,0xbe,0x65,0xbf,0x6e,0xbb,
    0x93,0xe5,0x9e,0x02,0xd8,0x2f,0x43,0xb4,0x9b,0x37,0xb9,0xc7,0x75,0xee,0xea,0xa1,
    0x4d,0x43,0xb3,0x7f,0x02,0xb6,0xee,0x7a,0xec,0xb3,0x0f,0x4f,0xb1,0xdf,0xb1,0x0c,
    0x9a,0xe9,0x33,0xe6,0x3e,0x43,0x3e,0xf9,0x6c,0x80,0x1f,0x9a,0x8f,0xf4,0x4d,0xe2,
    0x36,0x88,0xd3,0xac,0x9f,0x13,0x37,0x4b,0x9c,0xe6,0xbc,0x05,0xfe,0xdd,0x7c,0x34,
    0xff,0x17,0x60,0x9a,0xff,0x4f,0xeb,0xbc,0x47,0x3f,0x7f,0xcc,0x5f,0xb6,0x6d,0x93,
    0x1e,0x7c,0xf4,0xbd,0x6a,0x71,0xe2,0xfd,0x8a,0x9a,0x7a,0x3e,0x33,0xaf,0xd7,0xe0,
    0x5d,0xd3,0xd4,0xd3,0x27,0xb0,0xe8,0xf7,0xdb,0x72,0xc4,0x5c,0x3a,0x7f,0x98,0x97,
    0xfc,0xbe,0xe2,0x93,0x23,0x66,0xdb,0x71,0xd8,0x81,0xc3,0x9c,0xe3,0xf0,0x06,0x3c,
    0x72,0x78,0x0b,0x16,0x39,0x0c,0x1c,0x07,0xd9,0x76,0x4d,0x06,0xd4,0xdd,0x75,0x1c,
    0xfa,0xd4,0xce,0x38,0x0e,0xef,0xc1,0x23,0x87,0x2f,0x60,0xd1,0x4f,0x1c,0x62,0xae,
    0x81,0xe3,0x70,0x80,0x4f,0x8f,0x98,0x5d,0xc7,0xe1,0x03,0x1c,0x5a,0x8e,0xc3,0x1e,
    0x78,0xe4,0xb0,0x0f,0x16,0x39,0x8c,0x1c,0x07,0xd9,0x86,0x26,0x23,0xea,0x0e,0xd9,
    0x23,0xd5,0xfd,0x48,0xed,0x03,0xb7,0xdf,0xea,0x31,0xfa,0x8e,0x5c,0x8f,0x87,0xf8,
    0x0d,0x88,0x1b,0xd2,0x8f,0xfe,0x81,0x7b,0xec,0xbf,0x7a,0xd6,0xae,0x3f,0xa0,0xe7,
    0x0e,0x3e,0xf9,0xb4,0xe6,0x18,0x8f,0xf3,0x5b,0x25,0x67,0x70,0x58,0x17,0x4c,0xbd,
    0xac,0x18,0xa2,0xff,0x64,0x0d,0xdf,0x2e,0x39,0x36,0xad,0x1b,0xfd,0x13,0x8f,0xa8,
    0x2b,0xfb,0x6d,0xf6,0x5b,0x79,0xf4,0xef,0x3e,0xc6,0xae,0xe7,0x96,0xcd,0xa3,0x0d,
    0xf6,0xd7,0x32,0xb7,0x4c,0xfe,0x01,0x76,0x5f,0xe7,0xdd,0xe8,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
// }
