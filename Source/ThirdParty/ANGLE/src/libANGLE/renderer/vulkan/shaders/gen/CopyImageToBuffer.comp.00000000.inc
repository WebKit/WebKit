// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/CopyImageToBuffer.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kCopyImageToBuffer_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x9d,0x55,
    0x10,0x86,0xcf,0x77,0xef,0xcd,0x4d,0xd2,0x86,0x36,0xa2,0xbd,0x9a,0xc6,0xa6,0x35,
    0x81,0x66,0x91,0x10,0xba,0xb8,0x2d,0x42,0xad,0xad,0x15,0x62,0x17,0x81,0xfe,0xed,
    0xda,0x45,0x50,0xdc,0x58,0x48,0x29,0x54,0xb2,0x0a,0x24,0x04,0x57,0x89,0x91,0x12,
    0xff,0xb3,0x6f,0x12,0x28,0x74,0xa3,0xa6,0x12,0x43,0x2d,0xfd,0xdd,0x54,0x4b,0xc5,
    0x2c,0xd4,0x40,0x11,0x2b,0x56,0x8c,0xa0,0xad,0xa9,0x49,0xa4,0xea,0xbc,0xe7,0x7b,
    0x4e,0x18,0x1a,0x38,0xf9,0xce,0xbc,0x33,0xf3,0xce,0x9c,0xf7,0xce,0x39,0xc5,0x42,
    0x5b,0x6d,0x08,0x59,0x58,0x17,0xea,0xc2,0xba,0x2c,0xc4,0xbf,0x27,0x42,0x21,0x68,
    0xbb,0x3e,0x94,0xe3,0xf7,0x95,0x9e,0xa3,0x3d,0x5d,0xa7,0xdf,0x7c,0xbd,0xab,0xba,
    0x73,0x87,0xfc,0x1b,0x42,0x31,0xc6,0xc9,0xb7,0xd1,0x62,0x6a,0xec,0x5b,0xb2,0xd5,
    0xf7,0xea,0x1b,0x27,0x85,0x37,0xdb,0x6a,0x34,0xbc,0x14,0xb9,0x82,0x31,0xe7,0x2b,
    0x72,0x19,0xda,0x1c,0xb9,0x43,0x78,0xd6,0xd6,0x01,0xcb,0xde,0x9a,0x97,0x0d,0x6d,
    0x7c,0x13,0x96,0x81,0xd5,0x39,0xac,0x00,0xd6,0xe0,0xb0,0x22,0x58,0xa3,0xc3,0x4a,
    0x60,0xcf,0x38,0xac,0x06,0xcc,0xd7,0x2d,0x83,0x6d,0x8b,0xbd,0x15,0xd7,0x6a,0xa8,
    0xcf,0x3d,0xf6,0x6d,0xa5,0xa7,0x64,0x3f,0xe7,0xec,0x11,0xf2,0x4b,0xf0,0x8d,0x3e,
    0x76,0x0e,0xf1,0x8d,0xd2,0x9f,0xe2,0xc7,0x1e,0xe3,0x1b,0x83,0x2f,0xe9,0x32,0x89,
    0x2e,0x4d,0xb6,0x9e,0xb4,0x2e,0x0a,0xd1,0x5f,0x8c,0xf9,0xda,0x57,0x6c,0x57,0xa6,
    0xd7,0xa7,0x2d,0xbe,0xd6,0xd5,0xdf,0x64,0xff,0x1b,0xf0,0x05,0xfc,0x15,0x74,0x2a,
    0x60,0x37,0x61,0x17,0x63,0x5c,0x29,0x6c,0xa6,0xb6,0xf0,0xdd,0xd8,0xcd,0x60,0xe2,
    0x6b,0x81,0x4f,0x76,0x4b,0xa8,0x8f,0xda,0x54,0xe2,0x3e,0xe7,0x49,0xfc,0x69,0x89,
    0x53,0xf1,0xf5,0xb6,0xb6,0xc2,0xb9,0x8d,0x33,0x0a,0xeb,0x80,0xb3,0x95,0x9e,0x14,
    0xdf,0x86,0x4f,0xf9,0x4f,0x19,0xba,0x9d,0x38,0xd9,0xed,0x9c,0x25,0xe5,0x75,0xd0,
    0x7b,0xf2,0x77,0xd2,0x5b,0xf2,0x57,0x89,0x17,0xef,0x4e,0x78,0x2b,0xf1,0x7c,0xf5,
    0xd6,0x4b,0xae,0x15,0x23,0xbe,0xf6,0x97,0xb9,0x9c,0x17,0xd8,0xef,0xa6,0x77,0xd9,
    0x7b,0x9c,0x9e,0xfb,0x38,0x7b,0xc1,0xd5,0xec,0x86,0x57,0xfe,0x1e,0xfc,0x25,0xfc,
    0xc2,0x0f,0xc5,0xec,0x7f,0xf7,0xcb,0x7f,0x94,0x73,0x7a,0xff,0x31,0x77,0x46,0xd9,
    0xc7,0xa3,0x35,0xb4,0x37,0xd9,0xbd,0xd1,0x1e,0x7c,0x39,0x9d,0xf9,0x35,0x5b,0xff,
    0xb9,0xfa,0x27,0xb8,0x1f,0xc9,0x3e,0xc5,0x3d,0x48,0x76,0x3f,0x77,0x20,0xd9,0x03,
    0xae,0xbe,0xec,0x41,0xee,0x85,0xce,0x3f,0x8c,0x1e,0xaa,0xb3,0xc5,0x94,0x1e,0x61,
    0xdf,0xc2,0x1c,0x8f,0x10,0xf7,0x36,0x1a,0x8c,0xa2,0x93,0xec,0x31,0xf7,0x9b,0x9e,
    0x61,0xdf,0x80,0x2e,0x1f,0xd8,0x77,0xbb,0xd3,0x4d,0xf8,0x59,0xfa,0xee,0xb4,0x53,
    0x6a,0xfe,0x26,0xc1,0xce,0xf2,0xbb,0x76,0xda,0x74,0x6b,0xbe,0x6b,0xb2,0x5c,0x23,
    0xbf,0x92,0xaf,0x9c,0xe5,0x7a,0xf9,0x25,0x9f,0x74,0xae,0xcd,0x72,0xad,0xfc,0xda,
    0x65,0x27,0x2d,0x70,0xfe,0xc0,0x2c,0x2d,0x1b,0xa2,0xf3,0xff,0x6d,0xd6,0x14,0xf8,
    0x3f,0xb6,0xd7,0xec,0x4d,0xe3,0x9f,0x8e,0x73,0x90,0xdf,0x9f,0x71,0xee,0xc8,0x41,
    0xab,0xa3,0xd9,0x7a,0x17,0x6c,0xdc,0xcd,0xd3,0x4b,0xc6,0xa8,0xf9,0x7b,0x8f,0xd9,
    0xef,0x20,0x5f,0xf1,0xef,0x83,0x9f,0xb7,0x18,0xe9,0xf2,0x21,0x1c,0xc2,0x27,0x2c,
    0x46,0x3a,0x7d,0x04,0xae,0x9e,0x26,0xe0,0x5d,0x35,0x9f,0xf0,0x8f,0x63,0x5c,0xde,
    0x97,0xf6,0x2b,0xf6,0x9d,0xc2,0x9e,0xa0,0xb6,0xee,0xd4,0x27,0xd4,0x6e,0xa5,0xb6,
    0x34,0xff,0x14,0xfc,0x9c,0xc5,0xa8,0xce,0x67,0x60,0xed,0xd4,0xba,0xe8,0x6a,0xc9,
    0x37,0x63,0xeb,0x22,0xdc,0x33,0x91,0xbb,0x1c,0xb9,0x2f,0xb8,0x73,0x75,0x3a,0xfe,
    0xcf,0xf1,0x1d,0x36,0x7e,0xd9,0xb3,0xe8,0x22,0x4d,0x86,0xc1,0xbe,0x20,0x6e,0xd6,
    0x61,0x73,0xe0,0xe2,0x3a,0x62,0x35,0x2a,0x08,0x39,0x87,0x36,0x19,0xe7,0x4c,0xbd,
    0xe8,0xbb,0x84,0xfe,0x75,0x59,0x1e,0x33,0x41,0xce,0x8c,0xd3,0xff,0x4b,0xfa,0xac,
    0x3a,0xfd,0x2f,0x81,0x0f,0x59,0x8c,0xec,0xcb,0x70,0x5c,0x22,0x46,0x77,0xff,0x0a,
    0xf7,0x7e,0x80,0x3b,0x7f,0x8d,0xb8,0x5e,0xe6,0xee,0x3a,0x31,0xd7,0x98,0xe9,0xaa,
    0xd3,0xfd,0x26,0x35,0xbb,0x9d,0x2e,0x5f,0x81,0x27,0xdd,0xbf,0x06,0x4b,0xba,0x2f,
    0x38,0xdd,0xe5,0xbb,0x65,0x6b,0x9e,0xb3,0x6a,0xff,0x8e,0xe5,0xa9,0xee,0x6d,0x6a,
    0xeb,0x4d,0x39,0xc9,0x7b,0xf3,0x0d,0xf8,0x00,0xef,0xcb,0xb7,0x60,0xd2,0x6b,0x01,
    0x8e,0xf9,0x78,0x17,0xeb,0x22,0xc7,0x77,0x6b,0x6f,0x66,0xce,0xa5,0xfb,0xa5,0x7b,
    0x94,0x6a,0x7c,0x4f,0x8c,0xde,0x9d,0x3e,0x38,0x7f,0x00,0xf7,0x9c,0x0b,0xfc,0x06,
    0xf2,0xd7,0x67,0x79,0xdd,0x5b,0xc4,0xaa,0xde,0x0d,0xe3,0x93,0xef,0x0e,0x7e,0xdd,
    0xc7,0x34,0x17,0x3f,0x82,0x07,0x37,0x2b,0x3f,0x81,0xa9,0xb7,0xab,0x60,0x77,0xc1,
    0x4f,0x44,0xad,0x73,0xec,0x67,0xf2,0xef,0xba,0xdc,0x5f,0xc8,0x2d,0xb8,0xdc,0x7b,
    0xe0,0xa7,0x5c,0xee,0xaf,0xe4,0xdf,0x73,0xb9,0xbf,0x91,0x5b,0x74,0xb9,0x8b,0xe0,
    0xfd,0x2e,0xf7,0x77,0xf2,0x17,0xdd,0x6f,0xfd,0x07,0xbf,0xf5,0x80,0xfb,0xad,0xff,
    0x04,0x4f,0x31,0xf7,0x89,0x19,0x74,0x31,0x0f,0xc0,0x15,0xa3,0x37,0xf7,0x2f,0xde,
    0x14,0x7f,0x97,0x96,0xc0,0xdf,0xa2,0xfe,0x43,0xf2,0x96,0x98,0xdd,0x86,0x38,0x3b,
    0x79,0xbd,0x87,0x8e,0x6b,0x19,0xae,0x76,0xc7,0xb5,0x02,0x9e,0xf2,0x56,0xc9,0x5d,
    0xe1,0x4e,0xeb,0xbd,0x7e,0xc4,0x1b,0x5e,0xc5,0xff,0xa2,0x29,0xf2,0x88,0x73,0xfb,
    0x37,0x66,0x2a,0xc6,0x66,0xe1,0x79,0x5b,0xff,0x03,0xb9,0x48,0x46,0x7a,0x3c,0x0a,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)uniform texture2D src;
//
// layout(set = 0, binding = 1)buffer dst
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uvec2 srcOffset;
//     int srcDepth;
//
//     bool reverseRowOrder;
//
//     uvec2 size;
//
//     uint outputOffset;
//
//     uint outputPitch;
//
//     bool isDstSnorm;
// } params;
//
//       vec4 getSourceValue()
// {
//     uvec2 coord = gl_GlobalInvocationID . xy;
//     if(params . reverseRowOrder)
//     {
//         coord . y = params . size . y - coord . y - 1;
//     }
//     coord += params . srcOffset;
//
//           vec4 srcValue = texelFetch(src, ivec2(coord), 0);
//
//     return srcValue;
// }
//
// uint convertToDestValue(vec4 srcValue)
// {
//
//     uvec4 normalized;
//     if(params . isDstSnorm)
//     {
//         ivec4 scaled = ivec4(srcValue * 127.0);
//         normalized = uvec4(scaled);
//     }
//     else
//     {
//         normalized = uvec4(clamp(srcValue, 0.0, 1.0)* 255.0);
//     }
//
//     normalized &= 0xFF;
//
//     return normalized . r | normalized . g << 8 | normalized . b << 16 | normalized . a << 24;
//
// }
//
// void outputDestValue(uint destValue)
// {
//     uint offset = params . outputOffset + params . outputPitch * gl_GlobalInvocationID . y + gl_GlobalInvocationID . x;
//     destData[offset]= destValue;
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID . xy, params . size)))
//         return;
//
//           vec4 srcValue = getSourceValue();
//     uint destValue = convertToDestValue(srcValue);
//     outputDestValue(destValue);
// }
