// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000013.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000013[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x68,0x96,0x55,
    0x18,0xc7,0xcf,0x79,0x9e,0xbd,0xa9,0xd3,0xcc,0x34,0xe7,0xdb,0xd8,0x7c,0xcb,0xda,
    0x9a,0x2f,0xd9,0x34,0xf5,0x51,0x97,0x2f,0x1b,0x35,0x9d,0x9b,0x64,0x68,0xb6,0xb2,
    0x2c,0x5d,0xa5,0x2b,0x37,0x28,0x52,0x74,0xea,0x86,0xe6,0x88,0x94,0x3e,0x44,0x65,
    0xa6,0x10,0x44,0x44,0x06,0x56,0xfa,0x21,0xad,0x1c,0x61,0x16,0xe5,0x82,0x72,0x50,
    0x2e,0xf4,0x53,0x1f,0x23,0x49,0x4b,0x8d,0xa8,0x73,0xdd,0xe7,0x77,0x6d,0x57,0xa3,
    0x97,0x07,0x0e,0xf7,0x7d,0xfd,0xaf,0xf7,0xff,0xb9,0xce,0xb9,0x9d,0xe9,0xd4,0xb8,
    0x5c,0xe7,0xbc,0xeb,0xef,0xf2,0x5c,0x9d,0x77,0xc9,0xef,0x7a,0x97,0x72,0x9e,0xe7,
    0xb4,0xf0,0x1c,0xe0,0x72,0x12,0xb9,0xb2,0x7a,0x79,0x75,0x59,0x53,0xf3,0xda,0xb2,
    0xe9,0xb7,0x4f,0x11,0xbb,0x41,0x2e,0x9d,0xd8,0x8b,0xee,0x3a,0x97,0xeb,0xb2,0xc2,
    0x53,0xd6,0x86,0x35,0x0d,0x1b,0x05,0x9f,0x18,0xd6,0x85,0xb0,0x06,0x07,0x3b,0xc1,
    0x73,0x25,0x46,0x78,0x9b,0x98,0xc4,0x14,0x1f,0xe7,0xaa,0x5c,0xb6,0x2b,0x8d,0x69,
    0xdd,0x38,0x9e,0x8a,0x79,0xb0,0x3c,0x83,0xa5,0xc0,0x06,0x1b,0x2c,0x0d,0x36,0xd4,
    0x60,0x59,0x60,0x05,0x06,0xcb,0x06,0x1b,0x6d,0xb0,0x1c,0xb0,0x22,0x83,0xe5,0x82,
    0x8d,0x37,0x58,0x1e,0xd8,0x24,0x83,0xf5,0x03,0x2b,0x35,0x58,0x7f,0xb0,0x29,0x06,
    0x1b,0x00,0x36,0xdd,0x60,0xf9,0x60,0x33,0x0d,0x36,0x10,0x6c,0x4e,0xc2,0x53,0xba,
    0xa7,0x5f,0xe1,0x6c,0x75,0x78,0x8e,0x85,0x1f,0x95,0x8b,0x8d,0x2c,0x3c,0x17,0x22,
    0xdf,0x10,0xbc,0x52,0x89,0x3e,0x9d,0x70,0x23,0xef,0x37,0x86,0xb7,0x1c,0xfa,0x2c,
    0x09,0xf6,0x39,0xe4,0xfb,0xf1,0xf0,0x84,0xcc,0xd0,0x60,0x31,0xc8,0xe0,0xc2,0xd9,
    0xe1,0xca,0x35,0x19,0x95,0x85,0xaf,0x57,0x5e,0x1e,0x31,0x7f,0x58,0x90,0x8b,0x88,
    0x21,0x7b,0x33,0x3c,0xc8,0xc5,0xc8,0x29,0xe4,0xf1,0x70,0x9a,0x95,0xe0,0x59,0x6e,
    0x02,0xb6,0x82,0xcf,0x46,0x9e,0x68,0xfc,0x6f,0xc2,0x5e,0xfc,0x25,0x7e,0x09,0xf1,
    0x5c,0xd2,0xcf,0xe0,0x84,0x83,0x62,0x56,0x51,0x4f,0xfd,0xff,0xbd,0x8a,0x7a,0x9e,
    0x59,0xee,0x56,0xf6,0xa9,0x94,0xfc,0x22,0x97,0x81,0x95,0xd0,0xcf,0x64,0xea,0x11,
    0xfb,0x29,0xe8,0x8a,0x8d,0xbe,0xdc,0xf4,0x33,0xa3,0xc7,0x37,0xea,0xe5,0x39,0x8b,
    0x7a,0xd5,0x7e,0x01,0xb3,0xa6,0xf2,0x52,0xb8,0x96,0x7e,0x57,0x50,0x9f,0xc4,0x1b,
    0x11,0x22,0xad,0x34,0x7c,0xda,0x9f,0xca,0xa3,0xc2,0xbe,0xad,0x0a,0xcf,0x95,0xe4,
    0xbf,0x0f,0x7c,0x15,0xfd,0x88,0xbc,0xba,0x4f,0xfe,0xfa,0x3e,0x72,0x03,0xfc,0x8a,
    0xff,0x63,0xd4,0x5f,0x64,0xf4,0x8d,0xec,0x81,0xd4,0xf7,0x0c,0xba,0xb4,0xd1,0xb7,
    0x70,0x26,0x54,0xde,0xcf,0x4c,0xab,0x7c,0x84,0xf3,0xa1,0xf2,0x89,0x3e,0xfc,0x9e,
    0x66,0xde,0x75,0x9e,0xbe,0x36,0xf5,0x89,0xfc,0x43,0x22,0xb5,0xcc,0x93,0xfa,0xce,
    0x93,0x5b,0xe7,0xe5,0x3c,0x77,0x48,0xda,0xd8,0xcf,0x09,0xe4,0x6c,0x6f,0x69,0x99,
    0x5d,0x1a,0xaa,0x12,0xbb,0x8c,0x8f,0x98,0x5d,0x6a,0x3b,0x37,0xbc,0x37,0xbe,0xb9,
    0x69,0x9e,0xca,0xf3,0x82,0xbc,0x6f,0xe7,0x81,0x4c,0x79,0xd8,0xa1,0x14,0xfb,0xe0,
    0x88,0x7f,0x25,0x20,0xb2,0x6f,0x19,0xe6,0x78,0x12,0xb3,0x5a,0x13,0xf2,0xc8,0x9c,
    0xde,0x0c,0x36,0xc9,0xec,0xd1,0x46,0xce,0xc0,0x2d,0xe8,0x2b,0x42,0x04,0x99,0xa1,
    0xa9,0xcc,0xd9,0x64,0xe2,0x89,0xcd,0x34,0xf0,0x1d,0xc1,0x46,0xe4,0xdb,0xf0,0x9b,
    0x86,0xdf,0x0c,0xee,0x83,0x32,0x66,0x2e,0xc3,0x7c,0xdd,0x01,0xfe,0x76,0xb0,0x19,
    0x94,0xf0,0x12,0x31,0x99,0xbb,0xdf,0x42,0xe5,0x19,0xea,0xb9,0x16,0xec,0x67,0x73,
    0x7f,0x64,0xe8,0x47,0xde,0x6b,0x83,0x9f,0xec,0xc3,0x7c,0x72,0xca,0x6f,0x2b,0x7b,
    0x53,0x01,0x5e,0x17,0xd8,0x91,0x9a,0xc6,0xfa,0x88,0xa9,0xdd,0xd5,0x10,0x43,0x63,
    0xc9,0xf3,0x72,0xe0,0x42,0xec,0xe6,0xfb,0x68,0x93,0x8d,0xcf,0x1c,0xd3,0xc3,0x42,
    0x7a,0x58,0x60,0x7a,0x58,0x04,0xae,0x3d,0x2c,0x06,0xd3,0x1e,0xaa,0x4c,0x0f,0x8b,
    0x93,0x3b,0xcd,0x25,0x98,0xe4,0xad,0x34,0x3d,0xdc,0x4d,0x6e,0x6f,0x7a,0xa8,0x06,
    0xd7,0x1e,0x26,0xf8,0x88,0xa9,0x9d,0xf4,0xa0,0xb1,0xaa,0x4c,0x0f,0x15,0x3e,0xda,
    0x64,0xf0,0xa9,0x34,0x3d,0xd4,0xd0,0xc3,0x52,0xd3,0xc3,0x32,0x70,0xed,0xa1,0x16,
    0x4c,0x7b,0x58,0x6e,0x7a,0xa8,0x4d,0xea,0x71,0x09,0x26,0x79,0xeb,0x98,0x23,0xc9,
    0x7b,0x0f,0xb9,0x2b,0x7c,0xef,0x39,0x97,0x1a,0xd5,0x76,0xb9,0xa9,0xf1,0x4e,0xec,
    0xaa,0xf0,0xab,0xa3,0x1e,0x39,0xff,0xf7,0x73,0xf6,0x75,0xe6,0x1e,0xa0,0xe6,0x7a,
    0x33,0x73,0x0f,0x82,0xb7,0x30,0x73,0x0f,0x81,0x49,0xdc,0x46,0xee,0xdf,0x87,0xc1,
    0xd7,0x06,0x59,0xee,0x99,0x47,0x88,0xbd,0x0e,0x9f,0x47,0xc1,0xea,0x5d,0xaf,0xcf,
    0x3a,0xf0,0xdd,0xc1,0x46,0xe4,0xf5,0xc4,0x59,0x47,0x3d,0x72,0xcf,0x3c,0x4e,0x3d,
    0x0d,0xd4,0x23,0x7b,0xf5,0x04,0x78,0x23,0xe7,0x71,0x03,0xd8,0xbd,0xa1,0xdf,0x15,
    0xc9,0x79,0x8a,0xb9,0xd7,0x73,0xbe,0x36,0x98,0x3d,0x79,0x92,0x78,0x8d,0x66,0x4f,
    0x9e,0x02,0xd7,0x3d,0xd9,0x04,0xa6,0x7b,0xd2,0x6c,0xf6,0x44,0x74,0x4d,0x61,0x6d,
    0x83,0xe7,0x6d,0x26,0xf6,0x76,0x62,0xb7,0x98,0xd8,0x3b,0xc0,0x35,0xf6,0x4e,0x30,
    0x8d,0xdd,0x66,0x62,0x8b,0xae,0x35,0xac,0x36,0x62,0xb7,0x9a,0x99,0xdd,0x45,0x5f,
    0x72,0xc7,0xbc,0x43,0xac,0xdd,0xe0,0xf5,0xec,0xbd,0xfa,0xb5,0xb1,0xf7,0x62,0xf3,
    0x1c,0x39,0xb7,0x61,0xdf,0x4a,0xde,0x76,0x93,0x57,0x6c,0xf6,0x84,0xd5,0x8e,0xff,
    0x1e,0x93,0xf7,0x79,0x93,0xb7,0x26,0xdc,0xd0,0x72,0xb7,0xbf,0x00,0xb6,0xd1,0xdc,
    0x61,0xa9,0x64,0x8e,0x73,0x12,0xfd,0x5e,0xfc,0x74,0xed,0x0a,0xb1,0x04,0xdf,0x87,
    0xef,0xde,0x24,0x56,0xbf,0x64,0xaf,0x5e,0x24,0xce,0x3e,0xee,0xd1,0x6c,0xbe,0x23,
    0x69,0x7a,0xd2,0x9a,0xda,0xe9,0x49,0x7c,0x16,0xf9,0xe8,0xd3,0x86,0xff,0x1e,0x6c,
    0x9b,0xb1,0x6d,0x32,0xf5,0x3f,0xfd,0x0f,0xf5,0x3f,0xfb,0x3f,0xf5,0x6f,0xc6,0x4f,
    0x57,0x2b,0xf5,0x6f,0xc1,0x77,0xb3,0xa9,0x7f,0x2b,0x71,0xb6,0xfc,0x4b,0xfd,0x5a,
    0x53,0xb3,0xa9,0x7f,0xa1,0x8f,0x3d,0xb4,0xe3,0xdf,0xc4,0x2c,0xcb,0xf7,0xe2,0x25,
    0xf4,0x6d,0x21,0x92,0xc8,0xaf,0x82,0x65,0x7c,0xef,0x9c,0xbd,0xc6,0x9c,0xed,0x37,
    0x73,0x76,0x00,0x5c,0xe7,0xec,0x75,0x30,0x9d,0xb3,0x43,0x66,0xbf,0x45,0x77,0x30,
    0xac,0x43,0xd4,0x76,0x10,0xbe,0xa4,0xee,0x37,0xc8,0xe9,0xf0,0xbb,0xc6,0xfb,0xef,
    0xe1,0x5d,0x62,0xfd,0x84,0x8f,0x3c,0x8f,0x93,0xeb,0x67,0xfc,0x06,0xe2,0x73,0xd5,
    0xe4,0x12,0xdd,0xc5,0xb0,0x2e,0xe1,0x77,0x29,0x39,0x0f,0x31,0xd7,0xaf,0xf8,0x15,
    0xb8,0xd8,0x6f,0x4e,0xe2,0x1f,0x71,0xf9,0xe6,0xe6,0x07,0xbe,0x72,0x12,0xbf,0xb8,
    0x47,0x23,0xd1,0x8f,0x86,0xdb,0x6b,0xc4,0xbc,0x68,0xfc,0x7f,0x21,0xa6,0x7c,0xa3,
    0xad,0x8d,0xd4,0xf4,0x67,0x88,0x72,0x05,0xec,0x32,0xb1,0x17,0xfb,0x18,0xff,0x12,
    0xbe,0x17,0xf9,0x06,0x08,0xf7,0x25,0x3e,0xea,0x95,0x0f,0xe5,0xe8,0x2d,0x38,0xf2,
    0xf4,0x9b,0xef,0xff,0xce,0x91,0xf3,0x31,0xa7,0x3c,0x95,0xa3,0x94,0x8f,0x7e,0xca,
    0xd1,0x00,0xdf,0xcb,0x91,0xe8,0xd2,0x61,0xe5,0xe0,0x27,0x4f,0xe5,0x28,0x0f,0x3f,
    0xcb,0x51,0x3f,0x1f,0x71,0xcb,0x51,0x7f,0xdf,0xcb,0x91,0xe8,0x95,0xa3,0x7c,0x62,
    0xa6,0x7d,0xaf,0x7f,0x36,0x31,0x95,0x23,0xb5,0x91,0x9a,0x94,0x23,0xc1,0x94,0xa3,
    0x2a,0x1f,0xe3,0x4b,0x5d,0xd9,0xd4,0xaa,0x1c,0x95,0xf9,0xa8,0x2f,0x21,0xbf,0x72,
    0xf4,0x2e,0x1c,0xa5,0xe8,0xb7,0xb0,0x0f,0x47,0x43,0xc8,0x39,0xc4,0x70,0x34,0xd4,
    0x47,0x3f,0xe5,0x68,0x8c,0xe1,0x48,0x74,0xc3,0xc2,0x2a,0xc0,0xaf,0xc0,0x70,0x34,
    0x12,0x3f,0xcb,0xd1,0x28,0x1f,0x71,0xcb,0xd1,0x68,0xc3,0xd1,0x28,0xc3,0x51,0x21,
    0x31,0x87,0x19,0x8e,0x86,0x13,0x53,0x39,0x52,0x9b,0x31,0x86,0xa3,0x42,0xc3,0xd1,
    0x5d,0x3e,0xc6,0x97,0xba,0x86,0x53,0xab,0x72,0x34,0xd5,0x47,0xbd,0x70,0x95,0x22,
    0xa7,0x9e,0xbd,0x43,0xcc,0xa2,0xd8,0x55,0x33,0x6b,0xcd,0xf8,0x14,0x9a,0x33,0xff,
    0x1e,0x67,0xfe,0x88,0x39,0xf3,0xef,0x83,0xeb,0x99,0xff,0x00,0x4c,0xcf,0xfc,0x31,
    0x73,0x0e,0x45,0x77,0x34,0x39,0xb3,0x31,0xef,0x71,0xf3,0xdd,0xfa,0x88,0xd8,0x27,
    0x4c,0xec,0x8f,0xc1,0x35,0xf6,0x27,0x60,0x1a,0xbb,0xc3,0xc4,0x16,0xdd,0xc9,0xb0,
    0x4e,0x11,0xfb,0x94,0xf9,0x7e,0x7f,0x4e,0xec,0xd3,0xe6,0xfb,0xfd,0x05,0xf8,0x67,
    0xdc,0xd1,0x5f,0x82,0x35,0x98,0x7c,0x5f,0x81,0xd7,0x93,0xaf,0xd3,0xe4,0x13,0xdd,
    0x99,0xb0,0x3a,0xc9,0x77,0xc6,0x9c,0xd9,0x72,0x1f,0xff,0x36,0xa8,0x36,0xff,0x6e,
    0x53,0xbb,0x4e,0xc3,0xf5,0x12,0x1f,0x6d,0x4e,0xe1,0x73,0xc6,0xd4,0xf3,0x0d,0xf5,
    0x94,0x9b,0x7a,0xbe,0x05,0xd7,0x7a,0xba,0x4c,0x3d,0xa2,0x3b,0x1b,0x56,0x17,0x79,
    0xce,0x9a,0x7a,0x66,0x52,0xcf,0x12,0xb3,0xf7,0x6a,0xd7,0x65,0xea,0x59,0xea,0xa3,
    0x4d,0x27,0x3e,0x67,0x4d,0x3d,0xdf,0x51,0xcf,0x11,0x53,0xcf,0xf7,0xe0,0x5a,0x4f,
    0xb7,0xa9,0x47,0x74,0xe7,0xc2,0xea,0x26,0xcf,0x39,0x53,0xcf,0x2c,0x1f,0xff,0x56,
    0x92,0x7c,0xfa,0x8d,0x52,0xbb,0x6e,0x53,0x4f,0xad,0x8f,0x36,0x5d,0xf8,0x9c,0xc3,
    0xb6,0x03,0xdb,0x93,0xe6,0xac,0x7f,0x0a,0xdf,0x69,0x93,0x67,0xba,0xef,0xc5,0x5d,
    0x1f,0xdf,0x0e,0x93,0x67,0x99,0x8f,0xb9,0xba,0xf1,0x39,0x89,0xed,0x31,0x6c,0x8f,
    0xf2,0xad,0x15,0xdb,0x0f,0x89,0x27,0x4b,0xff,0x2f,0x28,0x65,0xbe,0xb5,0xea,0x73,
    0xcc,0xc4,0xaf,0xf1,0x31,0x47,0x07,0xfe,0x12,0x6f,0x6e,0xf0,0xb8,0x80,0xee,0x8f,
    0x30,0x25,0x33,0xc3,0xfa,0x0b,0x4a,0x3a,0x0e,0xd5,0xc4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
