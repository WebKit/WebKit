// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Blit3DSrc.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlit3DSrc_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4b,0x68,0x5d,0x65,
    0x10,0xc7,0xbf,0xef,0x9c,0xfb,0x48,0x93,0x8b,0x4d,0x88,0xa6,0x31,0xde,0xbc,0xda,
    0x12,0xb5,0x09,0xb5,0x0b,0x15,0x83,0x28,0x0a,0x05,0x5d,0x14,0x5a,0x15,0x4c,0x17,
    0xd9,0x5c,0xb0,0x0b,0x03,0x2a,0x44,0xe9,0x26,0x8b,0x0a,0x46,0xe8,0x26,0x8b,0x6e,
    0xb2,0x70,0x51,0x1f,0x2d,0xb5,0xb6,0xa9,0xa2,0x75,0x61,0xeb,0x4e,0xd4,0x16,0x2d,
    0x3e,0x82,0x12,0x6d,0x50,0xa2,0x06,0x03,0xbe,0x08,0xd8,0x12,0xad,0x35,0x38,0xf3,
    0x9d,0xdf,0xb4,0xe3,0x0d,0x4c,0xce,0x9d,0xff,0x7f,0xbe,0xf9,0xcf,0x7c,0x67,0xe6,
    0xe4,0xd9,0x96,0x6a,0x08,0x31,0xb4,0x86,0x96,0x30,0x12,0x43,0xfa,0xeb,0x08,0x59,
    0xd0,0x9f,0x6d,0xa1,0x92,0x9e,0x0f,0xed,0x7a,0x6c,0xd7,0xf6,0x67,0x9f,0x7b,0x62,
    0xfb,0x9d,0x77,0xed,0x50,0xfe,0x86,0x90,0xa7,0x38,0xe5,0x36,0x8a,0x57,0x92,0xa7,
    0xda,0x53,0x8d,0x27,0x9f,0x56,0xbc,0x4b,0x6c,0xaf,0x58,0x43,0x6c,0x42,0x6c,0x52,
    0x6c,0x4a,0x6c,0x5a,0x6c,0x46,0x6c,0x56,0xac,0x5d,0x72,0xe8,0x99,0xaa,0xe6,0x97,
    0x5f,0x5d,0x49,0x4f,0xf3,0x85,0xf0,0x70,0x28,0x87,0xde,0xa2,0x94,0xb0,0x85,0xa7,
    0x61,0x11,0xac,0xc5,0x61,0x19,0x58,0xbb,0xc3,0x72,0xb0,0x6e,0x87,0x95,0xc0,0xea,
    0x0e,0x2b,0x83,0x0d,0x38,0xac,0x02,0xb6,0xd5,0x61,0x55,0xb0,0xdb,0x1c,0xd6,0x02,
    0x36,0xe2,0xb0,0x0d,0x60,0x3b,0x52,0x5f,0xf9,0xb5,0xfa,0xb4,0x47,0xbd,0x93,0x3e,
    0xfa,0x51,0xbf,0x81,0x1f,0xf1,0x27,0xf0,0x2d,0x7e,0x12,0x3f,0xc7,0x9f,0xc2,0x2f,
    0xe1,0x4f,0xe3,0x97,0xf1,0x67,0xf0,0x2b,0xf8,0xb3,0xf8,0x76,0xc7,0xc7,0xe5,0xb9,
    0xd9,0xe9,0xab,0x3f,0xe8,0xfc,0xb9,0x26,0x7e,0x0e,0x5e,0xeb,0xe9,0x94,0xff,0x59,
    0xf2,0xf3,0x54,0x4f,0x96,0xde,0x73,0x9e,0xb4,0xf4,0xee,0x36,0x49,0x7c,0x15,0x6d,
    0xe5,0x6e,0x12,0xbf,0x0d,0x2e,0xc2,0xd7,0x78,0xc7,0x25,0xfc,0x1b,0x89,0x2f,0xa5,
    0xb8,0x92,0x9c,0x29,0x62,0x15,0xbf,0x17,0xbf,0x0b,0x4c,0xf3,0xd5,0xc9,0x17,0x52,
    0x5f,0xb5,0x6b,0xef,0xc5,0xac,0x0d,0xab,0xf0,0xac,0x3b,0xd3,0xfc,0x7d,0xbc,0x9f,
    0x5e,0xf2,0xab,0xdf,0x0f,0x36,0xdc,0x54,0xaf,0xc6,0x0f,0xc2,0x55,0x1d,0x3f,0x84,
    0xbe,0xf9,0xc3,0xf0,0x1a,0x3f,0x42,0x7c,0x3d,0xf5,0x90,0x85,0x3b,0x88,0xab,0x33,
    0x0f,0xfe,0xdc,0x28,0xf3,0x63,0xfe,0xce,0xa6,0x3a,0x76,0xd3,0x87,0xe6,0xdd,0x03,
    0xd7,0x86,0x3f,0xc6,0x4c,0xd4,0xe8,0x63,0x8c,0x7d,0xcb,0xdd,0xf9,0x71,0xde,0x83,
    0xf1,0x8d,0x26,0x7e,0x1f,0xf7,0x6e,0xfc,0x04,0xbc,0xf9,0x93,0x4d,0xf1,0xfb,0xd9,
    0x2f,0xe3,0xa7,0x9a,0xf8,0x03,0xdc,0x9d,0xf1,0xd3,0x4d,0xfc,0x41,0xb1,0x07,0x1c,
    0x3f,0xd3,0xc4,0x1f,0x12,0x7b,0xde,0xf1,0xb3,0xf0,0x3a,0x27,0x2f,0x71,0x17,0x3e,
    0xfe,0x30,0xfe,0xcd,0x72,0x33,0xc7,0xb8,0x9b,0x2c,0xfc,0xff,0x8f,0xcf,0x59,0xba,
    0xb3,0xd7,0xf9,0x7d,0x0c,0x0d,0xf5,0x8f,0x83,0xf5,0xc8,0xc9,0x13,0xc4,0x9d,0x04,
    0x3b,0x41,0x9c,0xfa,0x73,0x60,0xb7,0x88,0xe2,0x9b,0xe4,0xb8,0x5b,0xb6,0x2e,0xe3,
    0x0e,0x03,0xb5,0xfc,0x25,0x88,0xee,0xe2,0x7d,0xcc,0xf6,0x07,0xcc,0xef,0x23,0x82,
    0x6a,0xfd,0x1f,0x82,0x05,0x87,0x7d,0x04,0xa6,0xb5,0xee,0x11,0x4c,0x67,0xe9,0x63,
    0x62,0x95,0x7b,0x50,0x30,0x9d,0xc3,0x73,0xcc,0xea,0x00,0xf9,0x35,0xee,0x3c,0xf8,
    0x8b,0x9c,0xfb,0x84,0xb3,0xe7,0xdd,0xb9,0x4f,0x39,0x37,0xe4,0xce,0x5d,0x00,0x7f,
    0x81,0x73,0x9f,0x71,0xf6,0x02,0xe7,0x74,0x8e,0x3f,0xe7,0xdc,0x30,0xe7,0x74,0x86,
    0xbf,0x00,0x3f,0x29,0x31,0x3a,0xdb,0x5f,0x82,0xe9,0x6c,0xaf,0xc9,0x0d,0x2c,0xd0,
    0xdb,0x15,0x89,0x57,0x6e,0x5e,0x6c,0x81,0x7b,0x99,0x77,0x3d,0x7f,0x85,0x66,0x48,
    0x73,0x53,0x4a,0xd8,0xd7,0xe0,0x8f,0x8a,0xa7,0x35,0x6d,0x8d,0x05,0x66,0x71,0x7f,
    0x4b,0x0e,0xcb,0xa5,0xcf,0xcb,0x12,0xa5,0x71,0xb7,0xc7,0x22,0xa6,0xcc,0x99,0x79,
    0xd7,0xc3,0x37,0xf4,0x30,0xea,0x7a,0xf8,0x16,0xdc,0x7a,0xb8,0x08,0x66,0x3d,0x2c,
    0xb9,0x1e,0x94,0x5b,0x14,0x5b,0x42,0x77,0xd1,0xf5,0xf0,0x1d,0xda,0xd1,0xf5,0xf0,
    0x3d,0xb8,0xf5,0x70,0x6b,0x2c,0x30,0x8b,0xd3,0x1e,0x2c,0xd7,0x92,0xeb,0x61,0x5b,
    0x2c,0x62,0x16,0x38,0xb3,0xe8,0x7a,0xf8,0x81,0x1e,0x76,0xba,0x1e,0x7e,0x04,0xb7,
    0x1e,0x7e,0x02,0xb3,0x1e,0x56,0x5c,0x0f,0xca,0x2d,0x8b,0xad,0xa0,0xbb,0x9c,0xbe,
    0x2d,0x85,0xee,0xcf,0x68,0x6f,0x8b,0xd7,0x77,0x45,0x6b,0xb4,0xd8,0x15,0x57,0xe3,
    0x30,0x71,0x4b,0x9c,0x5b,0xa6,0x46,0xfd,0x36,0xbd,0x4c,0x8d,0x87,0xa9,0x51,0x77,
    0xf1,0x15,0xf0,0x67,0xb8,0x9b,0x57,0xc1,0xec,0xfe,0x5e,0x23,0xa7,0xdf,0x85,0x23,
    0x60,0xc5,0x2e,0x54,0xd2,0xde,0x1f,0x25,0xf6,0x08,0x39,0x34,0xbf,0xee,0xdf,0x1b,
    0xec,0xaf,0xfa,0xba,0xab,0xa7,0xd8,0xd3,0xc7,0x25,0x97,0xee,0xe8,0x5b,0xc4,0x9c,
    0x72,0xfd,0xbe,0x4d,0xbe,0xa3,0xee,0xfb,0x60,0x7b,0xf2,0x0e,0x3d,0x8c,0xbb,0x3d,
    0x39,0x0d,0x6e,0xfb,0xf5,0x2e,0x39,0x4e,0xbb,0x9a,0xdf,0x03,0xf7,0x7d,0x9c,0x01,
    0xf3,0x7d,0x9c,0x25,0xf6,0x0c,0x7d,0x8c,0x49,0xac,0x7e,0xbf,0xdf,0xa7,0xd6,0xb3,
    0xee,0x3e,0x7f,0xa1,0x96,0xdd,0xee,0x3e,0x7f,0x05,0x3f,0x27,0x31,0xea,0xff,0x06,
    0x36,0xe0,0xe6,0xe0,0x77,0xf0,0x21,0xe6,0x60,0xd5,0xcd,0x81,0x72,0x7f,0x88,0xad,
    0xf2,0x6e,0xf5,0xf7,0xfd,0x12,0xb3,0x97,0x1a,0xf4,0xbd,0x1b,0xb7,0xea,0x74,0xfe,
    0x44,0x67,0xdc,0xe9,0x5c,0x02,0x37,0x9d,0x35,0xa7,0x73,0x29,0xcd,0x4c,0x48,0x98,
    0xe6,0xba,0x8c,0x4e,0xc3,0xe9,0x18,0xb7,0xe6,0x74,0xae,0xa0,0xb3,0xcf,0xe9,0xfc,
    0x03,0x6e,0x3a,0xeb,0x4e,0x47,0xb9,0xab,0x62,0xeb,0xe4,0xba,0x8a,0xce,0x84,0xd3,
    0x31,0x6e,0xdd,0xe9,0xc4,0x58,0xe8,0x8c,0x3a,0x9d,0x2c,0x16,0xb8,0xe9,0x94,0xe3,
    0x75,0x1d,0xe5,0x72,0x31,0xc5,0x34,0x97,0xfe,0x56,0x9d,0x49,0xa7,0x63,0x9c,0x3e,
    0x4d,0xa7,0x05,0x9d,0xfd,0x4e,0x67,0x43,0x2c,0x70,0xd3,0xa9,0x39,0x1d,0xe5,0x5a,
    0xc5,0x6a,0xe4,0x6a,0x45,0x67,0xca,0xe9,0x18,0x57,0x73,0x3a,0x1b,0xd1,0x39,0xe0,
    0x74,0xda,0x63,0x81,0x9b,0x4e,0xa7,0xd3,0x51,0xae,0x43,0xac,0x93,0x5c,0x1d,0xe8,
    0x4c,0x3b,0x1d,0xe3,0x3a,0x9d,0x4e,0x17,0x3a,0x07,0x9d,0xce,0xa6,0x58,0xe0,0xa6,
    0xd3,0xe3,0x74,0x94,0xeb,0x16,0xeb,0x21,0x57,0x37,0x3a,0x33,0x4e,0xc7,0xb8,0x1e,
    0xa7,0xd3,0x8b,0xce,0x21,0xa7,0xd3,0x17,0x0b,0xdc,0x74,0x06,0x9d,0x8e,0x72,0xfd,
    0x62,0x83,0xe4,0xea,0x47,0x67,0xd6,0xe9,0x18,0xa7,0xcf,0x7f,0x65,0x2b,0xef,0x11,
    0xfb,0x0f,0x22,0xd8,0x03,0x22,0xf8,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture3D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 58 "shaders/src/Blit3DSrc.frag"
//
// void main()
// {
//             vec2 srcImageCoordsXY = getSrcImageCoords();
//     vec3 srcImageCoords = vec3(srcImageCoordsXY, params . srcLayer);
//
//             ivec4 colorValue = texture(isampler3D(color, blitSampler), vec3((srcImageCoords . xy)* params . invSrcExtent, srcImageCoords . z));
//
//     broadcastColor(colorValue);
// }
