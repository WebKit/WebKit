// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x96,0x55,
    0x18,0xc7,0xef,0xe7,0x1d,0x21,0x5e,0x04,0x94,0x70,0x62,0x99,0xb2,0xd5,0x30,0x78,
    0x5a,0x64,0x04,0xe9,0x46,0x46,0x26,0xa2,0xa4,0xb0,0xd5,0xd2,0x85,0x16,0xac,0x84,
    0x69,0x3a,0xf9,0x01,0x4a,0x58,0x2b,0xdf,0x60,0x73,0xcc,0x5a,0xc1,0x56,0xf0,0x43,
    0xc2,0x74,0xab,0xd6,0x4f,0xad,0xb5,0xd2,0x95,0x56,0xfe,0x45,0xad,0x97,0xad,0xad,
    0x73,0x9d,0xe7,0x73,0xb9,0x6f,0xcf,0x6a,0x3e,0xdb,0xd9,0x7d,0x9f,0xef,0xf5,0xf6,
    0xfd,0x5e,0xe7,0xba,0x0f,0x64,0xd2,0xdb,0x0a,0x49,0x92,0x4a,0x2a,0x93,0x8a,0xe4,
    0x6e,0x52,0xfa,0xad,0x4f,0xd2,0x01,0x49,0x92,0xaa,0x24,0x1f,0x9f,0x7b,0x07,0x86,
    0x06,0xda,0xcf,0x4e,0x8e,0xb6,0x77,0x3e,0x55,0x34,0x7b,0x4d,0x92,0x89,0x7e,0x66,
    0xab,0x4d,0x0a,0x49,0x36,0x3c,0x6d,0x9d,0x3c,0x7e,0xe2,0x94,0xe1,0xd5,0x61,0xdd,
    0x08,0xab,0x2e,0xf8,0x19,0x5e,0xb0,0x1c,0xe1,0xad,0x3a,0xe6,0xb4,0x98,0x24,0x79,
    0x31,0xc9,0x25,0x0d,0xd4,0xdb,0xc6,0xd3,0xb1,0x14,0x58,0x85,0x60,0x69,0xb0,0x3a,
    0xc1,0x32,0x60,0x8d,0x82,0x65,0xc1,0x1e,0x14,0x2c,0x07,0xb6,0x59,0xb0,0x3c,0xd8,
    0xc3,0x82,0x15,0xc0,0xb6,0x0b,0x56,0x01,0xf6,0xa8,0x60,0xeb,0xc0,0x76,0x08,0x56,
    0x09,0x56,0x14,0xac,0x0a,0xac,0x53,0xb0,0x07,0xc0,0xba,0x04,0xab,0x06,0x7b,0x36,
    0xf6,0x29,0x73,0x4f,0xaf,0xf5,0x6c,0x4f,0x78,0x3e,0x42,0x7f,0x7c,0xbf,0x55,0xf6,
    0xd6,0xe7,0x2d,0xec,0x1b,0x42,0x54,0x3a,0xda,0x33,0xb1,0x37,0xf6,0xbe,0x21,0xf8,
    0xe4,0xd1,0x69,0x7d,0x6d,0x0a,0xfb,0x02,0xfa,0xcd,0xbe,0x31,0x78,0x56,0x62,0x37,
    0x5b,0x15,0x5a,0xb2,0x11,0xcb,0x46,0xbe,0x29,0xb4,0xf4,0xb0,0xaf,0x96,0x5c,0x35,
    0xf8,0x7b,0xad,0x7a,0x72,0x25,0x91,0x57,0xdd,0xbd,0xbe,0x7a,0x4d,0x5b,0xf5,0xf7,
    0x59,0xee,0x63,0xf5,0x1b,0xe9,0x77,0x03,0xf5,0x1b,0x63,0x9d,0x12,0xd6,0x86,0xb6,
    0x8d,0xf0,0x31,0xff,0x26,0x6c,0x05,0xb1,0xb7,0x88,0x9e,0x2d,0xd8,0xeb,0xe3,0xdc,
    0xa4,0x63,0x2f,0xdb,0xe0,0xed,0x7d,0xf6,0xb8,0x36,0x66,0xc7,0xed,0x4f,0x50,0xc7,
    0xed,0x3b,0xe9,0x85,0xf5,0x61,0x37,0xbc,0xad,0x4e,0x73,0xa8,0xd0,0xcb,0x3e,0x95,
    0xfc,0xfb,0xe7,0x7b,0xe3,0xf2,0x1c,0xef,0xbd,0x68,0xb3,0xfd,0x9e,0x32,0x0e,0x7d,
    0x65,0xfb,0x7e,0x7a,0x6d,0xf1,0xfb,0xd1,0x92,0x17,0xfb,0x20,0x7b,0xe3,0xf4,0x0a,
    0xef,0x19,0xb1,0x1f,0xa3,0x37,0x66,0x9f,0xa4,0x0f,0x59,0xb1,0x4f,0x33,0xf3,0xbe,
    0xbf,0x50,0xd6,0xeb,0xab,0xcc,0xb0,0xd5,0xbf,0x4e,0xee,0x49,0xf8,0x5f,0xe7,0xbb,
    0xcf,0xc4,0xde,0xe4,0x22,0xcf,0x2c,0xfc,0x0d,0xfb,0x23,0x20,0xd6,0xcf,0x5d,0xcc,
    0x59,0x2d,0xfd,0x1b,0x0c,0x8c,0x6a,0xf8,0xb6,0x6b,0x59,0xde,0xab,0x53,0xcc,0xeb,
    0x7a,0xec,0xbd,0x21,0x43,0x13,0xdf,0xf7,0x06,0xce,0x7e,0x17,0x3e,0xcd,0xe0,0xef,
    0x07,0x1f,0xdb,0x6f,0x22,0xae,0x99,0x38,0x3b,0xfb,0x87,0x88,0x6b,0x21,0xce,0xe7,
    0xd5,0xf0,0x2f,0x82,0xcf,0x56,0xb9,0x17,0x6c,0x1e,0x7e,0x0f,0xcc,0x5b,0xe1,0xf3,
    0x57,0xf0,0xf7,0xfb,0xa1,0x15,0x3d,0xf6,0x7e,0x28,0xc4,0xe5,0xb9,0x23,0x36,0xe1,
    0x3b,0x4b,0xbf,0x1e,0x03,0x3f,0x1c,0x76,0xc6,0xe9,0x4b,0x30,0xf7,0xfb,0x33,0xe4,
    0xf0,0x5c,0xf6,0xfc,0x2d,0x78,0x99,0xdf,0x0f,0xf8,0xe4,0x88,0xd9,0x2e,0x1a,0x76,
    0xa0,0xa1,0x4d,0x34,0x3c,0x0e,0xee,0x1a,0xda,0xc1,0x5c,0x43,0x51,0x34,0x98,0xad,
    0x83,0xbb,0xca,0xea,0x76,0x88,0x86,0x27,0xa9,0x9d,0x12,0x0d,0x9d,0xe0,0xae,0xe1,
    0x6b,0x30,0xf7,0x33,0x0d,0x9e,0xab,0x28,0x1a,0x6e,0xe2,0xd3,0x4a,0x4c,0x87,0x68,
    0x78,0x1a,0x0d,0x3b,0x45,0x43,0x17,0xb8,0x6b,0x78,0x06,0xcc,0x35,0xf4,0x88,0x06,
    0xb3,0x75,0xc7,0xb9,0x2b,0xd5,0xed,0x66,0x8e,0x0a,0x31,0x5f,0xa9,0xf6,0x4d,0xf9,
    0xde,0x8c,0xa3,0xfb,0xf6,0x08,0xc7,0x5b,0xf8,0x15,0x89,0xeb,0x86,0x8f,0x7d,0x93,
    0xcf,0xf3,0x3d,0xfa,0xcc,0xbd,0x00,0xe7,0x3e,0x99,0xb9,0xbd,0xe0,0xef,0x31,0x73,
    0xfb,0xc0,0x6e,0x11,0x67,0xdf,0xe8,0x00,0x71,0xfd,0xc4,0x59,0x4f,0x0f,0x80,0x8f,
    0x84,0x28,0xbb,0x3b,0x0e,0x52,0x6f,0x1f,0xdf,0xf7,0x01,0xe9,0xd5,0x4b,0xc4,0x0f,
    0x4a,0xaf,0x0e,0x81,0x7b,0xaf,0x0e,0x83,0x79,0xaf,0x86,0xa5,0x57,0x66,0x1b,0x8a,
    0xb5,0x4a,0xfa,0x87,0xe4,0xbc,0x5f,0xa6,0x76,0x26,0xe6,0xaf,0x88,0x77,0xc6,0xab,
    0x60,0x07,0xe5,0x3b,0x4c,0xc7,0x7a,0xf9,0x68,0x3f,0x42,0x9c,0xaf,0xf3,0x21,0x97,
    0xe1,0x47,0x89,0x3d,0x12,0x73,0xad,0x8b,0xba,0x5e,0x23,0xcf,0x51,0xee,0x82,0x9c,
    0xdc,0x49,0x76,0x26,0xc3,0x70,0x1a,0x11,0xbd,0xc7,0xd1,0x7b,0x4c,0xf4,0xbe,0x0e,
    0xee,0x7a,0xdf,0x00,0x73,0xbd,0x63,0xa2,0xd7,0x6c,0xa3,0x61,0x8d,0x91,0x7b,0x54,
    0xf4,0xbe,0x29,0x7a,0xbf,0x22,0xd7,0x5b,0xe0,0x7d,0x70,0xf2,0xb8,0x31,0xe6,0xc4,
    0x7c,0x4e,0x50,0x73,0x04,0xff,0x51,0xea,0x4e,0x48,0x5d,0xf3,0x19,0x0f,0x6b,0x82,
    0xf8,0x71,0xa9,0x7b,0xf2,0x3f,0xfa,0xfc,0xf6,0x7d,0xfa,0x7c,0x9a,0x38,0x5f,0x97,
    0xe8,0xf3,0x19,0x62,0x4f,0x4b,0x9f,0xcf,0x92,0xe7,0xcc,0xff,0xf4,0xd9,0x39,0x4d,
    0xa0,0xc9,0x62,0x7e,0x22,0x66,0x8c,0xf8,0xf1,0xb2,0x33,0x19,0x16,0xdf,0x1f,0x39,
    0xcb,0x21,0xe2,0x2c,0xcf,0x39,0xfe,0x86,0x4c,0x61,0xf7,0xf3,0x7b,0x87,0xf3,0x9b,
    0x96,0xf3,0x7b,0x17,0xdc,0xcf,0xef,0x1c,0x98,0x9f,0xdf,0xac,0xf4,0xd1,0x6c,0x33,
    0x71,0xae,0x4a,0x3c,0x66,0xd0,0x69,0xb5,0x3e,0xa0,0xde,0x14,0x3a,0x0b,0xf4,0xcc,
    0x75,0xce,0x12,0x73,0x5e,0xf8,0x5c,0x84,0xcf,0x05,0xe1,0x73,0x09,0xdc,0xf9,0x5c,
    0x06,0x73,0x3e,0xf3,0xc2,0xc7,0x6c,0x73,0x61,0x2d,0x90,0x7b,0x8e,0x73,0xb5,0x3c,
    0x57,0xe0,0x92,0xe1,0x7e,0x34,0x8e,0xdf,0x08,0xee,0x77,0xcf,0x3c,0xb1,0x0b,0x72,
    0x2f,0x7c,0x08,0xaf,0xab,0x72,0x2f,0x7c,0x04,0x7e,0x97,0xb9,0xf9,0x18,0xac,0x5f,
    0xb8,0x7e,0x02,0xde,0x07,0xd7,0x25,0xe1,0x6a,0xb6,0xc5,0xb0,0x96,0xa8,0xb7,0x28,
    0xbc,0xbe,0x45,0xdf,0x94,0xdc,0xdb,0xee,0xb7,0xc4,0x59,0x9b,0xdf,0x6d,0x7c,0x16,
    0x88,0x59,0x14,0x3e,0x9f,0xc2,0xa7,0x45,0xf8,0x7c,0x06,0xee,0x7c,0x56,0x84,0x8f,
    0xd9,0x96,0xc3,0x5a,0xa1,0xce,0xb2,0xf0,0xf9,0x0e,0x3e,0xb7,0x39,0x43,0xe3,0xe3,
    0x7e,0x2b,0xc2,0xe7,0x0e,0x3e,0x4b,0xc4,0x2c,0x0b,0x9f,0xcf,0xe1,0x33,0x2d,0x7c,
    0xae,0x81,0x3b,0x9f,0x35,0xe1,0x63,0xb6,0xd5,0xb0,0xd6,0xa8,0xb3,0x2a,0x7c,0xbe,
    0xe7,0x7f,0xbc,0x3b,0x32,0x4f,0xee,0xb7,0x26,0x7c,0x7e,0xc5,0x67,0x85,0x98,0xd5,
    0xb2,0x33,0x9e,0x17,0xdf,0x5f,0x98,0x87,0x39,0xe2,0xd6,0xca,0xe6,0x74,0x56,0x7c,
    0x7f,0x66,0xbe,0x67,0x88,0xb3,0x3c,0xbb,0x03,0x93,0x1b,0xd8,0xfe,0x0e,0xa7,0xd6,
    0x15,0xd6,0x3f,0x97,0xda,0x83,0x8c,0xb4,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
