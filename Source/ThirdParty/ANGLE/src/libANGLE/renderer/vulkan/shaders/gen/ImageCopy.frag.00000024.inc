// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000024.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000024[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x4c,0x96,0x55,
    0x18,0xc7,0xef,0xf3,0x3c,0xf0,0x80,0xf8,0x12,0xe5,0x4b,0xa2,0xac,0x41,0xa8,0x69,
    0x12,0x9a,0x19,0x9a,0xf8,0x08,0xa6,0x09,0x53,0x12,0x5f,0x56,0x9b,0x19,0x39,0xcc,
    0x4a,0x4d,0xb1,0xa0,0xb5,0x74,0x69,0x28,0x99,0xb2,0x96,0xce,0x0f,0x7d,0xd0,0x4a,
    0xb7,0xbe,0xf8,0xa1,0xe9,0xac,0xf4,0x43,0x6a,0xc9,0x9a,0xd3,0x56,0xd2,0x56,0xb2,
    0x95,0x34,0xfd,0xd8,0xa7,0x96,0xcb,0x65,0x52,0x2d,0xeb,0x5c,0xe7,0xfc,0x2e,0xb8,
    0x62,0xbd,0xb0,0x9d,0xdd,0xf7,0xf9,0x9f,0xeb,0x7f,0xbd,0xfc,0xcf,0x75,0xce,0x0d,
    0xa4,0x53,0x65,0x79,0x49,0xe2,0x92,0x82,0x24,0x3f,0x59,0xe2,0x92,0xf0,0x73,0x6b,
    0x92,0x4a,0xe4,0x75,0x70,0x92,0x09,0xcf,0xda,0xfa,0xe5,0xf5,0x15,0xad,0x2f,0xac,
    0xa9,0x98,0x7e,0xff,0x54,0x59,0x1f,0x96,0xa4,0x83,0x9d,0xac,0xdd,0x92,0xe4,0x25,
    0x39,0xfe,0x29,0x63,0x63,0xd3,0xba,0x66,0xc1,0x27,0xf8,0x71,0xc5,0x8f,0x42,0x6f,
    0x27,0x78,0x9e,0xf8,0xf0,0x6f,0x13,0x82,0x4f,0xe1,0x24,0x49,0x5d,0x92,0x9b,0x94,
    0xc7,0x70,0x49,0x19,0x4f,0xc5,0x1c,0x58,0xbe,0xc1,0x52,0x60,0x85,0x06,0x4b,0x83,
    0x8d,0x30,0x58,0x0e,0xd8,0x68,0x83,0xe5,0x82,0x15,0x1b,0x2c,0x03,0x56,0x62,0xb0,
    0x3c,0xb0,0x71,0x06,0xcb,0x07,0x9b,0x68,0xb0,0x41,0x60,0xe5,0x06,0x2b,0x00,0x9b,
    0x6a,0xb0,0xc1,0x60,0xd3,0x0d,0x36,0x04,0x6c,0xa6,0xc1,0x86,0x82,0xcd,0x0e,0x3a,
    0xa5,0xfb,0xea,0x15,0xcd,0x56,0xfa,0xe7,0x9d,0xe8,0xa3,0xf3,0x52,0x33,0x17,0x9d,
    0xef,0x60,0x3e,0xdc,0xb3,0x52,0x61,0x3d,0x1d,0xb4,0x91,0xf7,0x51,0xfe,0x2d,0x43,
    0x9d,0x93,0xbd,0x7d,0x86,0x78,0xdf,0x1f,0x1d,0x9f,0x1d,0xe1,0x2d,0x86,0x19,0x5c,
    0x34,0x3b,0x5a,0xdb,0x94,0xd5,0xb9,0xe8,0x75,0x60,0x7f,0x51,0xcd,0x48,0x3f,0x2f,
    0xc1,0x87,0xec,0xcd,0xed,0x7e,0x5e,0xca,0x3c,0xc5,0x7c,0x1c,0x9a,0xe6,0x04,0x3c,
    0x27,0x19,0x8f,0xad,0xe0,0x55,0xcc,0x27,0x18,0xfe,0x5d,0xd8,0x0b,0x5f,0xfc,0x4f,
    0xc6,0x5f,0x12,0xea,0x29,0x0c,0x1a,0x94,0x32,0x4a,0xfa,0xf2,0xff,0xef,0x51,0xd2,
    0xf7,0xcc,0x49,0xee,0x61,0x9f,0xca,0x89,0x2f,0xf3,0x0a,0xb0,0xc9,0xd4,0x33,0x85,
    0x7c,0xc4,0x7e,0x2a,0x6b,0xa5,0x66,0xbd,0xd2,0xd4,0x33,0xa3,0x8f,0x1b,0xd7,0xe5,
    0x39,0x8b,0x7c,0xd5,0x7e,0x1e,0xbd,0xa6,0xf3,0xc5,0x68,0x2d,0xf5,0x3e,0x4a,0x7e,
    0xe2,0xaf,0xc8,0x7b,0x5a,0x61,0xf4,0xb3,0x3f,0x1c,0xc1,0x10,0xf3,0x31,0xde,0x57,
    0x50,0x83,0xcc,0x57,0x0e,0x88,0xd9,0x38,0x60,0xbe,0x9a,0x73,0x21,0xfc,0x27,0xc9,
    0xb9,0x84,0x1c,0x9e,0xe6,0x3d,0x6d,0xec,0xd7,0x93,0x83,0xce,0x9b,0xd9,0x17,0x9d,
    0x6f,0xe3,0x5c,0xe8,0xfc,0x00,0x7d,0xad,0xf3,0x63,0x9c,0x11,0x9d,0x9f,0x1a,0xa0,
    0xf1,0x39,0x7a,0x5e,0x7b,0xea,0x4b,0x93,0xaf,0xcc,0xbf,0x0b,0xb3,0xb6,0x6a,0xc9,
    0xf7,0x32,0xb9,0x69,0xcf,0x5c,0xe6,0x1e,0x49,0x1b,0xfb,0x59,0x5e,0xa0,0xed,0x6d,
    0x6d,0x55,0xe5,0x3e,0xab,0x60,0xe7,0x22,0x66,0x87,0xda,0xce,0xf6,0xef,0x9b,0x0e,
    0xb7,0x54,0xeb,0x3c,0xeb,0xe7,0xfb,0xda,0x0f,0x66,0x2b,0xfd,0x2e,0xa5,0xd8,0x8b,
    0x04,0xff,0xbd,0x1e,0x91,0xbd,0xcb,0xd2,0xcb,0x13,0xe9,0xd7,0x06,0x1f,0x47,0x7a,
    0x75,0x12,0xd8,0x44,0xb3,0x4f,0xcd,0x9c,0x83,0xbb,0x59,0x9f,0xeb,0x3d,0x48,0x1f,
    0xdd,0x4b,0xaf,0x4d,0xc1,0x9f,0xd8,0x4c,0x03,0xdf,0xe1,0x6d,0x64,0x7e,0x1f,0xbc,
    0x69,0xf0,0x66,0x70,0x27,0x54,0xd0,0x77,0x59,0x7a,0xec,0x01,0xf0,0xf7,0xbc,0xcd,
    0xb0,0xa0,0x4b,0xc4,0xa4,0xf7,0x6e,0xf8,0xcc,0xb3,0xe4,0xf3,0x9b,0xb7,0xaf,0xe2,
    0x0e,0xc9,0x52,0x8f,0xbc,0x2f,0xf5,0x3c,0xd9,0x87,0x1a,0x62,0x26,0x61,0x4f,0xe3,
    0xde,0xcc,0x05,0x5f,0xe6,0xd5,0x09,0xe7,0xcc,0x45,0x4c,0xed,0x7e,0xf5,0x3e,0xd4,
    0x97,0x3c,0xaf,0x7b,0x2d,0xc4,0x6e,0x8e,0x8b,0x36,0xb9,0x70,0x66,0x9b,0x1a,0xe6,
    0x53,0xc3,0x3c,0x53,0xc3,0x43,0xe0,0x5a,0xc3,0x02,0x30,0xad,0xa1,0xce,0xd4,0xb0,
    0x20,0xdc,0x6b,0x49,0xc0,0x24,0x6e,0xad,0xa9,0x61,0x11,0xb1,0x9d,0xa9,0xa1,0x1e,
    0x5c,0x6b,0x28,0x73,0x11,0x53,0x3b,0xa9,0x41,0x7d,0xd5,0x99,0x1a,0xaa,0x5d,0xb4,
    0xc9,0xc2,0xa9,0x35,0x35,0x34,0x50,0xc3,0x62,0x53,0xc3,0x12,0x70,0xad,0x61,0x29,
    0x98,0xd6,0xb0,0xdc,0xd4,0xb0,0x34,0xe4,0x93,0x04,0x4c,0xe2,0x2e,0xa3,0x8f,0x24,
    0xee,0x23,0xc4,0xae,0x76,0xfd,0x67,0x5d,0x72,0x54,0xdb,0xe5,0x26,0xc7,0x1a,0xec,
    0xea,0xe0,0x2d,0x23,0x1f,0xb9,0x0f,0x1e,0xe7,0x2e,0xd0,0x9e,0x7b,0x82,0x9c,0x1b,
    0x4d,0xcf,0xad,0x02,0x6f,0xa3,0xe7,0x9a,0xc0,0x6a,0x5c,0xe4,0xc9,0xfd,0xb0,0x06,
    0xde,0x6a,0x78,0xa2,0xe9,0x53,0xe0,0xaa,0xfb,0x33,0x70,0x13,0x83,0xad,0x05,0x73,
    0x41,0x87,0x4c,0xb8,0x5b,0xd6,0x61,0xbb,0x16,0x1f,0x1a,0xe3,0x59,0x62,0xac,0x37,
    0x31,0x36,0x80,0xaf,0xf2,0xb5,0xca,0xdd,0xb8,0x91,0x9a,0xd6,0x71,0x1f,0x6d,0x30,
    0xfb,0xb1,0x09,0x7e,0xb3,0xd9,0x8f,0xe7,0xc0,0x75,0x3f,0x9e,0x07,0xd3,0xfd,0x68,
    0x35,0xfb,0x21,0x6b,0x2d,0x7e,0x6c,0x45,0xe3,0xad,0xc6,0xf7,0x2b,0xf8,0xde,0x66,
    0x7c,0xb7,0x81,0xab,0xef,0xed,0x60,0xea,0xbb,0xdd,0xf8,0xde,0x1e,0xce,0x74,0x12,
    0x30,0xf1,0xbd,0xc3,0x68,0xb4,0x93,0xba,0xe4,0x7e,0x39,0x82,0xaf,0xd7,0xc0,0x1b,
    0xd9,0x77,0xe5,0xb5,0xb3,0xef,0x62,0xb3,0x8b,0x98,0x5b,0xb1,0xdf,0x41,0xdc,0x0e,
    0x13,0x57,0x6c,0x76,0xfb,0xd1,0x01,0x7f,0xb7,0x89,0xfb,0xba,0x89,0xdb,0xe0,0x6f,
    0x67,0xd9,0x9b,0x37,0xc0,0x36,0x9a,0xfb,0x2b,0x65,0xf6,0x6e,0x0f,0x3c,0x1d,0xbb,
    0xbc,0x2f,0xc1,0xf7,0xc2,0xdd,0x13,0x7c,0x0d,0x0a,0x7b,0xb5,0x0f,0x3f,0x7b,0xb9,
    0x43,0x73,0xf9,0x66,0xa4,0xa9,0x49,0x73,0xea,0xa0,0x26,0xe1,0xcc,0x73,0x91,0xd3,
    0x0e,0x7f,0x37,0xb6,0xad,0xd8,0xb6,0x98,0xfc,0x5f,0xfc,0x87,0xfc,0x5f,0xfa,0x9f,
    0xfc,0x37,0xc3,0xd3,0xf1,0x2a,0xf9,0x6f,0x81,0xbb,0xd9,0xe4,0xff,0x32,0x7e,0xb6,
    0xfc,0x4b,0xfe,0x9a,0x53,0xab,0xc9,0xff,0x41,0x17,0x6b,0xe8,0x80,0xdf,0x12,0xfa,
    0x2f,0x7e,0x2b,0xde,0x64,0x7d,0xa7,0xf7,0x24,0xf3,0xfd,0x60,0x55,0xae,0xbf,0xcf,
    0xde,0xa2,0xcf,0x0e,0x98,0x3e,0x7b,0x1b,0x5c,0xfb,0xec,0x1d,0x30,0xed,0xb3,0x43,
    0x66,0xbf,0x65,0xed,0xa0,0x1f,0x87,0xc8,0xed,0x20,0x7a,0x49,0xde,0xef,0x12,0x33,
    0x81,0xd7,0xcb,0xfb,0xef,0xfe,0x5d,0x7c,0xfd,0x00,0x47,0x9e,0xa7,0x89,0xf5,0x23,
    0xbc,0xa1,0x70,0x6e,0x98,0x58,0xb2,0x76,0xd5,0x8f,0x6b,0xf0,0xae,0x85,0x7e,0x8c,
    0xb1,0x7e,0x86,0x37,0x3a,0x89,0xf5,0x66,0x82,0x46,0x11,0x97,0xef,0xed,0x10,0xaf,
    0x97,0x60,0xbf,0xb0,0x47,0x63,0x58,0x2f,0x46,0xdb,0x5e,0x7c,0x5e,0x35,0xfc,0x9f,
    0xf0,0x29,0xdf,0x67,0x6b,0x23,0x39,0xfd,0xe9,0xbd,0xf4,0x82,0x5d,0xc7,0xf7,0x7c,
    0x17,0xfd,0x5f,0x83,0x7b,0x95,0xfb,0x5f,0xb4,0x9f,0xe4,0xe2,0xfa,0x7e,0x73,0x5f,
    0x09,0xe7,0x30,0x1a,0x39,0xea,0x2d,0x70,0x7f,0xd7,0xe8,0x26,0x31,0x6f,0x1a,0x8d,
    0xc4,0xf8,0xb0,0xd1,0x68,0x90,0xeb,0xd7,0x48,0xd6,0x9c,0x1f,0x39,0x2e,0xf2,0xe4,
    0xa9,0x1a,0x65,0xe0,0x59,0x8d,0xf2,0x5c,0xc4,0xad,0x46,0xf9,0xae,0x5f,0x23,0x59,
    0x57,0x8d,0x0a,0xf0,0xe9,0x5c,0x3f,0x3f,0x8d,0x4f,0xd5,0x48,0x6d,0x24,0x27,0xd5,
    0x48,0x30,0xd5,0x68,0x81,0x8b,0xfe,0x25,0xaf,0x34,0xb9,0xaa,0x46,0xe5,0x2e,0xae,
    0x4f,0x22,0xbe,0x6a,0x74,0x04,0x8d,0x52,0xd4,0x5b,0x3c,0x40,0xa3,0x42,0x62,0xca,
    0x53,0x35,0xba,0xcd,0x45,0x9e,0x6a,0x34,0xd6,0x68,0x24,0x6b,0xc3,0xfd,0x18,0x05,
    0x6f,0x94,0xd1,0x68,0x34,0x3c,0xab,0x51,0x91,0x8b,0xb8,0xd5,0x68,0x8c,0xd1,0xa8,
    0xc8,0x68,0x54,0x8c,0xcf,0xe1,0x46,0xa3,0x91,0xf8,0x54,0x8d,0xd4,0x66,0xac,0xd1,
    0xa8,0xd8,0x68,0x54,0xe7,0xa2,0x7f,0xc9,0x6b,0x24,0xb9,0xaa,0x46,0x53,0x5c,0x5c,
    0x17,0xad,0x52,0xc4,0xd4,0xb3,0x77,0x88,0x5e,0x14,0xbb,0x85,0xf4,0x5a,0x2b,0x9c,
    0x62,0x73,0xe6,0xdf,0xe7,0xcc,0x1f,0x33,0x67,0xfe,0x03,0x70,0x3d,0xf3,0x1f,0x82,
    0xe9,0x99,0x3f,0x61,0xce,0xa1,0xac,0x1d,0xf7,0xe3,0x24,0x71,0x4f,0x9a,0xef,0xd6,
    0x69,0x7c,0x9f,0x32,0xbe,0x3f,0x06,0x57,0xdf,0x9f,0x80,0xa9,0xef,0x4e,0xe3,0x5b,
    0xd6,0xce,0xf8,0x71,0x16,0xdf,0x67,0xcd,0xf7,0xfa,0x3c,0xbe,0xcf,0x99,0xef,0xf5,
    0x67,0xe0,0xe7,0xb9,0xa3,0x3f,0x07,0x5b,0x6f,0xe2,0x7d,0x01,0xde,0x48,0xbc,0x2e,
    0x13,0x4f,0xd6,0x2e,0xf8,0xd1,0x45,0xbc,0x0b,0xe6,0xcc,0x4e,0x77,0xf1,0xef,0x82,
    0x85,0xe6,0x77,0x36,0xb5,0xeb,0x32,0x5a,0x2f,0x72,0xd1,0xe6,0x2c,0x9c,0x0b,0x26,
    0x9f,0xaf,0xc8,0xa7,0xd2,0xe4,0xf3,0x35,0xb8,0xe6,0xd3,0x6d,0xf2,0x91,0xb5,0x8b,
    0x7e,0x74,0x13,0xe7,0xa2,0xc9,0xa7,0x92,0x7c,0x16,0x99,0xbd,0x57,0xbb,0x6e,0x93,
    0x4f,0xbd,0x8b,0x36,0x5d,0x70,0x2e,0x9a,0x7c,0xbe,0x21,0x9f,0x63,0x26,0x9f,0x6f,
    0xc1,0x35,0x9f,0x1e,0x93,0x8f,0xac,0x5d,0xf2,0xa3,0x87,0x38,0x97,0x4c,0x3e,0x33,
    0x5d,0xfc,0x3b,0x49,0xe2,0xe9,0x37,0x4a,0xed,0x7a,0x4c,0x3e,0x0d,0x2e,0xda,0x74,
    0xc3,0xb9,0x84,0x6d,0x27,0xb6,0x67,0xcc,0x59,0xff,0x14,0xbd,0xd3,0x26,0xce,0x34,
    0xd7,0x8f,0x27,0x03,0xb8,0x9d,0x26,0xce,0x62,0x17,0x63,0xf5,0xc0,0x39,0x83,0xed,
    0x09,0x6c,0x8f,0xf3,0xad,0x15,0xdb,0x8f,0xf0,0x27,0x43,0xff,0x17,0x94,0x32,0xdf,
    0x5a,0xe5,0x9c,0x30,0xfe,0x1f,0x76,0x31,0x46,0x27,0x7c,0xf1,0x37,0xc7,0x33,0xae,
    0xb0,0xf6,0x87,0xef,0x92,0x99,0x7e,0xfc,0x05,0x45,0xf1,0x98,0x88,0xbc,0x12,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
