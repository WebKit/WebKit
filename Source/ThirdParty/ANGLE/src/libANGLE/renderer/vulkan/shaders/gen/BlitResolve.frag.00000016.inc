// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x93,0xdd,0x4e,0x53,0x41,
    0x14,0x85,0xa7,0x2d,0xb4,0xa0,0x56,0x4a,0xb0,0x20,0xc6,0x08,0x8a,0x17,0x26,0x0a,
    0xe1,0x42,0x0d,0x89,0xd1,0xe8,0x05,0x08,0x06,0x29,0x14,0x45,0x2e,0xd0,0x82,0x50,
    0x02,0x01,0x5a,0x85,0xaa,0x8d,0x18,0x4d,0x10,0x7d,0x03,0x7d,0x09,0x9f,0xcf,0xf8,
    0x93,0x98,0xb8,0xd7,0xe9,0x37,0xb8,0xc3,0x85,0x27,0xd9,0x67,0x66,0xaf,0xfd,0xbb,
    0x66,0xcf,0x64,0xd2,0x43,0xb9,0x10,0x52,0xe1,0x44,0xe8,0x08,0x9f,0x43,0xeb,0xeb,
    0x0e,0x69,0x43,0x5a,0xeb,0x97,0x9e,0x60,0xb6,0xce,0x30,0x3f,0xbb,0x50,0x19,0x5f,
    0x7c,0x54,0xd9,0xdb,0x58,0x59,0xab,0xee,0x56,0xf6,0x1a,0xd5,0xda,0xea,0xe6,0x76,
    0xa5,0xda,0x7c,0x51,0xdf,0x6d,0x98,0xef,0xc9,0x90,0x4d,0x62,0xee,0x4f,0xcf,0x4f,
    0x8f,0xec,0x35,0xd6,0x46,0xae,0xdf,0x18,0x55,0xae,0xd3,0x21,0x93,0xe4,0x94,0xad,
    0xcb,0x6a,0xb4,0xd9,0x2a,0xd9,0x59,0xd9,0xac,0x09,0x2f,0x98,0x4c,0x98,0x94,0x92,
    0x7d,0x26,0xb1,0xe5,0xdc,0xfe,0x94,0x72,0xda,0xae,0x90,0xd4,0x50,0x8e,0x10,0x26,
    0x43,0x7b,0xe8,0xa5,0xd7,0x21,0xd6,0x88,0xa5,0xc0,0x3a,0x1c,0x96,0x06,0x2b,0x38,
    0x2c,0x03,0x76,0xd6,0x61,0x6d,0x60,0xe7,0x1d,0xd6,0x0e,0x36,0xe8,0xb0,0x2c,0xd8,
    0x65,0x87,0xe5,0xc0,0xae,0x38,0xac,0x03,0xec,0x9a,0xc3,0x3a,0xc1,0x46,0x13,0x5e,
    0x99,0xa3,0xfe,0xc4,0x71,0x02,0x8e,0xbd,0xe8,0x53,0xb6,0x5e,0x82,0x5f,0xd4,0x2f,
    0x3a,0xbd,0x84,0xff,0xd7,0x9e,0x96,0x5e,0x3e,0xe6,0x5f,0xc6,0x5f,0x67,0xd2,0x63,
    0x55,0xd2,0x89,0x9e,0x49,0xb8,0x6b,0x5f,0x34,0x9f,0x2c,0xdc,0xe4,0xd3,0x67,0x7a,
    0x0e,0x7e,0xe9,0xa4,0x8f,0x4c,0xc8,0x63,0x97,0xed,0xb4,0xad,0x79,0xce,0x69,0xd0,
    0xfe,0x5d,0xc4,0x09,0xbf,0x85,0x5e,0x70,0xb9,0xba,0xf1,0x8f,0xb5,0x8a,0xe4,0xd2,
    0x77,0xc1,0x26,0x1b,0xcf,0xad,0x1b,0xc9,0x22,0x79,0xd6,0xa2,0x13,0xd5,0xeb,0xe3,
    0xfc,0x7a,0xa9,0xd7,0xc7,0xfc,0x84,0x5d,0x85,0x4b,0x3f,0xf9,0xe5,0x7f,0x0e,0x5b,
    0xce,0xd9,0x07,0xd0,0x65,0x1f,0xc4,0xae,0xfc,0x67,0xac,0xcb,0x21,0xfc,0x8a,0xcc,
    0x36,0xb8,0xb8,0x61,0xe6,0x19,0xf5,0x31,0x62,0x95,0x67,0x9c,0xfb,0x94,0xa7,0xaf,
    0x71,0xee,0x74,0x26,0xe9,0xa7,0xd3,0x66,0xd1,0xb2,0xa5,0xc2,0xbf,0x2f,0xe5,0x74,
    0xe5,0x98,0x3c,0x9a,0x5b,0x2b,0x87,0xf4,0x29,0x67,0x9f,0x21,0x5f,0x16,0xfb,0x0c,
    0x6f,0x26,0xd6,0x98,0x85,0xc7,0xff,0x6a,0xcc,0xb1,0x9f,0x25,0x87,0xf4,0x32,0x98,
    0xe6,0xf5,0x98,0x1c,0x9a,0xef,0x4d,0xbb,0xaf,0x69,0xf6,0x81,0x3a,0x3f,0x0d,0xd1,
    0x7b,0xb8,0xcd,0x5d,0x58,0x62,0xde,0x25,0x3b,0x51,0xcd,0xef,0x29,0xd8,0x92,0xab,
    0x5f,0xe3,0x4e,0x3d,0xc3,0x7e,0xcf,0x32,0x68,0x2e,0x15,0x66,0xd7,0x4f,0x3e,0xf9,
    0x2c,0x83,0x1f,0x98,0x8f,0xf4,0xe7,0xc4,0x2d,0x13,0xa7,0x79,0xad,0x12,0x37,0x40,
    0x9c,0xfa,0x5d,0x03,0xff,0x66,0x3e,0x9a,0x61,0x15,0x4c,0x33,0xfc,0x61,0x9d,0x6f,
    0xd1,0xcf,0x6f,0xf3,0x97,0x6d,0xdd,0x64,0x0b,0x3e,0xda,0xcf,0x59,0x9c,0xce,0x75,
    0x83,0x9a,0xfa,0xde,0x33,0xe7,0x4d,0xf0,0xb2,0x69,0xea,0xe9,0x03,0x58,0xf4,0xfb,
    0x65,0x39,0x62,0x2e,0xad,0xdf,0xcd,0x4b,0x7e,0x1f,0xf1,0x69,0x27,0x66,0xdd,0x71,
    0xd8,0x86,0xc3,0xb0,0xe3,0xb0,0x03,0x1e,0x39,0xd4,0xc0,0x22,0x87,0x86,0xe3,0x20,
    0x5b,0xdd,0xa4,0x41,0xdd,0xba,0xe3,0xf0,0x92,0xda,0x29,0xc7,0x61,0x17,0x3c,0x72,
    0x38,0x00,0x8b,0x7e,0xe2,0x10,0x73,0x35,0x1c,0x87,0x43,0x7c,0xb6,0x88,0xa9,0x3b,
    0x0e,0xaf,0xe0,0x30,0xe6,0x38,0xbc,0x06,0x8f,0x1c,0xde,0x80,0x45,0x0e,0xfb,0x8e,
    0x83,0x6c,0x4d,0x93,0x7d,0xea,0x36,0xb9,0x47,0xaa,0xfb,0x96,0xda,0x87,0xee,0xfe,
    0xaa,0xc7,0xe8,0xbb,0xef,0x7a,0xfc,0x84,0x5f,0x83,0xb8,0x26,0xfd,0xe8,0x1d,0x3d,
    0xe0,0x0d,0x55,0xcc,0x53,0xf7,0x75,0x1a,0x4c,0x31,0x77,0xb9,0x7b,0x3a,0x37,0xbd,
    0xcd,0x87,0xd8,0xf5,0xdd,0xb1,0x5e,0x27,0xc0,0x94,0x4b,0xef,0x65,0x9e,0xb7,0xa2,
    0x5c,0x7a,0x27,0x0b,0x60,0xc7,0x73,0xe9,0x1c,0x9e,0x60,0xd7,0xf7,0x8e,0x19,0x2c,
    0x82,0x2b,0x77,0x09,0xfd,0x8f,0xb1,0x1b,0x33,0xf9,0x0b,0x5e,0x1d,0x06,0x2b,0x84,
    0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
