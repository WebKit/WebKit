// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x93,0xdb,0x4e,0x53,0x51,
    0x10,0x86,0x57,0xbb,0x4b,0x0b,0x05,0x5a,0x68,0x39,0xd8,0x08,0x52,0xa0,0x89,0x04,
    0xb0,0x25,0x2a,0x08,0x68,0x39,0x18,0x4b,0x11,0x51,0x51,0x0c,0xa2,0x37,0x0d,0x11,
    0x12,0x49,0xb4,0x1a,0xe0,0xc2,0x0b,0xe3,0x85,0xef,0xa0,0x2f,0xe1,0xf3,0x19,0x0f,
    0x89,0x89,0x33,0x6b,0x7f,0x0b,0x27,0x5c,0xb8,0x93,0xb5,0xf7,0x9e,0x7f,0xfe,0x39,
    0xfc,0x6b,0xad,0x89,0x92,0x93,0x19,0xe7,0x12,0x2e,0xeb,0x3a,0xdd,0x4b,0x17,0x3f,
    0xfd,0x2e,0x29,0x48,0xfc,0xfd,0x52,0x74,0xe2,0xeb,0x72,0xbb,0x3b,0x7b,0xad,0xc6,
    0xfe,0xb3,0xd6,0xe9,0xeb,0x83,0xc3,0xa3,0x93,0xd6,0xe9,0xd9,0x51,0xfb,0xd5,0xf1,
    0x9b,0xd6,0xd1,0x87,0xf7,0xef,0x4e,0xce,0x84,0xdb,0xed,0xd2,0x3e,0xa6,0xb9,0xbd,
    0xbb,0x5d,0x3d,0x3d,0x3b,0xac,0xde,0x9c,0x9f,0xd3,0x5c,0x39,0x17,0xf9,0x9c,0xea,
    0xcb,0x4b,0x8d,0x94,0x7c,0x75,0xbd,0x3d,0x38,0x6e,0x2b,0xde,0x2b,0x6b,0x45,0xe3,
    0x64,0xf5,0x09,0x57,0x7d,0x19,0xf3,0xdf,0xe3,0x7d,0x29,0xcf,0xeb,0xf6,0x39,0x9c,
    0xdb,0x74,0x1d,0xae,0x48,0xaf,0x93,0x7c,0x03,0x96,0x00,0xeb,0x34,0x58,0x12,0xac,
    0xcf,0x60,0x11,0xd8,0x25,0x83,0xa5,0xc0,0x46,0x0c,0xd6,0x01,0x56,0x36,0x58,0x1a,
    0xac,0x62,0xb0,0x0c,0xd8,0x94,0xc1,0x3a,0xc1,0x66,0x0d,0xd6,0x05,0x36,0xe7,0x75,
    0x45,0xe7,0xfd,0xa9,0xc6,0x15,0x34,0x0e,0x61,0xaf,0xcb,0x77,0x02,0x7d,0xc1,0x1e,
    0x37,0x76,0x13,0xfe,0xd7,0x62,0x6c,0x6f,0x5d,0xe0,0x6f,0xc1,0xd7,0x3d,0x29,0x4a,
    0x95,0xa4,0xb7,0x23,0xaf,0x5d,0xff,0x07,0x85,0x93,0x46,0x9b,0x72,0x86,0xc5,0xce,
    0xa0,0x2f,0xe9,0xfb,0x88,0xe4,0xec,0x63,0xbf,0xfa,0xb4,0x56,0x96,0x7d,0x2a,0xcb,
    0xbb,0x87,0x38,0xc5,0x6f,0x63,0xf7,0x9a,0x5c,0x39,0xf8,0xa1,0x56,0x81,0x5c,0xfa,
    0x5c,0x11,0x76,0xd8,0xb7,0x1c,0x2b,0xcd,0xca,0xf2,0x2d,0x98,0xa5,0xf5,0x06,0xd8,
    0xbf,0x22,0xf5,0x06,0x7c,0xde,0x18,0x9b,0x41,0xcb,0x10,0xf9,0x95,0x3f,0x8c,0x2f,
    0x63,0xfc,0x23,0xd8,0xea,0x1f,0xc5,0xaf,0xf9,0x07,0xa4,0xcb,0x32,0xbc,0x82,0xd9,
    0xe7,0x10,0x37,0xcd,0x79,0x06,0x7b,0x9e,0x58,0xcd,0x53,0xe7,0x3e,0x65,0xe9,0xab,
    0xce,0x9d,0x56,0xac,0x24,0xac,0x55,0x7c,0x09,0xf7,0xef,0x49,0x18,0x5b,0x73,0xac,
    0xf1,0xbf,0x4a,0x0e,0xb5,0xd7,0x8d,0x7f,0x83,0x7c,0x69,0xfc,0x1b,0xcc,0x4c,0xa8,
    0xb1,0x89,0x8e,0xff,0xd5,0xb8,0x7f,0x3e,0x2b,0x71,0x0e,0xb5,0xb7,0xc0,0xf4,0xbc,
    0x1e,0x92,0x43,0xcf,0x77,0x41,0xee,0x6b,0x92,0x7f,0x47,0x9d,0x9f,0x82,0xe8,0x3c,
    0xd4,0xb9,0x0b,0x79,0xce,0xfb,0xb1,0xec,0x68,0x8e,0xf9,0xca,0xb3,0x42,0xfd,0x36,
    0x77,0xaa,0x1f,0xff,0xba,0x64,0x18,0x66,0xee,0x06,0x39,0xaf,0x3a,0x9c,0x12,0xf8,
    0x67,0xe1,0xa8,0x7d,0x99,0xb8,0x12,0x71,0xa3,0xfe,0xde,0xc4,0x71,0x23,0xc4,0x69,
    0xbf,0x63,0xe0,0xdf,0x84,0x53,0x66,0x06,0xc6,0x38,0xc3,0x1f,0xd2,0x79,0x85,0x7e,
    0x7e,0x0b,0x7f,0xc2,0xcc,0xae,0xea,0xd1,0xff,0x27,0x12,0xa7,0xfb,0x7a,0x95,0x9a,
    0xfa,0x7c,0xe2,0x9c,0xa7,0xc0,0x9f,0x8a,0xa5,0x3d,0xed,0x82,0x05,0xde,0x2f,0xc9,
    0x11,0x72,0xe9,0xf7,0xbb,0xb0,0x94,0xf7,0x1c,0x4e,0x07,0x31,0x93,0x46,0xc3,0x0c,
    0x1a,0xa6,0x8d,0x86,0x59,0xf0,0xa0,0xe1,0x1a,0x58,0xd0,0x50,0x33,0x1a,0xd4,0x57,
    0x95,0x55,0xa3,0x6e,0xd5,0x68,0xb8,0x4e,0xed,0x84,0xd1,0x70,0x03,0x3c,0x68,0xd8,
    0x03,0x0b,0x3c,0xd5,0x10,0x72,0xd5,0x8c,0x86,0x7d,0x38,0x15,0x62,0xaa,0x46,0xc3,
    0x02,0x1a,0xe6,0x8d,0x86,0x5b,0xe0,0x41,0xc3,0x22,0x58,0xd0,0xb0,0x6c,0x34,0xa8,
    0x6f,0x49,0xd6,0x32,0x75,0x97,0xb8,0x47,0x5a,0xf7,0x0e,0xb5,0xf7,0xcd,0xfd,0xd5,
    0x1e,0x03,0x77,0xd9,0xf4,0xf8,0x02,0x5e,0x8d,0xb8,0x25,0xfa,0xd1,0x39,0xba,0xcb,
    0x0c,0xb5,0x84,0xa9,0xf7,0xf5,0x1e,0x98,0xc6,0xac,0x71,0xf7,0x74,0xdf,0x74,0x36,
    0x1b,0xf8,0x9d,0x9f,0xdd,0xc8,0xcf,0x6f,0x83,0x5c,0x3a,0x2f,0x0f,0x98,0x15,0xcd,
    0xa5,0x73,0xf2,0x08,0xec,0x62,0xae,0x82,0xd7,0x11,0xfb,0xf5,0xf9,0xc8,0x19,0xec,
    0x80,0x6b,0xee,0x26,0xf6,0x1f,0x51,0xb7,0x28,0xeb,0x2f,0xec,0xbc,0x80,0xbe,0x84,
    0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
