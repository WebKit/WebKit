// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x55,0x55,
    0x10,0xc6,0xef,0x7d,0x49,0x5e,0x42,0xe8,0x90,0xd0,0x82,0x18,0x08,0x25,0x90,0x50,
    0x0d,0x45,0x40,0xc4,0xb1,0x60,0x41,0x51,0x11,0x85,0x8c,0x88,0x0a,0x1a,0x51,0x41,
    0x29,0x16,0x34,0x2a,0xd2,0x04,0x54,0x40,0x6c,0x20,0x8a,0x05,0x14,0x04,0x54,0x14,
    0x0b,0x45,0x11,0x11,0x70,0x64,0xc6,0x02,0x88,0x1d,0x15,0x0b,0xcc,0x80,0x14,0x1b,
    0x82,0x0d,0xcf,0xde,0xfb,0x5b,0xde,0x72,0xcc,0x5f,0x66,0xe6,0x4e,0xee,0x7e,0xbb,
    0xfb,0x9d,0x3d,0xbb,0x7b,0xca,0xbb,0x69,0x89,0x82,0xcc,0x20,0x08,0x83,0xec,0x20,
    0x2b,0x38,0x2e,0x0c,0xa2,0xbf,0x9a,0x41,0x22,0x90,0xd7,0xca,0x41,0x32,0xfa,0xdf,
    0xab,0x77,0xdf,0xde,0x6d,0x46,0x8d,0x1e,0xd2,0xa6,0xa4,0x63,0x3b,0xd1,0x57,0x0b,
    0xd2,0x22,0x3b,0xd1,0x55,0x77,0x36,0x19,0xee,0x7f,0xba,0x7b,0x86,0x5d,0x36,0x74,
    0xb8,0xe0,0xfb,0xdd,0x53,0xc3,0xe1,0xe9,0x11,0x57,0x10,0xf4,0xc4,0x56,0x9e,0xd3,
    0x9d,0x75,0xb3,0x78,0x98,0xa0,0x80,0xff,0x8a,0x85,0x60,0xe9,0x06,0x4b,0x80,0x65,
    0x19,0x2c,0x0d,0xac,0x8a,0xc1,0xd2,0xc1,0x6a,0x18,0x2c,0x03,0x2c,0xc7,0x60,0x49,
    0xb0,0x7a,0x06,0xcb,0x04,0x6b,0x68,0xb0,0x2c,0xb0,0x7c,0x83,0x55,0x02,0x6b,0x6a,
    0xb0,0x6c,0xb0,0x42,0x83,0x55,0x06,0x2b,0x36,0x58,0x15,0xb0,0x76,0x06,0xab,0x0a,
    0x56,0x62,0xb0,0x6a,0x60,0x5d,0x24,0xef,0x6e,0xa6,0x9a,0x83,0x5e,0x6e,0x86,0x83,
    0x89,0x5f,0xf3,0x33,0xc4,0xcb,0xa3,0xd8,0x0f,0x21,0x3f,0x62,0x7f,0xa5,0xfb,0xdf,
    0xe4,0x88,0x2e,0x96,0x1b,0x93,0x67,0x91,0x77,0x79,0x7c,0xbb,0x2b,0xe0,0xdb,0x6d,
    0xf8,0xf6,0x78,0x7c,0x7b,0xe0,0x53,0x79,0x3f,0x73,0x6f,0x88,0xdc,0x21,0x8c,0xe5,
    0xfa,0xee,0xa9,0xed,0x66,0x91,0x88,0xec,0xd3,0x22,0x3e,0x79,0xcf,0x75,0x36,0x49,
    0x72,0x1c,0x44,0xff,0xd3,0xa3,0x5a,0x64,0x12,0x57,0x63,0x17,0x53,0x16,0xef,0x8a,
    0x37,0x76,0x36,0x35,0x0d,0x56,0xc7,0xb1,0xe5,0xc2,0x21,0xba,0x3a,0x11,0x6f,0xac,
    0x13,0xbe,0x06,0xbc,0xe7,0xc2,0x97,0x67,0x7c,0x1b,0xe0,0x93,0x4f,0x3c,0x82,0x35,
    0x72,0xec,0xda,0x27,0xff,0xf7,0x91,0x71,0x9b,0xd3,0x2f,0xc2,0xd5,0x0d,0xb9,0x05,
    0x98,0xcc,0xbb,0x90,0x98,0xa5,0x16,0x45,0xc8,0x2d,0x8d,0x7f,0x2b,0x6c,0x93,0x46,
    0xdf,0x96,0x9e,0x56,0xb9,0x84,0xb8,0x8b,0xc8,0x63,0x77,0x6a,0xa9,0x72,0x0f,0xfa,
    0x58,0xed,0x4f,0xf5,0xe4,0x3e,0xd8,0xe7,0x38,0x96,0xf3,0x8d,0x5f,0x3f,0x6a,0xae,
    0x72,0x29,0xf5,0x39,0xc6,0xa1,0xda,0x83,0x8d,0xe8,0xb5,0xc1,0xc4,0x7b,0x05,0xb1,
    0x0c,0x61,0xbe,0x22,0x5f,0x69,0xe2,0x93,0xf1,0xca,0x4c,0x9d,0xaf,0x46,0x67,0xe7,
    0x37,0x8c,0x35,0xa1,0xf2,0x8d,0xac,0x2f,0x95,0xcb,0x4d,0x5c,0x22,0xdf,0xe6,0x9e,
    0xc3,0x69,0x29,0x79,0x2c,0xeb,0x47,0xe3,0xbe,0xcb,0xf8,0x8b,0x3c,0xd3,0xcb,0xd7,
    0x3c,0x6a,0x20,0xf1,0x3c,0x4d,0xfd,0x0b,0x0d,0xff,0xb3,0xc2,0xef,0xfe,0x54,0x5e,
    0xec,0xd5,0x6b,0x15,0xeb,0x5a,0xe5,0xf7,0xa8,0x99,0xf2,0x6f,0xf5,0xec,0x3f,0x65,
    0x7f,0x12,0x59,0xfa,0x71,0x1b,0xf9,0xa8,0xeb,0xe4,0xaf,0xe8,0xd1,0x04,0x79,0xde,
    0x65,0xf2,0x2c,0x6b,0x70,0x17,0x71,0xfe,0x88,0xcd,0x6e,0xf2,0x2c,0xf2,0x1e,0x30,
    0xe1,0xd9,0x8b,0x5f,0x1a,0xf6,0xfb,0x88,0x61,0x2f,0xf6,0xfb,0xd8,0x9f,0x43,0xf4,
    0x3f,0xf1,0x6e,0xeb,0x90,0xcd,0xba,0xd5,0x79,0xb4,0x0f,0xe3,0x3d,0xbc,0xd8,0x49,
    0xc2,0x23,0xeb,0x5a,0xb0,0xad,0xcc,0xb1,0x93,0xeb,0xca,0x04,0xbd,0x14,0x30,0xf6,
    0x41,0x87,0x64,0x30,0xa6,0xe4,0x35,0x11,0xc6,0xf9,0x55,0x39,0xcd,0x93,0xab,0x79,
    0xf2,0x31,0x9e,0xdc,0xc8,0xc8,0xd1,0xba,0xf5,0xf4,0x4d,0x3c,0xb9,0x99,0x67,0xdf,
    0xc2,0xd3,0xb7,0x41,0x3e,0xc9,0x45,0x29,0x39,0xf8,0x83,0xbc,0x48,0xaf,0x9f,0xc0,
    0xbc,0xff,0x04,0x17,0x1b,0x59,0x8f,0x7f,0xb1,0x86,0xcb,0x8c,0xcd,0xdf,0xe0,0xcf,
    0x3b,0x1b,0x59,0x43,0xff,0xe0,0x27,0xf8,0xef,0x92,0x09,0xce,0xd4,0x3f,0x9c,0xbd,
    0xe8,0x0e,0x73,0x70,0x4a,0x7e,0x0e,0x47,0x76,0x61,0xf4,0x2e,0x58,0x0f,0x67,0x2f,
    0x79,0x2a,0x0d,0xe2,0xf7,0x34,0xde,0x0f,0x39,0x7d,0x3a,0x3e,0xf2,0xff,0x80,0x8c,
    0x2d,0xf1,0xc3,0x2d,0xfa,0x2c,0xf4,0xf2,0x5f,0x63,0xab,0x14,0xc6,0x79,0xd6,0xf8,
    0x2b,0x87,0x71,0xfc,0xd9,0xc6,0xa6,0x4a,0x18,0xe3,0x4b,0x89,0xbf,0x6a,0x18,0xfb,
    0x09,0x2e,0x31,0x8b,0x9c,0xe1,0x9e,0x24,0xfc,0x19,0x61,0x2a,0x67,0xd5,0xc3,0xff,
    0xe6,0xac,0x46,0x18,0xe3,0x3a,0x66,0xcd,0x0a,0xc6,0xac,0x15,0xc6,0xf8,0x04,0x67,
    0x23,0x72,0xed,0x30,0xf6,0xab,0x65,0x6c,0x72,0x88,0x7d,0x2c,0x36,0xb9,0x61,0x6c,
    0x97,0x43,0x9e,0xa4,0x5f,0x72,0x8d,0x7d,0x9d,0x30,0xee,0x21,0x1d,0xb7,0x2e,0xe3,
    0x2e,0x36,0xb1,0xd5,0x0b,0x63,0x5c,0x6b,0x55,0x3f,0x8c,0xfd,0x04,0x97,0x5a,0xe5,
    0x99,0x5a,0x89,0xae,0x81,0x7b,0xf2,0x98,0xb7,0xbc,0x4b,0x9e,0x35,0x0f,0x79,0x66,
    0xec,0x63,0x19,0x5b,0xe2,0x92,0x3e,0x15,0xf9,0x78,0xe2,0xce,0x97,0xb8,0xe9,0x5f,
    0xd1,0x4b,0x5f,0xe7,0x1b,0xdf,0x82,0x30,0xee,0x75,0xd1,0x49,0x0f,0x17,0xe0,0x2b,
    0x7b,0x41,0xd3,0x30,0xbe,0xa7,0x34,0x41,0x2f,0x3d,0xdf,0xd4,0xf8,0x36,0x37,0xe3,
    0x4a,0xbf,0x37,0x47,0x27,0xbe,0x85,0x61,0xbc,0x46,0x44,0x27,0xbd,0x5f,0x18,0xf1,
    0x26,0x23,0xbf,0x96,0xa1,0xec,0x2b,0xf1,0x1a,0x69,0x61,0xf8,0x5a,0x85,0xf1,0x3a,
    0x5d,0x4f,0xec,0x45,0x61,0x8c,0xb5,0x34,0xbd,0x59,0x44,0x1e,0x32,0xc9,0x43,0xa6,
    0xf1,0x2f,0xf6,0x6a,0xd6,0x3a,0x8c,0xb1,0xc5,0xa6,0x9f,0x5b,0x87,0x47,0xf7,0x73,
    0xd2,0xf8,0xb7,0x65,0x7c,0xb1,0x95,0xf5,0xd9,0x96,0x5c,0xc8,0xde,0xd2,0x2e,0x8c,
    0xef,0x1e,0x82,0xcb,0x9a,0xe9,0xe2,0x9e,0x4e,0x8c,0x53,0x99,0x7d,0x47,0xce,0xb6,
    0xce,0xce,0x37,0x93,0x7d,0x58,0xdf,0xb3,0xd9,0x8f,0xaa,0x98,0x5e,0x68,0x8a,0x8d,
    0xf6,0x4b,0x11,0x6b,0xbb,0xa5,0xb1,0x29,0x06,0xd7,0x3e,0x6d,0x8d,0x5f,0xb1,0xb1,
    0x69,0x03,0xbf,0xf2,0xb4,0x83,0xa7,0xad,0xb1,0x69,0x0f,0xae,0x3c,0x1d,0xf0,0x6b,
    0x1f,0xa4,0x72,0x75,0x1c,0xfc,0x1d,0x0c,0x57,0x47,0xb8,0x4a,0x0c,0x57,0x27,0x70,
    0xf5,0xeb,0x8c,0x6f,0xa7,0x68,0xef,0x49,0x44,0xb2,0xcd,0x4d,0xf5,0x0a,0x72,0x53,
    0xd5,0xbc,0x57,0x23,0x37,0x35,0xcc,0xde,0xd8,0x95,0xb3,0x50,0xc7,0xec,0x86,0xcf,
    0x14,0x38,0x4f,0x00,0xeb,0x6e,0xe6,0x74,0x22,0x78,0x0f,0x6a,0xdd,0xf5,0x08,0x16,
    0x73,0xf4,0x84,0x57,0x62,0xec,0xe9,0xc5,0x58,0x3b,0xd0,0xdf,0x1d,0xa9,0xb8,0x6a,
    0x11,0x57,0x8e,0x89,0xeb,0xe4,0xe0,0xe8,0x3d,0xfc,0x0c,0x4f,0xbe,0xd8,0x93,0x07,
    0x7a,0xf2,0x20,0x4f,0xbe,0xdc,0x93,0x47,0x79,0xf2,0x18,0x4f,0x9e,0xe4,0xc9,0xf7,
    0x7a,0xf2,0x6c,0x4f,0x9e,0x63,0x64,0xb9,0x5f,0x3c,0xe3,0xe9,0x57,0x7a,0xf2,0x3a,
    0x2f,0xef,0xa7,0x90,0x07,0xed,0x87,0xd3,0xe8,0x87,0x53,0x8d,0x4d,0x2f,0xf0,0x49,
    0xe4,0xf2,0x74,0xfc,0x7a,0x51,0x87,0x93,0xc1,0xd4,0xfe,0x4c,0x8f,0xf3,0xac,0x0a,
    0x38,0x7b,0x83,0x6b,0xbd,0xcf,0xc6,0xaf,0x37,0x9c,0x67,0x80,0xa9,0xfd,0x39,0xd4,
    0x42,0x39,0xcf,0x85,0xb3,0x8f,0xb1,0x39,0x0f,0x5c,0xf7,0xde,0xbe,0xf8,0x9d,0x67,
    0x6c,0x2e,0x80,0x47,0xcf,0xa2,0x0b,0xc1,0xe4,0x3e,0xba,0x00,0xec,0x22,0x7c,0x2f,
    0xe4,0x7c,0x1d,0x10,0xa4,0xf6,0x6c,0xd1,0xf5,0x77,0xcf,0x00,0x7a,0xa7,0x3f,0xfd,
    0x56,0x8a,0x3c,0xc0,0x8c,0x75,0x09,0xfd,0x24,0xf3,0x19,0x88,0xac,0xba,0x4b,0x89,
    0x43,0x74,0x83,0x90,0x75,0xef,0xbc,0x8c,0xfd,0x66,0x20,0xfd,0x24,0x36,0x17,0x83,
    0xab,0xff,0x55,0xf4,0xa2,0xd6,0x64,0x28,0x58,0xf7,0x28,0x47,0xc9,0xe8,0xee,0x7b,
    0x0d,0xf7,0xe3,0x32,0xf4,0xea,0x7b,0x2d,0x3a,0xe1,0xbd,0x1c,0x59,0xf3,0x3a,0x9c,
    0xbc,0x0e,0x33,0xf6,0xd7,0x81,0x2f,0x26,0x3f,0xd7,0x83,0x95,0x92,0x9f,0x91,0x26,
    0x3f,0xa2,0x1b,0xe1,0x9e,0x59,0xe4,0x63,0x84,0xe1,0x19,0xcd,0x9c,0x17,0xc1,0x73,
    0x03,0x58,0xbf,0xe8,0x1e,0x9c,0x8c,0xee,0x85,0x37,0x81,0x97,0x70,0x37,0x2f,0xc7,
    0xf7,0x66,0x74,0x12,0xf3,0x28,0x64,0xe5,0xbd,0xc5,0xe3,0xbd,0x15,0xcc,0xf2,0xde,
    0x0e,0x5e,0xce,0x9d,0x5e,0x79,0xef,0x40,0x27,0xbc,0x63,0x90,0x35,0x17,0x77,0x92,
    0x8b,0xb1,0x66,0xac,0x71,0xe0,0x9a,0x8b,0xf1,0x60,0x9a,0x8b,0x89,0x26,0x17,0xe3,
    0xa3,0xbd,0x2b,0x08,0xa6,0x92,0x8b,0x09,0x86,0x67,0x32,0x31,0xeb,0xde,0x36,0x85,
    0xdf,0x12,0x93,0x89,0x65,0x12,0x98,0x9c,0x63,0x13,0xf1,0x9f,0x6a,0xfc,0xef,0xf6,
    0xe6,0x7c,0x0f,0x58,0x3f,0xe2,0x98,0x6e,0xe2,0x10,0xdd,0x34,0xf7,0xcc,0x80,0x67,
    0x1a,0x63,0xdc,0x1b,0xa4,0xee,0x7e,0xd3,0xd1,0xcd,0x30,0x63,0xdc,0xc7,0x7e,0xa5,
    0xf2,0xfd,0x8c,0x39,0x8e,0x98,0x1f,0xe0,0xf7,0xce,0xfd,0x66,0x1e,0x0f,0xe2,0xf7,
    0x80,0x39,0x3f,0x1e,0x02,0x9f,0x69,0xc6,0x7d,0xc8,0x1b,0x77,0xba,0x19,0xe7,0x61,
    0xf6,0x3d,0xcd,0xc3,0xc3,0x5e,0x1e,0x26,0x22,0x8f,0x44,0x9e,0x65,0x7c,0x1f,0x61,
    0x5d,0x88,0xef,0x6c,0x64,0xad,0xe7,0xa3,0x15,0x9c,0x9b,0x8f,0x81,0x8b,0xfd,0x1c,
    0x64,0x5d,0x87,0x73,0x39,0xdb,0x66,0xb3,0xcf,0x6a,0x3c,0x73,0x0d,0xe7,0xe3,0x15,
    0x70,0x3e,0x01,0xae,0x39,0x79,0x12,0xac,0x87,0xe9,0xdf,0x27,0x8d,0xfd,0x53,0xe4,
    0x59,0x6b,0x39,0x1f,0x6c,0x1e,0xb5,0x5c,0x68,0x6a,0x39,0x3f,0xda,0xa7,0xc4,0x36,
    0x9e,0xfb,0x02,0x38,0x9f,0xe1,0xb7,0xa4,0xe4,0x65,0x21,0xba,0x45,0x66,0x8c,0x25,
    0x8c,0xb1,0xce,0x8d,0x21,0xeb,0xe1,0x39,0xee,0xad,0x4b,0xa8,0x67,0x61,0xb4,0x6f,
    0xa6,0x70,0xe5,0x7c,0xde,0xe3,0x5c,0x08,0xa7,0xd8,0xbf,0xc0,0x79,0xa3,0x6b,0x69,
    0x29,0x98,0xae,0xa5,0xa5,0x5e,0x9d,0x46,0x9a,0x78,0x5e,0xf4,0xf6,0xf3,0x97,0x2a,
    0xd8,0xcf,0x97,0x81,0xeb,0x7e,0xfe,0x32,0x7e,0xcb,0x8c,0xcd,0x2b,0xde,0x3a,0x78,
    0x15,0xcc,0xee,0xe7,0xaf,0xe1,0xfb,0x2a,0xf9,0x5c,0x61,0xf2,0x29,0xba,0xe5,0xee,
    0x59,0x4d,0x8c,0xcb,0x4d,0x4c,0xaf,0x13,0xd3,0x2a,0x33,0xde,0x1b,0xe0,0x32,0xc7,
    0x95,0xc8,0x32,0xc7,0x15,0xf8,0xaf,0x36,0xb6,0x6f,0x72,0xfe,0xab,0xbc,0x86,0xf3,
    0x7d,0x2d,0x7d,0xf1,0x16,0x36,0x6b,0x8c,0xcd,0x5a,0xee,0x04,0xef,0x60,0xf3,0x36,
    0x76,0x6b,0xcd,0x98,0x6f,0x7b,0x63,0xae,0x30,0xfe,0xeb,0x39,0xf3,0xc5,0x76,0x1d,
    0xb2,0xea,0x36,0x70,0xfe,0xcb,0x79,0xb5,0xc1,0xdc,0x8f,0x72,0xf9,0x56,0x19,0x44,
    0xdf,0xba,0x52,0xf7,0xa3,0xba,0xf0,0xd7,0x37,0x1c,0xef,0x82,0x5f,0xcf,0x6f,0x80,
    0x8d,0x60,0xc2,0xb9,0xd1,0xbb,0x73,0x35,0x82,0x33,0xcf,0x70,0x36,0xe4,0xbd,0x41,
    0xf4,0x0d,0x22,0xe6,0x3f,0xd6,0xdc,0x4f,0xb6,0x78,0xf7,0x95,0x2f,0x82,0xd4,0x6f,
    0x68,0xa9,0xc9,0xfb,0xd4,0xe4,0x3d,0x13,0xd3,0x07,0xe0,0xda,0x03,0x1f,0x82,0xcd,
    0xa4,0xde,0x9b,0x4d,0xbd,0x45,0xb7,0xc9,0x3d,0xdf,0x31,0xf6,0x26,0xc3,0xf3,0x11,
    0xf1,0x69,0xee,0x3f,0x06,0xdb,0x6a,0xb8,0x3f,0x01,0x2f,0x35,0x67,0xcb,0x67,0xe0,
    0x65,0x7c,0x7f,0xd1,0xf5,0xf0,0x39,0x3a,0xa9,0xc5,0x16,0x64,0xfd,0xed,0xf4,0x25,
    0xf3,0x3f,0xd7,0xf1,0xca,0x77,0x99,0xaf,0xc1,0xb6,0x45,0xdf,0x7b,0xe2,0xfd,0xe7,
    0x1b,0xbe,0x9b,0x74,0x45,0xaf,0x71,0x6e,0x27,0x4f,0xeb,0x88,0xf3,0x5b,0x6c,0xb7,
    0x33,0xd6,0x17,0x60,0xd2,0x23,0x9b,0x99,0xe7,0x77,0x66,0xec,0xef,0x19,0xbb,0x9c,
    0x75,0xfc,0x03,0x98,0xc6,0xbd,0x03,0x4c,0xb9,0x76,0x78,0x5c,0x9b,0x4d,0x2c,0x3b,
    0xa9,0x91,0xd4,0x7f,0xa7,0xa9,0x7f,0xc2,0x7c,0xc7,0xcd,0x37,0xf5,0x6f,0x0c,0x47,
    0x81,0xf9,0x2e,0xf2,0x73,0x05,0xdf,0x45,0x7e,0x01,0xd7,0xba,0xff,0x4a,0xdd,0xcb,
    0x8d,0xcd,0x6f,0xe0,0x7a,0x07,0x3a,0x00,0xd6,0xdd,0x9c,0x3d,0xbf,0xc3,0x75,0xc0,
    0xf8,0x1d,0x24,0x0e,0xbd,0x27,0x1d,0xe2,0xfb,0x56,0x19,0xf6,0x32,0xef,0x43,0xd8,
    0xe9,0xef,0xc0,0x7f,0x01,0x2a,0xd3,0x2c,0x03,0xc4,0x18,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        float convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
