// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xcb,0x6b,0x13,0x51,
    0x14,0xc6,0x6f,0x26,0x69,0x52,0x15,0xb4,0x26,0x4a,0xb0,0x4d,0x1b,0x35,0x90,0x8d,
    0xa5,0x08,0x3e,0x10,0x24,0x98,0x6e,0x52,0x17,0x05,0x15,0x77,0xee,0x24,0x11,0xd2,
    0x42,0xdd,0xd8,0x87,0x91,0x16,0x34,0xb8,0xb4,0x60,0x11,0x0d,0x6a,0x0c,0x6a,0xc4,
    0xa2,0x26,0x62,0x90,0xda,0x80,0x74,0xe1,0xe3,0x5f,0x12,0x1f,0x20,0x78,0xce,0x9d,
    0xdf,0xd4,0xdb,0x09,0x1c,0x4e,0xce,0xeb,0xbb,0xdf,0x77,0xee,0xcc,0x44,0xbd,0x5c,
    0xc2,0x44,0x23,0x66,0xb7,0x19,0x34,0xdf,0x8c,0xff,0xdb,0x6f,0x3c,0x13,0xc1,0x17,
    0xf0,0xe7,0xc4,0xef,0x31,0x71,0x9b,0x9f,0x9a,0xbe,0x3c,0x3d,0x71,0x63,0xbe,0x32,
    0x71,0xf2,0xd4,0x71,0xed,0xdf,0x6b,0xa2,0x76,0x4e,0x6b,0xfb,0x4c,0xc2,0x0c,0x88,
    0x8f,0x89,0xcd,0x5d,0x9d,0xb9,0xae,0xf9,0xa4,0x58,0x59,0x6c,0x48,0xe6,0x63,0x16,
    0xcf,0x98,0x22,0xfd,0x16,0x4f,0xb2,0x49,0x8b,0x6f,0xcc,0x08,0xb1,0xfa,0xb8,0x9d,
    0x31,0xe6,0xbc,0x20,0x66,0xe0,0x96,0xc3,0x4f,0xc9,0x99,0x9a,0xf3,0xe8,0x1f,0x13,
    0x7f,0x74,0xbb,0xe6,0xc7,0x47,0x1c,0xfc,0x32,0xf8,0xc3,0xc4,0xb5,0x50,0x7f,0x8d,
    0xfe,0x00,0x5b,0xe3,0x43,0xd4,0xea,0xcc,0x6a,0x9c,0x92,0x13,0x3d,0xdb,0x1b,0xb5,
    0xaa,0xf5,0xff,0x41,0xe9,0x51,0xae,0x87,0x99,0x4f,0x4b,0x9c,0x80,0xbf,0x47,0x3c,
    0x44,0x1c,0xb5,0x7d,0x31,0xbb,0x83,0x08,0xfa,0xce,0x12,0x27,0xc9,0x1d,0x03,0x2f,
    0x05,0x9e,0xf6,0x1f,0xa0,0x16,0x07,0x2f,0xcd,0xff,0x98,0xd3,0x3f,0xcc,0x5e,0x33,
    0xec,0x2f,0x4d,0x6e,0x8c,0x5d,0x8d,0x80,0x35,0x0a,0xaf,0x0c,0x67,0x8f,0xda,0x9e,
    0xff,0x5a,0xb2,0x68,0x09,0xb8,0x64,0x1d,0x6d,0x3a,0x9f,0xdb,0xd6,0x65,0x84,0x97,
    0x67,0xf2,0x70,0x3a,0x21,0x3e,0x4f,0x2d,0xe0,0x54,0x64,0x36,0x88,0x4b,0x21,0x8d,
    0x57,0xd8,0x49,0xb0,0x83,0x72,0xa8,0x5e,0x15,0x1b,0x14,0x1b,0x97,0x67,0x40,0x77,
    0x3a,0x43,0xae,0x6a,0xef,0x63,0x97,0x59,0x62,0x0f,0x11,0xb3,0xf3,0xe7,0xa1,0x49,
    0xf9,0xde,0x24,0xb7,0xc4,0x39,0x1a,0xd7,0x9c,0xbb,0x5a,0x16,0x9f,0x65,0x66,0x5c,
    0xd0,0xf4,0x4e,0xea,0xec,0xae,0x84,0x9d,0x96,0xf3,0x3d,0xf6,0x6d,0xe0,0xfc,0x4b,
    0x32,0xfa,0xac,0x17,0xb8,0xdf,0x0a,0xfc,0x2f,0x08,0x53,0xe5,0x7a,0x8d,0x5c,0x85,
    0x19,0xe5,0x78,0x17,0x1d,0xb3,0xd4,0x55,0xcf,0x6d,0x72,0x73,0xe4,0x35,0x37,0x29,
    0x39,0xbd,0xf3,0x7b,0x3c,0x17,0x29,0xce,0x51,0xad,0xab,0xe4,0x27,0x25,0xd2,0xbb,
    0xb8,0xbf,0xad,0xd5,0xaf,0x15,0x78,0x3e,0xd6,0xa8,0x5d,0x12,0x2c,0x9d,0x7b,0x40,
    0xce,0x38,0xb9,0x87,0xe4,0x54,0xdb,0x07,0xc9,0xe9,0xfd,0x3d,0xa2,0x57,0x6b,0x3f,
    0x45,0x69,0x93,0x99,0x3f,0x82,0xab,0xb5,0x86,0x58,0x13,0xfd,0x0d,0x47,0xef,0x63,
    0xb0,0xd6,0x1c,0xbd,0x8a,0xa9,0xcf,0xc5,0x13,0xea,0xaa,0xf1,0xa9,0xe0,0xe4,0xad,
    0xf7,0xf3,0xbf,0x05,0x27,0xc0,0x53,0xff,0x43,0xd0,0xb4,0xfe,0x0c,0x2e,0x03,0xf4,
    0x36,0xe0,0xd3,0x76,0xf8,0x68,0x4f,0x4b,0xac,0xcd,0x7c,0xcb,0xe1,0xf3,0xdc,0xe1,
    0xe3,0x71,0x67,0xef,0xe1,0xf3,0x82,0xfa,0xac,0xc3,0xe7,0x25,0x79,0xe5,0x13,0xe0,
    0xb5,0x1d,0x3e,0xaf,0xe0,0xd4,0xa4,0xb7,0xe5,0xec,0xec,0x35,0xbb,0x2f,0xc2,0xb1,
    0xeb,0x70,0xd4,0xda,0xba,0x58,0x07,0x4c,0xfd,0xff,0x46,0xb6,0x1f,0xb7,0xde,0xc7,
    0x2d,0x71,0xc7,0xdf,0xb9,0x97,0x77,0xd4,0x56,0xe1,0xd3,0x65,0xb6,0x13,0x8a,0xbb,
    0xf0,0xd3,0x99,0x2f,0xcc,0xad,0x83,0xd5,0x41,0x6f,0xde,0xf2,0xdc,0xc9,0xaf,0xef,
    0xf0,0xd3,0x5a,0x4f,0x6c,0x13,0xcc,0x9e,0xc3,0xef,0x63,0x88,0x5f,0x1d,0x7e,0x1b,
    0x0e,0x5e,0xc0,0xf9,0x13,0xfd,0x1b,0x70,0xec,0x83,0xb7,0x19,0x8a,0xfb,0x0e,0xe7,
    0xaf,0xcc,0xf5,0xc0,0xd7,0xde,0x6a,0xc4,0x3f,0xfb,0x33,0xdf,0x07,0x83,0xb6,0x20,
    0xbf,0xe5,0xe4,0x75,0xfe,0x2d,0x1a,0xe7,0xe1,0x94,0x42,0xe3,0xa2,0xa3,0x51,0x6b,
    0x0b,0x62,0x8b,0x70,0x58,0xe0,0x3d,0xd1,0x6f,0xc2,0x2d,0xbe,0x07,0xcb,0x7c,0x0b,
    0x56,0x78,0x37,0x2f,0x0a,0x47,0x7d,0x8f,0xee,0xc0,0x65,0x0b,0xec,0x94,0x7d,0xcf,
    0x63,0x76,0x6e,0x85,0xba,0xea,0x0b,0xb0,0xd5,0xff,0x95,0xa7,0xff,0x8c,0xd8,0x3f,
    0xf1,0x3e,0x45,0x91,0x60,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_arithmetic : require
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     const uint textWidgetBit =
//         localId < 32 ? uint(intersects)<< localId : 0;
//     const uint graphWidgetBit =
//         localId >= 32 ? uint(intersects)<<(localId - 32): 0;
//     return uvec2(subgroupOr(textWidgetBit), subgroupOr(graphWidgetBit));
//
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 8);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 8);
//
//     uvec2 culledWidgets;
//
//     culledWidgets = cullWidgets(0, blockCoordLow, blockCoordHigh);
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
