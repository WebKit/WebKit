// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000029.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000029[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0xe4,0x21,0xa0,0x84,0x8a,0x25,0x4a,0x96,0x18,
    0x62,0x81,0x99,0x40,0x69,0x46,0x92,0x51,0x0a,0x9a,0x95,0x50,0x46,0x92,0x68,0x21,
    0x95,0x98,0x69,0x12,0x89,0x29,0x5a,0x5a,0x49,0xf9,0xe8,0x25,0x56,0xa2,0x95,0xa0,
    0xf5,0x5f,0xf4,0x17,0x35,0x3d,0x66,0x9a,0x69,0xaf,0x73,0x7f,0x8b,0xf9,0xba,0x63,
    0xc5,0xcc,0x9e,0x7b,0xd6,0xb7,0xd6,0xfe,0xf6,0xb7,0xd6,0xda,0x67,0x1d,0x92,0x89,
    0xa5,0xe9,0x28,0xca,0x89,0x0a,0xa3,0xfc,0xe8,0xe7,0x28,0xf3,0x37,0x37,0x4a,0x04,
    0x24,0x8a,0x8a,0xa2,0x54,0xfc,0xbb,0xa9,0x73,0x5b,0x67,0xc3,0xf0,0xc1,0xfe,0x86,
    0xa6,0xe6,0x46,0xf3,0x97,0x44,0xc9,0x38,0xce,0x7c,0xa5,0x51,0x3a,0xca,0x0d,0xbf,
    0xb6,0xf6,0xf7,0xed,0x1b,0x32,0xbc,0x38,0xac,0x5b,0x61,0x95,0x85,0x38,0xc3,0xd3,
    0xc6,0x11,0x9e,0x8a,0x63,0x4e,0xdb,0x13,0x45,0x1d,0x51,0x5e,0x54,0xc1,0x79,0x4b,
    0xf9,0x75,0x2c,0x07,0x2c,0x5f,0xb0,0x04,0x58,0x99,0x60,0x49,0xb0,0x4a,0xc1,0x72,
    0xc1,0xee,0x10,0x2c,0x0f,0x6c,0x91,0x60,0x29,0xb0,0xbb,0x04,0x4b,0x83,0x2d,0x13,
    0x2c,0x1f,0xec,0x1e,0xc1,0x0a,0xc0,0x56,0x0a,0x56,0x08,0xd6,0x28,0x58,0x11,0x58,
    0x93,0x60,0x73,0xc0,0xd6,0x0a,0x56,0x0c,0xd6,0x1a,0xd7,0x29,0x39,0x9b,0xaf,0xd5,
    0x6c,0x63,0xf8,0xad,0xa5,0x3e,0x6e,0x2f,0x11,0xdb,0xea,0xbc,0x18,0xbb,0x22,0xec,
    0x4a,0xc4,0xfe,0x64,0x5c,0x1b,0x7b,0x9e,0x17,0x62,0x52,0xe4,0x69,0x75,0xad,0x0a,
    0x76,0x9a,0xfc,0x13,0x31,0x9e,0x1b,0xe7,0x98,0x66,0xcd,0x0f,0x3b,0x0b,0x89,0xb7,
    0xd8,0x22,0x72,0xcb,0x25,0x76,0x0e,0x3c,0x86,0xb7,0x60,0x17,0x0b,0x77,0x09,0xf1,
    0x7e,0x76,0x39,0x5c,0x51,0xac,0xb3,0x6c,0xb6,0xce,0xae,0xc1,0x56,0xf9,0xff,0x2c,
    0x8f,0xb1,0xf3,0x2b,0xa9,0x7f,0x05,0xe7,0x57,0xc6,0xe7,0x64,0xb0,0x7a,0x72,0x9d,
    0x8f,0x1e,0x8b,0xaf,0xc2,0x97,0x16,0x7f,0x8d,0xe4,0xb3,0x18,0x7f,0x79,0x7c,0x8f,
    0x12,0x71,0x6d,0xeb,0xd1,0xed,0x75,0xb7,0xb8,0xbb,0x45,0xb3,0xf3,0xd4,0x73,0xb7,
    0x3c,0x7e,0x35,0xe7,0xba,0x7f,0x0d,0xb5,0xb1,0xba,0x3c,0xcc,0x19,0x7e,0xee,0x23,
    0xf0,0x19,0x5e,0x1d,0x14,0x6c,0xc0,0x9f,0x88,0xfe,0xf9,0x97,0x23,0x1a,0x1e,0xe5,
    0x79,0x03,0xb9,0x9b,0xbd,0x11,0xcc,0xcf,0x6c,0xcf,0xb2,0x37,0xf3,0x9e,0xd8,0xfe,
    0x27,0xc9,0x35,0x85,0xa6,0xa7,0x79,0x4e,0x4a,0x7c,0x37,0x1a,0xdc,0xde,0x21,0x39,
    0x9b,0xbe,0x5e,0xe1,0x7b,0x81,0x1c,0xca,0xe1,0x7b,0x89,0x67,0xe5,0xdb,0x4b,0x8c,
    0xf9,0x47,0xe0,0xf2,0x1a,0xbc,0x8b,0x6f,0x44,0xe2,0xc7,0x78,0xe7,0xdc,0x3e,0x9b,
    0xd5,0xdb,0x4b,0xbc,0x43,0xae,0xe7,0x9a,0xdc,0xe3,0x9b,0x9c,0x3d,0x42,0x7d,0x6e,
    0x32,0x87,0x92,0x71,0x2f,0xf2,0xe2,0xb8,0x5c,0xea,0x63,0xd8,0xef,0x01,0xc9,0x23,
    0x36,0x5f,0xee,0x89,0xdb,0x0b,0xc5,0xb6,0x7e,0xad,0x17,0xdb,0xb4,0x8f,0x8a,0x6d,
    0xf7,0xe3,0x22,0x76,0x1b,0xef,0x4d,0x29,0xfd,0xdf,0x12,0xd0,0x12,0x66,0x57,0x29,
    0xcb,0x7b,0x3b,0xc4,0xfb,0x38,0x17,0xff,0x86,0xa0,0xa8,0x8a,0xf9,0x35,0x8f,0xbb,
    0xdc,0x46,0x4c,0x35,0xf8,0xf1,0x10,0x63,0xf6,0x02,0xf6,0x55,0xc7,0xf7,0x28,0x19,
    0xeb,0x5f,0x20,0xf1,0x8b,0xc8,0xc9,0x7c,0x0b,0xb1,0x8d,0xdf,0xee,0xfc,0x9d,0xf0,
    0xd7,0x10,0xef,0xef,0xa9,0xe1,0xd3,0x21,0x66,0x89,0xcc,0x47,0x7b,0x0f,0x7e,0x0b,
    0x1c,0x75,0xe8,0xfe,0x33,0xc4,0xfb,0x9c,0xac,0xa3,0x8e,0xcb,0xe0,0xb6,0x3a,0x2c,
    0xa7,0x76,0xb5,0x70,0xa7,0x98,0x9f,0xcb,0xe3,0x9a,0x65,0xec,0x7b,0xc1,0x7c,0xcf,
    0x0a,0xd9,0x63,0x7a,0x57,0x10,0xf3,0x47,0xe0,0xf6,0x33,0xea,0x44,0xff,0x4a,0xf4,
    0xd7,0x8b,0xfe,0xfb,0xc0,0x5d,0x7f,0x03,0x98,0xeb,0x6f,0x14,0xfd,0xe6,0x5b,0xc5,
    0xbc,0x36,0xee,0x55,0xa2,0xe5,0x7e,0xb4,0xac,0x16,0xfd,0x0f,0x80,0xbb,0xfe,0x26,
    0x30,0xdf,0xd3,0x2c,0x7b,0x4c,0x7f,0x33,0x31,0xa6,0xdf,0xcf,0x68,0x14,0xfd,0x0f,
    0xa2,0x7f,0x8d,0xe8,0x5f,0x0b,0xee,0xfa,0x1f,0x02,0x73,0xfd,0x2d,0xa2,0xdf,0x7c,
    0xeb,0xe2,0xbb,0x97,0xe1,0x5e,0x27,0x7d,0x6f,0x45,0x8b,0xdd,0xbb,0xcc,0x7d,0xcc,
    0x60,0xad,0x32,0x4f,0xfc,0x4e,0xb4,0xa1,0xd1,0x79,0x5a,0xe0,0xb1,0x19,0xf3,0x18,
    0xf3,0xc5,0xef,0xe4,0xe3,0x68,0x6e,0x97,0xb3,0x36,0x81,0xbb,0xdd,0xc1,0xd9,0xc7,
    0xb8,0xa3,0x4f,0x10,0xd3,0x01,0x8f,0xcd,0xa0,0x4e,0x78,0x36,0x4b,0x7d,0x9f,0x02,
    0xef,0x0a,0x31,0xa9,0x58,0x7b,0x66,0x6f,0x24,0xd8,0x56,0xb0,0x9c,0xf8,0x39,0x15,
    0xcf,0xaf,0x2e,0x62,0xb7,0xc2,0xe1,0x67,0x6c,0xe3,0x8c,0x6e,0x39,0x63,0x3b,0xf8,
    0xae,0xa0,0xcc,0xe6,0xee,0x33,0xe4,0xd8,0xc5,0x0c,0xd9,0x4e,0x5d,0xd6,0xe3,0xf3,
    0x5e,0x3d,0x0b,0xd7,0x0e,0xe9,0xd5,0x73,0xe0,0xde,0xab,0xe7,0xc1,0xbc,0x57,0x3d,
    0xd2,0x2b,0xf3,0xed,0x0c,0x6b,0x80,0x1a,0xef,0x84,0xdb,0xe6,0xe7,0x8b,0xcc,0x95,
    0x5e,0xe1,0xde,0x05,0xde,0xc6,0x77,0xa3,0x8f,0x98,0x2d,0x61,0x2a,0xd9,0x8c,0x7d,
    0x19,0xac,0x4f,0xe6,0x48,0x82,0x9a,0x98,0x7f,0x37,0x1c,0xbe,0x4e,0x84,0xb3,0x0c,
    0xef,0x67,0xef,0x6e,0xe1,0x7e,0x65,0x96,0xbb,0x20,0xb6,0xf7,0x80,0xf5,0x33,0x2b,
    0xf3,0xe4,0x1b,0xe1,0xb5,0xd9,0xc3,0x9d,0xe9,0x21,0x9f,0x01,0xa9,0xd5,0x3e,0x6a,
    0xb5,0x57,0xf2,0x79,0x15,0xdc,0x6b,0xf5,0x1a,0x98,0xd7,0x6a,0xbf,0xd4,0xca,0x7c,
    0x83,0xf6,0xbf,0x24,0xdc,0x83,0x52,0xab,0xa1,0xdb,0xd4,0xea,0x75,0xf0,0x19,0xb8,
    0xdf,0x00,0xab,0x45,0xa3,0xf3,0xd8,0xef,0xaf,0xa1,0xef,0x16,0xf3,0x26,0x1a,0x06,
    0x88,0x1f,0x44,0xc7,0xb0,0xe8,0xb0,0x98,0x03,0x61,0x0d,0xb3,0xff,0x80,0xe8,0x38,
    0x78,0x1b,0x1d,0x6f,0x81,0x7b,0x5d,0x0f,0x65,0xf5,0xec,0x6d,0xb0,0x43,0xff,0xd2,
    0xb3,0xc3,0x70,0xf8,0x1a,0xa7,0x67,0x47,0xd8,0x7b,0x58,0xb8,0xdf,0xc9,0xea,0xd9,
    0x51,0xb0,0x23,0xff,0xd1,0xb3,0xa3,0xd4,0xc3,0xf3,0x19,0xce,0xea,0x61,0x8f,0xf0,
    0xbf,0x07,0xff,0x08,0xdf,0xec,0x63,0x60,0xc6,0x35,0x8a,0xed,0xfd,0x3e,0x4e,0xbf,
    0xc7,0xa4,0x16,0xef,0x83,0x7b,0xbf,0x4f,0x80,0x79,0xbf,0xc7,0xa5,0xce,0xe6,0x3b,
    0x19,0xd6,0x19,0x74,0x9c,0x84,0xc7,0xce,0x3d,0xc5,0x37,0xd6,0xe7,0xd8,0x69,0xb0,
    0x53,0xf2,0x0d,0xf7,0xd8,0x0f,0x66,0x63,0x0b,0x62,0xfb,0x43,0xb0,0xd3,0x52,0x93,
    0x84,0xd4,0x64,0x94,0x18,0xab,0xc1,0x38,0x67,0x9f,0x91,0xbc,0x3e,0x22,0xaf,0xb3,
    0x92,0xd7,0xc7,0xe0,0x9e,0xd7,0x27,0x60,0x9e,0xd7,0x84,0xe4,0x65,0xbe,0x73,0x61,
    0x5d,0x80,0xfb,0x9c,0x7c,0x2b,0x3e,0x45,0x6b,0xaf,0xcc,0xa6,0xcf,0xc0,0x3d,0xe6,
    0x3c,0x31,0xfe,0x3d,0x3c,0x4f,0x8c,0xe9,0x9d,0x80,0xf3,0x82,0xcc,0xbb,0xcf,0xd1,
    0x7b,0x49,0x38,0xbf,0x00,0xb7,0xfd,0x17,0xb1,0xdd,0xf7,0x25,0xff,0xaf,0xfc,0xc2,
    0x6c,0xfd,0x0a,0xac,0x5b,0xf2,0xfb,0x1a,0xbc,0x9d,0xfc,0x26,0x25,0x3f,0xf3,0x5d,
    0x0e,0x6b,0x12,0x2d,0x97,0x45,0xfb,0x15,0xb4,0xfb,0xb7,0xf0,0x0a,0x1c,0xa6,0xdd,
    0xe3,0x27,0x45,0xcb,0x37,0x59,0x5a,0xbe,0x05,0xab,0x11,0x2d,0xdf,0x81,0xbb,0x96,
    0x29,0xd1,0x62,0xbe,0xab,0x61,0x4d,0xc1,0x7d,0x55,0xb4,0x5c,0x47,0xcb,0x35,0xb4,
    0x5c,0x17,0x2d,0x1e,0x3f,0x25,0x5a,0xbe,0xcf,0xd2,0xf2,0x03,0xd8,0x98,0x68,0xf9,
    0x11,0xdc,0xb5,0x4c,0x8b,0x16,0xf3,0xdd,0x88,0x63,0x33,0xdc,0x37,0x44,0xcb,0x8c,
    0xf4,0xdd,0xb4,0xcc,0xf0,0xff,0x9d,0x69,0xf1,0xf8,0xe9,0xac,0x1e,0x4f,0x64,0xdd,
    0xd1,0x71,0xb9,0xf3,0x3f,0xc1,0x67,0x5c,0xb7,0xb0,0xff,0x0a,0x93,0x65,0x6d,0x58,
    0x7f,0x03,0x68,0xf8,0x00,0xc3,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
