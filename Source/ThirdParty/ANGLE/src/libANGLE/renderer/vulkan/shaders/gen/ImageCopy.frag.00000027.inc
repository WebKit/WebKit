// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000027.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000027[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfb,0x4f,0xd7,0x65,
    0x14,0xc7,0x9f,0xef,0x1d,0x21,0x2e,0x02,0x4a,0x54,0x98,0x17,0xd8,0x6c,0x18,0x7c,
    0x57,0x64,0x04,0xe9,0x86,0x19,0xba,0xb2,0x10,0x4d,0xa9,0xe0,0x87,0x5c,0x38,0xa1,
    0xe2,0xdb,0x85,0xef,0x5a,0xba,0x6c,0x41,0x0a,0x6d,0x69,0x05,0x6b,0xcc,0x5a,0xc2,
    0x56,0xf0,0x43,0xc2,0xf4,0x87,0xb6,0x7e,0x6a,0xad,0x95,0xcd,0xb4,0xcb,0x7f,0xd3,
    0xba,0x6c,0x6d,0x9d,0xf3,0x7c,0x5f,0xc7,0x9d,0xbe,0xab,0xc9,0xf6,0xec,0xc3,0xf3,
    0x3e,0xb7,0xf7,0xfb,0x9c,0xe7,0x79,0x20,0x95,0xdc,0x96,0x0b,0x21,0x11,0x2a,0x43,
    0x45,0xf8,0x35,0x94,0x7e,0xd6,0x87,0xa4,0x20,0xa5,0xef,0x7d,0xf2,0xad,0x0a,0xd9,
    0xb8,0xdf,0x77,0xe0,0xf0,0x81,0x8e,0xc9,0xe2,0x68,0x47,0xd7,0x03,0x79,0xf5,0xab,
    0x09,0xa9,0xe8,0xaf,0xb6,0xda,0x90,0x0b,0x69,0xf9,0xea,0x9a,0x38,0x36,0x5e,0x50,
    0xbc,0x5a,0xd6,0x15,0x59,0x75,0xe2,0xa7,0x78,0x4e,0x73,0xc8,0x6f,0xd5,0x31,0xa7,
    0xc6,0x84,0xb0,0x3f,0x64,0x42,0x03,0x75,0xb7,0xf1,0x35,0x2c,0x01,0x56,0xe1,0xb0,
    0x24,0x58,0x9d,0xc3,0x52,0x60,0x8d,0x0e,0x4b,0x83,0xdd,0xee,0xb0,0x0c,0xd8,0x5d,
    0x0e,0xcb,0x82,0x6d,0x76,0x58,0x0e,0xac,0xd5,0x61,0x15,0x60,0xdb,0x1d,0xb6,0x0e,
    0x6c,0x87,0xc3,0x2a,0xc1,0xf2,0x0e,0xab,0x02,0xeb,0x72,0xd8,0x6d,0x60,0xdd,0x0e,
    0xab,0x06,0x7b,0x38,0xf6,0x29,0x75,0x53,0xaf,0xf6,0x6c,0xaf,0x7c,0xb7,0xd2,0x1f,
    0xdb,0x6f,0x71,0x7b,0xed,0xf3,0x26,0xf6,0x0d,0x12,0x95,0x8c,0xf6,0x54,0xec,0x8d,
    0xfe,0xbe,0x41,0x7c,0xb2,0xe8,0xd4,0xbe,0x36,0xc9,0x3e,0x87,0x7e,0xb5,0x6f,0x14,
    0xcf,0x4a,0xec,0x6a,0xab,0x42,0x4b,0x3a,0x62,0xe9,0xc8,0x37,0x81,0x96,0x5e,0xf6,
    0xd5,0x2e,0x57,0x0d,0xfe,0x56,0xab,0x9e,0x5c,0x21,0xf2,0xaa,0xbb,0xd9,0x57,0xab,
    0xa9,0xab,0xfe,0x16,0xcb,0x7c,0xb4,0x7e,0x23,0xfd,0x6e,0xa0,0x7e,0x63,0xac,0x53,
    0xc2,0xda,0xd1,0xb6,0x11,0x3e,0xea,0xdf,0x84,0x2d,0xe7,0xec,0x2d,0x4e,0xcf,0x26,
    0xec,0xf5,0xf1,0xdc,0x24,0x63,0x2f,0xdb,0xe1,0x6d,0x7d,0xb6,0xb8,0x76,0xce,0x8e,
    0xed,0x77,0xa2,0x5d,0x75,0xef,0x26,0x87,0xe6,0x6d,0x96,0x8c,0x7d,0xec,0x13,0xe1,
    0xdf,0x3f,0xb6,0xbf,0x53,0xfa,0xbc,0x47,0xbe,0x7d,0xf0,0x78,0x04,0x7c,0x0f,0xba,
    0x74,0xbf,0xb7,0xac,0x7e,0x7f,0xd9,0x7e,0x90,0x3e,0x6b,0xfc,0x21,0x74,0x64,0x9d,
    0x7d,0x88,0xbd,0xf2,0x3b,0x06,0x9f,0x94,0xb3,0x8f,0xd3,0x17,0xb5,0x9f,0xc6,0x37,
    0xed,0xec,0xd3,0x9c,0x77,0xdb,0x9f,0x2f,0xeb,0xf3,0x05,0xce,0xaf,0xd6,0xbf,0x4c,
    0xee,0xd3,0xf0,0xbf,0xcc,0x9d,0x4f,0xc5,0x3e,0x65,0x22,0xcf,0x34,0xfc,0x15,0xfb,
    0x43,0x10,0xed,0xe5,0x2e,0xce,0x58,0x2d,0xbd,0x1c,0x10,0x46,0x35,0xdc,0xeb,0x5a,
    0x96,0xf5,0xad,0xc0,0x59,0x5d,0x8f,0xbd,0x4f,0x32,0x34,0x71,0xb7,0x37,0x30,0xf7,
    0x5d,0xf8,0x34,0x83,0x4f,0x8b,0x8f,0xee,0xef,0x20,0xae,0x99,0x38,0x9d,0xfb,0xdd,
    0xc4,0xb5,0x10,0x67,0x67,0x55,0xf1,0x55,0xf1,0xd9,0xe2,0xde,0x04,0x3d,0x0b,0xbf,
    0x0b,0xf3,0x36,0xf8,0xfc,0x25,0xfe,0xf6,0x36,0xb4,0xa1,0xa7,0x35,0xce,0x24,0x13,
    0x7b,0xb3,0x9d,0x9a,0xfa,0xf3,0x16,0xfd,0xba,0x07,0xfc,0x90,0xec,0x94,0xd3,0x97,
    0x60,0xe6,0xf7,0xa7,0xe4,0xb0,0x5c,0xfa,0xfd,0x4d,0xbc,0xd4,0xef,0x7b,0x7c,0x32,
    0xc4,0xb4,0x3a,0x0d,0x3b,0xd0,0xd0,0xee,0x34,0xdc,0x0b,0x6e,0x1a,0x3a,0xc0,0x4c,
    0x43,0xde,0x69,0x50,0x5b,0x27,0xef,0x94,0xd6,0xed,0x74,0x1a,0xee,0xa7,0x76,0xc2,
    0x69,0xe8,0x02,0x37,0x0d,0x5f,0x81,0x99,0x9f,0x6a,0xb0,0x5c,0x79,0xa7,0xe1,0x2a,
    0x3e,0x6d,0xc4,0x74,0x3a,0x0d,0x0f,0xa2,0x61,0xa7,0xd3,0xd0,0x0d,0x6e,0x1a,0x1e,
    0x02,0x33,0x0d,0xbd,0x4e,0x83,0xda,0x7a,0xe2,0xb9,0x2b,0xd5,0xed,0xe1,0x1c,0xe5,
    0x62,0xbe,0x52,0xed,0xab,0xee,0xee,0x29,0x47,0xf3,0xed,0x75,0x1c,0x7f,0xc0,0x2f,
    0x4f,0x5c,0x0f,0x7c,0xf4,0x4e,0x3e,0xca,0x7d,0xb4,0x33,0xb7,0x0f,0xce,0xfd,0xee,
    0xcc,0xed,0x07,0x7f,0x9b,0x33,0xf7,0x18,0x98,0xe6,0x7d,0x99,0xb7,0xf1,0x71,0xf0,
    0x51,0xd9,0xeb,0xdd,0x7f,0x82,0xdc,0x27,0x88,0x79,0x12,0xac,0xdf,0xc5,0x0c,0x80,
    0xbf,0x2b,0x3e,0xba,0x3f,0x48,0x9e,0x01,0xf8,0xe8,0xdd,0x3f,0x0c,0x9f,0x41,0xf8,
    0xe8,0xac,0x9e,0x02,0xd7,0x3c,0xfa,0x26,0x1f,0x01,0x1b,0x92,0x4a,0xfa,0x5e,0x1d,
    0xa5,0xf6,0x41,0x7a,0x73,0xc4,0xcd,0xe4,0x69,0xf2,0x0d,0xb9,0x99,0x3c,0x03,0x6e,
    0x33,0x79,0x16,0xcc,0x66,0x32,0xe2,0x66,0xa2,0xb6,0x61,0x59,0x63,0xf4,0x79,0x98,
    0x73,0xa5,0x79,0x9e,0xa3,0x76,0x2a,0x6a,0xa8,0x88,0x6f,0xd3,0xf3,0x60,0x47,0xdd,
    0x7d,0x4f,0x46,0x6e,0xd9,0x68,0x1f,0x25,0xce,0xd6,0x19,0xc9,0xa5,0xf8,0x71,0x62,
    0x47,0x63,0xae,0x75,0x51,0xd7,0x09,0xf2,0x1c,0xe7,0xcd,0xc9,0xf0,0xb6,0xa5,0x98,
    0xfd,0x08,0x9c,0xc6,0x9c,0xde,0x17,0xd0,0x3b,0xee,0xf4,0xbe,0x08,0x6e,0x7a,0x5f,
    0x02,0x33,0xbd,0x05,0xa7,0x57,0x6d,0x13,0xf1,0x8d,0x2a,0xe5,0x9e,0x70,0x7a,0x5f,
    0x71,0x7a,0xd7,0xc8,0xf5,0x2a,0xf8,0x56,0x38,0x59,0x5c,0x81,0xf3,0xa8,0x3e,0xaf,
    0x51,0x73,0x0c,0xff,0x09,0xea,0x16,0x5d,0x5d,0xf5,0x99,0x94,0x55,0x24,0x7e,0xd2,
    0xd5,0x7d,0xfd,0x3f,0xfa,0xfc,0xc6,0x2d,0xfa,0x7c,0x92,0x38,0x5b,0x33,0xf4,0xf9,
    0x14,0xb1,0x27,0x5d,0x9f,0xdf,0x24,0xcf,0xa9,0xff,0xe9,0xb3,0x71,0x2a,0xa2,0x49,
    0x63,0x7e,0x24,0xa6,0x40,0xfc,0x64,0xd9,0x4c,0x46,0x9c,0xef,0x35,0x66,0x39,0x4c,
    0x5c,0x31,0xc6,0x94,0xfe,0x56,0x4d,0x61,0xb7,0xf9,0xbd,0xc3,0xfc,0xa6,0xdd,0xfc,
    0xce,0x80,0xdb,0xfc,0xce,0x82,0xd9,0xfc,0x66,0x5d,0x1f,0xcf,0x46,0xad,0x21,0x9c,
    0x83,0xc7,0x0c,0x3a,0xb5,0xd6,0x7b,0xd4,0x9b,0x42,0x67,0x8e,0x9e,0x99,0xce,0x59,
    0x62,0xce,0x39,0x3e,0xef,0xc3,0xe7,0xbc,0xe3,0xf3,0x01,0xb8,0xf1,0xf9,0x10,0xcc,
    0xf8,0xcc,0x3b,0x3e,0x6a,0x9b,0x93,0xb5,0x40,0xee,0x39,0xf7,0x2e,0x7f,0x04,0x97,
    0x14,0xef,0xb0,0x72,0xfc,0xda,0xe1,0xf6,0xc6,0xcd,0x13,0xbb,0xe0,0xde,0x89,0x8f,
    0xe1,0x75,0xc1,0xbd,0x13,0x9f,0x80,0x5f,0x23,0xff,0xa7,0x60,0x83,0x8e,0xeb,0x45,
    0xf0,0x7e,0xb8,0x2e,0x39,0xae,0x6a,0x5b,0x94,0xb5,0x44,0xbd,0x45,0xc7,0xeb,0x1b,
    0x62,0xa6,0xdc,0xdf,0x07,0xf3,0x5b,0x62,0xd6,0xea,0x77,0x1d,0x9f,0x05,0x62,0x16,
    0x1d,0x9f,0xcf,0xe0,0xd3,0xe2,0xf8,0x7c,0x0e,0x6e,0x7c,0x56,0x1c,0x1f,0xb5,0x2d,
    0xcb,0x5a,0xa1,0xce,0xb2,0xe3,0xf3,0x2d,0x31,0xd7,0x99,0xa1,0xf2,0x31,0xbf,0x15,
    0xc7,0xe7,0x06,0x3e,0x4b,0xc4,0x2c,0x3b,0x3e,0x5f,0xc0,0x67,0xda,0xf1,0xb9,0x04,
    0x6e,0x7c,0xd6,0x1c,0x9f,0x4b,0xd1,0x2f,0x44,0x4c,0xeb,0xac,0x3a,0x3e,0xdf,0xf1,
    0x7f,0xcb,0x0d,0x77,0x9e,0xcc,0x6f,0xcd,0xf1,0xf9,0x05,0x9f,0x15,0x62,0x56,0xcb,
    0x66,0x3c,0xef,0x7c,0x7f,0xe6,0x3c,0xcc,0x11,0xb7,0x56,0x76,0x4e,0x67,0x9d,0xef,
    0x4f,0x9c,0xef,0x19,0xe2,0x34,0xcf,0x6e,0x61,0x72,0x05,0xdb,0xdf,0x32,0xb5,0x6e,
    0x59,0xff,0x00,0xf8,0x5e,0x0d,0x78,0x20,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
