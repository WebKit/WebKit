// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xdd,0x4b,0xd3,0x61,
    0x14,0xc7,0xcf,0x7e,0x9b,0x9b,0x15,0x94,0x6d,0x85,0x98,0x6f,0x95,0xe0,0x8d,0x22,
    0x41,0x2f,0x04,0x21,0xe5,0x8d,0x0b,0x5a,0x96,0x08,0xd1,0x85,0x5e,0xf8,0xd2,0x42,
    0x21,0xbd,0xa8,0x84,0x44,0x72,0x54,0x26,0xd5,0xa4,0x6b,0x93,0xb0,0x51,0xad,0x51,
    0x4d,0xec,0x8f,0x8b,0x5e,0x20,0xe8,0x9c,0x67,0x9f,0x9f,0x9e,0xa4,0xc1,0xc3,0xb3,
    0xf3,0x3d,0xe7,0xf9,0x3e,0xdf,0xef,0x39,0xcf,0x96,0x8c,0x7a,0x32,0x92,0x4c,0xc8,
    0x41,0x69,0x96,0x6f,0xd2,0xf8,0x1c,0x95,0x48,0x12,0xec,0x83,0xec,0x57,0x74,0x3f,
    0x24,0xe9,0x80,0xe7,0x0b,0x63,0x85,0x81,0xfb,0x0f,0x66,0x06,0xce,0x9d,0x3f,0x63,
    0xf5,0x87,0x25,0x19,0xce,0x59,0xee,0x88,0x64,0xa4,0x49,0xf7,0x94,0xae,0x7b,0x93,
    0xb3,0xf3,0x86,0x67,0x75,0x0d,0xeb,0x6a,0xd1,0xf3,0xa9,0xc0,0x27,0x72,0x92,0xfa,
    0xc0,0xa7,0x68,0x36,0xf0,0x8b,0xb4,0x13,0xdb,0x9e,0x0e,0x67,0x44,0xae,0x2a,0x63,
    0x07,0xda,0x7a,0xd8,0xf3,0x7a,0xa7,0x61,0x11,0xf5,0x5d,0xba,0x9f,0xde,0xcd,0x35,
    0xe2,0x53,0x8e,0x7f,0x18,0xfe,0x13,0xc4,0xc5,0x7d,0xf5,0x45,0xea,0x63,0x6e,0x8b,
    0xdb,0xc8,0x2d,0x70,0xd6,0xe2,0x9c,0xde,0x18,0x85,0xda,0x64,0x70,0x6d,0xdf,0x8f,
    0x6b,0x4d,0x1a,0x4f,0xf6,0x69,0xd5,0x38,0x83,0xfe,0x88,0xb8,0x85,0x38,0x19,0xea,
    0x52,0xa1,0x07,0x09,0xfc,0x5d,0x22,0xce,0x82,0xf5,0xc1,0x97,0x83,0xcf,0xea,0x8f,
    0x91,0x4b,0xc3,0xd7,0xca,0xf7,0x94,0xab,0x37,0x6f,0x36,0xa7,0x0e,0xfa,0xd7,0x0a,
    0xd6,0x45,0xaf,0xda,0xe1,0xea,0x44,0x57,0x07,0x77,0x77,0x86,0x9a,0x3d,0x2f,0xdd,
    0x6e,0x3e,0x7d,0x2e,0x8e,0xb5,0xf4,0xec,0xfa,0x12,0xd5,0x15,0x49,0x2f,0x9a,0xce,
    0xea,0xde,0x4b,0x2e,0xd6,0x74,0x19,0xcf,0xb1,0xc7,0xe1,0x7d,0x1e,0xaf,0xe9,0x6a,
    0x76,0x71,0x01,0x4f,0xfd,0x3a,0x73,0xeb,0xe1,0x75,0x6a,0x0a,0xae,0xe6,0x36,0x7a,
    0xe2,0x78,0x02,0xce,0x36,0x39,0x20,0x33,0xf4,0x25,0x21,0xff,0x7e,0x22,0x3c,0x9a,
    0xfe,0x3b,0x60,0x33,0xe8,0xb2,0xb8,0xe8,0x66,0x37,0xab,0x7b,0x37,0x67,0xfa,0x95,
    0xcd,0x66,0xb4,0xc0,0xbd,0x13,0xac,0x0b,0xaa,0x2f,0x42,0xab,0xe0,0xf1,0xa7,0x22,
    0xf6,0xf6,0x07,0x99,0x77,0x1e,0xbf,0x37,0xd4,0x49,0x26,0xbc,0xe3,0x06,0x96,0xe7,
    0x8c,0x69,0x7c,0x86,0xcf,0x11,0xf2,0xe6,0xb7,0x04,0x36,0x0a,0x6e,0xd8,0x90,0x62,
    0xf6,0x06,0x1e,0xf2,0x4e,0x72,0xdc,0x63,0x5e,0x17,0xc1,0x87,0x34,0xb2,0xd9,0x3c,
    0xda,0xf5,0xda,0xc8,0x0d,0xf2,0x5e,0x96,0xc8,0x8d,0x2a,0x97,0x9d,0x5b,0x06,0x13,
    0x87,0x3d,0x06,0x33,0x6f,0x3b,0x8a,0xd9,0x3c,0x57,0xa8,0xb5,0xdc,0x0f,0x75,0xba,
    0xca,0x99,0xdf,0xca,0xbb,0x12,0xf4,0x4a,0xc0,0xcc,0x7f,0xc9,0xf9,0x7d,0x02,0xd7,
    0x92,0xf3,0x6b,0x9c,0xf6,0x4e,0x9e,0x92,0x37,0x8f,0x9b,0xca,0xd3,0x1b,0x7a,0xd1,
    0xc0,0x7f,0x29,0x4f,0xcc,0x67,0xfb,0x77,0x65,0xb3,0xfc,0x73,0xb4,0x34,0x51,0x5b,
    0x42,0x4f,0xd9,0xe9,0xb1,0x9a,0x35,0x5d,0x65,0xce,0xaf,0x39,0x3d,0x2f,0x9c,0x9e,
    0x88,0x99,0x6d,0xa3,0xe7,0x25,0xf9,0x11,0xa7,0xe7,0x15,0xb8,0xe9,0x89,0xf9,0xca,
    0x4e,0xcf,0x3a,0x9a,0x56,0xa9,0xb5,0xbb,0xc6,0x12,0x4d,0xa1,0xd7,0xaf,0x79,0xfb,
    0xeb,0xae,0xb7,0xb7,0xc0,0x85,0x19,0x1b,0xb6,0xc1,0xbb,0x5a,0x74,0xf3,0x7b,0xe3,
    0xe6,0xb7,0xe1,0xe6,0xb7,0x49,0x2e,0xe6,0x7b,0x0b,0xe6,0xe7,0xb7,0x05,0xe6,0xe7,
    0xf7,0x8e,0xda,0x2d,0xfa,0x55,0x75,0xfd,0xb2,0x5c,0x45,0x57,0x15,0x7f,0x15,0xd7,
    0xaf,0xf7,0x70,0x6d,0xfe,0x67,0x7e,0x1f,0xc8,0xfb,0xf9,0x7d,0x04,0xb7,0x7e,0xc5,
    0x7c,0x55,0xd7,0xaf,0x4f,0x68,0x29,0x53,0x5b,0x41,0x4f,0xdd,0xe9,0xb1,0x9a,0x9a,
    0xae,0x3a,0xe7,0x6b,0x4e,0xcf,0x67,0xa7,0x67,0xff,0xfc,0xbe,0x90,0xf7,0xf3,0xfb,
    0x0a,0x6e,0x7a,0x62,0xbe,0xba,0xd3,0xb3,0x8d,0xa6,0x2a,0xb5,0x35,0x37,0xbf,0x1d,
    0xe6,0xb7,0xed,0x7a,0x3b,0x0e,0x2e,0xe1,0xae,0x46,0x6f,0x27,0x99,0x5d,0x0e,0x2f,
    0xd3,0xce,0x8b,0xe5,0xa6,0x74,0x4d,0x73,0xf7,0x14,0xb3,0xb4,0xff,0x9d,0xbb,0xfc,
    0xe7,0x2c,0xf3,0x7f,0x33,0xc7,0xef,0xff,0xa6,0x6a,0xb3,0xfb,0xe7,0x79,0x2f,0xe3,
    0x70,0xe7,0x02,0x4f,0x2a,0x9c,0x9b,0x23,0x6f,0xbe,0x62,0x6e,0xdb,0xff,0xe8,0x84,
    0x2e,0xea,0xfa,0x0b,0x66,0xb8,0xa3,0xd3,0xd4,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_ballot : require
//
// layout(local_size_x = 32, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return subgroupBallot(intersects). xy;
//
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(32, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
