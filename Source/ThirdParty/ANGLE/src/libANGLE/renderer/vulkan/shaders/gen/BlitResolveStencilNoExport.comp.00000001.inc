// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xd9,0x6f,0x94,0x55,
    0x18,0xc6,0xbf,0x99,0x69,0xa7,0x65,0xb4,0x2d,0xd5,0x16,0xb0,0x05,0x4a,0xad,0xc1,
    0xa5,0x04,0x31,0x61,0x33,0x30,0x52,0x88,0x20,0xb6,0x44,0x2c,0xd8,0x09,0x06,0x95,
    0x6a,0xbc,0x80,0x8b,0x2e,0x49,0x89,0xb5,0x0d,0x6a,0x4b,0x2b,0x22,0x16,0x0d,0x02,
    0x2e,0x80,0x1a,0x8c,0xc4,0x34,0x9a,0x48,0x6d,0x82,0x60,0xa2,0xb2,0x68,0xbc,0x30,
    0xf1,0x06,0x41,0xbc,0xc2,0x7f,0xc2,0x3d,0x46,0xdf,0xe7,0xcc,0xef,0x98,0x37,0x13,
    0xbf,0xe4,0xe4,0xcc,0x79,0xde,0x7d,0x3b,0x67,0x32,0xe9,0x96,0x8a,0x24,0x49,0x25,
    0xb9,0xa4,0x32,0xf9,0x39,0x29,0x7e,0xb5,0x49,0xda,0x90,0x24,0xb9,0x21,0xc9,0x86,
    0xfd,0x81,0x4d,0x5b,0x37,0x2d,0x1e,0xd8,0xfd,0xf4,0xe2,0xa5,0xcb,0x96,0x88,0x5e,
    0x9d,0x64,0x02,0x9f,0x68,0x35,0xc6,0x53,0x6e,0x7b,0x99,0xad,0x9e,0x27,0x77,0xf5,
    0x0a,0xaf,0xb2,0x35,0xd3,0xf0,0xb2,0xa0,0x2b,0x31,0xcd,0xc5,0x15,0x74,0x19,0x5a,
    0x15,0x74,0x27,0xc9,0x5c,0x5b,0x1b,0x4d,0x7a,0x1e,0x76,0x5b,0xd8,0x23,0x96,0x02,
    0xab,0x74,0x58,0x1a,0x6c,0xa6,0xc3,0x32,0x60,0x73,0x1c,0x56,0x06,0xe6,0x6d,0x94,
    0x83,0x2d,0x70,0x58,0x16,0x6c,0x89,0xc3,0x2a,0xc0,0x96,0x3a,0xac,0x12,0x6c,0xa5,
    0xc3,0x66,0x80,0xad,0x0e,0x71,0x65,0xfe,0xf3,0x4f,0x31,0xee,0xb7,0xfd,0x56,0xe2,
    0x89,0xe7,0x66,0x97,0x83,0x89,0x12,0xfa,0x04,0xf4,0x28,0x7f,0x1a,0xdf,0xca,0xb0,
    0x37,0x55,0x92,0x23,0xd9,0x9b,0x22,0x76,0xf1,0x4f,0x97,0xe8,0x9b,0x46,0x5f,0x3c,
    0x5f,0x24,0xe7,0xb7,0xd8,0xba,0xd9,0xac,0xa4,0x03,0x3d,0x13,0xe4,0xf5,0xbb,0xde,
    0x78,0xb2,0xe4,0x46,0x3e,0xce,0xb6,0x73,0x05,0x3e,0x44,0x7a,0x0e,0x7a,0x02,0x5d,
    0xfa,0x72,0xf8,0xb0,0xc0,0xce,0x37,0x22,0x2b,0x7c,0x15,0xe7,0x2a,0xb0,0x56,0xe4,
    0xab,0x91,0x17,0x7f,0x0d,0xb4,0x9c,0xa3,0xdf,0x44,0xcc,0xf1,0x5c,0x0f,0xcf,0x2c,
    0xb3,0xd2,0x80,0x7d,0xd9,0x6e,0xb4,0xbd,0x01,0xdf,0x74,0x9e,0xeb,0xf2,0x35,0xdf,
    0x2c,0xab,0x16,0x8d,0x6e,0x65,0x59,0x91,0x2f,0xe7,0x96,0x7c,0x99,0x4f,0x3d,0xe7,
    0xe1,0xbb,0xce,0x4d,0x60,0xad,0x2e,0x37,0xe5,0xf0,0x37,0x43,0x93,0xbe,0x3a,0xf3,
    0x62,0x21,0x7e,0xdc,0x6e,0xfb,0x42,0xfc,0x8a,0x72,0xcb,0x89,0x41,0x72,0x2b,0x90,
    0x6b,0x84,0xde,0x40,0xff,0xd8,0xb7,0x66,0x91,0x69,0x17,0x9e,0x07,0x5b,0xed,0x74,
    0xb4,0x91,0xb7,0x78,0x5e,0x4f,0x9f,0x4a,0xe7,0x06,0x74,0xe6,0x1c,0xbd,0x93,0x9e,
    0x8d,0xe7,0xed,0x25,0xb1,0xec,0xb4,0xf5,0x8f,0x7d,0xf1,0x3c,0xe0,0xf2,0x2e,0x9f,
    0x06,0x5d,0x9d,0x9e,0x43,0x36,0x1b,0xfa,0x67,0x46,0xb2,0x0f,0x5b,0x29,0x78,0x4a,
    0x77,0xc9,0xbc,0xc4,0xef,0x7d,0xe4,0x53,0xe7,0xfd,0x60,0x0d,0x96,0x9d,0x03,0xf0,
    0xbd,0x02,0x76,0x00,0x3e,0x9d,0x27,0xc0,0x1a,0xad,0xe6,0xaf,0xa2,0x23,0xfa,0x79,
    0xa8,0x24,0xb7,0x47,0xe9,0x3f,0xe5,0xfe,0x6d,0x7a,0x22,0x9e,0xdf,0xc1,0x4f,0xdf,
    0x4f,0x27,0x15,0x77,0xa8,0x73,0x26,0xcc,0x58,0x2e,0xf4,0x4b,0x71,0x96,0x4e,0xe3,
    0xd3,0xa7,0xd8,0x98,0xc2,0x27,0x9d,0xa7,0x4b,0xec,0x9e,0x21,0x1f,0xe2,0xff,0x0a,
    0x9a,0xef,0xe3,0x0b,0xe4,0x7f,0x91,0x71,0x69,0x1e,0x2e,0x82,0x5d,0xa0,0xa7,0x97,
    0x5b,0xad,0xd3,0xf8,0x96,0xe0,0xf3,0xef,0x86,0xa8,0xbf,0x7e,0xb3,0xd3,0x25,0xf0,
    0xbf,0xec,0xb7,0x66,0xe6,0x6b,0xe8,0xda,0xd7,0x1a,0x57,0x0d,0x77,0x60,0x15,0x33,
    0x95,0xc7,0x6e,0x2d,0xf8,0xb8,0xf1,0xe4,0xc2,0xac,0x17,0x31,0xcd,0xd5,0x1e,0x7c,
    0xaf,0x03,0x8f,0x7a,0x66,0xa1,0xa7,0xde,0xe9,0x99,0x0d,0x1e,0x65,0xe6,0x80,0x3d,
    0x6c,0x32,0x15,0xdc,0x23,0x75,0xe0,0xd2,0xd3,0xcc,0xfd,0xd3,0xc4,0x9c,0xe4,0x99,
    0xc9,0x16,0xf0,0xcd,0x26,0x25,0xb9,0xdb,0xc0,0x5a,0xc8,0x59,0x26,0xe4,0xb6,0x3c,
    0xcc,0xcd,0x1d,0xd0,0xa5,0xfb,0x98,0xc9,0x6b,0x8e,0xee,0x04,0x57,0x4e,0x5a,0xc9,
    0xc9,0x9f,0x46,0x13,0x7e,0x57,0xc8,0x77,0x31,0x2f,0xfa,0xfd,0x87,0xed,0x97,0x38,
    0xb7,0x3a,0x9b,0x77,0x3b,0x9b,0xb1,0x4f,0x47,0x88,0xe3,0x1e,0xec,0x89,0xa7,0x8f,
    0x7b,0x65,0x19,0xb8,0xe2,0x5a,0xc1,0x9d,0xdf,0xc4,0x1c,0xe7,0xe1,0xb9,0x17,0xfc,
    0x45,0x66,0x76,0x15,0x72,0xc2,0x47,0xc1,0xd6,0x80,0xe7,0x9d,0xae,0xb5,0xe8,0x6a,
    0x73,0xba,0xd6,0x81,0x8f,0x21,0x77,0x3f,0xb2,0xeb,0x90,0xdb,0x10,0xee,0xf0,0xa2,
    0xdc,0x7a,0x57,0xa3,0x8d,0xe0,0x1f,0x19,0x8f,0x72,0xf5,0x20,0x58,0x35,0xf9,0xea,
    0x70,0xf9,0x12,0xad,0xdd,0x56,0x07,0xf9,0x69,0x0f,0x77,0x44,0x79,0x98,0x97,0x87,
    0xb0,0xa9,0xef,0x05,0xe6,0x7f,0x33,0xf8,0x16,0xab,0xbe,0x7c,0xfa,0x0e,0x2c,0xf2,
    0x29,0xd7,0x51,0x97,0xf6,0x5f,0x2c,0x9b,0xe2,0xfb,0x01,0x9e,0x56,0x64,0xda,0x5d,
    0x0c,0x5b,0x88,0xa1,0xd3,0xc5,0xb0,0x15,0x3c,0xc6,0xf0,0x08,0x58,0x8c,0xa1,0xe0,
    0x62,0x10,0xad,0xcb,0x56,0x01,0xbb,0x5d,0x2e,0x86,0x6d,0xd8,0x4e,0xb9,0x18,0x1e,
    0x05,0x8f,0x31,0x7c,0x0f,0x16,0xf9,0x14,0x43,0xd4,0x55,0x70,0x31,0x5c,0x81,0xa7,
    0x03,0x99,0x2e,0x17,0xc3,0x63,0xc4,0xb0,0xdd,0xc5,0xf0,0x38,0x78,0x8c,0xe1,0x09,
    0xb0,0x18,0x43,0xb7,0x8b,0x41,0xb4,0x1d,0xb6,0xba,0xb1,0xbb,0x83,0x3e,0x95,0xdd,
    0xa7,0xb0,0x7d,0xc5,0xdd,0xa5,0xf2,0x31,0xf2,0x76,0x3b,0x1f,0x7f,0x82,0xaf,0x80,
    0x9c,0xf4,0x4c,0x5a,0x9c,0x9a,0xd5,0x5d,0xf4,0xc2,0x4e,0x7a,0x56,0x3a,0x7a,0xd0,
    0xd1,0xe3,0x74,0x5c,0x43,0x8f,0xf4,0x5e,0xb6,0xd5,0x0f,0x4d,0x31,0xfd,0x88,0xff,
    0xa2,0x5d,0x77,0x34,0xe9,0xbf,0x4a,0xff,0x8a,0xf6,0x09,0xb4,0x29,0x62,0xdf,0x0d,
    0x5d,0xef,0xc9,0xaf,0x16,0x6f,0x1f,0xf4,0x18,0xbf,0xe8,0xbd,0x61,0xd6,0x8a,0xfe,
    0xf4,0xba,0x1a,0x3e,0x83,0x4f,0xfa,0xbe,0x44,0xdf,0xb3,0xe0,0x83,0xe4,0x72,0xd8,
    0xe9,0x12,0x6d,0xc8,0xd6,0x30,0xba,0x86,0xa8,0x93,0xde,0xab,0xe7,0xa9,0xd3,0x00,
    0x75,0xca,0x86,0xbe,0x28,0xe2,0x7d,0xf4,0xc7,0x08,0xd8,0x59,0x6c,0x8d,0x62,0x6b,
    0x84,0x9c,0x45,0xbd,0xc3,0xc4,0x2e,0x9e,0xbd,0xf8,0xd4,0x0b,0xff,0x10,0x7e,0x8d,
    0x3b,0xbf,0xf6,0x86,0x59,0x4e,0x02,0x26,0xf9,0x31,0x7c,0xd0,0x3b,0xf6,0x32,0xef,
    0xa0,0xce,0x7a,0xf3,0x0e,0xf2,0xde,0x15,0xcc,0x07,0xbd,0x75,0xaf,0xc1,0x73,0xd0,
    0xdd,0x19,0xaf,0x13,0xcb,0x21,0x77,0x67,0x1c,0x06,0x8f,0xf7,0xcf,0x11,0x72,0x77,
    0xd8,0xe5,0xe0,0x0d,0xe4,0x8e,0xba,0x1c,0xbc,0x09,0x1e,0x73,0xf0,0x16,0x58,0xac,
    0xc1,0x31,0x74,0x25,0x0e,0x3b,0x0e,0x96,0x0a,0xf7,0x7f,0x36,0xbc,0xb3,0x27,0xe0,
    0x3d,0x8e,0x8e,0x6d,0x96,0x1f,0xbd,0xb7,0xef,0x12,0xc3,0x09,0xee,0xf7,0x41,0xf4,
    0xa8,0xa7,0xde,0x83,0xae,0xef,0x5b,0xb0,0xf7,0xc1,0x4f,0xf2,0x66,0xc9,0xc7,0x0f,
    0xe8,0xa1,0xce,0xf0,0xee,0x15,0xf9,0x4e,0xc1,0x2b,0xda,0x37,0x60,0x1f,0xd2,0xa7,
    0xa7,0xa8,0x57,0xcc,0xf7,0xb8,0xeb,0xe3,0xeb,0xf0,0x0c,0xc3,0x3f,0xe6,0x62,0x9f,
    0x64,0x56,0x46,0x89,0xf3,0x63,0xea,0x3f,0xe9,0xee,0x8c,0xcb,0xe0,0xd7,0xdc,0x3c,
    0xf6,0x63,0xa7,0x9f,0x77,0x24,0xcb,0x1c,0x5c,0xfd,0x9f,0x79,0xeb,0x73,0xf5,0xf8,
    0x8c,0x7a,0x9c,0x71,0xf5,0x38,0x0b,0xbe,0x87,0xbb,0xe4,0x1c,0x58,0x7c,0xbf,0x3f,
    0xe7,0xdd,0x3d,0x87,0x2d,0x61,0x5f,0x80,0xd7,0x06,0xdd,0xd9,0xf0,0xff,0xe3,0x3c,
    0xff,0x51,0xda,0xa0,0xdf,0x67,0x3d,0x79,0x9e,0xd8,0xfd,0xbb,0xa8,0xfd,0x6f,0xab,
    0xe4,0x4a,0x5b,0xff,0x02,0x8d,0xed,0x49,0xea,0xfc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//
//     ivec4 blitArea;
//     int destPitch;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             vec2 srcImageCoords = vec2(destSubImageCoords);
//
//     srcImageCoords *= params . stretch;
//     srcImageCoords += vec2(0.5);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = params . flipX ? - 1 : 1;
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if(srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)
//         {
//
//             uint stencilValue = texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         srcImageCoords . x += xDir;
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
