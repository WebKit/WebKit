// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x68,0x5d,0x65,
    0x14,0x85,0xcf,0xb9,0xe7,0xe6,0xde,0xb4,0xb7,0xb1,0x69,0x93,0x26,0x6a,0x6e,0x9a,
    0x68,0xad,0xf8,0x28,0xa5,0x10,0x15,0x41,0x2c,0x75,0xa4,0x95,0x06,0x31,0x1d,0x74,
    0x12,0x30,0x82,0x19,0x38,0x48,0xa5,0x28,0x19,0x74,0x60,0x8a,0x9d,0x64,0x50,0x84,
    0x4c,0xa4,0xed,0x40,0x5b,0x2b,0x14,0x11,0xab,0xd6,0xce,0xaa,0x16,0x1f,0xa5,0x12,
    0x6b,0x50,0xa2,0x0d,0x06,0x7c,0x94,0x80,0x96,0x80,0x96,0x80,0xa9,0xf1,0x11,0xe2,
    0x5e,0xe7,0x7c,0x3b,0xdd,0xdc,0xc0,0xee,0x39,0x7b,0xad,0xfd,0xef,0xb5,0xd7,0x7f,
    0xfe,0xff,0x36,0x2b,0x6d,0xa9,0x26,0x49,0x9a,0xac,0x4d,0x9a,0x93,0xde,0x34,0xc9,
    0xff,0x36,0x24,0xa5,0x44,0xaf,0xb5,0xa4,0x92,0x3f,0x1f,0xdf,0xb3,0x77,0xcf,0xf6,
    0x17,0x5f,0x7a,0x6e,0xfb,0x03,0x0f,0xee,0x10,0x7f,0x4b,0x92,0xe5,0x75,0xe2,0xd6,
    0x5b,0x56,0xb6,0xa7,0x62,0xe4,0xd9,0xe7,0xf7,0x0b,0xef,0xb0,0xd8,0x6b,0x31,0x68,
    0x31,0x2c,0xdc,0x62,0xd4,0x62,0xcc,0x62,0xdc,0x62,0xc2,0xa2,0xd5,0x7a,0x68,0x4d,
    0x55,0xfd,0xed,0xad,0x23,0xd7,0x53,0xbf,0x24,0x79,0x22,0x69,0x4a,0xea,0xc5,0x28,
    0xc9,0x16,0x9e,0x8e,0xa5,0x60,0xcd,0x01,0x2b,0x81,0xb5,0x06,0x2c,0x03,0xbb,0x35,
    0x60,0x65,0xb0,0x7a,0xc0,0x9a,0xc0,0x7a,0x03,0x56,0x01,0xbb,0x2b,0x60,0x55,0xb0,
    0x7b,0x02,0xd6,0x0c,0xb6,0x2d,0x60,0x6b,0xc0,0x76,0xe4,0xbe,0xb2,0xd5,0xf9,0xe4,
    0x51,0x7b,0xb2,0x19,0x3f,0xca,0x07,0xc9,0x53,0xf2,0x61,0x72,0xaf,0x1f,0x21,0xcf,
    0xc8,0x47,0xc9,0xcb,0xe4,0x63,0xe4,0x4d,0xe4,0xe3,0xe4,0x15,0xf2,0x09,0x72,0xdf,
    0xe3,0x53,0xf6,0xbc,0x33,0xe8,0x2b,0xbf,0x83,0xbc,0xcd,0x54,0x4b,0x79,0x9e,0xe5,
    0x7a,0x7a,0xdf,0x64,0x35,0x15,0xf6,0x46,0x33,0x76,0x5a,0x5e,0xa5,0x7f,0x89,0xbc,
    0x46,0x5e,0xce,0xbf,0x7b,0x66,0x7d,0x8a,0x7a,0x71,0xed,0x79,0xdf,0x82,0xeb,0xb5,
    0x7f,0x37,0xd1,0x47,0xf8,0x23,0xe4,0x1d,0xa1,0x77,0x27,0xf5,0xae,0xdd,0x45,0xaf,
    0x24,0xf7,0xb1,0x6e,0xf5,0x3b,0x74,0x12,0x15,0xa2,0x8d,0x67,0x57,0x08,0xe9,0x75,
    0xf3,0x3d,0xea,0xe8,0x75,0xb3,0x1f,0xc2,0xee,0xc7,0x5b,0x0f,0xfd,0x55,0xdf,0x0b,
    0x57,0x0d,0xfc,0x56,0x72,0xf1,0x77,0xc3,0x77,0xe5,0x1e,0x4a,0xc9,0xbd,0xd4,0x29,
    0xbf,0x8f,0x3e,0xbe,0xae,0x8f,0xf3,0xe1,0xf9,0xce,0x06,0xdd,0xdd,0xcc,0xac,0xbe,
    0x4f,0xc2,0x55,0x02,0xdf,0xcf,0xbe,0x88,0x1f,0xe0,0x0c,0xd4,0xf0,0x31,0xc0,0xfd,
    0xca,0x42,0xfd,0x3e,0xf6,0xcd,0xf9,0xc1,0x06,0x7e,0x88,0xef,0xe0,0xfc,0x30,0xbc,
    0xe7,0x23,0x0d,0xf5,0x07,0xb8,0x4f,0xce,0x8f,0x36,0xf0,0x07,0xf9,0x36,0xce,0x8f,
    0x35,0xf0,0x87,0x2d,0x76,0x05,0x7e,0xbc,0x81,0x3f,0x62,0x71,0x28,0xf0,0x13,0xf0,
    0xdb,0x6c,0xb7,0xe5,0xf3,0x35,0xbe,0x4d,0x8c,0xdb,0x6c,0x97,0x4e,0xb2,0x4f,0xfc,
    0x54,0xad,0xfe,0x0e,0xa5,0xe1,0x3b,0xbe,0xc9,0xfb,0x49,0xfa,0x2b,0x3f,0xd5,0xf0,
    0x7d,0xce,0x70,0x6f,0x54,0xff,0x1e,0xfb,0xaf,0x73,0xf4,0x90,0xa1,0x25,0xf6,0x2a,
    0x61,0xa6,0x25,0x43,0x54,0xfb,0x28,0x67,0xfa,0x3c,0xe7,0xf6,0x29,0x9b,0x55,0xe7,
    0xf0,0x23,0xb0,0xf3,0x61,0x9e,0xfd,0xdc,0x95,0x8f,0xe1,0x1f,0xb3,0x0e,0xda,0xaf,
    0x4f,0x38,0x83,0x3d,0xf4,0x53,0xcd,0x05,0xf0,0x57,0xac,0x46,0xf9,0xa7,0xac,0xbb,
    0xc0,0x3a,0x9d,0xbb,0xcf,0x58,0xb7,0x95,0x75,0x3a,0x73,0x9f,0x83,0xbf,0x63,0x35,
    0x3a,0x8b,0x5f,0x80,0xe9,0x2c,0xfe,0x65,0x93,0x4f,0x32,0xcf,0x3f,0x56,0x2f,0xee,
    0xa2,0xc5,0x24,0x7e,0xf4,0xfe,0xb4,0xad,0xd3,0x5e,0x5c,0x42,0x53,0x7f,0x2f,0xb3,
    0x3f,0x5f,0x82,0x0f,0x58,0x96,0xdf,0xb9,0xb4,0xc0,0xbc,0xee,0x6f,0xeb,0xe1,0xbd,
    0xf4,0x5c,0xb4,0x2a,0xd5,0x75,0xa5,0x45,0x4d,0x13,0x6b,0x2e,0x06,0x0f,0x5f,0xe1,
    0xa1,0x2f,0x78,0xb8,0x0c,0xee,0x1e,0xbe,0x06,0x73,0x0f,0xd3,0xc1,0x83,0xb8,0x29,
    0x8b,0x69,0x74,0xa7,0x82,0x87,0x6f,0xd0,0x4e,0x83,0x87,0x6f,0xc1,0xdd,0xc3,0xed,
    0x69,0x81,0x79,0x9d,0x3c,0x78,0xaf,0xe9,0xe0,0xa1,0x9e,0x16,0x35,0x93,0xac,0x99,
    0x0a,0x1e,0xbe,0xc3,0xc3,0xce,0xe0,0xe1,0x7b,0x70,0xf7,0x70,0x05,0xcc,0x3d,0xcc,
    0x06,0x0f,0xe2,0x66,0x2c,0x66,0xd1,0x9d,0xe1,0x1c,0x49,0xf7,0x07,0xb4,0xeb,0xe9,
    0xcd,0xf3,0xac,0x19,0xbd,0x76,0x36,0xcc,0xd8,0x4d,0xdd,0x34,0xeb,0x66,0xa8,0x3d,
    0x4a,0xed,0x51,0x6a,0x75,0x97,0x7a,0xd2,0xe2,0x3e,0x69,0xfd,0xdb,0x16,0xc7,0xe0,
    0xb4,0x47,0x9b,0xd3,0xe2,0x2c,0xce,0xe6,0xf3,0x17,0x9c,0xbc,0xea,0x37,0xe9,0x75,
    0xbc,0x0e,0xe1,0x55,0xf5,0x6f,0x80,0x7f,0x80,0xd7,0x13,0xf4,0x10,0x7e,0xc3,0x6a,
    0x8e,0xd3,0xc3,0xfd,0x9e,0x20,0x3f,0xce,0x5c,0xc7,0xe8,0xa5,0xbb,0xf9,0x16,0xf7,
    0xf2,0x19,0xe6,0x3c,0x0d,0x26,0x6f,0xbb,0xe8,0x7b,0xc8,0x74,0x6a,0xcc,0x2d,0x1f,
    0xa7,0x93,0x02,0xab,0x30,0xaf,0x6a,0xfa,0x1b,0xbc,0x4b,0xeb,0x05,0xee,0xea,0xbb,
    0xac,0x93,0x27,0xdd,0xf3,0xf7,0xf1,0x74,0x86,0x39,0xda,0x72,0x2f,0x05,0xfe,0xaa,
    0xd5,0x68,0xcd,0x59,0xd6,0x09,0x5f,0x67,0x4a,0xc2,0x3e,0x0c,0xbf,0x33,0x67,0xb9,
    0xdf,0x9a,0xeb,0x1c,0x9c,0xef,0xd9,0x8f,0xf4,0xdf,0x1d,0xf6,0xec,0x27,0xf0,0x4b,
    0xcc,0xfd,0x33,0x58,0x7f,0x38,0x33,0xbf,0x80,0xf7,0x70,0x66,0xe6,0xc2,0x1e,0x8a,
    0xbb,0x6a,0x31,0x87,0xbf,0xab,0xf9,0xf9,0xcb,0xf2,0xff,0x03,0xce,0xe1,0xdd,0xb9,
    0xb9,0xa0,0xf3,0x2b,0x3a,0xfb,0x82,0xce,0x6f,0xe0,0xae,0x33,0x1f,0x74,0xc4,0x5d,
    0xb3,0x98,0xa7,0xd7,0x35,0x74,0x06,0x83,0x8e,0x73,0xf3,0x41,0xe7,0x77,0x74,0x86,
    0x82,0xce,0x1f,0xe0,0xae,0xb3,0x10,0x74,0xc4,0x5d,0xb7,0x58,0xa0,0xd7,0x75,0x74,
    0x86,0x83,0x8e,0x73,0x0b,0x41,0xe7,0x4f,0x74,0xfa,0x82,0xce,0x22,0xb8,0xeb,0x2c,
    0x05,0x9d,0xc5,0xfc,0x4c,0x26,0x39,0xa6,0x5e,0x37,0xd0,0x19,0x09,0x3a,0xce,0x2d,
    0x05,0x9d,0x7f,0xd1,0x39,0x10,0x74,0xfe,0x03,0x77,0x9d,0x95,0xa0,0x23,0x6e,0xd9,
    0x62,0x85,0x5e,0xcb,0xe8,0x8c,0x06,0x1d,0xe7,0x56,0x82,0x4e,0x29,0x2d,0x74,0x0e,
    0x06,0x9d,0x2c,0x2d,0x70,0xd7,0xa9,0xa4,0x37,0x75,0xc4,0x95,0x2d,0x84,0xa9,0x97,
    0xde,0xa5,0x33,0x16,0x74,0x9c,0xd3,0xd3,0x75,0xd6,0xa0,0x73,0x38,0xe8,0xac,0x4d,
    0x0b,0xdc,0x75,0x5a,0x82,0x8e,0xb8,0x9a,0x45,0x0b,0xbd,0x6a,0xe8,0x8c,0x07,0x1d,
    0xe7,0x5a,0x82,0x4e,0x2b,0x3a,0x47,0x82,0xce,0x86,0xb4,0xc0,0x5d,0xa7,0x3d,0xe8,
    0x88,0xdb,0x68,0xd1,0x4e,0xaf,0x8d,0xe8,0x4c,0x04,0x1d,0xe7,0xf4,0x5c,0xb6,0xdb,
    0xf7,0xb0,0xc5,0xff,0x7c,0x50,0x47,0x18,0xb4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
