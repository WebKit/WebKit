// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xd7,0xb9,0xd3,0x23,0x20,0x72,0x95,0x78,0x01,0x85,0x44,0x83,0xf6,0x60,
    0x5a,0xb1,0x82,0xc5,0x78,0x4b,0x44,0xc5,0x7a,0x21,0x46,0x53,0xdb,0x5a,0xad,0x6d,
    0xc1,0x44,0xac,0x1c,0x93,0x56,0x48,0xbc,0xc0,0x83,0x55,0x88,0xa1,0x15,0x1e,0x6c,
    0x85,0x07,0x6f,0x3c,0x98,0x58,0xf1,0xd5,0xbe,0xf7,0x2f,0xaa,0x55,0x13,0x13,0x67,
    0xd6,0xf9,0x0d,0x9d,0x9c,0x93,0xcc,0xd9,0x7b,0xbe,0x6f,0x66,0xbe,0x99,0xb5,0xd7,
    0x5a,0xa9,0x64,0x5b,0x2e,0x84,0x44,0xc8,0x87,0x8a,0xf0,0x77,0x28,0xfd,0x56,0x84,
    0xa4,0x20,0x21,0x2c,0x0b,0xd9,0xf8,0xdc,0xdf,0x3f,0xd0,0x5f,0x28,0x5e,0x39,0x5f,
    0xd8,0xda,0xb5,0x45,0xf9,0xea,0x90,0x8a,0x71,0xca,0x2d,0x17,0x2f,0x2d,0x4f,0xb5,
    0x8b,0x67,0x87,0x86,0x15,0xaf,0x12,0xbb,0x20,0x56,0x14,0x1b,0x13,0x9b,0x10,0x9b,
    0x12,0x9b,0x15,0x9b,0x17,0x5b,0x10,0xab,0x91,0x1a,0x9a,0x93,0xd3,0xfa,0xf2,0x56,
    0x15,0xf5,0xb4,0x5e,0x08,0x7d,0x21,0x13,0xea,0xe8,0xa5,0x8d,0xa7,0x61,0x09,0xb0,
    0x0a,0x87,0x25,0xc1,0x6a,0x1c,0x96,0x02,0x5b,0xe9,0xb0,0x34,0xd8,0x6a,0x87,0x65,
    0xc0,0x5a,0x1d,0x96,0x05,0x6b,0x77,0x58,0x0e,0x6c,0xa3,0xc3,0x2a,0xc0,0x36,0x3b,
    0xec,0x23,0xb0,0x2d,0x71,0xae,0xd4,0x52,0x7f,0x3a,0xe3,0x11,0x79,0xae,0x67,0x1e,
    0xf3,0xd7,0x39,0x5f,0xd7,0x6c,0xad,0xf3,0x8b,0xf8,0x09,0xfc,0x31,0x7c,0xab,0x37,
    0x81,0x9f,0xc2,0x9f,0xc2,0x4f,0xe3,0xcf,0xe2,0x67,0xf0,0xe7,0xf1,0xb3,0xf8,0x0b,
    0xf8,0x3a,0x5b,0x9d,0x54,0x4d,0xc6,0x7e,0x52,0xb1,0x9e,0xbe,0x37,0x48,0x4c,0x96,
    0xb5,0xd1,0x1e,0x9a,0xc4,0xcf,0x91,0xaf,0x7c,0xa3,0x44,0xe6,0xe1,0x95,0xd3,0xef,
    0x97,0x47,0xbf,0x55,0xfe,0x2b,0xc9,0x53,0x7c,0x07,0x7e,0x95,0xab,0x55,0x4d,0xbc,
    0x69,0xd5,0x52,0x2b,0xc4,0xbe,0x2a,0x97,0xd6,0xbd,0x1a,0xcb,0x62,0x79,0x9e,0xb5,
    0xce,0x54,0xaf,0x9e,0xf5,0xaf,0x43,0xaf,0x3e,0xd6,0x2d,0x61,0x9b,0x98,0xa5,0x91,
    0xfa,0x1a,0xdf,0x04,0x97,0x73,0xfc,0x6a,0x7c,0xe5,0xd7,0xc0,0x6b,0xfd,0x7a,0xe9,
    0xb2,0x95,0xb8,0x5a,0xf7,0xdd,0x2c,0xaf,0x83,0xfd,0x60,0x7e,0x17,0xb9,0x3a,0x67,
    0x2f,0xfd,0xa6,0xe3,0x5e,0xc9,0x45,0x7f,0x17,0xbd,0x78,0xb3,0xdc,0x3e,0xb7,0x86,
    0x07,0xa8,0xa3,0x78,0xb3,0xbc,0x1d,0xe6,0x3d,0x11,0xfe,0xff,0x25,0x9c,0xaf,0x39,
    0x5f,0xf0,0x7e,0x98,0x75,0x50,0xff,0x48,0x59,0xbf,0x27,0xc9,0x31,0xff,0x34,0xfb,
    0x44,0xf3,0xbf,0x42,0x33,0xef,0xf8,0x73,0xe8,0x2a,0x3f,0xc4,0x9e,0xeb,0xa5,0xfe,
    0x10,0xe7,0x3d,0xe5,0xe2,0x87,0xf9,0xae,0xc6,0x17,0xe1,0xcd,0x1f,0x2b,0xf3,0x27,
    0xca,0xf2,0x6f,0x71,0x9e,0x8d,0x9f,0x2a,0xe3,0xa7,0xd9,0x2b,0xc6,0xcf,0x96,0xf1,
    0xf7,0x59,0x63,0xe3,0xe7,0xcb,0xf8,0x87,0x62,0x37,0x1c,0xbf,0x00,0xbf,0x4d,0x56,
    0x21,0xc9,0xfa,0x07,0xb0,0x37,0x82,0x64,0xe2,0xbc,0xe9,0xa5,0x3b,0xaa,0x2a,0xae,
    0x69,0x2e,0xee,0xcb,0x1a,0xb0,0xe5,0xee,0x7b,0x0c,0x73,0x56,0x56,0xc0,0xef,0x96,
    0x0a,0x4d,0xdc,0x47,0x0d,0x7c,0xef,0x5e,0x62,0x9a,0xc1,0xc7,0x25,0x46,0xfd,0x55,
    0xe4,0x35,0x93,0xb7,0x86,0x73,0xda,0xc0,0xfe,0xec,0x65,0x0f,0xb6,0x80,0x3f,0x93,
    0x98,0x56,0xee,0x96,0x16,0xf6,0xe6,0x7f,0xd2,0x79,0x3b,0xfd,0xbc,0x93,0xf8,0xf5,
    0xee,0x4e,0xd3,0x79,0xf4,0xfd,0x98,0xe4,0xe9,0x5a,0x6c,0x40,0x53,0x7f,0xd7,0x58,
    0x9f,0x8d,0xe0,0xc7,0xc5,0xcb,0x45,0x8d,0x12,0x66,0x71,0x6f,0xa5,0x86,0xd5,0xd2,
    0xe7,0xbf,0x12,0xa5,0x71,0x7f,0x11,0x93,0x21,0xa7,0xcd,0xcd,0xb0,0x89,0x19,0x3a,
    0xdc,0x0c,0x9b,0xc1,0x6d,0x86,0x8f,0xc1,0x6c,0x86,0x4e,0x37,0x83,0x72,0x05,0xb1,
    0x4e,0x74,0x0b,0x6e,0x86,0x4f,0xd0,0x4e,0xb8,0x19,0x3e,0x05,0xb7,0x19,0x9e,0x83,
    0x59,0x9c,0xce,0x60,0xb5,0x3a,0xdd,0x0c,0x2f,0x88,0x69,0x27,0xa7,0xe0,0x66,0xd8,
    0xc6,0x0c,0x5d,0x6e,0x86,0xcf,0xc0,0x6d,0x86,0xed,0x60,0x36,0x43,0x8f,0x9b,0x41,
    0xb9,0x6e,0xb1,0x1e,0x74,0xbb,0xd9,0x47,0xaa,0xfb,0x39,0xda,0x2f,0xdc,0x79,0xd6,
    0x1e,0x2d,0xb6,0xc7,0xf5,0xf8,0x8a,0xb8,0x4e,0xf2,0xba,0x89,0xdd,0x43,0xec,0x1e,
    0x62,0xf5,0x8c,0xbe,0xe4,0x2c,0x68,0xfe,0x09,0xb1,0xbd,0x70,0xba,0x46,0x8b,0xec,
    0x45,0xe5,0x4e,0xc1,0xe9,0xac,0x7a,0xef,0x1c,0x64,0xd6,0x3e,0x66,0xd5,0xf8,0x43,
    0xe0,0x8b,0xcc,0xda,0x4f,0x0d,0xc5,0x5f,0x4b,0xcc,0x3e,0x6a,0xd8,0xbc,0xfd,0xf8,
    0xfb,0xe8,0x6b,0x2f,0xb5,0xf4,0x6e,0x3a,0xca,0xbd,0x74,0x86,0x3e,0x07,0xc0,0x5e,
    0xd1,0xef,0x62,0x3c,0xa3,0x99,0xc8,0x9d,0x60,0x8e,0x01,0xb0,0x2c,0xfd,0x2e,0x72,
    0x97,0xf9,0xd9,0x55,0xeb,0x12,0x67,0xf5,0x4b,0xf2,0x74,0x26,0xbd,0xd7,0xbe,0x66,
    0xa6,0xd3,0xf4,0xa1,0x77,0xdc,0x37,0xe0,0x77,0x25,0x66,0x59,0xec,0xa7,0x94,0xa7,
    0x78,0xa5,0x28,0x29,0xf6,0xad,0xbb,0x67,0xcf,0x70,0xbe,0xb5,0xaf,0xb3,0x70,0xb6,
    0x66,0xdf,0x51,0xff,0x9c,0x5b,0xb3,0xf3,0xe0,0xff,0xd0,0xf7,0xf7,0x60,0x27,0xdd,
    0x9e,0xf9,0x01,0xbc,0x91,0x3d,0x33,0xe8,0xd6,0x50,0xb9,0x1f,0xc5,0x06,0x99,0x4f,
    0xdf,0x77,0x4a,0xcc,0x05,0xf4,0x75,0x76,0xe3,0x06,0x9d,0xce,0x25,0x74,0x86,0x9d,
    0xce,0x4f,0xe0,0xa6,0x33,0xe2,0x74,0x94,0xbb,0x2c,0x36,0x42,0xad,0xcb,0xe8,0x14,
    0x9d,0x8e,0x71,0x23,0x4e,0xe7,0x67,0x74,0xfa,0x9c,0xce,0x2f,0xe0,0xa6,0x33,0xea,
    0x74,0x94,0xbb,0x2a,0x36,0x4a,0xad,0xab,0xe8,0x8c,0x39,0x1d,0xe3,0x46,0x9d,0xce,
    0x75,0x74,0x3a,0x9c,0xce,0x0d,0x70,0xd3,0x19,0x77,0x3a,0xca,0xdd,0x8c,0xf7,0x6a,
    0xa9,0xd6,0x4d,0x74,0x26,0x9c,0x8e,0x71,0xe3,0x4e,0xe7,0x57,0x74,0x6e,0x39,0x9d,
    0xdb,0xe0,0xa6,0x33,0xe9,0x74,0x94,0xbb,0x23,0x36,0x49,0xad,0x3b,0xe8,0x4c,0x39,
    0x1d,0xe3,0x26,0x9d,0xce,0x6f,0xe8,0x4c,0x3b,0x9d,0xdf,0xc1,0x4d,0x67,0xc6,0xe9,
    0x28,0x77,0x4f,0x6c,0x86,0x5a,0xf7,0xd0,0x99,0x75,0x3a,0xc6,0xcd,0x38,0x9d,0x3f,
    0xd0,0xb9,0xef,0x74,0xfe,0x04,0x37,0x9d,0x39,0xa7,0xa3,0xdc,0x03,0xb1,0x39,0x6a,
    0x3d,0x40,0x67,0xde,0xe9,0x18,0x37,0xe7,0x74,0x1e,0xa1,0xf3,0xd0,0xe9,0x3c,0x06,
    0x37,0x9d,0xa7,0x4e,0x47,0xb9,0x27,0x62,0x4f,0xa9,0xf5,0x04,0x9d,0x05,0xa7,0x63,
    0x9c,0x3e,0xdf,0xcb,0xe9,0xdb,0x2e,0xf6,0x01,0x1e,0x0d,0x8d,0x7b,0xb4,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2DMS color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
