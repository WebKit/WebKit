// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000017.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000017[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0xdd,0x4f,0x53,0x41,
    0x10,0xc5,0xb7,0xbd,0xd0,0x82,0x5a,0x28,0xc1,0x82,0x18,0x23,0x28,0x3e,0x98,0x28,
    0x84,0x07,0x35,0x24,0x46,0xa3,0x0f,0x20,0x98,0xaa,0x7c,0x09,0x88,0x0f,0x0d,0x42,
    0x13,0xab,0x7c,0x49,0xd1,0x54,0x25,0x98,0xa2,0x8d,0x3c,0x98,0x28,0x1a,0xfd,0x27,
    0xfc,0xfb,0x8c,0x1f,0x89,0x89,0x73,0xee,0xfd,0x2d,0xd9,0xf0,0xe0,0x4d,0xb6,0xbb,
    0x73,0x66,0xf6,0xcc,0x9c,0x9d,0xdd,0x46,0xe9,0xfe,0xac,0x73,0x29,0x77,0xc4,0xb5,
    0xb8,0x2f,0x2e,0xf9,0x3a,0x5c,0xda,0x90,0x64,0xfe,0xda,0xe9,0xcc,0xd7,0xea,0xa6,
    0x27,0x66,0x4b,0x23,0xf3,0x33,0xa5,0xea,0xe3,0xc5,0xe5,0xf2,0x66,0xa9,0xba,0x55,
    0x5e,0x5b,0xaa,0xac,0x94,0xca,0xb5,0x8d,0xf5,0xcd,0x2d,0x8b,0x3d,0xea,0x32,0xf1,
    0x9e,0x5b,0xc5,0xe9,0xe2,0x60,0x75,0x6b,0x79,0xf0,0xd2,0xe5,0x21,0x71,0xb5,0xb9,
    0x28,0xe6,0x94,0xaf,0xdd,0x72,0x34,0xd9,0xac,0xb1,0xba,0x58,0x59,0x13,0x9e,0xb7,
    0x31,0x6a,0x63,0x2e,0x5e,0x47,0xb1,0x2f,0x1b,0xac,0x8f,0x89,0xd3,0x56,0xf9,0x38,
    0x87,0x38,0x9c,0x1b,0x73,0xcd,0xae,0x8b,0x5a,0xfb,0x99,0x3d,0x96,0x02,0x6b,0x09,
    0xb0,0x34,0x58,0x3e,0xc0,0x22,0xb0,0x13,0x01,0xd6,0x04,0x76,0x2a,0xc0,0x9a,0xc1,
    0xfa,0x02,0x2c,0x03,0x76,0x2e,0xc0,0xb2,0x60,0xe7,0x03,0xac,0x05,0xec,0x62,0x80,
    0xb5,0x82,0x0d,0xc5,0xba,0xa2,0x83,0xfa,0xa4,0x71,0x14,0x8d,0x5d,0xd8,0xe3,0x36,
    0x9f,0x45,0x9f,0xb7,0xcf,0x04,0xf6,0x1c,0xf1,0xdf,0x3a,0x13,0x7b,0xe1,0x50,0xfc,
    0x02,0xf1,0x3a,0x93,0x4e,0xcb,0x92,0x8e,0xed,0x28,0xd6,0xae,0x75,0xc1,0x62,0x32,
    0x68,0x53,0x4c,0xb7,0xd9,0x59,0xf4,0xa5,0xe3,0x3a,0x22,0x97,0xc3,0x2f,0x5f,0x9b,
    0xcd,0x39,0xce,0xa9,0xcf,0x7e,0xdb,0xd9,0x27,0xfc,0x2a,0x76,0x3e,0xe0,0xea,0x20,
    0xde,0xe7,0x2a,0xc0,0xa5,0xef,0xb4,0x75,0xd6,0x9f,0x5b,0x07,0x23,0xc3,0xc8,0x31,
    0x17,0x82,0xa1,0x7c,0xdd,0x9c,0x5f,0x17,0xf9,0xba,0xe9,0x9f,0xb0,0x0b,0x68,0xe9,
    0x81,0x5f,0xf1,0x27,0xf1,0x65,0x03,0x7f,0x2f,0xb6,0xfc,0x7d,0xf8,0xc5,0x7f,0xdc,
    0xaa,0xec,0x27,0xae,0x40,0x6f,0x5d,0xb0,0x6f,0x80,0x7e,0x7a,0x7b,0x98,0xbd,0xe2,
    0x19,0xe1,0x3e,0xe5,0xa8,0x6b,0x84,0x3b,0x1d,0xc5,0xf5,0xb4,0x5a,0x2f,0x12,0x5f,
    0x0a,0xce,0x54,0x30,0x7c,0xad,0x63,0x07,0x7d,0x4b,0x38,0x64,0x8f,0x1f,0xaa,0xa1,
    0x08,0xa7,0xe2,0xef,0x90,0x3f,0xc3,0x59,0x4f,0xb0,0xf6,0xfe,0x59,0xd6,0x19,0xf8,
    0x66,0x79,0x63,0xbe,0xa6,0x79,0x74,0xff,0xaf,0xa6,0x07,0xac,0xe7,0xe1,0x90,0xbd,
    0x00,0xa6,0x9c,0x8f,0xe0,0xd0,0x7d,0xb8,0x62,0xf7,0x3b,0xcd,0xda,0x91,0xe7,0x97,
    0x21,0x7a,0x3f,0xd7,0xb8,0x3b,0x15,0xee,0xc7,0x3d,0xeb,0x80,0xfa,0xfd,0x04,0xac,
    0x12,0xd4,0xb0,0xc6,0x1d,0x7c,0x8a,0xff,0xa6,0x31,0xa8,0x8f,0x2b,0xf4,0xba,0x07,
    0x3e,0xc5,0xac,0x82,0xef,0x5a,0x8c,0xec,0x75,0xf6,0xad,0xb2,0x4f,0xfd,0xdd,0x60,
    0x5f,0x2f,0xfb,0x54,0xef,0x33,0xf0,0xef,0x16,0xa3,0x9e,0x6f,0x82,0xa9,0xe7,0x3f,
    0xad,0xf2,0x1a,0xf5,0xfc,0xb1,0x78,0xf9,0xaa,0x36,0x6a,0xe8,0xd1,0x7a,0xd2,0xf6,
    0xe9,0x5c,0x9f,0x93,0x53,0xdf,0x0e,0x3d,0x7a,0x01,0x3e,0x65,0x96,0x6a,0xfa,0x00,
    0xe6,0xe3,0x7e,0x1b,0x87,0xe7,0xd2,0xfc,0xc3,0xa2,0x14,0xf7,0x89,0x98,0x66,0xf6,
    0x54,0x03,0x0d,0x2f,0xd1,0x30,0x10,0x68,0x78,0x05,0xee,0x35,0xbc,0x06,0xf3,0x1a,
    0xea,0x81,0x06,0xf9,0xb6,0x6d,0xd4,0xc9,0xbb,0x1d,0x68,0xd8,0x21,0x77,0x2a,0xd0,
    0xf0,0x06,0xdc,0x6b,0xf8,0x08,0xe6,0xe3,0xa4,0xc1,0x73,0xd5,0x03,0x0d,0xfb,0xc4,
    0xd4,0xd8,0xb3,0x1d,0x68,0xd8,0x45,0xc3,0x70,0xa0,0xe1,0x2d,0xb8,0xd7,0xf0,0x0e,
    0xcc,0x6b,0xd8,0x0b,0x34,0xc8,0xd7,0xb0,0xb1,0x47,0xde,0x06,0xf7,0x48,0x79,0xdf,
    0x93,0x7b,0x3f,0xb8,0xbf,0xaa,0xd1,0xc7,0xee,0x05,0x35,0x7e,0x26,0xae,0xce,0xbe,
    0x06,0xf5,0xe8,0xdd,0xdd,0xe6,0xcd,0xa9,0x66,0xbd,0xaf,0xbb,0xd4,0x5c,0x24,0x26,
    0x13,0xe7,0x4c,0x70,0x7f,0x7e,0x93,0x70,0xba,0x00,0x9b,0x02,0x53,0x2d,0x13,0x86,
    0xe8,0x6d,0x4e,0x13,0x3b,0x05,0x47,0xc9,0xaa,0xd1,0x9b,0x98,0x21,0xaf,0xfc,0x37,
    0xb8,0xdf,0xe2,0xd1,0xff,0xc5,0x7d,0xfc,0xfa,0xae,0xdb,0x79,0x8c,0x82,0xa9,0x16,
    0xbd,0xc9,0x87,0xbc,0x47,0x71,0xe9,0x2d,0x2e,0x81,0x1d,0xe6,0xd2,0x59,0x2f,0xe3,
    0x77,0x71,0x5f,0x12,0x2d,0x65,0x70,0x71,0xcf,0x61,0xff,0xb5,0xaa,0x87,0x6d,0xfc,
    0x03,0x12,0x2d,0xde,0x48,0x18,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMSArray stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, ivec3(srcImageCoords, params . srcLayer), 0). x);
//
// }
