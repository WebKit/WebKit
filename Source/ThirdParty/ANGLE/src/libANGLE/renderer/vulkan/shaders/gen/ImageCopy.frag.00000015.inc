// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4b,0x9e,0x65,
    0x18,0xc6,0xef,0xe7,0xdd,0x69,0xbe,0x4c,0xdd,0xcc,0x91,0xab,0xb5,0x09,0x85,0x4b,
    0x1f,0xc8,0x96,0x69,0x1b,0xd8,0xb2,0xd5,0xb2,0x36,0xdd,0x4b,0xa5,0x50,0x39,0xe6,
    0x6a,0xca,0x4c,0x59,0x6d,0xf4,0x25,0x72,0x4d,0x83,0xb6,0x4a,0x09,0x59,0x51,0x0a,
    0xa5,0x1f,0x4a,0xb1,0x0f,0x41,0x9f,0x22,0xa2,0x36,0xdc,0xd6,0xcb,0x9f,0x13,0xbd,
    0x40,0xd0,0x75,0x5e,0xcf,0xef,0x1c,0x07,0x0f,0xc5,0x84,0x8b,0xfb,0xbe,0x8e,0xf3,
    0xed,0x38,0xce,0xf3,0xba,0x2f,0x9f,0x4c,0x7a,0x67,0x21,0x49,0x52,0x49,0x65,0x52,
    0x91,0xfc,0x96,0x94,0xfe,0x36,0x27,0xe9,0x80,0x24,0x49,0x55,0x92,0x8f,0xcf,0x03,
    0xfd,0x47,0xfa,0xdb,0xcf,0xbe,0x7e,0xb2,0xbd,0xf3,0xa1,0xa2,0xd9,0x6b,0x92,0x4c,
    0xf4,0x33,0x5b,0x6d,0x52,0x48,0xb2,0xe1,0x69,0xeb,0xcc,0xc8,0xe9,0x09,0xc3,0xab,
    0xc3,0xfa,0x3a,0xac,0xba,0xe0,0x67,0x78,0xc1,0x72,0x84,0xb7,0xea,0x98,0xd3,0x62,
    0x92,0xe4,0xc9,0x24,0x97,0x34,0x50,0x6f,0x27,0x4f,0xc7,0x52,0x60,0x15,0x82,0xa5,
    0xc1,0xea,0x04,0xcb,0x80,0x35,0x0a,0x96,0x05,0xbb,0x53,0xb0,0x1c,0xd8,0x5d,0x82,
    0xe5,0xc1,0xee,0x11,0xac,0x00,0xb6,0x4b,0xb0,0x0a,0xb0,0xfb,0x04,0xdb,0x04,0xb6,
    0x5b,0xb0,0x4a,0xb0,0xa2,0x60,0x55,0x60,0x9d,0x82,0xdd,0x01,0xd6,0x25,0x58,0x35,
    0xd8,0xa3,0xb1,0x4f,0x99,0x5b,0x7a,0xad,0x67,0xfb,0xc3,0xf3,0x5e,0xfa,0xe3,0xfb,
    0x1d,0xb2,0xb7,0x3e,0x6f,0x67,0xdf,0x10,0xa2,0xd2,0xd1,0x9e,0x89,0xbd,0xb1,0xf7,
    0x2d,0xc1,0x27,0x8f,0x4e,0xeb,0x6b,0x53,0xd8,0x17,0xd0,0x6f,0xf6,0xad,0xc1,0xb3,
    0x12,0xbb,0xd9,0xaa,0xd0,0x92,0x8d,0x58,0x36,0xf2,0x4d,0xa1,0xa5,0x87,0x7d,0xb5,
    0xe4,0xaa,0xc1,0xdf,0x6b,0xd5,0x93,0x2b,0x89,0xbc,0xea,0x6e,0xf5,0xd5,0x6b,0xda,
    0xaa,0xbf,0xcd,0x72,0x1f,0xab,0xdf,0x48,0xbf,0x1b,0xa8,0xdf,0x18,0xeb,0x94,0xb0,
    0x36,0xb4,0x6d,0x85,0x8f,0xf9,0x37,0x61,0x2b,0x88,0xbd,0x45,0xf4,0x6c,0xc7,0x5e,
    0x1f,0xcf,0x4d,0x3a,0xf6,0xb2,0x0d,0xde,0xde,0x67,0x8f,0x6b,0xe3,0xec,0xf8,0x7e,
    0x0f,0xda,0x4d,0xf7,0x3e,0x78,0x5a,0xde,0xe6,0x90,0xb1,0x97,0x7d,0x8a,0x1c,0xe5,
    0x4f,0xab,0xfd,0x18,0xef,0xbd,0x68,0xb1,0xfd,0xfe,0xb2,0x9a,0x7d,0x65,0xfb,0x83,
    0x9c,0x73,0x8b,0x7f,0x1a,0xee,0x79,0x38,0x3c,0xcb,0x7b,0x46,0xfc,0x07,0x99,0x85,
    0xef,0x8f,0xe3,0xe3,0xfb,0x53,0x65,0xbd,0x99,0xe6,0x8c,0xfb,0xfe,0x72,0x59,0x6f,
    0xaf,0x70,0x66,0xad,0xfe,0x3a,0xb5,0xf6,0xc1,0x7f,0x9d,0xef,0x3c,0x13,0x7b,0x93,
    0x8b,0x75,0xb3,0xf0,0x37,0xec,0xcf,0x80,0x58,0xff,0xf6,0x72,0xae,0x6a,0xe9,0xdf,
    0xa1,0xc0,0xa0,0x86,0x6f,0xb9,0x96,0xe5,0xbd,0x9a,0xe0,0x7c,0x6e,0xc6,0xde,0x1b,
    0x32,0x34,0xf1,0x3d,0x6f,0x61,0xd6,0x7b,0xf1,0x69,0x06,0xbf,0x10,0x7c,0x6c,0xbf,
    0x8d,0xb8,0x66,0xe2,0x6c,0xd6,0x77,0x13,0xd7,0x42,0x9c,0x9f,0x4f,0xc3,0xd7,0x82,
    0xcf,0x0e,0xb9,0x07,0x6c,0xfe,0x7f,0x04,0xe6,0xad,0xf0,0xf9,0x3b,0xf8,0xfb,0x7d,
    0xd0,0x8a,0x1e,0x7b,0x1f,0x08,0x71,0x79,0xee,0x84,0x6d,0xf8,0xbe,0x45,0xbf,0xee,
    0x07,0x1f,0x0c,0x3b,0xe3,0xf4,0x0d,0x98,0xfb,0xfd,0x15,0x72,0x78,0x2e,0x7b,0xfe,
    0x1e,0xbc,0xcc,0xef,0x27,0x7c,0x72,0xc4,0xec,0x12,0x0d,0xbb,0xd1,0xd0,0x26,0x1a,
    0x1e,0x00,0x77,0x0d,0xed,0x60,0xae,0xa1,0x28,0x1a,0xcc,0xd6,0xc1,0xdd,0x64,0x75,
    0x3b,0x44,0xc3,0x83,0xd4,0x4e,0x89,0x86,0x4e,0x70,0xd7,0xf0,0x2d,0x98,0xfb,0x99,
    0x06,0xcf,0x55,0x14,0x0d,0x57,0xf1,0x69,0x25,0xa6,0x43,0x34,0x3c,0x8c,0x86,0x3d,
    0xa2,0xa1,0x0b,0xdc,0x35,0x3c,0x02,0xe6,0x1a,0x7a,0x44,0x83,0xd9,0xba,0xe3,0xb9,
    0x2b,0xd5,0xed,0xe6,0x1c,0x15,0x62,0xbe,0x52,0xed,0xab,0xf2,0xbd,0x19,0x47,0xf7,
    0xed,0x11,0x8e,0xd7,0xf0,0x2b,0x12,0xd7,0x0d,0x1f,0xfb,0x26,0x1f,0xe7,0x7b,0xf4,
    0x33,0xf7,0x04,0x9c,0xfb,0xe4,0xcc,0x1d,0x00,0x7f,0x9b,0x33,0xf7,0x14,0xd8,0x35,
    0xe2,0xec,0x1b,0xed,0x27,0xee,0x20,0x71,0xd6,0xd3,0x67,0xc0,0xbd,0xef,0x87,0x88,
    0x4d,0x04,0x3b,0x0c,0x96,0x8a,0xef,0xf9,0xf8,0x7d,0x0f,0xe0,0x7b,0x98,0x1c,0x5e,
    0xe3,0x08,0x35,0x06,0xa5,0xc6,0x51,0xf0,0x97,0x02,0x33,0xfb,0x46,0x8f,0xa1,0x69,
    0x80,0x3b,0xe1,0xa8,0xcc,0xe3,0x39,0xe2,0x8f,0xcb,0x3c,0x9e,0x07,0xf7,0x79,0xbc,
    0x00,0xe6,0xf3,0x18,0x96,0x79,0x98,0x6d,0x28,0xac,0x51,0x7a,0x3c,0x24,0x3a,0x5e,
    0xa4,0x76,0x26,0x72,0xaf,0x88,0x3a,0x5e,0x06,0x3b,0x26,0xdf,0x7a,0x5a,0x74,0x8e,
    0x10,0xe7,0xeb,0x62,0xc8,0x65,0xf8,0x09,0x62,0x47,0x62,0xae,0x4d,0x51,0xd7,0x49,
    0xf2,0x9c,0xe0,0xbe,0xc9,0xc9,0x3d,0x68,0x73,0x1f,0x86,0xd3,0xa8,0xe8,0x7d,0x05,
    0xbd,0xa7,0x44,0xef,0xab,0xe0,0xae,0xf7,0x34,0x98,0xeb,0x1d,0x17,0xbd,0x66,0x1b,
    0x0b,0x6b,0x9c,0xdc,0x63,0xa2,0xf7,0x8c,0xe8,0x5d,0x27,0xd7,0x04,0x78,0x1f,0x9c,
    0x3c,0x6e,0x9c,0xb3,0x68,0x3e,0xaf,0x51,0x73,0x14,0xff,0x31,0xea,0x4e,0x49,0x5d,
    0xf3,0x99,0x0c,0x6b,0x8a,0xf8,0x49,0xa9,0x7b,0xf6,0x3f,0xfa,0xfc,0xc6,0x6d,0xfa,
    0x7c,0x8e,0x38,0x5f,0xef,0xd2,0xe7,0xf3,0xc4,0x9e,0x93,0x3e,0xbf,0x49,0x9e,0xf3,
    0xff,0xd3,0x67,0xe7,0x34,0x85,0x26,0x8b,0xb9,0x4e,0xcc,0x38,0xf1,0x93,0x65,0x33,
    0x19,0x16,0xdf,0x0d,0x66,0x39,0x44,0xdc,0x94,0xcc,0xeb,0x02,0xf3,0x9a,0x96,0x79,
    0xbd,0x03,0xee,0xf3,0xba,0x08,0xe6,0xf3,0x9a,0x95,0xbe,0x99,0x6d,0x26,0xac,0x4b,
    0xd4,0x9d,0x11,0x5d,0xef,0x51,0x7b,0x03,0x5d,0x05,0x7a,0xe4,0xba,0x66,0x89,0xb9,
    0x24,0x7c,0xde,0x87,0xcf,0x65,0xe1,0xf3,0x01,0xb8,0xf3,0xf9,0x10,0xcc,0xf9,0xcc,
    0x0b,0x1f,0xb3,0xcd,0x85,0xb5,0x40,0xee,0x39,0x99,0xe3,0x47,0x70,0xc9,0x70,0xe7,
    0x1a,0xc7,0xef,0x04,0xf7,0xfb,0x6c,0x9e,0xd8,0x05,0xb9,0x07,0x3e,0x86,0xd7,0x15,
    0xb9,0x07,0x3e,0x01,0xbf,0x4e,0xfe,0x4f,0xc1,0x06,0x85,0xeb,0x67,0xe0,0x7d,0x70,
    0x5d,0x12,0xae,0x66,0x5b,0x0c,0x6b,0x89,0x7a,0x8b,0xc2,0xeb,0x7b,0x62,0x36,0xe4,
    0x7f,0x81,0xfb,0x2d,0xc9,0x6c,0x6f,0xe0,0xb3,0x40,0xcc,0xa2,0xf0,0xf9,0x1c,0x3e,
    0x2d,0xc2,0xe7,0x0b,0x70,0xe7,0xb3,0x22,0x7c,0xcc,0xb6,0x1c,0xd6,0x0a,0x75,0x96,
    0x85,0xcf,0x0f,0xc4,0xdc,0x60,0x86,0xc6,0xc7,0xfd,0x56,0x84,0xcf,0x4d,0x7c,0x96,
    0x88,0x59,0x16,0x3e,0x5f,0xc2,0x67,0x5a,0xf8,0x7c,0x05,0xee,0x7c,0xd6,0x84,0x8f,
    0xd9,0x56,0xa3,0x6f,0xa9,0xce,0xaa,0xf0,0xf9,0x91,0xdf,0x28,0x37,0xe5,0x3c,0xb9,
    0xdf,0x9a,0xf0,0xf9,0x15,0x9f,0x15,0x62,0x56,0xcb,0x66,0x3c,0x2f,0xbe,0xbf,0x70,
    0x1e,0xe6,0x88,0x5b,0x2b,0x3b,0xa7,0xb3,0xe2,0xfb,0x33,0xe7,0x7b,0x86,0xb8,0xf9,
    0xf8,0x7b,0x2d,0x13,0x7f,0xa7,0x99,0xed,0x9f,0x30,0xb5,0xae,0xb0,0xfe,0x05,0xb6,
    0x37,0x18,0xb3,0xf8,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
