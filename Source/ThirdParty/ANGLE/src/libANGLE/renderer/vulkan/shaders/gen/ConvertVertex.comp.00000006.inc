// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x56,0x5d,0x68,0x96,0x65,
    0x18,0x7e,0xef,0xef,0xfb,0xfc,0x36,0xe7,0xb2,0x59,0x53,0x17,0x98,0x58,0xf6,0x33,
    0x97,0x6c,0x6b,0x58,0x49,0x52,0x94,0x27,0x76,0x30,0x58,0xe9,0xc1,0xc8,0x30,0xbf,
    0xe5,0x57,0xe6,0xe2,0x53,0xc8,0x95,0xb8,0x74,0xa8,0xcd,0x49,0x67,0x83,0x76,0x64,
    0x66,0x20,0x1b,0x96,0x0d,0x29,0xd3,0xb2,0x93,0x05,0x51,0xf4,0x33,0x2a,0x49,0x1c,
    0xb5,0x0e,0xca,0xd0,0xf6,0x6d,0x6e,0x83,0x82,0xca,0x96,0xa3,0xee,0xeb,0xbd,0xaf,
    0xa7,0xdd,0xbe,0x78,0xd4,0x0b,0x0f,0xef,0x7b,0x5f,0xf7,0xdf,0x75,0xdf,0xcf,0xcf,
    0xfb,0xa4,0x53,0x4b,0x4b,0xa2,0x48,0xa2,0xb2,0xa8,0x34,0xfa,0x4d,0xa2,0xf8,0x99,
    0x17,0xa5,0x22,0x7c,0xce,0x89,0xb2,0xf1,0x7b,0x4d,0xe3,0xba,0xc6,0xda,0xed,0x6d,
    0xf9,0xda,0x15,0xf7,0xd4,0x43,0x3f,0x37,0x4a,0xc7,0x76,0xd0,0x5d,0xaf,0x36,0xb3,
    0xf4,0x9d,0xd1,0x51,0x68,0xd9,0xb2,0x15,0xf8,0x84,0x8e,0x0a,0xc5,0x33,0x71,0xac,
    0x28,0x7a,0x88,0xb6,0x18,0x8f,0xa8,0xf5,0xed,0x96,0x26,0x5a,0xca,0x77,0xc0,0x84,
    0x58,0xc6,0x61,0x29,0x62,0xa5,0x0e,0x4b,0x13,0x2b,0x77,0x58,0x86,0x58,0x85,0xc3,
    0x66,0x11,0xab,0x74,0x58,0x96,0x58,0x95,0xc3,0x4a,0x88,0x2d,0x72,0x58,0x29,0xb1,
    0x25,0x0e,0x9b,0x4d,0xec,0x36,0x87,0x95,0x11,0xab,0x76,0xd8,0x1c,0x62,0xcb,0x1d,
    0x56,0x4e,0xac,0xde,0x61,0xd7,0x11,0x5b,0xe1,0xb0,0xb9,0xc4,0x56,0xa2,0xef,0x5a,
    0x69,0xe8,0xc1,0x1a,0xad,0x30,0x47,0xfe,0xa1,0x3f,0x2d,0x89,0x3e,0xc2,0xbe,0x85,
    0xfd,0x81,0xfd,0x26,0x7d,0xdf,0xfa,0x9f,0xce,0xe4,0x5b,0xd8,0x67,0xc8,0x23,0x89,
    0x78,0xc5,0x6b,0xc4,0x2b,0xba,0x78,0x63,0x89,0x78,0x63,0x8c,0x17,0xe4,0x09,0xd6,
    0xbe,0x88,0x72,0x9d,0x98,0x7c,0x93,0x8e,0x1b,0xb5,0x8a,0x54,0x6c,0x9f,0x8e,0xe3,
    0xe1,0x7b,0xbe,0xda,0x64,0xd9,0x63,0x3c,0x0b,0x54,0x33,0x8f,0xf2,0x62,0xfd,0x0a,
    0xf3,0xf5,0x7f,0xc7,0x12,0x8d,0x7f,0x07,0xe7,0x0d,0xb1,0x56,0x51,0xbe,0x93,0x18,
    0xf2,0x57,0x33,0x1f,0x7a,0x72,0x17,0xe5,0x65,0xce,0xbf,0x86,0xb6,0x59,0xea,0xf1,
    0xae,0x63,0xcf,0x82,0x7d,0x03,0xeb,0x09,0xfa,0x55,0x5c,0x3f,0x41,0xbf,0x3a,0x21,
    0x37,0xd2,0xbf,0x52,0xbd,0x9a,0x9c,0xdf,0x5a,0xf6,0x1a,0x32,0xfa,0xd0,0xcc,0xbe,
    0xdc,0xac,0x68,0x98,0xfb,0xc5,0x9c,0xe3,0x1c,0xf9,0x3d,0xc5,0xdc,0x2d,0xac,0x0f,
    0xf2,0x26,0xc7,0x07,0xf9,0xf2,0x8c,0x03,0xfb,0xcd,0xd4,0x65,0x9d,0xbe,0x95,0x6b,
    0x31,0xf0,0x28,0xd0,0x3e,0xe8,0xdb,0xb8,0xce,0x83,0xdc,0xee,0x78,0x42,0x7e,0x49,
    0xc7,0x3f,0xe9,0x19,0xb9,0x83,0xeb,0x38,0xc4,0xdb,0xef,0xfc,0x21,0x77,0x27,0xf8,
    0x1d,0x81,0xbf,0x3e,0x41,0xee,0x4d,0xcc,0xc7,0x49,0xee,0x9f,0xd0,0x97,0x81,0x98,
    0xdd,0x9e,0xfb,0x82,0x7e,0x90,0x73,0x14,0xe2,0x9f,0x4d,0xf8,0x0f,0xf1,0x5c,0x58,
    0xa8,0xf2,0x0f,0x3c,0x93,0x52,0xec,0xeb,0x88,0xeb,0x2b,0xd6,0xfa,0x08,0xfb,0x34,
    0x4a,0x9b,0x22,0xfb,0x0a,0x79,0x8c,0x18,0xe2,0x5c,0xa2,0x5f,0x9a,0xf6,0xe3,0xcc,
    0x79,0x89,0xf6,0xe3,0x3c,0x07,0x85,0xfa,0x49,0x7e,0xfb,0xbe,0x97,0x70,0x7f,0x04,
    0xde,0xb5,0x62,0x67,0xe5,0x72,0x95,0x10,0x07,0xfb,0x07,0xd8,0x59,0xd6,0x74,0xaf,
    0xee,0xd1,0x14,0xd7,0x4e,0xc4,0xdc,0x97,0x15,0xc1,0x39,0xf7,0xa7,0x4a,0xf5,0x3c,
    0xbf,0xff,0xd6,0x6f,0xcc,0xe1,0xdd,0x62,0x7a,0xbc,0x1f,0x56,0xab,0xc9,0xd8,0xce,
    0x78,0x41,0xff,0x00,0xf3,0x5e,0x26,0x0e,0x1b,0xac,0xf7,0xbf,0xb8,0x47,0xf2,0xce,
    0x66,0x8a,0xf8,0x71,0xb5,0x69,0x8a,0x73,0x98,0xdf,0x14,0x73,0x4f,0x93,0xd3,0x94,
    0xda,0x43,0x77,0x45,0xc7,0x34,0xf9,0x5d,0x89,0x7d,0x53,0x31,0x3f,0xc8,0xd3,0x94,
    0x85,0x32,0xde,0xbf,0xeb,0x29,0x8c,0x3c,0xbf,0x8a,0x71,0x83,0x4d,0xb5,0x7e,0x67,
    0x9c,0xee,0xa2,0xd3,0xd5,0x50,0x17,0x38,0x97,0x8a,0x71,0x46,0x4f,0x03,0xe7,0xd9,
    0x62,0xf8,0x3b,0xe4,0x5c,0x26,0x16,0x03,0xf8,0x1f,0x6a,0x93,0x66,0x8c,0xc0,0x1b,
    0xfa,0x94,0x8e,0x34,0x79,0xe1,0xbb,0x53,0x7d,0x11,0xab,0x42,0xac,0x5e,0xf8,0xee,
    0x21,0x76,0x83,0x18,0x7e,0xd1,0xf1,0xa8,0x24,0x8f,0x5e,0xd7,0xbb,0xf9,0x62,0x78,
    0xe8,0xdd,0x02,0x31,0x5f,0xe0,0xe8,0x5d,0x95,0xe3,0x00,0xdd,0x42,0x1d,0x55,0xe4,
    0x80,0x6f,0xf4,0x2a,0x70,0xaa,0xa2,0x4f,0x7f,0x62,0xae,0x9b,0xa8,0x6f,0x72,0x5c,
    0x1e,0x23,0x97,0xd5,0x8e,0xcb,0x5a,0x31,0xbc,0x8b,0x35,0xac,0x23,0x17,0xe0,0xaf,
    0x10,0x6b,0x76,0x58,0x88,0xf5,0x38,0x63,0x35,0xba,0x58,0xeb,0xc5,0xf0,0x50,0xd7,
    0x13,0x62,0xbe,0xeb,0x5d,0xcf,0x37,0x10,0xc3,0xd9,0x76,0x94,0xd8,0x93,0x62,0xb6,
    0x1b,0x58,0x4b,0xce,0xd5,0x0f,0xdd,0x46,0x1d,0x39,0xd6,0xb3,0x91,0xf5,0xf7,0x53,
    0xce,0x39,0x4e,0xef,0x92,0xd3,0x32,0xc7,0xe9,0x84,0x18,0x1e,0xe6,0xed,0x3d,0xb1,
    0x1a,0x4f,0x38,0xec,0x14,0x39,0xe1,0x1c,0x0f,0x73,0xf9,0xbe,0x98,0xed,0x29,0x17,
    0xff,0x03,0xc6,0x6f,0x70,0xf1,0x4f,0x8b,0xe1,0xc1,0xef,0x43,0x31,0xdf,0xd3,0xae,
    0xa7,0x4f,0x8b,0xe1,0x75,0xf1,0x9e,0xca,0xc6,0x67,0xee,0x33,0x62,0xe7,0x72,0x9e,
    0xfa,0x10,0x6f,0xb3,0x98,0x2e,0xe4,0x7c,0x96,0x39,0x5b,0x5d,0xce,0x2d,0x62,0xf8,
    0xdb,0xec,0x5f,0xab,0x18,0x56,0xe0,0xde,0xeb,0x71,0xfd,0x83,0xee,0x39,0x1d,0x07,
    0xd8,0xaf,0x03,0x6e,0x5e,0x07,0x1c,0xaf,0xd0,0x8b,0x8f,0xc4,0x70,0xfc,0xb3,0x76,
    0x31,0xdf,0xab,0x62,0x67,0x32,0xfa,0xde,0xc3,0x38,0x88,0x79,0x8c,0xf9,0x0b,0x6e,
    0x4e,0xdf,0x52,0x0f,0x9c,0x65,0x5b,0xc5,0xf0,0x06,0xfe,0x2f,0x42,0xac,0x6d,0x62,
    0xba,0x60,0xf7,0x3c,0xed,0xda,0xf9,0xdf,0x08,0x76,0xdb,0xc5,0x74,0xa1,0x0f,0x6d,
    0xec,0x43,0x87,0xeb,0xc3,0x0b,0x62,0x78,0xe8,0xc3,0x8b,0x62,0x58,0xe8,0x43,0x97,
    0xeb,0x03,0x74,0x3b,0x90,0x87,0xfc,0xdb,0xb9,0xd6,0x3a,0x9d,0x0d,0x78,0xec,0xd6,
    0xd1,0x41,0x1b,0xbc,0xf7,0xb1,0x2f,0x7b,0xc5,0xfe,0x53,0xcd,0x6e,0xdd,0xec,0x13,
    0xab,0x67,0xaf,0x9b,0xff,0x97,0xc5,0xf0,0x6e,0xf6,0xab,0x93,0xb1,0x76,0xcb,0xd5,
    0x72,0xa7,0x3b,0xc7,0x7e,0x11,0xf3,0xeb,0x20,0xf7,0x60,0xdb,0x45,0xdb,0x1d,0x2e,
    0xe7,0x4e,0xb1,0xff,0x67,0x73,0xc2,0xa6,0xcb,0xc5,0x2b,0x8a,0xc5,0x44,0x8e,0x9d,
    0xac,0xdb,0xcf,0x5d,0x8f,0xb3,0x1d,0x15,0x9b,0x5f,0xac,0x0b,0xf4,0xdc,0xc7,0x19,
    0x11,0x5b,0x0f,0xd0,0x15,0xa9,0x0b,0x73,0x7e,0xf0,0x1a,0xfb,0xf8,0x35,0xee,0xe3,
    0x83,0xec,0x6d,0x9f,0xeb,0x2d,0x74,0x87,0x74,0xbc,0x41,0x0e,0x78,0x7f,0xcc,0x9a,
    0x8e,0x88,0xad,0x7b,0xe4,0xfb,0x8c,0x58,0xaf,0x18,0x3e,0x4a,0xee,0x7d,0xf4,0x3b,
    0xe4,0xd6,0xc4,0xeb,0x5c,0x13,0x27,0xdd,0x9a,0x38,0x2c,0x86,0x7b,0x9f,0x3e,0x57,
    0xd3,0xb8,0x58,0x6c,0xe4,0x3f,0x4c,0x4e,0xbb,0xf8,0xff,0x3d,0x2a,0xa6,0xdf,0xc6,
    0x7b,0xc5,0x9b,0x62,0xd8,0x7e,0xcd,0x07,0xf9,0x98,0x18,0x36,0x10,0x5d,0x7d,0x06,
    0xf5,0x33,0x3e,0x6c,0x26,0xc4,0xee,0x69,0x38,0xa7,0x60,0xdf,0xe7,0xf8,0x7e,0x4e,
    0xbe,0x83,0x8e,0xef,0x17,0x62,0x78,0xe8,0xeb,0x97,0x62,0x58,0x37,0xd7,0xf0,0xb0,
    0xeb,0x21,0x74,0x83,0x3a,0x86,0x98,0x77,0xc8,0x71,0xff,0x4e,0x2c,0x77,0xd8,0x3f,
    0xdf,0x8b,0x61,0xe0,0x39,0x4c,0xfb,0x41,0xd7,0xdf,0xaf,0x78,0xa6,0xe3,0x1e,0x11,
    0x72,0x7f,0x2d,0x86,0x17,0xdc,0x3e,0xfe,0x46,0x0c,0xcf,0xf3,0xde,0x14,0xe2,0x9f,
    0x11,0xd3,0x3d,0xaa,0xbe,0xb8,0x43,0x7d,0x2b,0x33,0xb5,0x97,0xab,0x45,0x7c,0xef,
    0x12,0xbb,0xe3,0xdc,0x4f,0xfd,0x27,0xcc,0x7d,0x4e,0x4c,0x77,0x26,0xc1,0x6f,0xd8,
    0xcd,0xd3,0xa4,0x58,0x0d,0xa8,0xf1,0x1c,0xeb,0xfe,0x94,0xfe,0xb8,0x07,0xe0,0x5e,
    0x30,0x49,0xff,0x0c,0xfd,0x33,0x6e,0x1f,0xd6,0xf0,0x3f,0xdc,0x9b,0xb8,0x5b,0xa4,
    0xdd,0x7c,0xfc,0xc8,0xf9,0x68,0x77,0xf3,0xf1,0x93,0x18,0x1e,0xce,0xee,0xf3,0x62,
    0x98,0xff,0x37,0xfc,0xcc,0x7f,0xff,0x79,0x99,0x39,0xcf,0x2f,0x88,0xdd,0x07,0xf3,
    0xd4,0x3f,0xa8,0x73,0x77,0x81,0x3c,0xfd,0x5d,0x07,0xef,0x69,0xed,0xca,0x4a,0x1d,
    0xff,0x02,0xf9,0x79,0x5b,0x89,0x6c,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float divisor = 1.0f / 65536.0f;
//           float value = int(valueAsUint)* divisor;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
