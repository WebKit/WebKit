// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0xf7,0xf7,0x1b,0x33,0x63,0x37,0x96,0x41,0x63,0x9b,0x66,0x68,0x30,
    0x98,0x84,0x2c,0xe9,0x20,0x59,0x4a,0xa5,0x84,0x43,0x8b,0xa6,0xa6,0xbd,0x89,0xa2,
    0x94,0x24,0xd9,0x22,0x4b,0x2a,0x4b,0x68,0xa1,0x94,0x2c,0xd9,0x4b,0x85,0xb4,0x70,
    0x72,0x8e,0x0a,0x69,0xd3,0x5e,0x3a,0x87,0x2c,0x6d,0x4a,0x52,0xd2,0x73,0xdf,0xf7,
    0x73,0x9b,0xeb,0x69,0xfe,0xea,0x77,0xce,0x73,0xde,0xf7,0x7e,0xef,0xfa,0xdc,0x7b,
    0x9f,0xe5,0xf7,0x26,0x13,0x39,0x69,0x41,0x10,0x06,0xe5,0x82,0xf4,0xa0,0x20,0x0c,
    0xa2,0x5f,0x46,0x90,0x08,0xe4,0xb5,0x7c,0x90,0x1a,0x3d,0xbb,0xf7,0xea,0xd3,0xab,
    0xf9,0xd0,0x61,0x45,0xcd,0x5b,0xb5,0x2e,0x10,0x7e,0xa5,0x20,0x19,0xc9,0x09,0xaf,
    0xb2,0x93,0x29,0xe3,0x9e,0x29,0x6e,0x14,0x17,0xde,0x78,0xab,0xe0,0x87,0xdc,0xa8,
    0xe2,0xf0,0x94,0xc8,0x56,0x10,0x74,0x42,0x56,0x46,0x0f,0x27,0xdd,0x30,0x76,0x13,
    0xe4,0xf0,0x54,0x2c,0x04,0x4b,0x31,0x58,0x02,0x2c,0xdd,0x60,0x49,0xb0,0x0a,0x06,
    0x4b,0x01,0xab,0x62,0xb0,0x32,0x60,0xd5,0x0d,0x96,0x0a,0x56,0xcb,0x60,0x69,0x60,
    0x75,0x0c,0x96,0x0e,0xd6,0xc0,0x60,0x65,0xc1,0x72,0x0d,0x56,0x0e,0x2c,0xcf,0x60,
    0xe5,0xc1,0xf2,0x0d,0x56,0x01,0xac,0xc0,0x60,0x15,0xc1,0x5a,0x19,0xac,0x12,0x58,
    0x5b,0xc9,0xbb,0x9b,0xa9,0xe6,0xa0,0xbb,0x9b,0xe1,0x55,0xc4,0xaf,0xf9,0x29,0xf4,
    0xf2,0x28,0xf2,0x85,0xe4,0x47,0xe4,0xaf,0x71,0xcf,0x53,0xff,0xe5,0xc5,0x74,0x36,
    0x79,0x16,0x7a,0xaf,0x67,0x6f,0x5f,0x29,0xf6,0xf6,0x19,0x7b,0xfb,0x3d,0x7b,0xfb,
    0xb1,0xa7,0xf4,0x21,0xe6,0x5e,0x07,0xba,0x45,0x18,0xd3,0xb5,0xdd,0xa8,0xe6,0x66,
    0x91,0x88,0xe4,0x93,0x91,0x3d,0x79,0xaf,0xe1,0x64,0x52,0xc9,0x71,0x10,0x3d,0x53,
    0xa2,0x5a,0xa4,0x11,0x57,0xb6,0x8b,0x29,0x9d,0x77,0xc5,0x33,0x9d,0x76,0x06,0x3a,
    0xd9,0x4e,0xbe,0x2a,0x3d,0x96,0x86,0x7e,0x26,0xef,0x19,0xf0,0x6b,0xf2,0x9e,0x89,
    0xbd,0x2c,0x63,0x2f,0x13,0x99,0x06,0xc4,0x23,0x58,0x3d,0x27,0xad,0x7d,0xf2,0x7f,
    0x87,0xc4,0xd1,0x88,0x7e,0x11,0x5b,0x1d,0xa0,0x4f,0x03,0x93,0x79,0xe7,0x31,0x07,
    0xa9,0x45,0x53,0xe8,0xc6,0x46,0xbf,0x09,0xb2,0xa9,0xf0,0xe5,0xd9,0x82,0x5a,0xa9,
    0x7c,0x4b,0xe2,0x56,0x7e,0x07,0xfa,0x56,0xf9,0x5d,0x3c,0xba,0x17,0xfa,0xd5,0x9d,
    0xd6,0x45,0x46,0xef,0x12,0x6a,0x2c,0xb4,0xe4,0xaa,0x3f,0xf5,0xa8,0xeb,0x50,0xed,
    0xb9,0x7a,0xf4,0xd6,0x55,0xc4,0x77,0x35,0xbe,0x0b,0x99,0x9f,0xd0,0xd7,0x98,0x78,
    0xc4,0x5f,0x91,0xa9,0xeb,0xf5,0xf0,0x52,0x0d,0xff,0x26,0xd6,0x80,0xc6,0x51,0x8c,
    0xbc,0xf2,0x87,0xb1,0xbe,0x94,0x1e,0x61,0xe2,0x14,0xfa,0x1e,0x37,0x4e,0x24,0x4b,
    0xe8,0x51,0xac,0x1f,0xb5,0x37,0xde,0xe8,0x0b,0x3d,0xdd,0xcb,0xd7,0x3c,0x6a,0x20,
    0xf1,0x3d,0x49,0xfd,0xf3,0x8c,0xfd,0xa7,0xc5,0xbe,0xfb,0x29,0xbd,0xd0,0xab,0xd7,
    0x5a,0xd6,0xb5,0xe6,0xed,0xb5,0x28,0xfa,0xd1,0x67,0x2a,0x7f,0x1b,0x35,0x54,0x7f,
    0xbb,0x3c,0xfd,0x8f,0xd8,0xaf,0x6a,0x3a,0xfa,0x33,0xfa,0x34,0x41,0xde,0xf7,0x9a,
    0xbc,0xcb,0x1a,0xdc,0x4b,0x9c,0xdf,0x23,0xb3,0x8f,0xbc,0x0b,0xbd,0x1f,0x4c,0xec,
    0x1c,0x40,0x2f,0x89,0xfc,0x41,0x7c,0x1e,0x40,0xfe,0x20,0xfb,0x73,0x08,0xff,0x07,
    0xde,0x6d,0x5d,0xd2,0x58,0xb7,0x1a,0x77,0xf3,0x30,0xde,0xc3,0xf3,0x1d,0x25,0x76,
    0x64,0x5d,0x0b,0xb6,0x8b,0x39,0xb5,0x71,0xeb,0x2a,0x41,0x6f,0x05,0xf8,0x3e,0xea,
    0x90,0x32,0xf8,0x94,0xbc,0x9e,0x20,0xbf,0x4a,0x8b,0x53,0x4b,0x97,0x37,0xb4,0xac,
    0xcb,0x53,0x3c,0x7e,0x96,0xc7,0xaf,0xe7,0xd1,0xf5,0x3d,0xf9,0x53,0x3d,0x7e,0xae,
    0xc7,0x6f,0x0a,0xdd,0xd9,0x45,0x29,0x39,0xf8,0x9d,0xbc,0x48,0x0f,0x76,0x64,0xde,
    0x47,0xc1,0x45,0x46,0xd6,0xe3,0x1f,0xac,0xe1,0x22,0x23,0x73,0x0c,0x7c,0xb9,0x93,
    0x91,0x35,0xf5,0x27,0x7a,0xc7,0x22,0xdd,0x64,0x70,0x9c,0x9c,0x1c,0x73,0xf2,0xc2,
    0xfb,0xcb,0x8d,0xe3,0xe4,0x27,0x7e,0x0f,0xa3,0x77,0xc1,0xce,0x76,0xf2,0x27,0x88,
    0x41,0xde,0x25,0x47,0xc5,0x91,0x7d,0x77,0x1e,0x87,0xb1,0x8e,0x3c,0x8f,0x38,0x5b,
    0x49,0xf7,0x4c,0xe1,0xbc,0x16,0x7e,0x19,0xf8,0xf2,0xd4,0xd8,0x52,0x39,0x74,0x35,
    0xfe,0xf4,0x30,0x8e,0x3f,0xcd,0xc8,0x94,0x0d,0x63,0x7c,0x25,0xf1,0x97,0x0b,0x63,
    0x3d,0xc1,0x25,0x66,0xa1,0x13,0x6e,0x24,0xb1,0x9f,0x08,0x4b,0x72,0x56,0x21,0xfc,
    0x6f,0xce,0x2a,0x86,0x31,0xae,0x3e,0x2b,0x95,0xe2,0xb3,0x72,0x18,0xe3,0xe3,0x9c,
    0x8c,0xd0,0x55,0xc2,0x58,0xaf,0xb2,0x91,0xc9,0x20,0xf6,0xd1,0xc8,0x54,0x0d,0x63,
    0x39,0xc1,0x25,0x37,0xd2,0x2f,0x55,0x8d,0x7c,0xb5,0x30,0xee,0x21,0xf5,0x5b,0x1d,
    0xbf,0x0b,0x4d,0x6c,0x35,0xc2,0x18,0xd7,0x5a,0x65,0x86,0xb1,0x9e,0xe0,0x52,0xab,
    0x5a,0x61,0x49,0xad,0x84,0x57,0xd3,0x8d,0x5a,0xcc,0x5b,0xde,0x25,0xcf,0x9a,0x87,
    0x5a,0xc6,0x77,0x1d,0x7c,0x4b,0x5c,0xd2,0xa7,0x42,0xb7,0x73,0x3e,0x64,0x3d,0xd7,
    0x0d,0xe3,0xfb,0x47,0x16,0x7c,0xe9,0xeb,0xba,0xe8,0x46,0xe7,0x58,0x18,0xf7,0xba,
    0xf0,0xa4,0x87,0x1b,0x18,0xdd,0xec,0x30,0x3e,0x3b,0xeb,0xc3,0x97,0x9e,0xcf,0x36,
    0x7e,0x73,0x8c,0x5f,0xe9,0xf7,0x1c,0x63,0xb7,0x61,0x18,0xaf,0x11,0xe1,0x49,0xef,
    0x37,0x8c,0xec,0xa6,0x46,0x7a,0x8d,0x84,0xc7,0x1a,0xc9,0x35,0xf6,0x4e,0x0b,0xe3,
    0x75,0xba,0x85,0x9c,0xe7,0x85,0x31,0xd6,0x28,0x2c,0xe9,0xcd,0x3c,0xf2,0x90,0x42,
    0x1e,0x52,0x8c,0x7e,0x63,0xaf,0x66,0x4d,0xc2,0x18,0x5b,0x68,0xfa,0xb9,0x49,0x78,
    0x72,0x3f,0x27,0x8d,0x7e,0x3e,0xfe,0x45,0x56,0xd6,0x67,0x3e,0xb9,0x90,0xbd,0xa5,
    0x59,0x18,0xdf,0x3d,0x04,0x97,0x35,0xd3,0xd6,0x8d,0x36,0xf8,0x29,0xcf,0x1a,0x93,
    0xb3,0xee,0x4c,0xa7,0x9b,0xc6,0xbe,0xab,0xef,0xe5,0x58,0x6f,0x15,0x4c,0x2f,0xe4,
    0x22,0xa3,0xfd,0xd2,0x94,0xb5,0xdd,0xd8,0xc8,0xe4,0x83,0x6b,0x9f,0x36,0x43,0x2f,
    0xdf,0xc8,0x34,0xc7,0xbe,0xca,0x14,0x80,0xc9,0x59,0xad,0x79,0x38,0x1d,0xdd,0x02,
    0xe3,0xef,0x0c,0xfc,0xb5,0x34,0xb6,0x5a,0x81,0xab,0x5e,0x6b,0x74,0x05,0xff,0xdb,
    0xc5,0xdf,0x3a,0xba,0x17,0x96,0xcc,0xbb,0x72,0x29,0xf3,0xae,0x68,0xde,0x2b,0x31,
    0xef,0x2a,0x66,0xdf,0x6b,0xcb,0x3e,0xac,0x3e,0xdb,0xa1,0x33,0x09,0x9b,0xed,0xc1,
    0x5a,0x98,0x39,0x9d,0x05,0xde,0x81,0xda,0xb4,0x05,0x53,0x1b,0x1d,0xb1,0x2b,0x31,
    0x76,0x34,0x31,0x66,0x70,0xf7,0x96,0x5f,0x55,0x13,0x57,0x35,0xe2,0xaa,0x61,0xe2,
    0xea,0xe4,0x9d,0x0f,0xdd,0x3c,0x7a,0x80,0x47,0x0f,0xf4,0xe8,0xcb,0x3d,0x7a,0x90,
    0x47,0xdf,0xe6,0xd1,0xc3,0x3d,0x7a,0x9c,0x47,0x4f,0xf6,0xe8,0xd9,0x1e,0x3d,0xc7,
    0xd0,0x72,0x77,0x78,0xca,0xe3,0xaf,0x09,0x4e,0x3e,0x7f,0x36,0x7a,0xf4,0x26,0xaf,
    0x0e,0x9d,0xc9,0x8b,0xf6,0xc7,0x39,0xf4,0x47,0x17,0x23,0xd3,0x15,0x7c,0x02,0x75,
    0x39,0x17,0xbd,0xae,0xd4,0xa5,0x13,0x98,0xca,0x77,0xf7,0x6c,0xf6,0x28,0xc5,0x66,
    0x4f,0x70,0xad,0xff,0x79,0xe8,0xf5,0xc4,0x66,0x37,0x30,0x95,0x3f,0x9f,0xda,0xa8,
    0xcd,0x0b,0xb0,0xd9,0xcb,0xc8,0x5c,0x08,0xae,0xfb,0x6c,0x6f,0xf4,0x2e,0x34,0x32,
    0x17,0x63,0x47,0xcf,0x9d,0x3e,0x60,0x72,0x17,0x5d,0x04,0x76,0x29,0xba,0x7d,0x38,
    0x4b,0xfb,0x99,0xb3,0x54,0x78,0x7d,0xdd,0xe8,0x47,0x2f,0xf5,0xa5,0xff,0xfa,0x43,
    0xf7,0x33,0xbe,0x2e,0xa3,0xbf,0x64,0x3e,0x03,0xa1,0x95,0x77,0x05,0x71,0x08,0xef,
    0x72,0x68,0xdd,0x27,0xaf,0x64,0x6f,0x19,0x48,0x7f,0x89,0xcc,0x00,0x70,0xd5,0xbf,
    0x96,0xde,0xd4,0x9a,0x5c,0x07,0xd6,0x22,0xca,0x51,0x6a,0x74,0xef,0xbd,0x81,0xbb,
    0x71,0x11,0x7c,0xd5,0xbd,0x11,0x9e,0xd8,0x1d,0x04,0xad,0x79,0xbd,0x99,0xbc,0xde,
    0x64,0xe4,0x6f,0x01,0x5f,0x4a,0x7e,0x6e,0x05,0x2b,0x26,0x3f,0x43,0x4c,0x7e,0x84,
    0x37,0xd8,0x8d,0x59,0xe4,0x63,0xb0,0xb1,0x73,0x3b,0x73,0x5e,0x82,0x9d,0xa1,0x60,
    0x92,0xfb,0xc5,0x4e,0x42,0xee,0x80,0x77,0x80,0xb7,0xe4,0x1e,0x3e,0x12,0xdd,0x3b,
    0xe1,0x49,0xcc,0xb7,0x41,0xab,0xdd,0xbb,0x3c,0xbb,0x77,0x83,0x59,0xbb,0x23,0xc1,
    0x47,0x70,0x7f,0x57,0xbb,0xf7,0xc2,0x13,0xbb,0xc3,0xa1,0x35,0x17,0xf7,0x91,0x8b,
    0x51,0xc6,0xd7,0x68,0x70,0xcd,0xc5,0xfd,0x60,0x9a,0x8b,0xb1,0x26,0x17,0xc2,0x1b,
    0xe3,0xc6,0x44,0x72,0x31,0xc6,0xd8,0x99,0x40,0xcc,0xba,0xd7,0x3d,0xc0,0xff,0x86,
    0x09,0xc4,0x32,0x0e,0x4c,0xce,0xac,0xb1,0xe8,0x4f,0x34,0xfa,0x93,0xbc,0x39,0x3f,
    0x08,0x76,0x09,0x71,0x4c,0x35,0x71,0x08,0x6f,0x8a,0x1b,0xd3,0xb0,0x33,0x05,0x1f,
    0x93,0x83,0x92,0x7b,0xde,0x54,0x78,0xd3,0x8c,0x8f,0x87,0xd8,0xbf,0x94,0x7e,0x18,
    0x9f,0x63,0x88,0xf9,0x11,0xfe,0xdb,0x3c,0x6c,0xe6,0xf1,0x28,0x7a,0x8f,0x98,0xf3,
    0x64,0x06,0xf8,0x74,0xe3,0x77,0x86,0xe7,0x77,0xaa,0xf1,0x33,0x93,0x7d,0x50,0xf3,
    0x30,0xd3,0xcb,0xc3,0x58,0xe8,0x21,0xd0,0xb3,0x8c,0xee,0x63,0xac,0x0b,0xd1,0x9d,
    0x0d,0x2d,0xef,0x73,0x58,0x1b,0xba,0xc6,0xe6,0x72,0x8e,0xcd,0x66,0x4f,0x55,0x5f,
    0x73,0x4d,0x8f,0xcd,0x33,0x76,0x1f,0x27,0x17,0x9a,0xef,0x27,0xc0,0xe6,0x91,0xef,
    0x05,0x26,0xdf,0xc2,0x9b,0xef,0xc6,0x33,0xc4,0x37,0x1f,0x9b,0x4f,0xf1,0xdf,0x4e,
    0x62,0x5f,0x00,0xef,0x19,0xe3,0xe3,0x59,0x7c,0x6c,0x76,0x3e,0xa4,0x67,0x9f,0xe3,
    0x1e,0xf9,0x2c,0x39,0xcf,0x8b,0xf6,0xa8,0x12,0x5c,0x6d,0x2e,0xf2,0x6c,0x2e,0xc0,
    0xa6,0xc8,0x3f,0xcf,0x19,0xa1,0xfd,0xbe,0x18,0x4c,0xfb,0x7d,0xb1,0x97,0xcb,0x21,
    0x26,0x9e,0x25,0xde,0x9e,0xbb,0xb4,0x94,0x3d,0x77,0x19,0xb8,0xee,0xb9,0x2f,0xa0,
    0xb7,0xcc,0xc8,0x2c,0xf7,0x7a,0x75,0x05,0x98,0xdd,0x73,0x57,0xa2,0xbb,0x82,0x7c,
    0xae,0x36,0xf9,0x14,0xde,0x2a,0x37,0xd6,0x11,0xe3,0x2a,0x13,0xd3,0x8b,0xc4,0xb4,
    0xd6,0xf8,0x7b,0x09,0x5c,0xe6,0xb8,0x06,0x5a,0xe6,0xb8,0x1a,0xfd,0x75,0x46,0xf6,
    0x65,0xce,0x6c,0xa5,0x5f,0xe1,0x4c,0x7e,0x93,0xde,0x7d,0x15,0x99,0x57,0x8c,0xcc,
    0x7a,0xce,0xf1,0xb7,0x91,0xd9,0x80,0xdc,0x7a,0xe3,0x73,0x83,0xe7,0x73,0x35,0xbc,
    0x8d,0xfc,0x5f,0x57,0x5b,0xaf,0x73,0x66,0x8f,0xa4,0x5e,0x6f,0x80,0x0d,0xe6,0x3e,
    0xfd,0x26,0x98,0xde,0xaf,0xdf,0xe2,0x4c,0x1f,0xcf,0x3d,0x67,0x33,0x32,0x6f,0x61,
    0x7f,0x13,0x98,0xca,0x6f,0xe1,0xcc,0x97,0x33,0x6a,0x8b,0x77,0x47,0xaa,0x4d,0x8e,
    0x6b,0x72,0x47,0xca,0xe4,0xfb,0xa4,0xc4,0x7b,0x8a,0xb1,0xb1,0x15,0x5c,0x6c,0x6c,
    0xf5,0xee,0x82,0xf5,0xb0,0x91,0x65,0xee,0x59,0x75,0x8c,0xbd,0xba,0xd8,0xab,0x6f,
    0xee,0x28,0x3b,0xbd,0x3b,0xcb,0xee,0xa0,0xe4,0x3f,0xb1,0xd4,0xf4,0x1d,0x6a,0xba,
    0xcd,0xe4,0xe9,0x5d,0x70,0xed,0xa1,0xf7,0xc0,0xa6,0xd3,0x2f,0x3b,0x4c,0xbf,0x08,
    0x6f,0xbb,0x1b,0x5f,0xe3,0x7b,0xbb,0xb1,0xf3,0x3e,0xf1,0x69,0xed,0x3e,0x00,0xdb,
    0x65,0x6c,0x7f,0x08,0x5e,0x6c,0xce,0x8f,0x8f,0xc1,0x8b,0xf8,0x7e,0xa2,0xeb,0xe9,
    0x13,0x78,0x92,0xfb,0x9d,0xd0,0x9a,0xb7,0x4f,0x99,0x7f,0x6f,0x67,0x57,0xbe,0xb3,
    0x7c,0x0e,0xd6,0x3f,0xfa,0x7e,0x13,0xef,0x43,0x5f,0xf0,0x1d,0xa4,0x3d,0x7c,0x8d,
    0xf3,0x4b,0xf2,0xb4,0x99,0x38,0xbf,0x42,0xf6,0x4b,0x7c,0xed,0x06,0x93,0x1e,0xdb,
    0xc1,0x3c,0xbf,0x36,0xbe,0xbf,0xc1,0xb7,0xf6,0xd5,0xb7,0x60,0x1a,0xf7,0x1e,0x30,
    0xb5,0xb5,0xc7,0xb3,0xb5,0xc3,0xc4,0xf2,0x1d,0x35,0x92,0xfa,0x7f,0x67,0xea,0x9f,
    0x30,0xdf,0x65,0x1b,0x98,0xfa,0x67,0x63,0x23,0xc7,0x7c,0xe7,0xf8,0xb1,0x94,0xef,
    0x1c,0x3f,0x81,0x6b,0xdd,0x7f,0xa6,0xee,0x23,0x8c,0xcc,0x2f,0xe0,0x7a,0xcf,0x39,
    0x0c,0x66,0xff,0xe7,0xfc,0x8a,0xad,0xc3,0x46,0xef,0x37,0xe2,0xd0,0xbb,0xd0,0x11,
    0xbe,0x57,0x15,0x21,0x2f,0xf3,0x3e,0x82,0x9c,0xfe,0xaf,0xfb,0x07,0xe4,0xc2,0x94,
    0x3e,0x94,0x18,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float divisor = 1.0f / 65536.0f;
//           float value = int(valueAsUint)* divisor;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
