// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x79,0x74,0x57,0xd5,
    0x11,0xc7,0xdf,0xcd,0x46,0x20,0x21,0x80,0xac,0x09,0x12,0x88,0x01,0xb4,0x12,0x42,
    0xc4,0x10,0x02,0x56,0x44,0x90,0x24,0x02,0xd5,0x18,0x50,0xc0,0x08,0x82,0xec,0x42,
    0x22,0x88,0x55,0xb4,0xb4,0xa5,0x2e,0x58,0x5b,0x5b,0x77,0x71,0x6b,0x15,0xeb,0x06,
    0x54,0xa5,0x75,0x45,0x71,0x47,0xa9,0x68,0x5d,0xaa,0xad,0xd4,0x16,0x6b,0xdd,0xb0,
    0xb6,0x56,0xab,0xe7,0xd0,0x62,0x15,0x7b,0xe7,0xdd,0xcf,0x90,0xc9,0xe5,0xf7,0x57,
    0x73,0xce,0x3b,0xbf,0x37,0xdf,0x99,0xf9,0xce,0xdc,0xb9,0x73,0xef,0xbb,0xef,0x25,
    0x3b,0xab,0xbc,0x43,0x92,0xb8,0xa4,0x53,0x92,0x9f,0xac,0x70,0x49,0xfa,0xd7,0x2d,
    0xc9,0x4a,0xe4,0xb6,0x20,0xc9,0x4b,0x7f,0xeb,0x27,0x4f,0x99,0x5c,0xb9,0xe2,0xac,
    0x79,0x95,0xd5,0x23,0xaa,0x44,0x5f,0x94,0x64,0xa7,0x76,0xa2,0xeb,0xe2,0x6d,0x72,
    0xfd,0x6f,0x8e,0xbf,0x5a,0xe6,0x2c,0x6e,0x15,0xbc,0xca,0x2b,0xba,0x7a,0x3c,0x27,
    0xe5,0x4a,0x92,0xb1,0xd8,0xca,0xd5,0xe0,0xad,0xbf,0x11,0xc2,0x24,0xe5,0xfc,0x2a,
    0xe6,0xc0,0x72,0x0c,0x96,0x05,0x96,0x6f,0xb0,0x6c,0xb0,0x42,0x83,0xe5,0x80,0x75,
    0x35,0x58,0x2e,0x58,0x0f,0x83,0xe5,0x81,0xf5,0x31,0x58,0x07,0xb0,0x03,0x0d,0x96,
    0x0f,0x36,0xc0,0x60,0x1d,0xc1,0x06,0x1a,0xac,0x13,0xd8,0x21,0x06,0x2b,0x00,0xab,
    0x30,0x58,0x21,0x58,0x95,0xc1,0x3a,0x83,0x55,0x1b,0xac,0x08,0xac,0x56,0xea,0xee,
    0x47,0xaa,0x35,0xa8,0xf7,0x23,0x3c,0x87,0xfc,0xb5,0x3e,0x2b,0xa3,0x3a,0x8a,0xfd,
    0x4a,0xea,0x23,0xf6,0xe7,0xf9,0xdf,0x83,0xf6,0xe9,0x82,0x5c,0x46,0x9d,0x45,0x3e,
    0xd4,0xb5,0xe7,0x1b,0xe2,0xf6,0xe7,0x13,0x4c,0xf9,0x86,0xba,0xf6,0x7c,0x22,0x97,
    0x19,0x59,0xe6,0xbd,0x80,0x3a,0x8a,0x7c,0x26,0x72,0xb1,0xbf,0xba,0xfb,0x51,0x64,
    0xa5,0xf1,0xb3,0x53,0x3e,0xb9,0xef,0xe9,0x6d,0xf2,0xa8,0x71,0x92,0xfe,0xe6,0xa4,
    0x73,0xd1,0x81,0x71,0x96,0xf9,0x9c,0xf2,0xb9,0x57,0x5c,0x7c,0x7a,0xe2,0xe3,0x52,
    0x9b,0x9c,0xa4,0x57,0x8a,0x07,0xbd,0x70,0x94,0xec,0xb3,0x0d,0xfa,0xbe,0xdc,0x97,
    0xc0,0xd9,0xdf,0x70,0x96,0x60,0x33,0x90,0x9c,0x04,0x2b,0xf5,0x5d,0xab,0xbd,0xf2,
    0xff,0x5e,0x92,0xc7,0xa1,0xf4,0x8c,0x70,0x1d,0x81,0x3c,0x04,0x6c,0x08,0xe3,0xa8,
    0x30,0xf6,0x43,0xd1,0xe5,0x19,0xfd,0x70,0xfa,0x58,0xe5,0x91,0xe4,0xa9,0xf2,0x18,
    0x7a,0x50,0xe5,0xf1,0x11,0x7f,0x03,0xfd,0x30,0x84,0x5a,0x37,0x32,0xdf,0x2a,0x37,
    0xd1,0xeb,0x6a,0x3f,0x23,0x92,0xe7,0x62,0xdf,0xc3,0x47,0x5d,0x60,0xfc,0x16,0x1b,
    0x5e,0xb1,0x6b,0x65,0x0e,0xfb,0x79,0x54,0xfb,0xb4,0x94,0x7e,0x3c,0x87,0xf1,0x9d,
    0x4b,0xee,0x2b,0xa9,0x87,0xc8,0xe7,0x81,0x89,0xfe,0xbb,0xdc,0xdb,0xf1,0xaf,0x66,
    0x9d,0x68,0xdc,0x0b,0x88,0xa3,0xfa,0xcb,0xfc,0xf5,0x75,0x76,0x9b,0x7c,0x25,0x6b,
    0x48,0xed,0xaf,0x37,0xf5,0x11,0xf9,0x36,0x53,0x3f,0x91,0x1f,0xa0,0x97,0xd4,0xff,
    0x11,0xe1,0xf3,0x7f,0x2a,0x6f,0xa1,0xcf,0x54,0x7e,0x91,0xb5,0x2c,0xf9,0xfe,0x91,
    0x7e,0xb1,0x75,0xd9,0x89,0xbd,0xd4,0x41,0xd7,0x57,0x29,0xeb,0x48,0x64,0xf1,0xab,
    0x70,0xe4,0xe0,0x42,0x1d,0x44,0x1e,0x0a,0xd6,0xdb,0xcb,0x95,0xf8,0x65,0x13,0x67,
    0x98,0x0b,0x9c,0x95,0xd8,0x8b,0x5c,0x05,0x26,0xfa,0xc3,0xb8,0xb7,0x75,0x9b,0xc8,
    0xda,0xd3,0xbc,0x96,0xbb,0xb0,0x0f,0x57,0x78,0x49,0x78,0x64,0x6d,0x0a,0xb6,0x93,
    0x9c,0x6b,0x7c,0x97,0x65,0x31,0xd7,0x09,0xb1,0xff,0xe3,0x91,0x5c,0xe6,0x4a,0xc6,
    0x39,0xce,0x85,0xf1,0xaa,0x3c,0x3e,0x92,0x8f,0x33,0xb2,0xac,0xab,0x99,0x91,0x7e,
    0x56,0xa4,0x9f,0x13,0xc9,0xa7,0x45,0xf6,0xf3,0x23,0xfd,0xc2,0x48,0xdf,0x8a,0x7c,
    0xb4,0xcf,0x52,0x6a,0x30,0x9a,0xba,0x48,0x8f,0x1c,0xc9,0xb8,0x8f,0x00,0x17,0x1b,
    0x59,0x5f,0xdf,0x74,0x61,0x0d,0xb6,0x1a,0x9b,0x23,0x5d,0xc0,0xef,0xf1,0x36,0x32,
    0x97,0x63,0x5c,0xf0,0x13,0xfc,0xdf,0xbe,0x12,0x63,0xd9,0x17,0xbf,0xf0,0xf6,0xa2,
    0x3b,0x4a,0x6a,0xe9,0x42,0x7d,0xe4,0xfe,0x2b,0x5f,0x7d,0xb9,0x17,0x6c,0x8c,0xb7,
    0x1f,0x47,0x0e,0x72,0x3f,0x9e,0xfb,0x3d,0x5e,0x7f,0x0c,0x3e,0xf2,0xbb,0xdb,0x73,
    0xd5,0xf9,0xdf,0x7a,0xb8,0x45,0xdf,0x80,0x5e,0x7e,0x35,0xb7,0x63,0x5d,0xa8,0xb3,
    0xe6,0x3f,0x89,0xfc,0x27,0x1a,0x9b,0xc9,0x2e,0xe0,0x9b,0xc8,0xff,0x5b,0x2e,0xf8,
    0x09,0x2e,0x39,0x8b,0x3c,0xc1,0x5f,0x75,0xf0,0x4f,0x70,0x6d,0x35,0x3b,0x3e,0x43,
    0xcd,0x1a,0xc1,0x35,0xe6,0x09,0x19,0x62,0x36,0xb9,0x80,0x5f,0xe8,0x6d,0x44,0x9e,
    0xe2,0x82,0x5f,0x93,0xb1,0x99,0x4a,0xee,0xab,0xb1,0x39,0xd1,0x05,0xbb,0xa9,0xd4,
    0x49,0xfa,0xe5,0x44,0x63,0x7f,0x92,0x0b,0x3d,0xa4,0x71,0xa7,0x11,0x77,0x8b,0xc9,
    0x6d,0xba,0x0b,0xb8,0xce,0xd5,0x0c,0x17,0xfc,0xa6,0x33,0x57,0xcd,0x66,0xae,0x44,
    0x77,0xb2,0xbf,0x9a,0x19,0xb7,0xdc,0x4b,0x9d,0xb5,0x0e,0xcd,0x26,0xf6,0xa9,0xc4,
    0x96,0xbc,0xa4,0x4f,0x45,0x1e,0xe5,0x63,0xc8,0x5a,0x9a,0xed,0xc2,0x79,0x61,0x16,
    0x7a,0xe9,0xeb,0xd9,0xf8,0xa6,0x7b,0xa4,0x0b,0xbd,0x2e,0x3a,0xe9,0xe1,0xb9,0xc6,
    0x77,0x9e,0x93,0xbd,0x20,0xf4,0xb6,0xe8,0xa5,0xe7,0xe7,0x99,0xb8,0x0b,0x4c,0x5c,
    0xe9,0xf7,0x05,0x86,0x77,0x91,0x0b,0x6b,0x44,0x74,0xd2,0xfb,0x8b,0x52,0xde,0xbc,
    0xb0,0xff,0xf2,0x2c,0x16,0x9f,0x85,0x86,0xef,0x74,0x17,0xd6,0xe9,0xb3,0xd4,0x7c,
    0x89,0x0b,0xd8,0x62,0xd3,0x9b,0x4b,0xa8,0x43,0x3d,0x75,0xa8,0x37,0xfe,0x4b,0xa3,
    0x39,0x6b,0x71,0x01,0xdb,0x62,0xfa,0xb9,0xc5,0xb5,0xef,0xe7,0x3a,0xe3,0x7f,0x06,
    0xf1,0xc5,0x56,0xd6,0xe7,0x19,0xd4,0x42,0xf6,0x96,0x65,0xfe,0x7e,0x30,0xeb,0x56,
    0xd6,0x4c,0xad,0xbf,0x6a,0x88,0x53,0xc0,0xbe,0x93,0x9f,0x3e,0xe3,0xb2,0xd3,0x75,
    0xdd,0xd1,0xdc,0x77,0x62,0x3f,0x2a,0x34,0xbd,0x70,0x08,0x36,0xda,0x2f,0x95,0x3c,
    0x5f,0x2b,0x8c,0xcd,0x30,0x70,0xed,0xd3,0x2a,0xfc,0x86,0x19,0x9b,0xc3,0xe0,0x57,
    0x9e,0xc3,0xe1,0x19,0x6e,0x6c,0xaa,0xc1,0x95,0x67,0x04,0x7e,0xd5,0x49,0x5b,0xad,
    0x6a,0xe0,0x1f,0x61,0xb8,0x6a,0xe1,0x1a,0x69,0xb8,0x46,0x81,0xab,0xdf,0x68,0x7c,
    0x05,0xdf,0xeb,0xc7,0x38,0x3a,0xd5,0xb7,0xd5,0xa6,0x4b,0x86,0xda,0x74,0x36,0xf7,
    0x45,0xd4,0xa6,0xab,0xdd,0xd3,0xb0,0xd1,0x3c,0x8e,0x22,0x8f,0x31,0xc6,0x66,0x2c,
    0xb8,0x8e,0xe9,0x68,0xfc,0xc6,0x1a,0x9b,0x71,0xf0,0x2b,0xcf,0x31,0xf0,0x8c,0x37,
    0x36,0x13,0xc0,0x95,0xa7,0x0e,0xbf,0x09,0x66,0x8c,0xf5,0xf0,0xd7,0x19,0xae,0x63,
    0xe1,0x6a,0x30,0x5c,0x13,0xc1,0xd5,0x6f,0x12,0xbe,0x13,0xa9,0xcd,0xa4,0xa8,0x36,
    0xdd,0x33,0xd4,0xa6,0x9b,0xb9,0x3f,0x80,0xda,0xf4,0xb0,0xcf,0x29,0x9e,0xdb,0x1a,
    0xf3,0x78,0x7c,0x2e,0x81,0xf3,0x04,0xb0,0x46,0x33,0xa6,0x29,0xe0,0x4d,0xac,0x83,
    0xe3,0xc0,0xf6,0xed,0x75,0xf0,0x4a,0x8e,0x53,0x4d,0x8e,0x3d,0x79,0xd7,0x90,0xbf,
    0x5e,0x26,0xaf,0xde,0xe4,0x55,0x6c,0xf2,0x9a,0x96,0xb4,0x7f,0xbe,0xcd,0x8c,0xe4,
    0x65,0x91,0xbc,0x3c,0x92,0x57,0x44,0xf2,0xd9,0x91,0x7c,0x71,0x24,0x5f,0x1a,0xc9,
    0xd7,0x45,0xf2,0xcd,0x91,0xbc,0x31,0x92,0xef,0x4e,0xda,0x3f,0x9f,0x1f,0x8a,0xf4,
    0x2f,0x18,0x59,0xce,0x4a,0x6f,0x46,0xfa,0x77,0x23,0xff,0xf7,0x23,0xf9,0xd3,0x68,
    0x9e,0xa6,0x53,0x37,0xed,0x9f,0x93,0xe9,0x9f,0x19,0xc6,0xa6,0x19,0x7c,0x0d,0xf3,
    0x76,0x0a,0x7e,0xcd,0xcc,0xdb,0x34,0x30,0xb5,0x9f,0x15,0x71,0x9e,0x9a,0x81,0x73,
    0x36,0xb8,0xf6,0xc7,0x1c,0xfc,0x66,0xc3,0x39,0x13,0x4c,0xed,0x4f,0x63,0xee,0x94,
    0x73,0x1e,0x9c,0x73,0x8d,0xcd,0x7c,0x70,0x7d,0x8e,0x2d,0xc4,0x6f,0xbe,0xb1,0x59,
    0x04,0x8f,0x3e,0xd7,0x4f,0x07,0x93,0xb3,0xf7,0x9d,0x60,0x4b,0xf0,0x15,0x9d,0x3c,
    0xff,0x5a,0x92,0xb6,0xe7,0x9f,0xe8,0x96,0xca,0x1e,0x4e,0xaf,0x2d,0xa5,0x3f,0x5b,
    0x91,0x5b,0x4c,0xac,0x33,0xe9,0x3f,0x19,0xcf,0x72,0x64,0xd5,0x9d,0x45,0x1e,0xa2,
    0x5b,0x81,0xac,0xcf,0xa1,0x6f,0xb3,0x77,0x2f,0xa7,0xff,0xc4,0x66,0x19,0xb8,0xfa,
    0x7f,0x87,0xde,0xd5,0x39,0x59,0x05,0xd6,0x98,0xd6,0x28,0x2f,0x3d,0xf7,0x7f,0x8f,
    0x77,0x81,0x56,0xf4,0xea,0xfb,0x7d,0x74,0xc2,0x7b,0x36,0xb2,0xd6,0xf5,0x07,0xd4,
    0x75,0xb5,0xb1,0x3f,0x1f,0x7c,0x23,0xf5,0xb9,0x10,0xec,0x02,0xea,0xb3,0xc6,0xd4,
    0x47,0x74,0x17,0xf9,0x6b,0x03,0xf5,0xb8,0xc8,0xf0,0xfc,0x90,0x31,0x6f,0x80,0xe7,
    0x12,0x30,0xa9,0xfd,0x7a,0x6f,0x21,0xeb,0xfa,0x47,0xe0,0x23,0xd9,0x57,0x57,0xe1,
    0xfb,0x63,0x74,0x92,0xf3,0xc5,0xc8,0xca,0xfb,0x93,0x88,0xf7,0xa7,0x60,0x96,0xf7,
    0x72,0xf0,0x06,0xde,0x6f,0x94,0xf7,0x0a,0x74,0xc2,0x7b,0x29,0xb2,0xd6,0xe2,0x2a,
    0x6a,0x71,0xa5,0x89,0x75,0x35,0xb8,0xd6,0xe2,0x1a,0x30,0xad,0xc5,0x5a,0x53,0x0b,
    0xd1,0x5d,0xeb,0xaf,0x9b,0xa8,0xc5,0xb5,0x86,0xe7,0x06,0x72,0xd6,0xbd,0xf0,0x46,
    0xde,0xab,0x6e,0x20,0x97,0xeb,0xc0,0xe4,0x4c,0xb0,0x16,0xff,0x9b,0x8c,0xff,0xcf,
    0xa2,0x31,0xff,0x1c,0x6c,0x31,0x79,0xac,0x33,0x79,0x88,0xee,0x16,0x7f,0xdd,0x0a,
    0xcf,0x2d,0xc4,0xb8,0x39,0x69,0x3b,0x47,0xaf,0x43,0x77,0xab,0x89,0xf1,0x0b,0xf6,
    0x37,0x95,0x6f,0x27,0xe6,0xf9,0xe4,0x7c,0x07,0xef,0x7e,0xb7,0x9b,0x71,0xdc,0x89,
    0xdf,0x1d,0xe6,0x79,0x73,0x17,0xf8,0x6d,0x26,0xee,0x5d,0x51,0xdc,0x75,0x26,0xce,
    0x7a,0xf6,0x49,0xad,0xc3,0xfa,0xa8,0x0e,0x6b,0x91,0xd7,0x20,0x6f,0x30,0xbe,0xbf,
    0x64,0x5d,0x88,0xef,0x46,0x64,0x9d,0xcf,0x7b,0x32,0x9c,0x41,0xee,0x05,0x17,0xfb,
    0xbb,0x91,0x75,0x1d,0x6e,0xe2,0x59,0xb8,0x91,0x7d,0x59,0xf3,0xd9,0x64,0x38,0x7f,
    0x95,0x81,0xf3,0xd7,0xe0,0x5a,0x93,0xfb,0xc0,0x9a,0x4c,0xff,0xde,0x67,0xec,0xef,
    0xa7,0xce,0x3a,0x97,0x0f,0x82,0x3d,0xc0,0x5c,0x6e,0x36,0x73,0x29,0xba,0x87,0xfd,
    0xf5,0x28,0x63,0x7f,0x18,0xce,0x87,0x78,0xcf,0x96,0xba,0x6c,0x46,0xf7,0xa8,0x89,
    0xf1,0x18,0x31,0xb6,0xf2,0xfc,0x7c,0x9c,0x77,0x80,0xc7,0x98,0x4f,0xc1,0x9e,0x30,
    0xb8,0x72,0x3e,0x11,0x71,0x6e,0x4e,0xda,0xce,0xd2,0x4f,0xf2,0x7c,0xd2,0xb5,0xf4,
    0x14,0x98,0xae,0xa5,0xa7,0xa2,0x79,0x5a,0x63,0xf2,0x79,0x3a,0xda,0xcf,0x9f,0xc9,
    0xb0,0x9f,0x6f,0x05,0xd7,0xfd,0xfc,0x59,0xfc,0xb6,0x1a,0x9b,0xe7,0xa2,0x75,0xb0,
    0x0d,0xcc,0xee,0xe7,0xbf,0xc1,0x77,0x1b,0xf5,0xdc,0x6e,0xea,0x29,0xba,0xe7,0xfd,
    0xf5,0x32,0x39,0x3e,0x6f,0x72,0xfa,0x2d,0x39,0xbd,0x68,0xe2,0xbd,0x04,0x2e,0x63,
    0x7c,0x01,0x59,0xc6,0xb8,0x1d,0xff,0x97,0x8d,0xed,0x2b,0x9c,0x17,0x54,0x7e,0x95,
    0xf3,0xc0,0xd3,0xf4,0xc5,0xef,0xb0,0x79,0xd5,0xd8,0xbc,0xc6,0x19,0x62,0x1b,0x36,
    0xaf,0x63,0xf7,0x9a,0x89,0xf9,0x7a,0x14,0x73,0xbb,0xf1,0xff,0x3d,0xf3,0xac,0xcf,
    0xb7,0x3f,0x80,0x69,0x2f,0xed,0x30,0x63,0x17,0xdd,0x1b,0xfe,0xda,0x01,0xcf,0x1b,
    0x86,0xe7,0x4f,0x9c,0x35,0x54,0xfe,0x33,0xbc,0xba,0xf6,0xdf,0x02,0xdb,0x69,0x7a,
    0xea,0x2f,0xf4,0xce,0x5b,0xa6,0x27,0xde,0x06,0xd7,0xf1,0xfc,0x15,0xee,0xb7,0xcd,
    0x1e,0xfa,0x0e,0xb8,0xbe,0xdf,0xbf,0x09,0x26,0xb1,0x45,0xff,0x1e,0xe7,0x1c,0xc9,
    0x7f,0x97,0xc9,0x5f,0xf0,0x0f,0xfc,0xf5,0x11,0xf9,0x7f,0x60,0xf2,0xfd,0x30,0xea,
    0xf7,0xbf,0xb1,0x3e,0x3e,0x24,0xc6,0xfb,0x60,0x52,0xc7,0x5d,0xf8,0x7f,0x64,0x74,
    0xad,0x91,0x6e,0x97,0xe9,0xfb,0xbf,0x73,0xae,0xd2,0x31,0xfe,0x03,0x4c,0x7c,0xdf,
    0x45,0xd6,0x3c,0x3e,0xe6,0x4c,0xa6,0xf2,0x3f,0xa9,0xab,0xbe,0x4b,0x7e,0x02,0xf6,
    0xb1,0x99,0xdf,0x4f,0x88,0xad,0xf3,0xb2,0xc3,0xf8,0xff,0x0b,0xff,0x55,0xe4,0xf2,
    0x19,0x98,0xf8,0x7e,0x8a,0xac,0x79,0x7e,0xce,0x79,0x4f,0xce,0x27,0x9f,0x47,0xe7,
    0xe7,0x7e,0xd4,0xb1,0x2f,0xe7,0xe7,0x12,0xbe,0x31,0x4b,0xbc,0x52,0xc3,0xb1,0x1b,
    0x5c,0x38,0x76,0x47,0xef,0x09,0xfa,0xdd,0xba,0xbf,0x39,0x83,0x0f,0x30,0x7c,0x65,
    0xf0,0x95,0x9b,0xf3,0xe9,0x9e,0xe8,0xbc,0xba,0x37,0x92,0xb3,0xa3,0xef,0x51,0x39,
    0x91,0x9c,0x17,0xc9,0x1d,0x23,0xb9,0x53,0x24,0x17,0x46,0x72,0xd7,0x48,0xee,0x11,
    0x7d,0x0f,0xeb,0x1d,0xe9,0x07,0xb8,0xf6,0xe7,0xe5,0x2f,0x18,0xa3,0xee,0x11,0xff,
    0xcd,0x70,0xb6,0xfd,0x12,0x5c,0xcf,0x66,0x5f,0xe1,0xf7,0x25,0xf3,0xb4,0x07,0x4c,
    0xed,0xbf,0x8e,0x38,0x13,0xb7,0x3f,0xa7,0xe3,0x9f,0x3d,0x7a,0x5e,0xce,0x72,0xc1,
    0xcf,0xf1,0x5d,0x60,0x2f,0x98,0xda,0xe7,0xba,0x50,0x6b,0xd1,0x49,0x0d,0x73,0x8d,
    0xae,0x83,0x0b,0x75,0x17,0x5d,0x5a,0x4f,0xf3,0x0d,0x24,0xdf,0x85,0x77,0x63,0xf1,
    0xc9,0x83,0x5b,0xe6,0x24,0xdf,0xf8,0x17,0xb8,0x30,0x4f,0xa2,0x93,0x7a,0x17,0x98,
    0xef,0x4b,0x9d,0xdd,0xfe,0xef,0xb2,0x45,0x2e,0xe0,0x62,0x2f,0xf3,0x51,0x64,0xe2,
    0x75,0x71,0xe1,0x19,0x2b,0x3c,0x85,0xd8,0xc8,0x9c,0x76,0x31,0x9c,0xdd,0x32,0x70,
    0x1e,0xe0,0x02,0xae,0xcf,0xd8,0xee,0x2e,0x60,0xfa,0x8c,0x95,0x79,0xee,0x6e,0x72,
    0xee,0xe9,0xc2,0xdc,0xeb,0x73,0xa2,0x97,0x0b,0x98,0xee,0x8b,0xc5,0xe6,0x1b,0x97,
    0xe8,0xfa,0xf8,0xab,0x84,0x6f,0x31,0x7d,0xc8,0x4b,0x7a,0x43,0x9f,0xb1,0xc5,0xe8,
    0x4a,0x4c,0x8c,0xbe,0xc4,0xd0,0x3d,0xe7,0x40,0xbe,0xf1,0x08,0xae,0xcf,0xd8,0x7e,
    0xae,0x0d,0x57,0xce,0x7e,0xae,0x3d,0x67,0xb1,0xf9,0x5e,0x55,0xea,0x42,0x4f,0xea,
    0x5e,0xd3,0xdf,0x05,0x4c,0x7c,0xa5,0x77,0xfb,0x1b,0xdb,0x32,0xfe,0x77,0xa4,0xb6,
    0x07,0xb9,0x80,0x69,0x7e,0xe5,0x2e,0xf4,0xbb,0xee,0xc5,0x03,0x5d,0xb0,0x29,0x37,
    0x36,0x83,0x5c,0x58,0x53,0x5b,0xb1,0x19,0xec,0x82,0xdd,0x20,0x62,0xca,0x7a,0x18,
    0x6c,0xec,0x0f,0x76,0x61,0x8d,0xc8,0xfe,0x20,0xf7,0xba,0x3f,0xc8,0xb7,0xa9,0xc1,
    0xec,0x0f,0x03,0xcd,0xfe,0x30,0x88,0x3d,0xe1,0x60,0xf3,0x8d,0x79,0x78,0x86,0xef,
    0xa5,0x87,0x83,0x6b,0x0f,0x54,0xbb,0xfd,0xbf,0x6b,0x8c,0x70,0x01,0xd7,0x75,0x56,
    0xe3,0x02,0xd6,0x68,0xce,0x9e,0x23,0x5d,0xe0,0xaa,0x31,0x39,0xd7,0xba,0x90,0x87,
    0xbe,0x27,0x8d,0xe2,0x7f,0x05,0xad,0xd8,0xcb,0x38,0x05,0xab,0x35,0xdf,0xd4,0xfe,
    0x07,0xe5,0x4b,0xc0,0x04,0xd4,0x1d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       int loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//           int value = int(valueAsUint);
//
//     return value;
// }
//
//        int convertComponent(int srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, int value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               int srcValue = loadSourceComponent(cd);
//                int destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
