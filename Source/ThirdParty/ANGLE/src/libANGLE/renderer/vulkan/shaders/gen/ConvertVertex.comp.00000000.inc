// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x57,0x6b,0x68,0x97,0x65,
    0x14,0x7f,0x9f,0xf3,0xff,0x3b,0x97,0x97,0xa9,0xa9,0x59,0xa0,0xa2,0xd9,0x87,0x6a,
    0x73,0x2d,0xb1,0x94,0xcc,0xa5,0x78,0xd9,0x96,0x4a,0x5e,0x28,0x2f,0xb3,0x1b,0x96,
    0x20,0xb6,0x91,0xce,0x98,0x69,0xd1,0x50,0xc9,0xfa,0x14,0x28,0x15,0x21,0x19,0xe6,
    0x20,0xd4,0xb2,0x1b,0x76,0x51,0x13,0x94,0xcc,0x31,0xfd,0x24,0x19,0x39,0xdc,0x27,
    0xb3,0x82,0x50,0x12,0xbc,0x65,0x6d,0x75,0x7e,0x3b,0xbf,0xd3,0xff,0x6c,0xf9,0xa9,
    0xc1,0xc3,0xfb,0x3f,0xbf,0x73,0x79,0x7e,0xe7,0x3c,0xe7,0x3d,0xcf,0xbb,0x9c,0x8c,
    0xe9,0x9d,0x65,0x29,0xeb,0x93,0x15,0x67,0xaf,0x49,0xd6,0xf5,0x37,0x28,0x13,0x45,
    0xb2,0xac,0x6f,0x56,0xd4,0xf5,0xac,0x9a,0xbd,0x60,0x76,0x79,0xc3,0x9a,0x67,0xca,
    0xc7,0xdf,0x57,0x01,0x7d,0x49,0x96,0xeb,0xb2,0x83,0x6e,0x80,0xda,0xf4,0xd2,0x67,
    0x5e,0x57,0xdd,0xd3,0x2b,0xea,0x81,0x57,0xa8,0x62,0xa0,0xe2,0xf9,0xae,0x58,0x59,
    0x36,0x85,0xb6,0x58,0xd5,0x6a,0x7d,0x97,0x6d,0x93,0x8d,0xe1,0xd3,0xb1,0x44,0x2c,
    0x1f,0x30,0x21,0x56,0x1c,0xb0,0x1c,0xb1,0x7e,0x01,0xcb,0x13,0x1b,0x18,0xb0,0x5e,
    0xc4,0x86,0x04,0xac,0x88,0xd8,0xad,0x01,0xeb,0x4d,0x6c,0x78,0xc0,0x8a,0x89,0x8d,
    0x0a,0xd8,0x4d,0xc4,0xee,0x08,0x58,0x1f,0x62,0x77,0x06,0xac,0x2f,0xb1,0xb2,0x80,
    0xf5,0x23,0x56,0x11,0xb0,0xfe,0xc4,0xc6,0x07,0xac,0x84,0xd8,0x44,0xd4,0x5d,0x33,
    0xf5,0x1a,0x54,0x69,0x86,0x8d,0xe4,0xef,0xf5,0x59,0xdb,0xa3,0x8e,0xb0,0x5f,0xcb,
    0xfa,0xc0,0x7e,0x9d,0x3e,0x6f,0xff,0x57,0x67,0xf2,0x68,0xd6,0x19,0xf2,0xdd,0xa9,
    0x7b,0xbc,0xd2,0xf4,0xdf,0x78,0xc0,0x3c,0xde,0xd8,0xd4,0x3d,0x1e,0xe4,0xd1,0x41,
    0xc6,0xb9,0xf7,0x65,0x1d,0x21,0xaf,0xa6,0x7c,0x9b,0xae,0xc1,0x9a,0x85,0x74,0xed,
    0x9f,0xeb,0x8a,0x87,0xdf,0x43,0xd5,0xa6,0x88,0x35,0xce,0x28,0x0f,0xa5,0x0c,0x2a,
    0x23,0xb5,0x7b,0xfc,0xcc,0xfe,0xef,0x1a,0x85,0x3c,0x79,0x76,0x88,0x35,0x89,0x72,
    0x29,0xb1,0x52,0xee,0x59,0x16,0xec,0xc7,0x52,0x57,0x14,0xf4,0xe3,0xd8,0x4f,0x2e,
    0x4f,0x60,0x0e,0x2e,0x57,0xb2,0x17,0x5c,0x9e,0xd6,0x23,0x7e,0x35,0xcf,0xa5,0x94,
    0x39,0xcf,0x65,0xdd,0x5d,0x9e,0xcf,0x9e,0x73,0xfb,0xc5,0x3d,0xe4,0x65,0xb4,0x1f,
    0xa2,0xbb,0x2e,0x0f,0x7e,0x2b,0x42,0x5c,0xd8,0xd5,0xb3,0x96,0x23,0x14,0xf5,0x7e,
    0x19,0xc9,0xbe,0x68,0x64,0x7e,0x2f,0x92,0xfb,0x5a,0xd6,0x03,0xf2,0x3a,0x62,0xd0,
    0xbf,0xcc,0xdf,0x31,0xff,0x26,0xf6,0xab,0xef,0xbb,0x91,0xfb,0xb8,0xfe,0x0d,0x5d,
    0x7f,0xe7,0x0a,0xf2,0x16,0xf6,0xb2,0xdb,0xbf,0x13,0xea,0x03,0xb9,0x39,0xd4,0x0f,
    0xf2,0x3e,0x9e,0xbb,0xfb,0xef,0x47,0x3c,0xfd,0x73,0xf9,0x20,0x7b,0xc2,0xe5,0x13,
    0x7c,0xa7,0xdc,0xbf,0x9d,0x7a,0xe4,0xed,0x7d,0x3d,0x92,0xfd,0x0b,0x19,0x79,0x95,
    0x25,0xee,0x99,0x2c,0x6f,0xc8,0x63,0x89,0x0d,0x53,0xb9,0x9c,0x7e,0x39,0xd6,0xe1,
    0x9e,0x64,0x31,0xcb,0x69,0x0f,0xb9,0x82,0x18,0xf4,0xf7,0xf2,0x77,0xac,0xd3,0xc3,
    0xec,0x79,0xe7,0xb5,0x2a,0xd9,0xfc,0x2b,0x53,0x09,0x71,0xf0,0x4e,0x00,0x6b,0x27,
    0xe7,0xfb,0xb5,0xab,0x84,0x67,0x9b,0x71,0xef,0x6b,0x8a,0xa0,0xd7,0xae,0xaa,0xd4,
    0xc0,0x77,0xf2,0x4f,0xfd,0x8d,0x9a,0xaf,0x49,0xa6,0xc7,0x73,0xaa,0x5a,0x81,0xc3,
    0x03,0xe4,0x05,0xfd,0x64,0xee,0x3b,0x89,0x38,0x6c,0xd0,0xcf,0x0f,0x26,0xeb,0xf9,
    0xfa,0x60,0x33,0x39,0x19,0xbe,0x57,0x6d,0xd0,0x53,0x95,0xc9,0xfc,0x80,0x63,0xef,
    0x29,0xdc,0xfb,0xba,0xda,0x43,0xf7,0x10,0x72,0xe1,0xfe,0xf8,0xfd,0x87,0x3e,0x1b,
    0x28,0x4f,0xa1,0x3c,0x9d,0x32,0x9e,0x97,0x75,0xb2,0x62,0x9f,0xcd,0x62,0xdc,0x60,
    0xb3,0x52,0x57,0x55,0xd0,0xad,0x0a,0xba,0x3a,0xea,0x9c,0xf3,0x2c,0x72,0x46,0x4d,
    0x9d,0xf3,0xec,0x64,0xf8,0x27,0xe4,0x3c,0x27,0x59,0x0c,0xe0,0x57,0xd4,0x66,0x26,
    0x63,0x38,0x6f,0xe8,0x67,0xe8,0x9a,0x49,0x5e,0xf8,0xbd,0x49,0x7d,0x11,0x6b,0x01,
    0xf3,0x85,0x6f,0x13,0xb1,0x47,0x93,0xe1,0x88,0xe9,0x3c,0x16,0x92,0xc7,0xc1,0x50,
    0xbb,0x45,0xc9,0x70,0xaf,0xdd,0xe2,0x64,0xbe,0x8b,0x58,0xbb,0xda,0xc0,0x01,0xba,
    0x25,0xba,0x6a,0xc9,0x61,0x09,0x6b,0xe5,0x9c,0x6a,0xe9,0x53,0x2c,0xdd,0xcf,0x7a,
    0x2b,0xf5,0x5b,0x43,0x4d,0xde,0x24,0x97,0xc5,0x81,0xcb,0x5b,0xc9,0xf0,0x57,0x99,
    0xc3,0xdb,0xe4,0x02,0xfc,0x75,0x62,0xdb,0x02,0xe6,0xb1,0xde,0x65,0xac,0x65,0x21,
    0xd6,0xf6,0x64,0xb8,0xe7,0xf5,0x5e,0x32,0xdf,0xed,0xa1,0xe6,0x3b,0x88,0x61,0xf6,
    0x7c,0x40,0xec,0xfd,0x64,0xb6,0x3b,0x98,0x4b,0x73,0xc8,0x1f,0xba,0x9d,0xba,0x9a,
    0x99,0xcf,0x4e,0xe6,0x8f,0x7c,0x21,0x37,0x07,0x4e,0xfd,0xc5,0x38,0x95,0x05,0x4e,
    0x25,0x62,0xb8,0x9f,0xdb,0x00,0xb1,0x1c,0x4b,0xc2,0x19,0x0d,0xa2,0xdf,0xb8,0xe0,
    0x77,0xb3,0x18,0xee,0x7e,0x83,0xc5,0x78,0x03,0xf7,0xf3,0x1e,0x22,0x16,0x6f,0x70,
    0x88,0x35,0x94,0xb1,0x26,0x84,0x58,0xb7,0x88,0xe1,0xee,0x37,0x4c,0xcc,0x17,0xb8,
    0xd7,0x7d,0x57,0x32,0x1c,0xb3,0x7d,0xaa,0x22,0x98,0xa3,0xbb,0x93,0xcd,0xd6,0x7a,
    0xea,0x3d,0xde,0x9e,0x64,0x3a,0xdf,0xf3,0x43,0x9e,0x45,0x53,0xd8,0xf3,0xa3,0x64,
    0xf8,0x1e,0xd6,0x78,0x6f,0x32,0x6c,0x23,0x67,0x43,0x7b,0xa8,0x31,0x74,0x1f,0xeb,
    0x3a,0xce,0x1a,0xe3,0xf7,0x6e,0xfa,0x7d,0x1a,0xce,0x6b,0x97,0x46,0xc6,0x9c,0xfa,
    0x2c,0x19,0x3e,0x81,0x77,0xd7,0x4b,0xdc,0xf3,0xf3,0x64,0x3a,0xb7,0xfb,0x82,0x76,
    0xd5,0x9c,0xf1,0x6e,0xf7,0x65,0x32,0x9d,0xf3,0xff,0x8a,0xfc,0xb7,0x04,0xfe,0x5f,
    0x27,0xc3,0x9d,0xff,0xfe,0x64,0x98,0xf3,0x6f,0x0d,0xfc,0xa1,0x3b,0xa0,0xeb,0x10,
    0xf9,0x1f,0x08,0xef,0xe9,0x37,0xc9,0xee,0x8f,0x6d,0xec,0x9b,0x56,0xda,0x1c,0x62,
    0xaf,0xb5,0x84,0x38,0xe0,0x7a,0x58,0xd7,0x11,0xda,0x1c,0xa6,0x4f,0x0b,0x65,0xe0,
    0x1b,0x18,0xf7,0x68,0xb2,0x7b,0x68,0x5b,0xd8,0xeb,0xbb,0x64,0x35,0x38,0x1a,0x66,
    0xc2,0xb1,0x64,0x38,0x6c,0x63,0xac,0x96,0x30,0xc7,0x1a,0x38,0xc7,0xb0,0xdf,0x31,
    0xee,0x1f,0xb9,0xb6,0x06,0xdb,0x17,0xc4,0x72,0x42,0x8e,0xf0,0x6b,0xa1,0x6d,0x3b,
    0x6d,0x8f,0x87,0xf7,0x76,0xb8,0x14,0x7a,0xca,0x39,0x8e,0x10,0xc3,0xe7,0x07,0xec,
    0x24,0xfb,0x1a,0x98,0x9f,0xfb,0xf7,0xc9,0xf0,0x7d,0xac,0x77,0x5b,0xa8,0x13,0x74,
    0xa7,0x74,0xfd,0xc0,0x3d,0x4f,0x91,0x43,0x1b,0x65,0xe0,0xdf,0x6a,0x1c,0xf4,0xc0,
    0x8f,0xc9,0x66,0xdf,0x49,0xd6,0x0e,0xd8,0xe9,0x54,0xc0,0xa3,0x5f,0x1b,0xf3,0x84,
    0xcd,0x6a,0xb1,0x7b,0x1c,0xb1,0x4f,0x73,0x2f,0xef,0x9f,0x33,0xc9,0xf4,0x31,0xef,
    0xf6,0x50,0xa3,0xf5,0x62,0xe7,0xd0,0xca,0x1c,0xda,0x82,0xae,0x51,0xac,0xff,0xa0,
    0x3b,0xd3,0x43,0xb7,0x46,0xac,0xbe,0xd0,0xa1,0x4e,0x6d,0xe1,0x3d,0x38,0x7b,0x83,
    0xb9,0xf5,0x13,0xe7,0xd6,0x59,0xf6,0xd2,0x85,0x50,0x23,0xe8,0xce,0xe9,0xfa,0x95,
    0xfc,0xce,0x85,0x7e,0xff,0x99,0xfd,0x7e,0x22,0xf4,0xfb,0x2f,0xc9,0x70,0xe4,0x74,
    0x81,0x3e,0xf0,0x3d,0xc2,0x33,0xfa,0x2d,0xd9,0x7b,0x0f,0x8e,0xc7,0x88,0x9d,0x4f,
    0x86,0x37,0x4a,0x77,0xbf,0x0b,0x21,0xa7,0x57,0xc4,0x62,0x63,0xff,0xf3,0xe4,0xe3,
    0xb3,0xf8,0xf7,0x64,0xb5,0xf2,0x33,0xce,0x4b,0x81,0x3f,0x74,0x17,0x75,0xe5,0x39,
    0x67,0x2f,0x86,0xde,0xbf,0x44,0x3f,0x7c,0x83,0xf8,0x39,0x5f,0xe6,0x79,0x5e,0x0a,
    0xe7,0x74,0x25,0x19,0xee,0x7c,0xaf,0x26,0xe3,0x73,0x25,0xbc,0xd7,0xd7,0x92,0xe1,
    0xfe,0x5e,0x77,0x86,0x1a,0x42,0x77,0x5d,0x57,0x07,0xf3,0xba,0x1e,0xfa,0xea,0xaf,
    0x64,0xfd,0xb1,0x9e,0xb9,0x77,0xd2,0xa6,0x23,0x75,0x97,0x3b,0x43,0x4f,0x35,0x89,
    0xf9,0x21,0x0e,0x66,0x6a,0x47,0xe0,0x8a,0x0f,0x29,0xe8,0x8f,0x92,0x6b,0x4e,0x8c,
    0x6b,0xc6,0xf8,0x5e,0x07,0x3c,0xbd,0xb6,0x1b,0x68,0x83,0x7a,0xc3,0xbe,0x93,0xf1,
    0xb0,0x57,0x91,0x98,0x3e,0xde,0x55,0xc5,0x52,0xe0,0xb2,0x51,0x8c,0x03,0xee,0x33,
    0xd8,0xe6,0xc3,0x1d,0xf2,0x18,0xef,0x90,0xca,0xd0,0x1f,0x0b,0xc5,0x70,0x7f,0x67,
    0x17,0xf1,0x1e,0x5b,0x18,0xfc,0x96,0xd0,0x6f,0x5a,0xf0,0xab,0x15,0xc3,0xdd,0x6f,
    0x29,0xef,0xb1,0xda,0x70,0x1f,0x3d,0x2e,0x16,0x6f,0x69,0x88,0xf5,0x04,0x63,0x55,
    0x87,0x58,0x4f,0x8a,0xe1,0xee,0xf7,0x94,0x98,0x2f,0x70,0x9f,0x39,0xcf,0x8a,0xe1,
    0x71,0xe6,0x2c,0x17,0xc3,0xe3,0xcc,0x99,0x2a,0xc6,0x21,0xce,0x9c,0x69,0x62,0xb8,
    0xf7,0x63,0x4d,0xe8,0x47,0xe8,0xa6,0xeb,0x9a,0xc1,0x5a,0x4e,0x67,0x6d,0x6b,0x28,
    0x03,0xf7,0xde,0xa8,0x12,0xeb,0x45,0xc4,0xf2,0x99,0x53,0x2d,0x05,0x3c,0xfa,0xd5,
    0x84,0x33,0xd9,0xc4,0x99,0x83,0xd8,0xd5,0xdc,0xcb,0xfb,0x63,0x96,0x98,0xde,0xe5,
    0x39,0x62,0x67,0xe8,0xbd,0xfd,0x88,0x18,0x36,0x8b,0x3c,0x80,0xcd,0x13,0xc3,0x97,
    0x87,0xbe,0xc2,0x37,0x2c,0xbe,0x69,0xe7,0x91,0x7f,0x15,0xfb,0xb4,0x2a,0xdc,0x19,
    0x75,0xfc,0x86,0x74,0xae,0xfe,0x5d,0x3c,0x33,0xcc,0x90,0x95,0x37,0x38,0x9f,0xe7,
    0xc4,0x70,0xff,0xa6,0xa8,0x13,0xc3,0xe6,0x66,0x85,0xd8,0xf5,0x62,0xdf,0xad,0x75,
    0x52,0xf8,0xce,0x78,0x5e,0xec,0x7f,0x99,0x7a,0xea,0x2b,0xb5,0xf6,0xc0,0x36,0x4b,
    0xf7,0xef,0x74,0x3c,0x3b,0xf4,0xbf,0x96,0x89,0xba,0xfe,0x01,0x98,0x75,0x28,0x94,
    0xfc,0x11,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       int loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//           int value = int(valueAsUint);
//
//     return value;
// }
//
//        int convertComponent(int srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, int value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               int srcValue = loadSourceComponent(cd);
//                int destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
