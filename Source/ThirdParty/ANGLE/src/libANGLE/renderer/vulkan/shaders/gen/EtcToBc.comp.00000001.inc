// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x59,0x7b,0x70,0x56,0xd5,
    0x11,0xff,0xee,0x9e,0x93,0x84,0x57,0x11,0x0d,0xf8,0x82,0x2a,0x68,0x75,0xea,0x80,
    0x98,0xa9,0x8a,0xe9,0x28,0x56,0x43,0xc7,0x38,0xe2,0x03,0xc9,0x8c,0x1a,0xdb,0xc1,
    0x07,0xa4,0x95,0x0a,0x28,0x03,0x46,0x44,0x12,0xe5,0x21,0x44,0x41,0xa1,0x23,0xd5,
    0x8a,0x56,0x44,0x2d,0x3e,0x5b,0xe9,0x1f,0xb5,0xa3,0x40,0xb5,0x82,0x46,0x05,0xac,
    0xd5,0x50,0xa2,0x06,0xcd,0x88,0x68,0x6b,0x14,0x6b,0x1c,0x84,0xf8,0xa2,0x67,0xbf,
    0xdf,0x6f,0xf9,0x36,0x9f,0xc9,0xcc,0x9d,0xfb,0xed,0x6f,0xf7,0xb7,0x67,0xcf,0x9e,
    0x73,0x76,0xef,0xbd,0x09,0x72,0x74,0x59,0x2e,0x64,0xb9,0x3e,0xb9,0x5e,0xb9,0xfe,
    0x25,0xb9,0xfc,0xdf,0x81,0x39,0xc9,0x65,0xbc,0x8f,0xe4,0x7d,0x34,0xef,0x63,0xd2,
    0xbd,0x6f,0xae,0x34,0xaf,0xaf,0x3e,0xb7,0xe6,0xdc,0x91,0x33,0x66,0x4e,0x1a,0x79,
    0xd2,0xc9,0x15,0xca,0xeb,0x9f,0x0b,0x79,0xbe,0xea,0x0e,0xc8,0x95,0xe5,0xd4,0x5d,
    0x4c,0xd7,0xd4,0x2b,0x26,0x4f,0x53,0x7c,0x6b,0xba,0xda,0xd2,0x35,0x20,0xf1,0x63,
    0xde,0x5f,0x2e,0x77,0x06,0xed,0xf5,0x3a,0x3b,0x31,0x4e,0x46,0x08,0xb9,0xa3,0x79,
    0x37,0x2c,0x23,0x16,0x1d,0x26,0xc4,0x7a,0x39,0x2c,0x10,0xeb,0xe7,0xb0,0x48,0x6c,
    0x80,0xc3,0x4a,0x88,0x0d,0x74,0x58,0x29,0xb1,0x43,0x1d,0x56,0x46,0x6c,0x88,0xce,
    0x37,0x79,0xb7,0x71,0xab,0x93,0xd7,0xad,0xf9,0x5c,0xe4,0x72,0x87,0x53,0x6e,0xa3,
    0x3c,0x98,0xf2,0xe6,0x14,0xf4,0x51,0x9c,0x87,0xc9,0xc3,0x9c,0x3c,0x4c,0xba,0xeb,
    0x55,0x1e,0xc6,0xb9,0xea,0x58,0x2a,0x1f,0x46,0xdd,0xb1,0x02,0xdf,0x2a,0x97,0xa7,
    0x08,0x34,0x86,0x61,0xc9,0x26,0x30,0x9e,0x41,0xc9,0x46,0xe3,0x1f,0x4a,0x7f,0x87,
    0x24,0xb9,0x8c,0x73,0x92,0x3c,0x1e,0xf3,0x79,0x2a,0xe3,0xa5,0xf6,0xbd,0x69,0x9f,
    0x51,0xdf,0x87,0xba,0xde,0xe4,0x0f,0xe0,0x6f,0xe3,0x0f,0xa4,0x5e,0x7d,0x0e,0x27,
    0xff,0x84,0x74,0x1d,0xef,0xe4,0x0a,0xae,0xc1,0x11,0xc9,0x9b,0xe5,0xb4,0x94,0x7e,
    0x4a,0x7b,0xb8,0xd4,0xef,0x28,0xea,0xd5,0xfe,0x54,0xca,0xa7,0x10,0x33,0xbf,0x95,
    0xce,0xfe,0xa7,0xce,0xdf,0x70,0xce,0xfb,0x34,0xce,0x7b,0x20,0xf7,0xaa,0xe1,0x55,
    0x9c,0x9f,0xf9,0x39,0x8b,0xeb,0x6b,0x72,0x35,0xf7,0x8f,0xc9,0xe3,0xb9,0x27,0x4c,
    0xae,0xe1,0xfe,0x31,0xb9,0x96,0xfb,0xc8,0xe4,0x09,0xdc,0x4b,0x26,0x4f,0x4c,0xd7,
    0x91,0x4e,0xae,0x63,0xfe,0x34,0x9f,0xd7,0x31,0xee,0xe8,0xe2,0xab,0xa7,0xbf,0x21,
    0x49,0xbe,0x3e,0xdd,0xaf,0x23,0x66,0xfc,0x59,0xf9,0x73,0x95,0xcb,0x8d,0x48,0x99,
    0x57,0xdd,0x0d,0xf4,0x39,0x81,0xb1,0xcf,0x72,0xb6,0xb3,0x8b,0x72,0x76,0x23,0xcf,
    0x81,0x71,0xe7,0x90,0x5b,0x49,0xdb,0x1b,0x9d,0x6d,0x43,0x51,0x9e,0x1a,0xb9,0xd6,
    0xc6,0xbd,0x89,0x36,0x35,0xd4,0xdd,0xe8,0x74,0x37,0x53,0x57,0xc1,0xb8,0xbc,0xdf,
    0xb9,0x3c,0x13,0x66,0x3b,0xcf,0xc5,0xdf,0x48,0xbd,0xd9,0xce,0x4f,0x57,0x1f,0x67,
    0xbb,0xc0,0xc5,0x5b,0x4d,0xbd,0xe9,0x6e,0xe1,0x78,0x95,0xf4,0xe3,0x75,0x0b,0xc9,
    0xab,0xe9,0x41,0xb7,0x88,0xb1,0xda,0xf8,0xb3,0x9d,0xae,0xa9,0x68,0x8e,0x5e,0x77,
    0xab,0x9b,0x63,0xb1,0xee,0x36,0xc7,0xab,0x2c,0xd2,0x2d,0x66,0x2c,0x15,0x4e,0x67,
    0xf3,0x5d,0xc2,0x3d,0x6b,0xb6,0xb7,0x13,0x6b,0x20,0xc7,0xfb,0xb9,0xc3,0xe5,0xb7,
    0x91,0xf9,0x30,0xdd,0x52,0x37,0xdf,0xca,0xfd,0xba,0xf2,0xfc,0x7e,0x5a,0xc6,0x3d,
    0x33,0x87,0x6b,0x78,0x33,0xd7,0x60,0x01,0x73,0xb8,0x90,0x39,0x69,0xe2,0x1c,0x6f,
    0x63,0xcc,0xb7,0x73,0xcc,0xa5,0x3c,0x73,0x77,0x72,0x3f,0x5c,0xef,0xe2,0x5f,0xa3,
    0x7b,0xe6,0x9b,0x7d,0xfb,0x4c,0x7e,0x3a,0x5d,0xfb,0x42,0x41,0xff,0x37,0x95,0x13,
    0xe9,0xe0,0x54,0x11,0xd6,0xb3,0xd6,0xa8,0x4e,0x7f,0x6f,0xc8,0xcf,0xfc,0xbb,0x2a,
    0x93,0x37,0xe6,0xe5,0x9b,0xc6,0x98,0xbc,0x05,0xa9,0xf9,0x99,0x9e,0x9b,0x37,0x79,
    0xd6,0x03,0x63,0x69,0xe1,0x5e,0x7d,0x93,0xf5,0xa2,0x85,0xbd,0x25,0x73,0xe7,0xaa,
    0x95,0xe7,0xda,0xf4,0x6d,0xae,0xce,0x6d,0xe7,0x6f,0x5f,0x3f,0xda,0x8b,0xce,0xe5,
    0xce,0x7c,0x0f,0x2b,0xc8,0xbb,0x78,0x8e,0x4d,0xde,0xc3,0x78,0x34,0x3e,0xc9,0xe0,
    0xcb,0xf3,0xcb,0x32,0xd4,0x19,0x5d,0x23,0xd5,0xf7,0xca,0x50,0xa3,0x5a,0x79,0xbe,
    0x55,0x6f,0xb6,0x7d,0xd2,0xef,0x7d,0x2e,0x37,0xa3,0x34,0xb8,0x5c,0xfb,0x19,0xfb,
    0x6b,0x5b,0x86,0xdc,0x9b,0x5c,0x97,0x15,0x6a,0x8e,0xca,0x4d,0x59,0xf7,0x9a,0xbc,
    0x9c,0xfe,0x34,0xb6,0x27,0xd3,0xef,0xd1,0x8c,0xfd,0xb0,0xa4,0x7d,0x85,0xb6,0x6c,
    0xf5,0xfb,0xff,0x32,0xde,0x07,0xa7,0x59,0xbd,0x9a,0x04,0xb5,0xd3,0x5c,0x6d,0xa2,
    0x42,0xb1,0x53,0x29,0x6f,0x26,0xa6,0xfa,0xb7,0x32,0xd4,0x9c,0xde,0xf4,0x7f,0xa4,
    0xc0,0x7f,0x56,0xe4,0x5f,0xf2,0x3d,0x01,0x9c,0xa1,0x02,0x4c,0x6d,0x4f,0xa5,0x3c,
    0x8c,0x98,0xcd,0xe9,0x18,0xc1,0xb3,0xc1,0x88,0x24,0xe9,0x3a,0x6b,0xff,0x53,0xac,
    0x8a,0x35,0x7d,0x44,0x9a,0x81,0xe6,0xe4,0xd5,0x88,0x9c,0xb6,0x12,0xd3,0x5a,0xba,
    0x29,0xe2,0x3c,0xd4,0x39,0x6c,0x73,0xc4,0xf9,0xa9,0x70,0x6b,0xb2,0x25,0x22,0xf7,
    0xfe,0xca,0xd2,0xfc,0xf5,0x4c,0xb5,0x44,0xfc,0x56,0xbb,0x8e,0x58,0xc8,0xed,0x0f,
    0x4a,0xd0,0xf3,0x46,0x25,0xbf,0xc2,0x35,0xcf,0x71,0x2f,0xec,0x4d,0x48,0x09,0xf7,
    0x9c,0x9e,0x97,0xda,0x80,0x75,0x33,0xf9,0x2f,0x52,0x90,0x75,0x6f,0xee,0xcc,0xba,
    0xcb,0x5f,0x50,0xde,0x93,0xbc,0x55,0x31,0x1f,0x5f,0xa7,0xdf,0xba,0x6f,0xc6,0x08,
    0xfc,0xeb,0x7d,0x34,0xcf,0xc4,0x79,0x82,0x7d,0x7f,0x41,0x62,0x29,0xef,0x7c,0x01,
    0x76,0x9e,0x14,0xd6,0x74,0x01,0xf3,0x34,0x4e,0xa0,0xd7,0x7c,0x9d,0x99,0x30,0x3d,
    0x03,0x17,0x0a,0xce,0x85,0xfa,0x1f,0xcd,0xbc,0x8f,0x17,0xe0,0x2f,0x24,0x1b,0x95,
    0x6b,0x04,0x98,0x9e,0x8f,0x66,0x62,0x17,0x11,0xdb,0xe9,0xb0,0x4b,0x04,0xb6,0x55,
    0x1c,0x53,0xb1,0x5a,0xf2,0x54,0x77,0x21,0xb1,0x5f,0x08,0x62,0xc9,0xe5,0x6b,0x11,
    0xb0,0x5f,0x0a,0x70,0xb5,0x1f,0x9f,0x10,0x8d,0x77,0x75,0x04,0x6e,0xb6,0x36,0xce,
    0x65,0x1c,0x67,0x97,0x1b,0xe7,0x72,0xca,0x97,0xb9,0x71,0xae,0x24,0x37,0x73,0xe3,
    0x4c,0x14,0xe0,0x97,0xbb,0x71,0x1e,0x8b,0xc0,0x57,0x47,0xd8,0xda,0x38,0xbf,0x12,
    0xcc,0x53,0xcf,0xb9,0xe5,0xe2,0x2a,0x62,0xba,0xaf,0xc6,0x31,0xaf,0x93,0x05,0xb6,
    0xaa,0xbb,0x99,0xd8,0xd5,0x02,0xbf,0xaa,0x9b,0xc3,0xe7,0xa8,0xa9,0x02,0x5c,0x73,
    0xaf,0xcf,0x2f,0x7f,0xcc,0xf0,0x8c,0x53,0xe1,0x72,0xbf,0x3a,0x03,0x3e,0x87,0x7b,
    0xed,0x91,0x0c,0x98,0x71,0x1e,0x25,0xa7,0xc6,0x71,0x1e,0xcb,0x80,0x1b,0xe7,0xf1,
    0x0c,0xd8,0x38,0xee,0xfb,0x27,0x32,0xf8,0x51,0xfc,0xa9,0x84,0x69,0x3d,0xf8,0x53,
    0x86,0x78,0x54,0xb7,0x22,0xf1,0xb4,0x3e,0xfc,0x99,0xb8,0xee,0xbd,0x35,0x3c,0xbc,
    0x5f,0x25,0x9d,0xe2,0x4f,0xa5,0x4b,0x31,0xdd,0x7f,0xfa,0xbb,0x2b,0xdd,0xab,0xb8,
    0x1f,0x15,0xdf,0xc0,0xb1,0xfe,0x4a,0xbf,0x7a,0xfe,0x9a,0x89,0x3d,0x43,0x4c,0xcf,
    0x9f,0xae,0x8d,0xc6,0xb8,0x2e,0x03,0x9e,0xe3,0x1a,0x2a,0xb6,0x3e,0xc3,0xbc,0x54,
    0x67,0x76,0xcf,0xd1,0xce,0xd6,0x50,0xb1,0xe7,0x33,0xd8,0xaa,0xce,0xb8,0x1b,0xc9,
    0x55,0xcc,0xec,0x9a,0x33,0xe0,0xeb,0x32,0xe4,0x4a,0xeb,0xd7,0x16,0xd6,0x2e,0xf3,
    0xff,0xcf,0x0c,0x31,0xfb,0x3d,0xf2,0x06,0x73,0xee,0xd7,0xfd,0xcd,0x0c,0x78,0x5d,
    0xae,0x90,0xe7,0x96,0x0c,0xb8,0xc5,0xb0,0x35,0x83,0xbf,0x16,0xe7,0x7f,0x1b,0xfd,
    0xe7,0x5c,0xfc,0xad,0x19,0x6c,0xb7,0x71,0x5d,0xb5,0x7e,0xbe,0xcd,0x75,0xad,0xe3,
    0xba,0xaa,0xdd,0x3b,0xc4,0x8d,0xd7,0x96,0x81,0xab,0xf8,0xa4,0x64,0xa3,0xf5,0x79,
    0x3b,0xe7,0x74,0x99,0xd6,0xa2,0x74,0x7f,0x97,0x58,0x5b,0x56,0x38,0x07,0x33,0x04,
    0x78,0x96,0xdf,0xb3,0xa8,0x7b,0x0d,0x02,0xdc,0x5f,0x2f,0xd0,0x47,0xa3,0x40,0xaf,
    0xfd,0xaa,0x99,0xd8,0x5c,0x01,0xbe,0x25,0x16,0xfc,0xce,0x17,0xe0,0xb9,0x7c,0xef,
    0x06,0xb6,0x40,0x80,0x97,0xb9,0xf1,0x17,0xd2,0x2e,0x73,0x76,0x8b,0x04,0xb8,0xf6,
    0xc1,0x17,0x89,0x35,0x09,0xf8,0x8b,0xdc,0x19,0xbe,0x8d,0x5c,0x71,0xdc,0xc5,0x02,
    0xbc,0xd5,0x71,0x97,0x08,0xf8,0x8b,0x1d,0xf7,0x0e,0x72,0x83,0xe3,0x2e,0x15,0xe0,
    0xa7,0x39,0xee,0x32,0x01,0x7f,0xa9,0xe3,0xd6,0x33,0x67,0x39,0x97,0xb3,0xdf,0x09,
    0x70,0x7f,0x59,0xce,0xee,0x12,0xe8,0x7d,0xce,0xee,0x11,0xe0,0x3e,0x67,0xf7,0x0a,
    0x70,0x9f,0xb3,0xfb,0x04,0xb8,0xcf,0xd9,0xfd,0xb4,0xf3,0x39,0x5b,0x29,0xc0,0x7d,
    0xce,0x1e,0x10,0xf0,0x57,0xba,0xd8,0x1f,0x24,0xd7,0xe7,0xec,0x21,0x01,0xee,0x73,
    0xf6,0xb0,0x80,0xff,0x90,0xe3,0xae,0x26,0xd7,0xe7,0xec,0x11,0x01,0xee,0x73,0xf6,
    0xa8,0x80,0xaf,0x3a,0xab,0x83,0xb3,0x04,0xb9,0x54,0xdd,0xe9,0xc9,0x83,0xf6,0x36,
    0xc5,0xec,0x7c,0x3c,0x2b,0xa8,0x75,0x7a,0x7e,0xe7,0x11,0x5b,0x2b,0xe8,0xa5,0xcf,
    0xba,0xba,0xb8,0x4e,0x70,0x16,0x2a,0x5d,0x8d,0x5b,0x2f,0xc0,0x9f,0x48,0x36,0x5a,
    0xab,0xfe,0x2e,0xc0,0x4e,0x63,0xaf,0x7c,0x45,0x0a,0xf5,0x4a,0x75,0xcf,0xa5,0x6b,
    0x23,0xeb,0xd3,0x73,0xf4,0xad,0xef,0x74,0xcf,0x0b,0x7a,0x6e,0x95,0xf3,0xfd,0x0f,
    0x01,0x6e,0xe7,0xfa,0x05,0x01,0xf6,0x6a,0xd2,0xaa,0xbc,0x41,0x80,0x9d,0xc5,0xe7,
    0x6a,0xad,0x7d,0xaf,0xd0,0xf7,0x46,0xe7,0xfb,0xc5,0x1e,0x7c,0xbf,0x24,0xc0,0x37,
    0x25,0x49,0xe5,0x66,0x01,0x66,0xbe,0x6c,0xcc,0x97,0x05,0x3a,0xef,0x5b,0xef,0xbb,
    0x53,0x66,0x55,0xff,0x5a,0x44,0x1c,0x3a,0x97,0x97,0x39,0x37,0x1b,0x77,0x53,0x0f,
    0xe3,0x6e,0x16,0xe0,0x36,0xee,0x16,0x01,0x36,0x9e,0xbd,0xc3,0xc6,0x7d,0x4d,0xa0,
    0x33,0xde,0xeb,0x45,0xbc,0x7f,0x09,0xb0,0xda,0x22,0xde,0x1b,0x02,0xdd,0x06,0xae,
    0x63,0x8b,0x60,0x2d,0xf5,0xdd,0xc4,0xe2,0xda,0xca,0xb8,0x5a,0x9c,0xff,0x7f,0x0b,
    0xf0,0x66,0xab,0x85,0xe4,0xe9,0x3b,0xb3,0x8d,0xf9,0x96,0xc0,0xae,0x55,0xba,0xd7,
    0xdb,0xb7,0x05,0x3a,0xdb,0x3b,0x6d,0x82,0x67,0xb1,0x67,0x5d,0x1c,0xef,0x0a,0x70,
    0x1f,0xc7,0x7b,0x8c,0xe3,0x5d,0x17,0x47,0xbb,0x00,0xb7,0x38,0xde,0x27,0x6f,0xa2,
    0xab,0xf9,0x3b,0x04,0x76,0xef,0x4b,0xe1,0x99,0xe0,0x03,0x01,0x5e,0xe5,0xe2,0xda,
    0x29,0xc0,0x75,0xcf,0xeb,0xf3,0xdd,0xb2,0xfc,0xd8,0xa5,0xf9,0xf7,0xd8,0xff,0x08,
    0x9e,0xf9,0x34,0x5f,0x6f,0x4b,0xa1,0xb6,0xff,0x57,0xa0,0xb3,0xb9,0x74,0x08,0xfc,
    0xe8,0x7b,0xdf,0x4b,0xc4,0x3e,0x11,0xd8,0x75,0xb8,0x33,0xb4,0x4b,0xb0,0x17,0xaa,
    0x5d,0x3f,0xf9,0x4c,0x80,0xeb,0xfa,0xd8,0xf9,0xf8,0x5c,0xb0,0xb6,0x4b,0x78,0x3e,
    0xba,0xdc,0xf9,0x50,0x5d,0xa7,0x3e,0xd7,0x70,0x9f,0x75,0x3a,0xff,0xbb,0x05,0xe3,
    0xbe,0xe6,0xb0,0x2f,0x05,0xb8,0xed,0xfd,0x2e,0xf2,0xf6,0x48,0x77,0xb9,0xcb,0xed,
    0xd7,0xd7,0x23,0x78,0x9d,0xf4,0xb7,0x47,0x0a,0xf1,0x7e,0x23,0x88,0x59,0x6d,0x1e,
    0xe3,0x19,0xd3,0x82,0xa3,0xe7,0x76,0x0d,0xdf,0x7f,0x0d,0x8f,0xc4,0x9f,0xe6,0xbb,
    0x64,0xbf,0xf4,0x94,0xac,0x78,0xaf,0x80,0xda,0x78,0x3c,0xfd,0x29,0x5f,0x6d,0x95,
    0xa7,0xef,0x4f,0xfd,0xc8,0xdb,0xc0,0xf7,0xca,0x6b,0xf8,0x5e,0xd5,0x3f,0x80,0x6b,
    0xf2,0x00,0xf2,0x9a,0x52,0x6c,0x2a,0x1f,0x18,0x60,0xa3,0xf8,0x2d,0xc4,0xca,0x03,
    0x70,0xf5,0x39,0x97,0xd8,0xc0,0x00,0x5c,0xdf,0x51,0xa7,0x71,0x4d,0x07,0x05,0xe0,
    0xfa,0x5c,0xa9,0xef,0x0f,0x6b,0x23,0xb0,0x16,0xbe,0x20,0x58,0x7d,0xfb,0x98,0xbd,
    0xbe,0xd1,0x9d,0xd7,0x8e,0x0c,0xb8,0xad,0xdf,0x27,0x19,0x30,0xab,0x6f,0xbb,0xdc,
    0xf3,0x98,0xea,0x3e,0x4d,0xd7,0x2e,0x3e,0x8f,0x7d,0xea,0xfa,0xc6,0xe0,0x80,0xbe,
    0x15,0x5c,0xdf,0x3a,0x26,0x00,0xf7,0x97,0xf5,0xad,0x63,0x03,0xf4,0xbe,0x6f,0x1d,
    0x17,0x80,0xfb,0xbe,0x35,0x3c,0x00,0xf7,0x7d,0x6b,0x44,0x00,0xee,0xfb,0xd6,0x48,
    0xda,0xf9,0xbe,0x75,0x42,0x00,0xee,0xfb,0x56,0x45,0x00,0x5f,0x75,0xc6,0xfd,0x09,
    0xb9,0xbe,0x6f,0x9d,0x18,0x80,0xfb,0xbe,0x75,0x52,0x00,0xff,0x44,0xc7,0x1d,0x45,
    0xae,0xef,0x5b,0xa7,0x04,0xe0,0xbe,0x6f,0x55,0x06,0xf0,0x4f,0x71,0xdc,0x23,0x98,
    0x33,0x71,0x39,0x1b,0x1d,0x80,0xfb,0xcb,0x72,0x76,0x7a,0x80,0xde,0xe7,0xec,0xcc,
    0x00,0xdc,0xe7,0x6c,0x4c,0x00,0xee,0x73,0xf6,0xf3,0x00,0xdc,0xe7,0xec,0x2c,0xda,
    0xf9,0x9c,0x55,0x07,0xe0,0x3e,0x67,0x67,0x07,0xf0,0xab,0x5d,0xec,0xe7,0x90,0xeb,
    0x73,0x36,0x36,0x00,0xf7,0x39,0x3b,0x37,0x80,0x3f,0xd6,0x71,0xcf,0x27,0xd7,0xe7,
    0xec,0x82,0x00,0xdc,0xe7,0x6c,0x5c,0x00,0x5f,0x75,0xd6,0xeb,0x87,0x06,0xe4,0x52,
    0x75,0x5a,0xf7,0xf4,0xbd,0x55,0x31,0xdd,0xab,0xd3,0x43,0xf7,0x5e,0xfc,0xeb,0x24,
    0x4f,0x09,0xd8,0xab,0xfa,0xdb,0xea,0xf2,0x55,0x01,0xef,0xbb,0xbe,0x6f,0x4d,0x0e,
    0xc0,0xad,0xb6,0xfe,0x26,0x00,0xb3,0x5e,0x7c,0x75,0x00,0xe6,0x7b,0xf1,0x74,0xfa,
    0x9e,0xe2,0x7c,0x4f,0xed,0xc1,0xf7,0xb4,0x00,0xdc,0xfa,0xcc,0x35,0x01,0x58,0x71,
    0x2f,0xbe,0x36,0x40,0xe7,0x7d,0xeb,0xdd,0x6a,0xdb,0xd6,0x88,0x38,0x74,0x2e,0xd7,
    0x72,0x6e,0x36,0xee,0x8c,0x1e,0xc6,0x9d,0x19,0x80,0xdb,0xb8,0xd7,0x05,0x60,0xc5,
    0xbd,0xb8,0x3e,0x40,0x67,0xbc,0x59,0x45,0xbc,0x1b,0x02,0xb0,0xe2,0x5e,0x3c,0x3b,
    0x40,0x67,0x31,0x34,0x30,0x06,0xdf,0x77,0x1b,0x03,0x70,0xf3,0x35,0x37,0x00,0x2b,
    0xee,0xb1,0xf3,0x02,0x74,0xe6,0x6b,0x11,0x7d,0xf9,0xde,0xd9,0x14,0x80,0x5b,0x9f,
    0x5c,0x1c,0x80,0xf9,0x3e,0xb9,0x24,0x00,0xf7,0x7d,0xf2,0xf6,0x00,0x5c,0xf7,0x8b,
    0x7e,0x17,0xf1,0x7d,0x72,0x59,0xc0,0xb7,0x12,0x9d,0xcb,0xbc,0x50,0xe8,0x93,0xbf,
    0x0d,0xd0,0x59,0x9f,0xbc,0x33,0xc0,0x8f,0xef,0x93,0xcb,0x03,0xec,0x54,0x67,0x3d,
    0xeb,0xae,0x80,0x75,0xf2,0x7d,0xf2,0xee,0x00,0xdc,0xf7,0xc9,0x7b,0x02,0xf2,0x6e,
    0x7d,0x72,0x95,0xdb,0xbb,0xaa,0x5b,0x91,0xae,0x95,0xdc,0x03,0x2b,0x9c,0xff,0x3f,
    0x04,0x8c,0x5b,0xef,0xb0,0xfb,0x03,0x70,0xdb,0x97,0xab,0xc8,0x5b,0x19,0xba,0xcb,
    0xab,0xdc,0x5e,0xda,0x16,0xc1,0x5b,0x41,0x7f,0x6a,0x6b,0xf1,0x3e,0x1c,0x10,0xb3,
    0xda,0x58,0xdf,0x5b,0xe3,0xfa,0x9e,0xea,0xad,0xef,0x59,0x3f,0x7b,0x3a,0xc0,0xc6,
    0xfa,0xd9,0x33,0x01,0x98,0xef,0x67,0x6b,0x03,0x70,0xdf,0xcf,0xd6,0x05,0xe0,0xbe,
    0x9f,0xad,0x0f,0xc0,0xad,0x9f,0x35,0x47,0x60,0x6b,0xf9,0x9d,0x44,0xe7,0x64,0x3d,
    0x48,0xef,0xbb,0xf9,0x2d,0xfa,0x9d,0x08,0x1b,0x7d,0x1e,0x50,0xce,0x2a,0x9e,0x67,
    0xdd,0x17,0x5f,0x65,0x78,0x2f,0xb7,0xf7,0xe3,0x6f,0x33,0xd8,0xeb,0xdf,0x15,0x19,
    0x72,0x52,0x1e,0x0b,0xdf,0x56,0x55,0xaf,0x35,0x70,0x12,0x75,0x83,0x7a,0xd0,0xd9,
    0x5a,0x6e,0x0b,0xe0,0xc2,0x26,0xe4,0xb6,0xbb,0xb5,0x54,0x5d,0x6b,0xba,0xb6,0x73,
    0x0d,0x5a,0xdd,0x9e,0x1a,0x42,0x8e,0x72,0x2d,0x8f,0x3f,0x8c,0xc0,0xcd,0x66,0x68,
    0xc4,0x78,0xde,0x66,0x58,0x04,0x6e,0xb9,0x3e,0x3a,0x02,0x53,0xae,0xe5,0xfa,0x47,
    0x11,0xb8,0x7e,0xcf,0xb5,0x5c,0x1f,0x13,0x81,0x6b,0xae,0xa7,0x32,0x2f,0xc7,0x46,
    0xe0,0x8d,0x94,0x7f,0x1c,0x81,0xd9,0x79,0x3a,0x2e,0x02,0xd3,0xef,0xc0,0x4f,0x72,
    0xbe,0xc3,0x23,0xbe,0x79,0x1d,0xe7,0x9e,0xa3,0x46,0x44,0xe0,0x0d,0x7c,0x8e,0xb2,
    0xbc,0x1f,0x1f,0xa1,0x7b,0xc9,0x7a,0x72,0x04,0x4f,0x71,0x5d,0x47,0xcb,0xcb,0x76,
    0xee,0x4d,0xb5,0x69,0x8b,0xe8,0x03,0xba,0xb6,0x6a,0xaf,0x39,0x5b,0xc3,0xb1,0xdf,
    0x0b,0x58,0xcb,0x3a,0x7e,0x2f,0xfa,0xc8,0xe5,0x5a,0x75,0xed,0xe9,0xfa,0x90,0x3e,
    0xdb,0x43,0xe1,0x3b,0xdd,0x8e,0x80,0xf5,0xfb,0x2a,0x2b,0x7c,0x6f,0xf9,0x20,0x00,
    0xaf,0x77,0x7d,0x68,0x67,0xc0,0xf8,0x1f,0xf0,0xec,0x7c,0x44,0x5f,0x1f,0x16,0xc9,
    0x1f,0xb9,0x78,0xb7,0x47,0xf0,0xda,0xd9,0xbf,0xd4,0xd6,0x72,0xf5,0x71,0x51,0xbc,
    0x9d,0x2e,0x5e,0xd5,0x75,0xa4,0xeb,0x73,0xfa,0xec,0x70,0xf1,0xee,0x72,0xf1,0xce,
    0x23,0xf6,0x59,0x00,0xee,0xe3,0xfd,0x1f,0xe3,0xfd,0x8c,0xf1,0x75,0xd2,0xd7,0xe7,
    0x45,0x72,0xa7,0x8b,0xf7,0xbd,0x08,0x5e,0x07,0xe3,0x55,0xdb,0xc7,0x19,0xef,0xee,
    0xa2,0x78,0xb3,0x58,0x88,0x57,0x75,0x5f,0x6a,0x1d,0x88,0xf0,0xa9,0xbf,0x6d,0x9f,
    0xec,0x65,0x1c,0x55,0x2e,0xb6,0xae,0x00,0x7c,0xa2,0xeb,0xe9,0x5f,0x07,0xe4,0xab,
    0xcb,0x71,0xbf,0x25,0x57,0xff,0x97,0x60,0xb5,0xfd,0xbb,0x00,0xbc,0xc1,0x71,0xf5,
    0x83,0xb7,0xc6,0xfe,0x1d,0xe7,0x66,0x71,0xe8,0xdd,0xe6,0xb6,0x83,0x36,0xf9,0x3c,
    0x47,0xc4,0x6b,0xba,0xf7,0x23,0xc6,0x56,0xdd,0xd7,0x9c,0xcb,0x55,0x19,0x74,0xc1,
    0x9d,0x6f,0xb5,0xd3,0x1c,0x9b,0xae,0xc4,0xe9,0x76,0x50,0x67,0xef,0x6f,0x65,0x3c,
    0xc3,0xcb,0xb3,0x02,0xd6,0x9b,0x67,0x5a,0xb1,0x8d,0xc4,0xfa,0x44,0xe0,0xd5,0x9c,
    0x8f,0x62,0x7d,0x23,0xf8,0xaa,0xb3,0xf3,0xd2,0x2f,0x02,0xb7,0x39,0xf7,0x8f,0xc0,
    0x34,0x3e,0x7b,0x06,0x1a,0x10,0x81,0x6b,0x5c,0x17,0x24,0x4f,0xfa,0x1c,0x98,0x09,
    0xfe,0x57,0xa0,0xba,0xc8,0xff,0xb1,0xf0,0xf5,0x24,0xbf,0x8e,0xa5,0xd2,0xfd,0x39,
    0xbe,0x44,0xff,0x57,0xc2,0xf7,0xa7,0x12,0x29,0xd4,0xc5,0xbe,0x82,0xba,0x98,0xb9,
    0xba,0xb8,0xd0,0xcd,0xbf,0xaf,0x74,0xaf,0x8b,0x4d,0x3d,0xe8,0xac,0x2e,0x9e,0x13,
    0xc1,0x6d,0x62,0x5d,0x1c,0xe7,0xf6,0x92,0xea,0xc6,0xea,0x9c,0xb8,0x86,0x63,0x5d,
    0xcd,0x5b,0x4a,0xce,0x42,0x57,0xf3,0x96,0x45,0xe0,0xfb,0xfb,0x71,0xc4,0x78,0xde,
    0x66,0x79,0x04,0x6e,0x75,0xf1,0xae,0x08,0x6c,0x99,0xab,0x8b,0x77,0x47,0xe0,0xbe,
    0x2e,0xfe,0x3e,0x02,0xf7,0x75,0xf1,0x9e,0x08,0xdc,0xea,0xe2,0xbd,0x11,0x98,0xed,
    0xd9,0xfb,0x22,0x30,0x5f,0x17,0xef,0x67,0x5d,0xbc,0xcf,0xd5,0xc5,0x95,0x11,0x78,
    0x71,0x5d,0x7c,0x20,0x42,0x67,0x75,0xf1,0xc1,0x08,0xde,0x03,0xac,0x8b,0x96,0x97,
    0x71,0x6e,0x6f,0x77,0xb2,0x2e,0xea,0x7a,0x3d,0xc8,0xfc,0x69,0x5e,0x2f,0x8d,0xdd,
    0x6b,0x60,0x4d,0x92,0x6b,0xc9,0xd7,0xdf,0x56,0x53,0x2e,0x8a,0xdf,0xaf,0x81,0x17,
    0x47,0xe0,0xbe,0xa6,0x5c,0x12,0x31,0xd6,0xc5,0x8c,0xe5,0x52,0xfa,0xaa,0x2d,0x92,
    0x2f,0x75,0xb1,0x7d,0x11,0xc1,0xab,0x61,0x8c,0xb5,0x8c,0xad,0x2e,0x76,0xaf,0x77,
    0x13,0x92,0x3c,0x89,0xfc,0x09,0x2e,0xb6,0x2b,0xe2,0xf7,0xeb,0xdd,0x95,0x11,0xb8,
    0x8f,0x6d,0x22,0x63,0xbb,0x92,0xb1,0xd4,0xd1,0xd7,0xa4,0x22,0xb9,0xce,0xc5,0xb6,
    0x3b,0x82,0x37,0x81,0xb1,0x4d,0x62,0x6c,0x33,0x8b,0x6a,0xdb,0xe4,0x24,0xcf,0x24,
    0x7f,0xb2,0x5b,0xeb,0xab,0x39,0xa6,0xaf,0x6d,0x53,0x22,0x70,0x5f,0xdb,0xa6,0x45,
    0xe4,0x61,0x8a,0xe3,0x5e,0x4b,0xae,0xaf,0x6d,0xd3,0x23,0x70,0x5f,0xdb,0x66,0x44,
    0xc4,0x39,0x9d,0xf3,0xb0,0x38,0x66,0xba,0x79,0x74,0xd1,0x46,0xe7,0xa6,0xf6,0x93,
    0x9d,0x6e,0x2f,0xc7,0x56,0xdd,0x34,0xea,0xac,0x7e,0xd5,0xbb,0x33,0xba,0xb7,0xa8,
    0xb6,0xcd,0x72,0xba,0xae,0xa2,0xda,0x36,0x9b,0xe7,0xd0,0xd7,0xb6,0x39,0x3c,0x97,
    0xbe,0xb6,0x35,0x44,0xe0,0xbe,0xb6,0x35,0x46,0xf0,0x1b,0x5c,0x6d,0xbb,0x29,0x02,
    0xb7,0x39,0xcf,0x8d,0xc0,0xea,0x5d,0x6d,0x9b,0x1f,0x81,0xcf,0x72,0xb5,0xed,0x00,
    0x41,0x5d,0x9b,0x1f,0x0b,0xff,0x5b,0xb4,0xda,0xa6,0xb9,0xb2,0x3a,0x56,0xca,0xef,
    0x40,0xca,0xe9,0x57,0x82,0x9a,0xa8,0xbd,0x41,0xf9,0x9a,0x47,0xeb,0x71,0x07,0x0a,
    0x9e,0x05,0xed,0xd9,0xbb,0xdc,0xd5,0x46,0xd5,0x1d,0x94,0xae,0x72,0xfa,0x3c,0xc8,
    0x7d,0x1f,0x1e,0xc8,0xef,0xc3,0x4b,0xdc,0x3b,0xd6,0x20,0x01,0xbe,0x90,0x73,0x3a,
    0x58,0x80,0xb5,0xbb,0xf7,0x8f,0x43,0x04,0xb8,0xf9,0x39,0x94,0x7e,0x1a,0x9c,0x9f,
    0xc3,0x04,0xb8,0xf9,0x39,0x5c,0x80,0x79,0x3f,0x83,0x05,0xb8,0xfd,0x7f,0x6d,0x88,
    0xc0,0xf7,0x60,0x7e,0xe3,0x52,0xec,0x08,0xc1,0xff,0x7d,0x86,0xf0,0xbd,0x49,0xff,
    0xcf,0x7d,0x14,0xff,0xc7,0x3d,0x31,0xc9,0xfa,0x5b,0x6d,0x34,0x3f,0x9a,0x3b,0x9b,
    0x67,0xb9,0x74,0xff,0xdf,0x9a,0xde,0xbf,0x4d,0x99,0xae,0x4c,0xd7,0xff,0x01,0xd2,
    0xfc,0xad,0x6f,0xa8,0x27,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = isSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = isSigned != 0 ? - 1023 : 0;
//     int maxValue = isSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = isSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(alphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//     if(isEacRg != 0){
//         result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//     }
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//     if(isEacRg != 0)
//         finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
