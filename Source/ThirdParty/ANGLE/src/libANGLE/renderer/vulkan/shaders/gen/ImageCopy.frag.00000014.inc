// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5b,0x6c,0x55,0x45,
    0x14,0x86,0x67,0xce,0x69,0x4f,0x4b,0xb9,0x58,0xe5,0x22,0x85,0xc6,0xb4,0x72,0x11,
    0xa4,0x16,0x44,0x2c,0x48,0x39,0xb4,0x58,0xa4,0x0d,0x54,0xca,0x25,0x9a,0x20,0x56,
    0x02,0xa2,0x02,0x42,0xd1,0xd6,0x18,0x21,0x82,0x85,0x8a,0xd0,0x10,0x21,0x3c,0xf8,
    0x00,0x2a,0x24,0xbe,0xf0,0x60,0x20,0xa8,0xf0,0x20,0xa0,0x34,0x86,0x80,0x51,0x6a,
    0xa2,0x34,0x51,0x6a,0xe0,0xd1,0x27,0x23,0x91,0x88,0x54,0x8d,0xe8,0xac,0x3d,0xdf,
    0x6a,0x97,0x0d,0x6a,0x93,0xc9,0xde,0xf3,0xcf,0xfa,0xd7,0xe5,0x9f,0x35,0xb3,0xdb,
    0xa6,0x53,0x63,0xf2,0x9c,0xf3,0xae,0xc0,0xe5,0xbb,0x45,0xde,0x25,0x3f,0xb7,0xbb,
    0x94,0x93,0xd7,0x81,0x2e,0x93,0x3c,0x6b,0xeb,0x97,0xd6,0x97,0xb7,0xbc,0xb4,0xba,
    0x7c,0xda,0x83,0x53,0x64,0x7d,0x88,0x4b,0x27,0x76,0xb2,0x76,0x9b,0xcb,0x73,0x39,
    0xe1,0x29,0x63,0xc3,0xca,0xb5,0x4d,0x82,0x8f,0x0f,0xe3,0x4a,0x18,0x85,0xc1,0x4e,
    0xf0,0x3c,0xf1,0x11,0xde,0xc6,0x27,0x3e,0x85,0xe3,0x5c,0x9d,0xcb,0x75,0x65,0x31,
    0x9c,0x1b,0xc3,0x53,0x31,0x0f,0x96,0x6f,0xb0,0x14,0x58,0xa1,0xc1,0xd2,0x60,0xc3,
    0x0c,0x96,0x03,0x36,0xd2,0x60,0xb9,0x60,0xc5,0x06,0xcb,0x80,0x95,0x18,0x2c,0x0f,
    0x6c,0xac,0xc1,0xf2,0xc1,0x26,0x18,0x6c,0x00,0x58,0x99,0xc1,0x0a,0xc0,0xa6,0x18,
    0x6c,0x20,0xd8,0x34,0x83,0x0d,0x02,0x9b,0x61,0xb0,0xc1,0x60,0xb3,0x12,0x9d,0xd2,
    0xbd,0xf5,0x8a,0x66,0xcb,0xc3,0xf3,0x6e,0xf4,0xd1,0x79,0xa9,0x99,0x8b,0xce,0x77,
    0x31,0x1f,0x1a,0x58,0xa9,0x64,0x3d,0x9d,0x68,0x23,0xef,0x23,0xc2,0x5b,0x86,0x3a,
    0x27,0x05,0xfb,0x0c,0xf1,0x7e,0x38,0x3a,0x2e,0x3b,0x2c,0x58,0x0c,0x31,0xb8,0x68,
    0x76,0xb4,0x76,0x65,0x56,0xe7,0xa2,0xd7,0x81,0xfd,0x45,0xd5,0xc3,0xc3,0xbc,0x04,
    0x1f,0xb2,0x37,0x77,0x86,0x79,0x29,0xf3,0x14,0xf3,0xb1,0x68,0x9a,0x93,0xe0,0x39,
    0x6e,0x1c,0xb6,0x82,0x57,0x32,0x1f,0x6f,0xf8,0xf7,0x60,0x2f,0x7c,0xf1,0x3f,0x09,
    0x7f,0x2e,0xa9,0xa7,0x30,0xd1,0xa0,0x94,0x51,0xd2,0x9b,0xff,0x7f,0x8f,0x92,0xde,
    0x67,0x8e,0xbb,0x8f,0x7d,0x2a,0x23,0xbe,0xcc,0xcb,0xc1,0x26,0x51,0xcf,0x64,0xf2,
    0x11,0xfb,0x29,0xac,0x95,0x9a,0xf5,0x0a,0x53,0xcf,0xf4,0x5e,0x6e,0x5c,0x97,0xe7,
    0x4c,0xf2,0x55,0xfb,0x1a,0x7a,0x4d,0xe7,0x0b,0xd1,0x5a,0xea,0x7d,0x9c,0xfc,0xc4,
    0x5f,0x51,0xf0,0xb4,0xcc,0xe8,0xe9,0x6e,0xf1,0x94,0x98,0x4f,0xf0,0xbe,0x8c,0x1a,
    0x64,0xbe,0xbc,0x5f,0xcc,0xc6,0x7e,0xf3,0x55,0x9c,0x0b,0xe1,0x3f,0x4d,0xce,0x25,
    0xe4,0xf0,0x2c,0xef,0x69,0x63,0xbf,0x8e,0x3d,0xd0,0x79,0x13,0xfb,0xa2,0xf3,0xad,
    0x9c,0x0b,0x9d,0x1f,0xa0,0xaf,0x75,0x7e,0x8c,0x33,0xa2,0xf3,0x53,0xfd,0x34,0x3e,
    0x47,0xcf,0x6b,0x4f,0x7d,0x65,0xf2,0x95,0xf9,0xf7,0xc9,0xac,0xb5,0x4a,0xf2,0xbd,
    0x4c,0x6e,0xda,0x33,0x97,0xb9,0x47,0xd2,0xc6,0x7e,0x66,0x10,0x68,0x5b,0x6b,0x6b,
    0x65,0x59,0xc8,0x2a,0xb1,0xf3,0x11,0xb3,0x43,0x6d,0x67,0x85,0xf7,0x8d,0x87,0x9b,
    0xab,0x74,0x9e,0x0d,0xf3,0x7d,0x6d,0x07,0xb3,0x15,0x61,0x97,0x52,0xec,0x85,0xc3,
    0x7f,0x4f,0x40,0x64,0xef,0xb2,0xf4,0xf2,0x04,0xfa,0xb5,0x21,0xc4,0x91,0x5e,0x9d,
    0x08,0x36,0xc1,0xec,0x53,0x13,0xe7,0xe0,0x5e,0xd6,0xe7,0x04,0x0f,0xd2,0x47,0xf7,
    0xd3,0x6b,0x93,0xf1,0x27,0x36,0x53,0xc1,0xb7,0x07,0x1b,0x99,0x3f,0x00,0x6f,0x2a,
    0xbc,0xe9,0xdc,0x09,0xe5,0xf4,0x5d,0x96,0x1e,0x7b,0x08,0xfc,0xfd,0x60,0x33,0x24,
    0xd1,0x25,0x62,0xd2,0x7b,0x37,0x42,0xe6,0x59,0xf2,0xf9,0x3d,0xd8,0x57,0x72,0x87,
    0x64,0xa9,0x47,0xde,0x17,0x07,0x9e,0xec,0x43,0x35,0x31,0x5d,0xb2,0xa7,0x71,0x6f,
    0xe6,0x80,0x2f,0x09,0xea,0x24,0xe7,0xcc,0x47,0x4c,0xed,0x7e,0x0b,0x3e,0xd4,0x97,
    0x3c,0xaf,0x07,0x2d,0xc4,0x6e,0xb6,0x8f,0x36,0xb9,0x70,0x66,0x99,0x1a,0xe6,0x52,
    0x43,0x8d,0xa9,0xe1,0x11,0x70,0xad,0x61,0x1e,0x98,0xd6,0x50,0x67,0x6a,0x98,0x97,
    0xdc,0x6b,0x2e,0xc1,0x24,0x6e,0xad,0xa9,0x61,0x01,0xb1,0xbd,0xa9,0xa1,0x1e,0x5c,
    0x6b,0x18,0xe3,0x23,0xa6,0x76,0x52,0x83,0xfa,0xaa,0x33,0x35,0x54,0xf9,0x68,0x93,
    0x85,0x53,0x6b,0x6a,0x68,0xa0,0x86,0x85,0xa6,0x86,0x45,0xe0,0x5a,0xc3,0x62,0x30,
    0xad,0x61,0xa9,0xa9,0x61,0x71,0x92,0x8f,0x4b,0x30,0x89,0xbb,0x84,0x3e,0x92,0xb8,
    0x8f,0x11,0xbb,0xca,0xf7,0x9d,0x75,0xc9,0x51,0x6d,0x97,0x9a,0x1c,0xab,0xb1,0xab,
    0x83,0xb7,0x84,0x7c,0xe4,0x3e,0x78,0x92,0xbb,0x40,0x7b,0xee,0x29,0x72,0x6e,0x34,
    0x3d,0xb7,0x02,0xbc,0x95,0x9e,0x5b,0x09,0x56,0xed,0x23,0x4f,0xee,0x87,0xd5,0xf0,
    0x56,0xc1,0x13,0x4d,0x9f,0x01,0x57,0xdd,0x9f,0x83,0xeb,0x0c,0xb6,0x06,0xcc,0x27,
    0x3a,0x64,0x92,0xbb,0x65,0x2d,0xb6,0x6b,0xf0,0xa1,0x31,0x9e,0x27,0xc6,0x3a,0x13,
    0x63,0x3d,0xf8,0x8a,0x50,0xab,0xdc,0x8d,0x1b,0xa8,0x69,0x2d,0xf7,0xd1,0x7a,0xb3,
    0x1f,0x1b,0xe1,0x37,0x99,0xfd,0x78,0x01,0x5c,0xf7,0xe3,0x45,0x30,0xdd,0x8f,0x16,
    0xb3,0x1f,0xb2,0xd6,0x1c,0xc6,0x16,0x34,0xde,0x62,0x7c,0xbf,0x86,0xef,0xad,0xc6,
    0x77,0x2b,0xb8,0xfa,0xde,0x06,0xa6,0xbe,0xdb,0x8c,0xef,0x6d,0xc9,0x99,0x76,0x09,
    0x26,0xbe,0xb7,0x1b,0x8d,0x76,0x50,0x97,0xdc,0x2f,0x47,0xf0,0xf5,0x06,0x78,0x23,
    0xfb,0xae,0xbc,0x36,0xf6,0x5d,0x6c,0x76,0x12,0x73,0x0b,0xf6,0xdb,0x89,0xdb,0x6e,
    0xe2,0x8a,0xcd,0xae,0x30,0xda,0xe1,0xef,0x32,0x71,0x77,0x9b,0xb8,0x0d,0xe1,0x76,
    0x96,0xbd,0x79,0x13,0x6c,0x83,0xb9,0xbf,0x52,0x66,0xef,0xf6,0xc0,0xd3,0xb1,0x33,
    0xf8,0x12,0x7c,0x2f,0xdc,0x3d,0x89,0xaf,0x01,0xc9,0x5e,0xed,0xc3,0xcf,0x5e,0xee,
    0xd0,0x5c,0xbe,0x19,0x69,0x6a,0xd2,0x9c,0xda,0xa9,0x49,0x38,0x35,0x3e,0x72,0xda,
    0xe0,0xef,0xc2,0xb6,0x05,0xdb,0x66,0x93,0xff,0xcb,0xb7,0xc8,0xff,0x95,0xff,0xc9,
    0x7f,0x13,0x3c,0x1d,0xaf,0x93,0xff,0x66,0xb8,0x9b,0x4c,0xfe,0xaf,0xe2,0x67,0xf3,
    0xbf,0xe4,0xaf,0x39,0xb5,0x98,0xfc,0x1f,0xf6,0xb1,0x86,0x76,0xf8,0xcd,0x49,0xff,
    0xc5,0x6f,0xc5,0x5b,0xac,0xef,0x08,0x9e,0x64,0xbe,0x1f,0xac,0xd2,0xf7,0xf5,0xd9,
    0xdb,0xf4,0xd9,0x01,0xd3,0x67,0xef,0x80,0x6b,0x9f,0xbd,0x0b,0xa6,0x7d,0x76,0xc8,
    0xec,0xb7,0xac,0x1d,0x0c,0xe3,0x10,0xb9,0x1d,0x44,0x2f,0xc9,0xfb,0x3d,0x62,0x3a,
    0x78,0x3d,0xbc,0xff,0x11,0xde,0xc5,0xd7,0x8f,0x70,0xe4,0x79,0x9a,0x58,0x3f,0xc1,
    0x1b,0x0c,0xe7,0x86,0x89,0x25,0x6b,0x57,0xc3,0xb8,0x06,0xef,0x5a,0xd2,0x8f,0x31,
    0xd6,0x2f,0xf0,0x46,0xba,0x58,0x6f,0x26,0xd1,0x28,0xe2,0xf2,0xbd,0x1d,0x14,0xf4,
    0x12,0xec,0x57,0xf6,0x68,0x14,0xeb,0xc5,0x68,0xdb,0x83,0xcf,0xab,0x86,0xff,0x33,
    0x3e,0xe5,0xfb,0x6c,0x6d,0x24,0xa7,0xbf,0x82,0x97,0x1e,0xb0,0xeb,0xf8,0x9e,0xeb,
    0xa3,0xff,0x6b,0x70,0xaf,0x72,0xff,0x8b,0xf6,0x13,0x7d,0x5c,0xdf,0x6f,0xee,0x2b,
    0xe1,0x1c,0x46,0x23,0x4f,0xbd,0x05,0xfe,0x9f,0x1a,0xdd,0x24,0xe6,0x4d,0xa3,0x91,
    0x18,0x1f,0x36,0x1a,0x0d,0xf0,0x7d,0x1a,0xc9,0x9a,0x0f,0x23,0xc7,0x47,0x9e,0x3c,
    0x55,0xa3,0x0c,0x3c,0xab,0x51,0x9e,0x8f,0xb8,0xd5,0x28,0xdf,0xf7,0x69,0x24,0xeb,
    0xaa,0x51,0x01,0x3e,0xbd,0xef,0xe3,0xa7,0xf1,0xa9,0x1a,0xa9,0x8d,0xe4,0xa4,0x1a,
    0x09,0xa6,0x1a,0xcd,0xf3,0xd1,0xbf,0xe4,0x95,0x26,0x57,0xd5,0xa8,0xcc,0xc7,0xf5,
    0x89,0xc4,0x57,0x8d,0x8e,0xa0,0x51,0x8a,0x7a,0x8b,0xfb,0x69,0x54,0x48,0x4c,0x79,
    0xaa,0x46,0x77,0xf8,0xc8,0x53,0x8d,0x46,0x1b,0x8d,0x64,0x6d,0x68,0x18,0x23,0xe0,
    0x8d,0x30,0x1a,0x8d,0x84,0x67,0x35,0x2a,0xf2,0x11,0xb7,0x1a,0x8d,0x32,0x1a,0x15,
    0x19,0x8d,0x8a,0xf1,0x39,0xd4,0x68,0x34,0x1c,0x9f,0xaa,0x91,0xda,0x8c,0x36,0x1a,
    0x15,0x1b,0x8d,0xea,0x7c,0xf4,0x2f,0x79,0x0d,0x27,0x57,0xd5,0x68,0xb2,0x8f,0xeb,
    0xa2,0x55,0x8a,0x98,0x7a,0xf6,0x0e,0xd1,0x8b,0x62,0x37,0x9f,0x5e,0x6b,0x81,0x53,
    0x6c,0xce,0xfc,0x07,0x9c,0xf9,0x63,0xe6,0xcc,0x7f,0x08,0xae,0x67,0xfe,0x23,0x30,
    0x3d,0xf3,0x27,0xcc,0x39,0x94,0xb5,0xe3,0x61,0x9c,0x24,0xee,0x49,0xf3,0xdd,0x3a,
    0x8d,0xef,0x53,0xc6,0xf7,0x27,0xe0,0xea,0xfb,0x53,0x30,0xf5,0xdd,0x61,0x7c,0xcb,
    0xda,0x99,0x30,0xce,0xe2,0xfb,0xac,0xf9,0x5e,0x9f,0xc7,0xf7,0x39,0xf3,0xbd,0xfe,
    0x1c,0xfc,0x3c,0x77,0xf4,0x17,0x60,0xeb,0x4c,0xbc,0x2f,0xc1,0x1b,0x89,0xd7,0x69,
    0xe2,0xc9,0xda,0x85,0x30,0x3a,0x89,0x77,0xc1,0x9c,0xd9,0x69,0x3e,0xfe,0x5d,0x30,
    0xdf,0xfc,0xce,0xa6,0x76,0x9d,0x46,0xeb,0x05,0x3e,0xda,0x9c,0x85,0x73,0xc1,0xe4,
    0xf3,0x35,0xf9,0x54,0x98,0x7c,0xbe,0x01,0xd7,0x7c,0xba,0x4c,0x3e,0xb2,0x76,0x31,
    0x8c,0x2e,0xe2,0x5c,0x34,0xf9,0x54,0x90,0xcf,0x02,0xb3,0xf7,0x6a,0xd7,0x65,0xf2,
    0xa9,0xf7,0xd1,0xa6,0x13,0xce,0x45,0x93,0xcf,0xb7,0xe4,0x73,0xcc,0xe4,0xf3,0x1d,
    0xb8,0xe6,0xd3,0x6d,0xf2,0x91,0xb5,0x4b,0x61,0x74,0x13,0xe7,0x92,0xc9,0x67,0x86,
    0x8f,0x7f,0x27,0x49,0x3c,0xfd,0x46,0xa9,0x5d,0xb7,0xc9,0xa7,0xc1,0x47,0x9b,0x2e,
    0x38,0x97,0xb0,0xed,0xc0,0xf6,0x8c,0x39,0xeb,0x9f,0xa1,0x77,0xda,0xc4,0x99,0xea,
    0xfb,0x70,0xd7,0x8f,0xdb,0x61,0xe2,0x2c,0xf4,0x31,0x56,0x37,0x9c,0x33,0xd8,0x9e,
    0xc0,0xf6,0x38,0xdf,0x5a,0xb1,0xfd,0x18,0x7f,0x32,0xf4,0x7f,0x41,0x29,0xf3,0xad,
    0x55,0xce,0x09,0xe3,0xff,0x51,0x1f,0x63,0x74,0xc0,0x17,0x7f,0xb3,0x03,0xe3,0x0a,
    0x6b,0x7f,0x86,0x2e,0x99,0x11,0xc6,0xdf,0x4e,0x82,0xe5,0xaf,0xbc,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
