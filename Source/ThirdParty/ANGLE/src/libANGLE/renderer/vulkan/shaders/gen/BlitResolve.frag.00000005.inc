// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x95,0x5f,0x68,0xd6,0x65,
    0x14,0xc7,0x9f,0xdf,0xfb,0x77,0xeb,0x5d,0xeb,0x15,0xdd,0x56,0xf6,0xee,0x5f,0xca,
    0x10,0x26,0xba,0x0b,0x8b,0x46,0x14,0x05,0x42,0x5d,0x08,0xfe,0x09,0xda,0x2e,0x76,
    0xf3,0x42,0x5e,0x34,0x28,0x61,0x89,0x37,0xbb,0x30,0x68,0x81,0x37,0xbb,0xd8,0xcd,
    0x6e,0xd6,0xb2,0x59,0x64,0xf6,0x4f,0xbb,0x8b,0x52,0x29,0x49,0x1d,0xc5,0xac,0x51,
    0x2c,0x1d,0x0d,0xfa,0xc7,0x40,0x65,0xa0,0x32,0x71,0x2a,0x6a,0xe7,0x3c,0xbf,0xcf,
    0xd1,0xc3,0xab,0x70,0x7c,0x7e,0xe7,0xfb,0x3d,0xe7,0x7c,0x9f,0xf3,0x3c,0xe7,0x79,
    0x97,0xcd,0xac,0x2b,0x86,0x90,0x84,0x47,0x42,0x5d,0xe8,0x4c,0x42,0xfc,0xb7,0x2a,
    0x64,0x82,0x7e,0x96,0x42,0x21,0xae,0x2f,0x6f,0x7b,0x75,0xdb,0xa6,0xb7,0xf7,0xbe,
    0xbe,0x69,0xcb,0xd3,0x3d,0xca,0x37,0x86,0x6c,0x8c,0x53,0xee,0x31,0xf1,0x72,0xb2,
    0xaa,0xbd,0x59,0x7d,0xe3,0x2d,0xc5,0x9b,0xc5,0xfa,0xc5,0xaa,0x62,0x83,0x62,0x43,
    0x62,0xc3,0x62,0x23,0x62,0xa3,0x62,0xe3,0x62,0x65,0xa9,0xa1,0x39,0x45,0xad,0x2f,
    0x5f,0xcd,0x51,0x4f,0xeb,0x85,0xf0,0x4a,0xc8,0x87,0xd6,0x74,0x2b,0x61,0x1d,0xab,
    0x61,0x09,0x58,0x9d,0xc3,0x32,0x60,0x65,0x87,0x65,0xc1,0x1e,0x77,0x58,0x0e,0xac,
    0xe2,0xb0,0x3c,0x58,0x87,0xc3,0x0a,0x60,0xeb,0x1d,0x56,0x04,0xdb,0xe0,0xb0,0x3a,
    0xb0,0x8d,0x0e,0xab,0x07,0xeb,0x89,0x7d,0x65,0xef,0xef,0x4f,0x7b,0xd4,0x33,0x69,
    0xa3,0x1f,0xf5,0xab,0xf8,0x09,0xfe,0x20,0xbe,0xc5,0x0f,0xe1,0x67,0xf1,0x87,0xf1,
    0x73,0xf8,0x23,0xf8,0x79,0xfc,0x51,0xfc,0x02,0xfe,0x38,0xbe,0x9d,0xf1,0xa4,0xac,
    0x4f,0x39,0x7d,0xf5,0x3b,0x9d,0x3f,0x55,0xc3,0x4f,0xc1,0xeb,0x7e,0x56,0xcb,0xff,
    0x99,0xe8,0x67,0xe3,0x7e,0x32,0xf1,0x9e,0xb3,0x51,0x4b,0xcf,0xae,0x45,0xe2,0x8b,
    0x68,0x2b,0xd7,0x24,0x7e,0x09,0x2e,0x81,0x6f,0xe0,0x8e,0x73,0xf8,0x6b,0x88,0xcf,
    0xc5,0xb8,0x9c,0xe4,0xa4,0xb1,0x8a,0x3f,0x87,0xdf,0x0c,0xa6,0xf5,0x2a,0xd4,0x0b,
    0xb1,0xaf,0x86,0xfb,0xf7,0x62,0x56,0xc2,0x0a,0xac,0x15,0x67,0x5a,0xbf,0x8d,0xfb,
    0x69,0xa5,0xbe,0xfa,0xed,0x60,0xdd,0x35,0xfb,0xd5,0xf8,0x4e,0xb8,0xa2,0xe3,0xbb,
    0xd0,0x37,0xbf,0x1b,0x5e,0xe3,0x37,0x12,0x5f,0x89,0x3d,0x64,0xc2,0x66,0xe2,0x2a,
    0xcc,0x83,0xcf,0xeb,0x65,0x7e,0xcc,0xdf,0x5a,0xb3,0x8f,0xed,0xf4,0xa1,0x75,0x77,
    0xc0,0x95,0xf0,0xfb,0x98,0x89,0x06,0xfa,0xe8,0xe3,0xbd,0x65,0x5d,0xfe,0x00,0xf7,
    0x60,0x7c,0xb5,0x86,0xdf,0xcd,0xb9,0x1b,0x3f,0x08,0x6f,0xfe,0x50,0x4d,0xfc,0x3e,
    0xde,0x97,0xf1,0xc3,0x35,0xfc,0x7e,0xce,0xce,0xf8,0x91,0x1a,0xfe,0x80,0xd8,0x8b,
    0x8e,0x1f,0xad,0xe1,0xc7,0xc4,0xde,0x71,0xfc,0x38,0xfc,0x13,0xd2,0xf9,0x04,0xbd,
    0xf3,0xf3,0xf4,0xd0,0xaa,0x67,0xf2,0x3e,0xdf,0x13,0xd4,0x50,0x7f,0x12,0x6c,0xad,
    0x9c,0xc4,0x41,0xe2,0x3e,0x04,0x3b,0x48,0x9c,0xfa,0x53,0x60,0x4f,0x8a,0xe2,0x47,
    0xd4,0xb0,0x7d,0x1d,0x61,0x1f,0x3a,0xaf,0x5f,0x72,0x27,0xea,0x3f,0x23,0xaf,0x2e,
    0xc3,0x19,0x06,0xb0,0x15,0x41,0xf4,0x2d,0x3e,0xcf,0x6c,0x7f,0xc3,0xfc,0xee,0x14,
    0x54,0xf3,0xbe,0x05,0x0b,0x0e,0xfb,0x0e,0x4c,0x7b,0xd9,0x21,0x98,0xce,0xd2,0x71,
    0x62,0x95,0x7b,0x49,0x30,0x9d,0xc3,0x13,0xcc,0x6a,0x07,0xf5,0x35,0xee,0x24,0xf8,
    0x7b,0xe4,0x7d,0x4f,0xee,0x49,0x97,0xf7,0x03,0x79,0x5d,0x2e,0xef,0x14,0xf8,0xbb,
    0xe4,0xfd,0x48,0xee,0x29,0xf2,0x74,0x8e,0x4f,0x93,0xd7,0x4d,0x9e,0xce,0xf0,0x19,
    0xf0,0xcf,0x25,0x46,0x67,0xfb,0x2c,0x98,0xce,0xf6,0x0d,0x39,0x81,0x19,0x7a,0xbb,
    0x25,0xf1,0xca,0x4d,0x8b,0xcd,0x70,0x2e,0xd3,0xae,0xe7,0x9f,0xd0,0x0c,0x71,0x6e,
    0x72,0x11,0xfb,0x19,0x7c,0x97,0x78,0xba,0xa7,0xb5,0x49,0x8a,0x59,0xdc,0x4d,0xa9,
    0x61,0xb5,0x74,0xbd,0x2e,0x51,0x1a,0xd7,0x96,0xa4,0x31,0x79,0x72,0xa6,0x5d,0x0f,
    0xe7,0xe8,0xa1,0xd7,0xf5,0xf0,0x0b,0xb8,0xf5,0xf0,0x2b,0x98,0xf5,0x30,0xe7,0x7a,
    0x50,0x6e,0x56,0x6c,0x0e,0xdd,0x59,0xd7,0xc3,0x6f,0x68,0x27,0xae,0x87,0xdf,0xc1,
    0xad,0x87,0xd6,0x24,0xc5,0x2c,0x4e,0x7b,0xb0,0x5a,0x73,0xae,0x87,0xf6,0x24,0x8d,
    0x99,0x21,0x67,0xd6,0xf5,0xf0,0x07,0x3d,0x6c,0x75,0x3d,0x9c,0x07,0xb7,0x1e,0x2e,
    0x80,0x59,0x0f,0x0b,0xae,0x07,0xe5,0xe6,0xc5,0x16,0xd0,0x9d,0x8f,0xbf,0x2d,0xa9,
    0xee,0x9f,0x68,0xb7,0x27,0x0f,0xde,0x92,0xee,0xd1,0x62,0x17,0xdc,0x1e,0x3b,0x88,
    0x9b,0x23,0x6f,0x9e,0xfd,0xe8,0x5b,0xf9,0x80,0xb7,0xa6,0xbe,0xbe,0xab,0x43,0xbc,
    0xa9,0xd7,0x64,0x7f,0xfa,0x9e,0x3e,0x26,0xe6,0x90,0x9b,0xcb,0x4f,0xe8,0x6b,0xc0,
    0xcd,0xe5,0x61,0x70,0x9b,0xe7,0x4f,0xd1,0x3d,0x4c,0x9e,0xfe,0x0e,0x7e,0x46,0xde,
    0x11,0xf2,0x4a,0xf1,0x1c,0x52,0x7c,0x0f,0xf7,0xf0,0x05,0x98,0xdd,0xd5,0x57,0xd4,
    0xf2,0xef,0xee,0x28,0x58,0xfa,0xee,0x0a,0xf1,0x6d,0x1f,0x23,0xf6,0x28,0x35,0xfa,
    0x24,0x56,0x7f,0x63,0xbf,0xa6,0x87,0x63,0x6e,0x1f,0x7f,0xb1,0x8f,0xed,0x6e,0x1f,
    0x7f,0x83,0x9f,0x95,0x18,0xf5,0xff,0x01,0xeb,0x70,0x77,0xf5,0x2f,0x78,0x17,0x77,
    0xb5,0xe8,0xee,0x4a,0xb9,0xff,0xc4,0x16,0x39,0x7f,0xfd,0x7e,0x41,0x62,0xfa,0xd9,
    0x83,0xde,0x8d,0x71,0x8b,0x4e,0xe7,0x22,0x3a,0x03,0x4e,0xe7,0x12,0xb8,0xe9,0x2c,
    0x39,0x1d,0xe5,0x2e,0x8b,0x2d,0x51,0xeb,0x32,0x3a,0x55,0xa7,0x63,0xdc,0x92,0xd3,
    0xb9,0x82,0xce,0x6e,0xa7,0x73,0x15,0xdc,0x74,0x96,0x9d,0x8e,0x72,0xd7,0xc4,0x96,
    0xa9,0x75,0x0d,0x9d,0x41,0xa7,0x63,0xdc,0xb2,0xd3,0xb9,0x81,0x4e,0xaf,0xd3,0x59,
    0x01,0x37,0x9d,0xdb,0x4e,0x67,0x25,0xd6,0x0a,0x11,0xd3,0x5a,0x37,0xd1,0x19,0x72,
    0x3a,0xc6,0xdd,0x76,0x3a,0x77,0xd1,0xd9,0xe7,0x74,0xee,0x81,0x9b,0x4e,0x26,0x79,
    0xa0,0x73,0x8f,0x3f,0x3a,0x8a,0x69,0x2d,0xfd,0x56,0x9d,0x61,0xa7,0x63,0x9c,0xae,
    0xa6,0x93,0x4f,0x52,0x9d,0xfd,0x4e,0xa7,0x90,0xa4,0xb8,0xe9,0xd4,0x3b,0x1d,0xe5,
    0x8a,0x62,0xf5,0xd4,0x2a,0xa2,0x33,0xe2,0x74,0x8c,0xab,0x77,0x3a,0x0d,0xe8,0x1c,
    0x70,0x3a,0x8f,0x26,0x29,0x6e,0x3a,0x65,0xa7,0xa3,0x5c,0xa3,0x58,0x99,0x5a,0x8d,
    0xe8,0x8c,0x3a,0x1d,0xe3,0xca,0x4e,0x67,0x35,0x3a,0x63,0x4e,0x67,0x4d,0x92,0xe2,
    0xa6,0xd3,0xe2,0x74,0x94,0x6b,0x12,0x6b,0xa1,0x56,0x13,0x3a,0xe3,0x4e,0xc7,0x38,
    0x5d,0xef,0xc8,0xc1,0x3e,0x2b,0xf6,0x3f,0x63,0xd5,0xbd,0xf8,0x9c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = texture(isampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     broadcastColor(colorValue);
//
// }
