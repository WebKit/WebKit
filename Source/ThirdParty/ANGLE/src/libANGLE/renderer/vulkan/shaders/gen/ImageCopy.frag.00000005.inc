// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0xd5,0x45,
    0x14,0xc7,0x7f,0xdc,0x0b,0x5c,0x04,0x11,0x04,0x94,0x50,0xb1,0x7c,0xd0,0x43,0x0c,
    0xb1,0xc0,0x48,0x40,0x25,0x23,0x91,0x30,0x32,0xb0,0x32,0x4d,0xb4,0xb0,0x52,0x92,
    0x34,0x28,0x33,0x4a,0x91,0x7c,0x94,0x94,0x8f,0x5e,0x62,0x25,0x5a,0x89,0x5a,0x4d,
    0x7f,0x47,0x7f,0x51,0xd3,0x63,0xa6,0x99,0xf6,0xec,0xfd,0x1c,0xe6,0xdb,0x1d,0x2b,
    0x66,0x76,0xee,0xdd,0xcf,0x39,0x7b,0xf6,0x7b,0xce,0x9e,0xdd,0x4b,0x3a,0xb5,0x22,
    0x93,0x24,0x79,0x49,0x71,0x52,0x94,0xfc,0x98,0x64,0xff,0xe6,0x27,0xa9,0x40,0x92,
    0xa4,0x24,0x29,0x8c,0x9f,0x5b,0x7a,0xfa,0x7a,0x1a,0x46,0x46,0x07,0x1b,0x9a,0x9a,
    0x1b,0xcd,0x3e,0x2f,0x49,0x47,0x3f,0xb3,0x95,0x25,0x99,0x24,0x3f,0x7c,0xda,0x38,
    0xb4,0xef,0xc0,0xb0,0xf1,0xd2,0x30,0x6e,0x87,0x51,0x1e,0xfc,0x8c,0x67,0x2c,0x46,
    0xf8,0x56,0x1a,0x63,0xda,0x9a,0x24,0xe9,0x4a,0x0a,0x92,0x4a,0xf6,0x5b,0xc1,0xa7,
    0xb3,0x3c,0x58,0x91,0xb0,0x14,0xac,0x5c,0x58,0x1a,0x56,0x25,0x2c,0x1f,0x76,0x97,
    0xb0,0x02,0xd8,0x12,0x61,0x85,0xb0,0x7b,0x84,0x65,0x60,0x2b,0x85,0x15,0xc1,0xee,
    0x17,0x36,0x07,0xb6,0x5a,0x58,0x31,0xac,0x51,0x58,0x09,0xac,0x49,0xd8,0x5c,0x58,
    0x8b,0xb0,0x52,0x58,0x5b,0xac,0x53,0x7a,0x36,0x5f,0xab,0xd9,0xe6,0xf0,0xb9,0x9c,
    0xfa,0xf8,0x7c,0x99,0xcc,0xad,0xce,0x4b,0x99,0x57,0x86,0x55,0xa9,0x68,0x4f,0xc7,
    0xda,0xd8,0xf7,0x05,0xc1,0xa7,0x90,0x3c,0xad,0xae,0xd5,0x61,0x9e,0x21,0xff,0x54,
    0xe4,0xf9,0x31,0xc7,0x0c,0x63,0x61,0x58,0x59,0x8c,0xbf,0xf9,0x96,0x90,0x5b,0x3e,
    0xbe,0x73,0x89,0x63,0xbc,0x95,0x79,0xa9,0xc4,0x9e,0x87,0xbf,0xef,0x5d,0x41,0xac,
    0x24,0xea,0x2c,0x9f,0xad,0xb3,0x6b,0xb0,0x51,0xf1,0x3f,0xc3,0x7d,0x6c,0xff,0x2a,
    0xea,0x5f,0xc9,0xfe,0x55,0x71,0x9f,0x2c,0xab,0x27,0xd7,0x85,0xe8,0x31,0xff,0x6a,
    0x6c,0x19,0xb1,0xd7,0x4a,0x3e,0x4b,0xb1,0x57,0xc4,0x3e,0x4a,0xc5,0xda,0xd6,0xa3,
    0xdb,0xeb,0x6e,0x7e,0xf7,0x8a,0x66,0x8f,0x53,0x4f,0x6f,0xb9,0xff,0x5a,0xf6,0x75,
    0xfb,0x3a,0x6a,0x63,0x75,0xd9,0xc0,0x5a,0xdf,0x77,0x23,0xf1,0x8c,0xd7,0x04,0x05,
    0x1d,0xd8,0xf3,0x92,0x7f,0xfe,0xe5,0x89,0x86,0xc7,0xf8,0xde,0x41,0xee,0x36,0xdf,
    0x0c,0xf3,0x3d,0x3b,0x73,0xe6,0xdd,0x72,0xce,0x4f,0x92,0xab,0xe6,0xd0,0x2b,0x73,
    0xcb,0x61,0x07,0xf7,0xca,0x34,0x3f,0x8f,0x2d,0x2d,0xfe,0x7b,0x73,0x6a,0x39,0xc6,
    0x1d,0xf1,0xf9,0x99,0x9c,0xb3,0xb8,0x44,0xcf,0x7b,0xfc,0x6b,0xa2,0xe7,0x16,0xb1,
    0x37,0x90,0xcf,0x2d,0xde,0x8d,0x74,0xac,0x5d,0x41,0xf4,0xcb,0x27,0x1f,0x63,0xbf,
    0x07,0x52,0x80,0x6f,0x91,0x9c,0xab,0xcf,0x17,0xcb,0xdc,0xea,0xbb,0x29,0x67,0x3e,
    0x2a,0x73,0x3b,0xcf,0x8b,0xcc,0xdb,0xe9,0xf3,0x32,0xce,0xab,0x37,0xd0,0x79,0xbc,
    0x35,0x65,0x0c,0x3f,0x8b,0x61,0xee,0xcf,0x7c,0xec,0x1d,0x41,0x51,0x35,0xef,0xcd,
    0x02,0x7a,0xaf,0x1d,0x9f,0x1a,0xf8,0x44,0xf0,0xb1,0xf9,0x22,0xd6,0xd5,0xc4,0x9c,
    0xd3,0x51,0xff,0x22,0xf1,0x5f,0x42,0x4e,0x66,0x5b,0xcc,0xdc,0xe2,0x5b,0x8f,0xde,
    0x4d,0xfc,0x5a,0xfc,0xfd,0x5e,0x19,0xff,0x29,0xf8,0x2c,0x93,0xf7,0xcc,0xfa,0xf6,
    0xb7,0x10,0xa3,0x0e,0xdd,0x7f,0x06,0x7f,0x7f,0xd7,0xea,0xa8,0xe3,0x4a,0x62,0x5b,
    0x1d,0xee,0xa3,0x76,0xcb,0x89,0x5d,0xc8,0x7b,0x67,0xfc,0x38,0xf3,0x07,0x60,0xbe,
    0x66,0x95,0xac,0x31,0xbd,0xab,0xf0,0xf9,0x23,0xc4,0xf6,0x3d,0xea,0x44,0xff,0x6a,
    0xf4,0xd7,0x8b,0xfe,0x07,0xe1,0xae,0xbf,0x01,0xe6,0xfa,0x1b,0x45,0xbf,0xd9,0xd6,
    0xf0,0xbe,0x5a,0xec,0x35,0xa2,0xe5,0x21,0xb4,0xac,0x15,0xfd,0x0f,0xc3,0x5d,0x7f,
    0x13,0xcc,0xd7,0x34,0xcb,0x1a,0xd3,0xdf,0x8c,0x8f,0xe9,0xf7,0x3d,0x1a,0x45,0xff,
    0x23,0xe8,0x5f,0x27,0xfa,0x5b,0xe0,0xae,0xff,0x51,0x98,0xeb,0x6f,0x15,0xfd,0x66,
    0x5b,0x1f,0x7b,0x2f,0x1b,0x7b,0xbd,0x9c,0x7b,0x1b,0x5a,0xac,0xef,0xb2,0xfd,0x98,
    0x65,0x6d,0x72,0xff,0xbd,0x27,0xda,0xd1,0xe8,0x71,0x5a,0x89,0x63,0x6f,0xc2,0xe3,
    0xbc,0x07,0xde,0x93,0x4f,0xa0,0xb9,0x53,0xf6,0xda,0x02,0xf7,0x79,0x17,0x7b,0x8f,
    0xd3,0xa3,0x5b,0xf1,0xe9,0x22,0x8e,0xbd,0x19,0x3d,0xc4,0xe9,0x96,0xfa,0x6e,0x83,
    0x0f,0x84,0x55,0x76,0x7f,0x9f,0x62,0xff,0xad,0xdc,0xef,0x6d,0x68,0xde,0x84,0xcd,
    0xeb,0xf8,0x34,0xb1,0x7a,0xa5,0x8e,0xdb,0xe1,0x5e,0xc7,0x67,0x60,0x5e,0xc7,0x7e,
    0xa9,0xa3,0xd9,0xfa,0xe2,0xbe,0xd9,0xfc,0xfb,0xe4,0x4c,0x9f,0xe5,0xce,0xef,0x10,
    0x9d,0xcf,0xc1,0xdb,0x79,0x83,0x77,0xe2,0xd3,0x1b,0x5e,0x0c,0x7b,0xdf,0x5e,0x80,
    0xed,0x94,0x3b,0x9e,0x8a,0x7a,0x0a,0xa3,0x7d,0x17,0x31,0x7c,0x9c,0x0a,0x7b,0x19,
    0xdf,0xcd,0xda,0x5d,0x12,0xfb,0xc5,0xd9,0xd8,0x73,0xe2,0x7c,0x0f,0x6c,0x37,0xef,
    0x58,0x81,0xbc,0xa7,0x5e,0x9b,0x3d,0x9c,0x67,0x3f,0xf9,0x0c,0x48,0xad,0xf6,0x51,
    0xab,0xbd,0x52,0xab,0x97,0xe0,0x5e,0xab,0x97,0x61,0x5e,0xab,0xfd,0x52,0x2b,0xb3,
    0x0d,0x86,0xb1,0x9f,0xd8,0x83,0x52,0xab,0x57,0xee,0x50,0xab,0x57,0xe1,0x3f,0x13,
    0xfb,0x35,0x58,0x27,0x1a,0x3d,0x8e,0x7d,0xfe,0x1a,0xce,0xdd,0x7c,0x0e,0xa0,0x61,
    0x00,0xff,0x41,0x74,0x0c,0x89,0x0e,0xf3,0x39,0x18,0xc6,0x10,0xeb,0x0f,0x8a,0x8e,
    0xd7,0xef,0xa0,0xe3,0x10,0xdc,0xeb,0x3a,0x9c,0x73,0x66,0x6f,0xc0,0x86,0xff,0xe5,
    0xcc,0x0e,0x13,0xc3,0xc7,0x59,0xce,0xec,0x08,0x6b,0x0f,0x4b,0xec,0x37,0x73,0xce,
    0x6c,0x04,0x76,0xe4,0x3f,0xce,0x6c,0x84,0x7a,0x78,0x3e,0x43,0x39,0x67,0xd8,0x2f,
    0xf1,0xdf,0x22,0xfe,0xf6,0x10,0xc9,0xe2,0xbc,0x0d,0x4b,0x84,0x1d,0x85,0xe5,0x09,
    0x7b,0x07,0x96,0x12,0x76,0x0c,0x96,0x8e,0xb9,0x66,0xef,0xdd,0xbb,0xc4,0x3c,0xca,
    0x9a,0x63,0xe8,0x1c,0xc5,0xe6,0xbd,0xf4,0x1e,0xbd,0x34,0x26,0xbd,0xf4,0x3e,0xdc,
    0x7b,0xe9,0x38,0xcc,0x7b,0x69,0x5c,0xce,0xd0,0x6c,0x27,0xc2,0x38,0x4d,0x8e,0x27,
    0x24,0xc7,0x93,0xfc,0xb6,0xfa,0xfb,0x35,0x01,0x3b,0x29,0xbf,0xdd,0xee,0xfb,0xc1,
    0xac,0x6f,0xb6,0xde,0xa7,0x60,0x13,0x52,0xef,0x94,0xd4,0x7b,0x14,0x1f,0xab,0xef,
    0x38,0x7b,0x9f,0x96,0xbc,0xce,0x92,0xd7,0x19,0xc9,0xeb,0x43,0xb8,0xe7,0xf5,0x11,
    0xcc,0xf3,0x9a,0x94,0xbc,0xcc,0x76,0x2e,0x8c,0x0b,0xc4,0x3e,0x27,0xbd,0xf9,0x31,
    0x5a,0xb5,0x37,0x3f,0x81,0xbb,0xcf,0x79,0x7c,0xfc,0x77,0xf0,0x3c,0x3e,0xa6,0x77,
    0x92,0x98,0x17,0xe4,0x2d,0xfd,0x14,0xbd,0x97,0x24,0xe6,0x67,0x70,0x5b,0x7f,0x91,
    0xb9,0xdb,0x3e,0xe7,0xff,0x94,0x5f,0xe8,0x81,0x2f,0x60,0xdd,0x92,0xdf,0x97,0xf0,
    0x4e,0xf2,0x9b,0x92,0xfc,0xcc,0x76,0x39,0x8c,0x29,0xb4,0x5c,0x16,0xed,0x57,0xd0,
    0xee,0xbf,0x81,0x57,0xe4,0xae,0xbb,0xff,0x94,0x68,0xf9,0x2a,0x47,0xcb,0xd7,0xb0,
    0x5a,0xd1,0xf2,0x0d,0xdc,0xb5,0x4c,0x8b,0x16,0xb3,0x5d,0x0d,0x63,0x9a,0xd8,0x57,
    0x45,0xcb,0x75,0xb4,0x5c,0x43,0xcb,0x75,0xd1,0xe2,0xfe,0xd3,0xa2,0xe5,0xdb,0x1c,
    0x2d,0xdf,0xc1,0xc6,0x44,0xcb,0xf7,0x70,0xd7,0x32,0x23,0x5a,0xcc,0x76,0x23,0x8c,
    0x19,0x62,0xdf,0x10,0x2d,0x37,0xe5,0xdc,0x4d,0xcb,0x4d,0xfe,0xaf,0x33,0x2d,0xee,
    0x3f,0x93,0x73,0xc6,0x93,0x39,0x3d,0x3a,0x2e,0x3d,0xff,0x03,0xf1,0x2c,0xd6,0x6d,
    0xe6,0x7f,0x85,0xdb,0xde,0x12,0xc6,0xdf,0xcd,0x08,0xd4,0x46,0x80,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
