// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x56,0xed,0x4f,0x96,0x65,
    0x14,0xbf,0xcf,0x05,0x22,0xf1,0x26,0x10,0xcd,0x58,0xca,0x8b,0xbc,0x3d,0x06,0xa2,
    0x5b,0x0f,0x0e,0x7c,0x30,0xb1,0x62,0xf8,0x81,0x74,0x8b,0xe4,0xb3,0xad,0xd6,0xd6,
    0x5c,0x7d,0x01,0x84,0x8d,0xa2,0x54,0xd6,0x66,0x59,0xac,0xda,0xec,0xc5,0xe5,0x46,
    0x9b,0x41,0xb8,0xb5,0xc6,0xb2,0x25,0x8b,0x2f,0x29,0xd9,0x6c,0xb2,0xf1,0x25,0x5b,
    0x5a,0xf6,0x25,0xff,0x83,0xde,0xd7,0xea,0xfa,0x3d,0xe7,0x77,0xe4,0xf0,0xe4,0xa7,
    0xee,0xed,0xda,0x7d,0x9f,0xdf,0x79,0xfb,0x9d,0x73,0x9d,0xfb,0xba,0xef,0xbc,0xd0,
    0xb0,0x3e,0x49,0x24,0x29,0x4a,0x0a,0x93,0x7d,0x21,0xc9,0x5e,0x15,0x49,0x88,0x48,
    0x92,0x14,0x27,0x05,0xd9,0x7b,0x5f,0xff,0x40,0x7f,0xfb,0xd0,0xf0,0x53,0xed,0xe9,
    0x8e,0x1d,0xd0,0x97,0x25,0x79,0x59,0x3b,0xe8,0x36,0x44,0x9b,0x75,0xf1,0x9e,0x1f,
    0xd7,0xb3,0x4f,0x3c,0xf3,0x5c,0xd6,0x3f,0x2a,0xca,0x23,0x9e,0x9f,0x8d,0x95,0x24,
    0x3d,0xb4,0xc5,0xda,0x17,0xad,0x9b,0x34,0x4d,0xd2,0xc0,0xbb,0x61,0x42,0x2c,0xdf,
    0x61,0x81,0x58,0xa1,0xc3,0xf2,0x88,0x95,0x38,0x2c,0x9f,0x58,0xb9,0xc3,0xd6,0x11,
    0xab,0x72,0x58,0x01,0xb1,0x7b,0x1d,0xb6,0x9e,0xd8,0x26,0x87,0x15,0x12,0xab,0x73,
    0xd8,0x5d,0xc4,0x1a,0x1d,0x56,0x44,0x2c,0xe5,0xb0,0x62,0x62,0x6d,0x0e,0x2b,0x21,
    0xb6,0xc3,0x61,0xa5,0xc4,0xd2,0x0e,0x2b,0x23,0xd6,0x89,0xbe,0xc7,0x4a,0xad,0x07,
    0x7d,0xb1,0xc2,0x61,0xf2,0xb7,0xfe,0x8c,0xe4,0xf4,0x11,0xf6,0x23,0xec,0x0f,0xec,
    0x47,0xe3,0x7d,0xcb,0x6d,0x9d,0xca,0xf5,0xec,0x33,0xe4,0x62,0x59,0x1b,0xaf,0x44,
    0xfe,0x1b,0x0f,0x98,0xc5,0x2b,0x93,0xb5,0xf1,0x20,0xd7,0x3b,0x19,0xfb,0x5e,0xcc,
    0x3e,0x42,0x7e,0x9c,0x72,0x75,0x5c,0x77,0xc7,0x2a,0x42,0x36,0x7f,0x5e,0x36,0x1e,
    0x9e,0xef,0x89,0x36,0x05,0xec,0x31,0xae,0x9a,0x38,0x2d,0xb6,0x47,0xff,0x77,0xd5,
    0xc5,0x98,0xcd,0xdc,0x2b,0xc4,0xca,0x50,0x6e,0x21,0x86,0x9c,0x29,0xe6,0x44,0xb9,
    0xad,0x94,0xb7,0x3a,0xff,0xfb,0x69,0x5b,0xe0,0xf4,0xdb,0x39,0x4f,0x26,0xa7,0x59,
    0x83,0xc9,0x19,0xce,0x82,0xc9,0x3d,0x8c,0x61,0x72,0x2f,0xf7,0xa5,0x95,0x35,0x3f,
    0xca,0xbe,0x9b,0x7c,0x80,0x33,0x67,0xf6,0x83,0x39,0xf2,0x21,0xda,0x57,0xc5,0xac,
    0x4f,0x3a,0xbf,0xa7,0x73,0xe2,0x1e,0x66,0x2f,0x37,0x47,0xd4,0xe6,0xa5,0x86,0x73,
    0x31,0xcc,0xfa,0x8e,0x90,0xfb,0x08,0xfb,0x03,0x79,0x34,0xa7,0x9e,0x31,0xc6,0x81,
    0xfd,0x38,0x75,0xbe,0x1f,0x13,0x9c,0x5f,0x93,0x4f,0xc6,0xf5,0x4f,0xde,0xaa,0x3c,
    0xc5,0x59,0x36,0x5e,0xa7,0x5c,0x7f,0x20,0x4f,0xbb,0x7c,0x90,0xe7,0xb9,0x27,0xe6,
    0xff,0x39,0xe2,0xc5,0xcb,0xe4,0x85,0x9c,0xfd,0xba,0xc2,0x77,0x0a,0x75,0xda,0x1c,
    0xd7,0x70,0x5e,0x21,0x83,0x77,0xa9,0x68,0x0e,0x60,0x19,0xca,0x65,0xc4,0x36,0x46,
    0x79,0x03,0xfd,0xf2,0x58,0x67,0xb9,0xf0,0x4c,0xa3,0x3d,0xe4,0x0a,0x62,0xd0,0x57,
    0xf2,0xd9,0xf7,0xa1,0x95,0x33,0x6e,0x75,0x3c,0x26,0xba,0xf7,0x26,0x0f,0xd0,0xa7,
    0x2d,0x4a,0x88,0x8b,0x77,0x02,0x36,0x03,0x5c,0x3b,0xe3,0x54,0x05,0xee,0x6d,0x42,
    0x2e,0xbf,0x47,0x04,0xb3,0xf6,0x5b,0x94,0x0e,0xf2,0x9d,0xfc,0x2b,0x3e,0x63,0x6f,
    0x07,0x45,0xf5,0xb8,0xef,0x8d,0x56,0xe0,0x74,0x1f,0x79,0x42,0xbf,0x9b,0x79,0x37,
    0x11,0x87,0x0d,0xe6,0x79,0xb3,0xe8,0x3b,0x30,0xe6,0x6c,0x6a,0x44,0xf1,0x8f,0xa3,
    0x0d,0x66,0xaa,0x56,0xd4,0x0f,0x38,0x72,0xd7,0x33,0xf7,0x9f,0xd1,0x1e,0xba,0x3a,
    0xbc,0xef,0xcc,0x8f,0xe7,0x3f,0xe2,0xfd,0x20,0xe5,0x7a,0xca,0x4d,0x94,0x71,0xff,
    0x25,0x9e,0xac,0xc8,0xd3,0x17,0x94,0x1b,0x6c,0xfa,0xe3,0x4a,0x39,0x5d,0x97,0xd3,
    0xed,0xa7,0xce,0x38,0xb7,0x91,0x33,0x7a,0x6c,0x9c,0xb7,0x89,0xe2,0x9f,0x90,0x73,
    0xbb,0x68,0x0c,0xe0,0xbf,0x46,0x9b,0x16,0xc6,0x30,0xde,0xd0,0x37,0x23,0x0e,0x79,
    0xe1,0x79,0x32,0xfa,0x22,0x56,0x9a,0xf5,0xc2,0xf7,0x25,0x62,0x3b,0x45,0x71,0xc4,
    0x34,0x1e,0x9d,0xe4,0xb1,0xe0,0x7a,0xd7,0x25,0x8a,0x5b,0xef,0x76,0x89,0xfa,0x76,
    0xb1,0x77,0xdd,0x8e,0x03,0x74,0x99,0xb8,0xba,0xc9,0x21,0xc3,0x5e,0x19,0xa7,0x6e,
    0xfa,0xac,0xe4,0xec,0xf5,0x10,0xf5,0x43,0xae,0x27,0x23,0xe4,0x32,0xe8,0xb8,0x1c,
    0x11,0xc5,0x5f,0x66,0x0d,0xa3,0xe4,0x02,0xfc,0x04,0xb1,0x71,0x87,0x59,0xac,0x17,
    0x18,0xeb,0x90,0x8b,0x35,0x21,0x8a,0x5b,0x5d,0x2f,0x8a,0xfa,0x4e,0xb8,0x9e,0x1f,
    0x25,0x86,0xb3,0x67,0x86,0xd8,0x31,0x51,0xdb,0xa3,0xac,0x65,0xd2,0xd5,0x0f,0xdd,
    0x71,0xf4,0x9d,0xf5,0x1c,0x67,0xfd,0x2b,0x94,0x27,0x1d,0xa7,0x6f,0xc9,0x69,0xab,
    0xe3,0x74,0x4d,0x14,0xb7,0x7d,0xfb,0x4e,0xb4,0xc6,0x6b,0xce,0xef,0x7b,0xfa,0x6d,
    0x77,0x7e,0xd7,0x45,0x71,0xf3,0xbb,0x41,0xde,0xd7,0xdd,0x7e,0xff,0x20,0x1a,0xef,
    0x86,0x8b,0xf5,0x23,0x63,0xa5,0x5d,0xac,0x9b,0xa2,0xb8,0xf9,0xfd,0x24,0xea,0x7b,
    0xd3,0xf5,0xfd,0x84,0x28,0x8e,0xb3,0x7d,0x6f,0x44,0x70,0x6e,0xbe,0x22,0x7a,0xb6,
    0x8e,0x51,0x6f,0xf1,0x5e,0x15,0xd5,0x59,0xce,0x93,0xcc,0x39,0xe1,0x72,0xbe,0x26,
    0x8a,0x9f,0x63,0x8f,0x5f,0x17,0xc5,0x0e,0xf3,0x6c,0x58,0x74,0x3d,0x86,0x6e,0x0a,
    0xb6,0xec,0x29,0x9e,0xe7,0xe8,0xf7,0x86,0xdb,0xaf,0x8f,0x62,0x64,0x9c,0x5b,0x6f,
    0x8a,0xe2,0x69,0x7e,0xbb,0x9e,0x67,0xce,0xb7,0x44,0x75,0x66,0x77,0x8a,0x76,0xbd,
    0x3c,0xe3,0xcd,0xee,0x6d,0x51,0x9d,0xf1,0x7f,0x87,0xfc,0xa7,0x1c,0xff,0x77,0x45,
    0x71,0xe3,0xff,0x9e,0x28,0x66,0xfc,0xe7,0x1c,0x7f,0xe8,0x4e,0xc7,0x75,0x86,0xfc,
    0x4f,0xbb,0x7d,0x7b,0x5f,0xf4,0xfb,0x31,0xce,0xb9,0x99,0xa3,0xcd,0x19,0xce,0xda,
    0xac,0x8b,0x03,0xae,0xd3,0x71,0x7d,0x40,0x9b,0x69,0xfa,0xcc,0x52,0x06,0x7e,0x8c,
    0x71,0xcf,0x8a,0x7e,0x87,0xc6,0x5d,0xae,0x0f,0x45,0x7b,0x70,0xd6,0xed,0xf5,0x8c,
    0x28,0x0e,0x5b,0x1f,0x6b,0xd6,0x9d,0x63,0x19,0x9e,0x63,0xc8,0x37,0xc3,0xfc,0x9e,
    0xeb,0x9c,0xb3,0xdd,0x1d,0xb4,0x26,0xd4,0x08,0xbf,0x59,0xda,0x2e,0xd2,0xf6,0x9c,
    0x7b,0x6f,0x7f,0x76,0x33,0x65,0x1c,0x6f,0x89,0xe2,0x07,0x1c,0x36,0xcf,0xb9,0x06,
    0x66,0xfb,0xfe,0xa9,0x28,0x3e,0xcf,0x7e,0x2f,0xb8,0x3e,0x41,0x77,0x3e,0xae,0xcf,
    0x98,0xf3,0x3c,0x39,0x2c,0x50,0x06,0x7e,0x29,0xc6,0xc9,0x7e,0x8b,0x45,0xcf,0xbe,
    0x79,0xf6,0x0e,0xd8,0x05,0x59,0xc5,0xbd,0xdf,0x02,0xeb,0x84,0xcd,0xae,0xa0,0xdf,
    0x71,0xc4,0xbe,0xc0,0x5c,0x36,0x3f,0x5f,0x88,0xea,0x7d,0xdd,0x8b,0xae,0x47,0x7b,
    0x82,0xce,0x18,0xfa,0x06,0xdb,0x05,0xa7,0xeb,0x0e,0xda,0x43,0xe8,0x6e,0x51,0x67,
    0x35,0x5f,0xbc,0xc3,0xd9,0x74,0x89,0x67,0xd3,0x45,0xce,0xcb,0xb2,0xeb,0x03,0x74,
    0x4b,0x71,0x7d,0x4d,0x0e,0x4b,0x6e,0xa6,0xbf,0xe2,0x4c,0x5f,0x71,0x33,0x7d,0x59,
    0x14,0x07,0xef,0x65,0xfa,0xc0,0xf7,0x4b,0xee,0xc3,0x37,0xa2,0xef,0x36,0x38,0x5e,
    0x26,0x76,0x55,0x14,0xdf,0x13,0xd6,0xfa,0x2d,0xbb,0x9a,0x1e,0x0a,0x1a,0x1b,0xf9,
    0xaf,0x92,0x8f,0x3f,0x23,0x57,0x9c,0xed,0xc3,0x9c,0x35,0x9c,0xa3,0xf0,0x5b,0x76,
    0x9c,0x6b,0x82,0x72,0xce,0x38,0xce,0xb5,0x41,0x71,0x9b,0x95,0xba,0xa0,0xe7,0x67,
    0xad,0xfb,0xc6,0x6d,0xa1,0x5f,0x8f,0xf3,0x6b,0x08,0x8a,0x9b,0x5f,0x63,0xd0,0xde,
    0x02,0xb7,0x77,0xa3,0x29,0x68,0xbc,0x46,0x17,0xab,0x99,0xb1,0x7a,0x5d,0xac,0x96,
    0xa0,0xb8,0xf9,0xa5,0x82,0xfa,0x02,0xb7,0x59,0xdf,0x16,0x14,0xf7,0xb3,0xde,0x1e,
    0x14,0xf7,0xb3,0x5e,0x14,0x94,0x83,0x9f,0xf5,0x92,0xa0,0xb8,0xcd,0x7a,0x65,0x58,
    0xdd,0x63,0xe8,0x4a,0xe3,0x2a,0x0b,0xda,0xcb,0x52,0xee,0x43,0x25,0x65,0xe0,0x36,
    0xeb,0xe5,0x41,0x67,0x1a,0xb1,0x6c,0xd6,0x2b,0xc2,0x2a,0xee,0xfd,0x70,0xb7,0x59,
    0x7f,0x84,0xb3,0x8e,0xd8,0x15,0xcc,0x65,0xb3,0x5e,0x15,0x54,0x6f,0xf3,0xb0,0x31,
    0xe8,0x1e,0x56,0x31,0x2f,0xb0,0xea,0xa0,0x38,0xea,0x5d,0x22,0x86,0x7f,0x25,0xfc,
    0x3b,0x55,0x93,0x6f,0x8a,0xb3,0x90,0x72,0x67,0xd3,0x7e,0xfe,0xab,0x18,0x37,0xfb,
    0xff,0x6a,0x71,0x33,0xf1,0xc0,0x1d,0xf6,0x23,0x1d,0x14,0xb7,0x6f,0x57,0x47,0x50,
    0x0c,0xbd,0xbf,0xfd,0x2f,0x14,0xf4,0xff,0xa8,0x23,0xac,0x7e,0xcf,0x3a,0x83,0xfe,
    0x43,0x8f,0x51,0xff,0x60,0xec,0x35,0xb0,0xbe,0xb0,0xf6,0x7f,0x10,0xf7,0xbf,0xe3,
    0x9f,0x6f,0x67,0x5c,0xff,0x02,0xaf,0x5a,0x2e,0x73,0x64,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        uint convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, uint value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                uint destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
