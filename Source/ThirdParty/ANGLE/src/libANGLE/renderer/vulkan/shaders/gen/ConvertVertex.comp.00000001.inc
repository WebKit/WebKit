// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x77,0x70,0x55,0x45,
    0x14,0xc6,0xef,0x26,0x21,0x89,0x04,0x02,0x08,0x48,0x11,0x22,0x11,0x84,0x60,0x22,
    0x20,0x84,0x00,0x06,0x90,0x16,0x13,0x25,0x31,0x20,0xd8,0xbb,0x62,0x01,0x06,0x2c,
    0x80,0x62,0x57,0x40,0x14,0x7b,0xc1,0xae,0xd8,0x15,0xb1,0x61,0x45,0xb1,0x23,0x08,
    0x16,0xec,0xce,0x38,0x63,0x6f,0xd8,0xb0,0x2b,0x82,0x88,0xb8,0xe7,0xee,0xef,0x98,
    0x93,0xe5,0xfd,0x65,0x66,0xee,0xbc,0xfb,0x7d,0xa7,0xee,0xd9,0xb3,0xe5,0xbd,0x64,
    0x67,0x75,0xcd,0x4b,0x12,0x97,0x34,0x4d,0xf2,0x93,0xbd,0x5d,0x92,0xfe,0xb5,0x4a,
    0xb2,0x12,0x79,0x2d,0x48,0x72,0xd3,0xcf,0xea,0xda,0x71,0xb5,0xbd,0xa6,0x4d,0x9f,
    0xd0,0xab,0xbc,0x7f,0x1f,0x91,0x17,0x26,0xd9,0xa9,0x9e,0xc8,0x5a,0x78,0x9d,0x26,
    0xfe,0x33,0xc7,0x3f,0x53,0x0e,0x9f,0x38,0x35,0xb5,0xf7,0x82,0x96,0x9e,0xcf,0x49,
    0x7d,0x25,0xc9,0x30,0x74,0xe5,0xa9,0xf1,0xda,0x3b,0x84,0x30,0x49,0x57,0x3e,0x95,
    0x73,0x70,0x39,0x86,0xcb,0x82,0xcb,0x37,0x5c,0x36,0x5c,0x33,0xc3,0xe5,0xc0,0xb5,
    0x34,0x5c,0x13,0xb8,0x36,0x86,0xcb,0x85,0x6b,0x6f,0xb8,0x3c,0xb8,0x4e,0x86,0xcb,
    0x87,0xeb,0x62,0xb8,0xad,0xe0,0xba,0x19,0xae,0x29,0x5c,0x89,0xe1,0x0a,0xe0,0xca,
    0x0c,0xd7,0x0c,0xae,0x8f,0xe1,0x9a,0xc3,0x95,0x1b,0xae,0x10,0x6e,0xa0,0xd4,0xdd,
    0x8f,0x54,0x6b,0x50,0xed,0x47,0x38,0x9d,0xfc,0xb5,0x3e,0x33,0xa2,0x3a,0x8a,0xfe,
    0x0c,0xea,0x23,0xfa,0x27,0xfb,0xcf,0xed,0xff,0x93,0x05,0x5c,0x4c,0x9d,0x05,0x17,
    0xb8,0xc6,0xfe,0x9a,0xb9,0x2d,0xfd,0x09,0xa7,0xfe,0x0a,0x5d,0x63,0x7f,0x82,0x8b,
    0x0d,0x96,0x79,0x2f,0xa0,0x8e,0x82,0xc7,0x83,0x3b,0xf8,0xa7,0xb5,0x1f,0x45,0x56,
    0x1a,0x3f,0x3b,0xf5,0x27,0xef,0x6d,0xbd,0x4e,0x2e,0x35,0x4e,0xd2,0xcf,0x9c,0x74,
    0x2e,0xf2,0x18,0x67,0xb1,0xcf,0x29,0x9f,0x77,0xe5,0x8b,0xbd,0x4e,0x5b,0xc3,0x09,
    0xee,0x82,0x3f,0xc1,0x45,0xbe,0xe3,0x74,0x9e,0xff,0xef,0x23,0x79,0x74,0x67,0xbe,
    0xc5,0x57,0x25,0xb8,0x07,0x9c,0xe4,0x5d,0x42,0xde,0x52,0xb2,0x52,0x70,0x4f,0x63,
    0xbf,0x23,0xba,0xb9,0x46,0xde,0x9b,0x9e,0x54,0x5c,0x4e,0xde,0x8a,0x2b,0xe9,0x27,
    0xc5,0xc3,0xf0,0xa1,0xb8,0x8a,0xb9,0x2d,0xa5,0x6e,0x75,0xcc,0x9d,0xe2,0x7a,0xfa,
    0x56,0xf5,0xf7,0x89,0xf0,0x61,0xe8,0xb7,0xf1,0x51,0x8f,0x34,0x76,0x47,0x47,0x7e,
    0x27,0x33,0x1f,0x9d,0x3d,0xab,0x3d,0x57,0x44,0x6f,0x4d,0x67,0x7c,0x27,0x91,0xfb,
    0x0c,0xea,0x23,0xf8,0xe4,0x68,0x3c,0x33,0xcd,0xbc,0x9e,0x86,0xcc,0xd6,0xe3,0x4c,
    0xd6,0x80,0xe2,0x8b,0xfc,0xb3,0x39,0xbb,0x01,0x5f,0xca,0x7a,0xd0,0xbc,0xae,0x36,
    0xf5,0x11,0x7c,0xab,0x89,0x27,0xf8,0x61,0xe6,0x44,0xe2,0x3d,0x4a,0x3f,0x94,0x18,
    0xff,0x4f,0x88,0x7f,0xff,0xa7,0x78,0x69,0x34,0x7f,0xaf,0xb0,0x4e,0x65,0xdc,0xba,
    0x36,0x8a,0x58,0x03,0x82,0xc5,0x6f,0x73,0x17,0x62,0x0a,0x57,0x09,0x2e,0x84,0x6b,
    0xe7,0x71,0x0b,0xec,0xb2,0xc9,0xa3,0xa5,0x63,0x9f,0x44,0x5f,0x70,0x2b,0x38,0x91,
    0x6f,0xcd,0xbb,0xad,0x4b,0x29,0xeb,0x46,0xc7,0xb5,0x97,0x0b,0xbd,0xa0,0x78,0x1c,
    0x36,0x65,0x1e,0x89,0x5f,0x59,0x67,0xa2,0x33,0x8e,0xa7,0xc2,0x77,0x59,0x16,0x73,
    0x9d,0x90,0xcb,0x7a,0xcf,0x34,0x61,0xae,0xd2,0xfd,0xce,0x85,0xfa,0x28,0xee,0x16,
    0xe1,0xde,0x11,0x1e,0x1a,0xe1,0x5d,0x23,0x3c,0x22,0xc2,0x23,0x23,0xbc,0x5b,0x84,
    0x6b,0x22,0x5c,0x0f,0x1e,0xee,0xb3,0x94,0x9a,0x6c,0x4b,0x9d,0xa4,0x17,0x87,0x30,
    0xee,0x4e,0xf0,0xa2,0x23,0xeb,0xab,0xb3,0x0b,0x6b,0x72,0xa6,0xd1,0x29,0x72,0x81,
    0x7f,0xc0,0xeb,0x48,0x8f,0x6f,0xe7,0x82,0x9d,0xf0,0x7f,0xfa,0x4a,0x14,0xb3,0xc7,
    0xfd,0xe5,0xf5,0x45,0xd6,0x45,0xf6,0x30,0x17,0xea,0x23,0xef,0x9b,0x7c,0x65,0xe5,
    0x5d,0xb8,0xa1,0x5e,0xbf,0x2b,0x39,0xc8,0x7b,0x37,0xde,0x37,0x78,0xf9,0x0e,0xd8,
    0xc8,0xe7,0x3a,0xef,0xab,0x87,0xff,0x2c,0xc1,0xb7,0xc8,0x7b,0x22,0x97,0x4f,0xcd,
    0x6d,0x47,0x17,0xea,0xac,0xf9,0x97,0x91,0x7f,0xa9,0xd1,0xd9,0xc9,0x05,0x7e,0x31,
    0xf9,0xf7,0x72,0xc1,0x4e,0x78,0xc9,0x59,0x70,0x77,0xb1,0xc3,0x7f,0x77,0xd7,0x50,
    0xb3,0x3e,0x19,0x6a,0xb6,0x33,0xbc,0xc6,0xec,0x9b,0x21,0x66,0x3f,0x17,0xf8,0x39,
    0x5e,0x47,0x70,0xb9,0x0b,0x76,0xfd,0x8c,0x4e,0x7f,0x72,0x3f,0x1b,0x9d,0x0a,0x17,
    0xf4,0xfa,0x53,0x27,0xe9,0x97,0x0a,0xa3,0x3f,0xc0,0x85,0x1e,0xd2,0xb8,0x03,0x89,
    0xbb,0xd4,0xe4,0x36,0xc8,0x05,0x5e,0xe7,0x6a,0x17,0x17,0xec,0x06,0x31,0x57,0x83,
    0xcd,0x5c,0x89,0xac,0xd2,0x3f,0x83,0x19,0xb7,0xbc,0x4b,0x9d,0xb5,0x0e,0x83,0x4d,
    0xec,0x61,0xc4,0x96,0xbc,0xa4,0x4f,0x05,0x0f,0x22,0xef,0xe1,0x4e,0xd6,0x69,0xe8,
    0x5f,0x91,0x4b,0x5f,0x0f,0x37,0xb6,0xa3,0x5c,0xe8,0x75,0x91,0x49,0x0f,0x8f,0x32,
    0xb6,0x55,0xfe,0xbd,0x23,0xbd,0x2d,0x72,0xe9,0xf9,0x2a,0x63,0x5b,0x6d,0xe2,0x4a,
    0xbf,0x57,0x1b,0xd9,0xee,0x2e,0xac,0x11,0x91,0x49,0xef,0xef,0x9e,0xfa,0xcd,0x4d,
    0x65,0x7b,0x48,0x7f,0xb2,0x46,0x6a,0x8c,0xcd,0x68,0x17,0xd6,0xe9,0x0a,0xe2,0xd7,
    0xba,0xc0,0xed,0x61,0x7a,0xb3,0x96,0x3a,0x94,0x50,0x87,0x12,0x63,0x5f,0x17,0xcd,
    0xd9,0x9e,0x2e,0x70,0x4b,0x4d,0x3f,0xef,0xe9,0x1a,0xf7,0x73,0x0f,0x63,0x3f,0x86,
    0xf8,0xa2,0x2b,0xeb,0x73,0x0c,0xb5,0x90,0xbd,0x65,0x2c,0x77,0x81,0x7a,0xd6,0xcc,
    0x40,0xff,0x54,0x10,0xa7,0x80,0x7d,0x47,0xce,0x9e,0x01,0xde,0x36,0x8f,0x73,0x4c,
    0xdf,0x9b,0xb2,0x1f,0x35,0x33,0xbd,0xd0,0x0d,0x1d,0xed,0x97,0x52,0xce,0xdb,0x9e,
    0x46,0xa7,0x0c,0x5e,0xfb,0x74,0x27,0xec,0xca,0x8c,0x4e,0x2f,0xfc,0xab,0x9f,0x3e,
    0xf8,0xe9,0x6d,0xd7,0x04,0xbc,0xfa,0xe9,0x8b,0x9d,0xf0,0x5a,0xab,0x7e,0xf8,0xef,
    0x6b,0x7c,0xf5,0xc7,0x57,0xb9,0xf1,0x55,0x01,0xaf,0x76,0x03,0xb0,0x15,0xfe,0x1f,
    0x3f,0xc6,0x01,0xe9,0x5d,0xae,0xa1,0x36,0x2d,0x32,0xd4,0xa6,0xb9,0x79,0x2f,0xa4,
    0x36,0x2d,0x4d,0x8c,0x5d,0xd0,0xd1,0x3c,0x06,0x93,0x47,0xa5,0xd1,0x19,0x02,0xaf,
    0x63,0x1a,0x8a,0xdd,0x10,0xa3,0xb3,0x2b,0xfe,0xd5,0xcf,0x70,0xfc,0x0c,0x33,0x3a,
    0x23,0xe0,0xd5,0xcf,0x48,0xec,0x46,0x98,0x31,0x8e,0xc2,0xff,0x48,0xe3,0x6b,0x37,
    0x7c,0x55,0x19,0x5f,0xd5,0xf0,0x6a,0x57,0x83,0x6d,0x35,0xb5,0xa9,0x89,0x6a,0xd3,
    0x3a,0x43,0x6d,0x5a,0x99,0xf7,0xad,0xa9,0x4d,0x1b,0x73,0x6e,0x8c,0xe6,0x9c,0xd7,
    0x98,0xb5,0xd8,0xcc,0xd3,0x9e,0x87,0xab,0x33,0x63,0x1a,0x03,0x5f,0xcf,0x3a,0x18,
    0x0d,0xa7,0x3e,0xc6,0xe2,0x57,0x72,0x1c,0x1b,0xe5,0xd8,0x8e,0x1c,0xdb,0x9a,0xbc,
    0xb6,0x21,0xaf,0xf6,0x26,0xaf,0xf1,0x49,0xe3,0xf3,0xed,0x80,0x08,0x4f,0x89,0xf0,
    0xd4,0x08,0x1f,0x1f,0xe1,0x69,0x11,0x9e,0x13,0xe1,0x79,0x11,0xbe,0x2a,0xc2,0x37,
    0x46,0x78,0x61,0x84,0x17,0x19,0x2c,0x77,0xa7,0xc7,0x22,0xf9,0xcb,0x11,0x7e,0x27,
    0xaa,0xfb,0xde,0xd4,0x41,0xfb,0x61,0x5f,0xfa,0x61,0x1f,0xa3,0xb3,0x1f,0xfc,0x5c,
    0x6a,0xb9,0x3f,0x76,0xfb,0x31,0x0f,0xe3,0xe1,0x54,0xff,0xc0,0xc8,0xe7,0x41,0x19,
    0x7c,0x1e,0x0c,0xaf,0xf3,0x7d,0x08,0x76,0x07,0xe3,0xf3,0x00,0x38,0xd5,0x3f,0x94,
    0xb9,0x50,0x9f,0x87,0xe3,0xf3,0x30,0xa3,0x73,0x04,0xbc,0x9e,0x4b,0x13,0xb0,0x3b,
    0xc2,0xe8,0x1c,0x85,0x1f,0x3d,0xa7,0x8f,0x81,0x93,0xbb,0xf4,0xdd,0x70,0xc7,0x62,
    0x2b,0x32,0x39,0xcf,0x26,0x25,0x0d,0xe7,0x99,0xc8,0x26,0xfa,0x67,0x12,0xbd,0x33,
    0x91,0x7e,0x9b,0x0c,0x9e,0x64,0x62,0x1d,0x47,0x3f,0xc9,0x78,0xa6,0x82,0x55,0x76,
    0x02,0x79,0x88,0xec,0x78,0xb0,0x9e,0x2b,0x27,0xb2,0x17,0x4f,0xa5,0x9f,0x44,0x67,
    0x0a,0xbc,0xda,0x9f,0x42,0x2f,0xea,0x9c,0x9c,0x0a,0x57,0x97,0xd6,0x28,0x37,0xbd,
    0xb7,0x9f,0xce,0xdd,0x7e,0x26,0x72,0xb5,0x3d,0x03,0x99,0xf8,0x9d,0x06,0xd6,0xba,
    0x9e,0x45,0x5d,0xcf,0x34,0xfa,0x67,0xc3,0xdf,0x4b,0x7d,0xce,0x81,0x9b,0x4c,0x7d,
    0x66,0x9b,0xfa,0x88,0x6c,0x56,0x5a,0xcb,0x50,0x8f,0x59,0xc6,0xcf,0xb9,0x8c,0x79,
    0x11,0x7e,0xe6,0xc2,0x49,0xed,0xef,0xf1,0x1a,0x72,0x87,0x3e,0x0f,0xbe,0x9c,0x7d,
    0xf2,0x74,0x6c,0xcf,0x47,0x26,0x39,0xcf,0x01,0xab,0xdf,0x0b,0x22,0xbf,0x17,0xc2,
    0x59,0xbf,0x17,0xc3,0x57,0xf1,0x7d,0x45,0xfd,0x5e,0x82,0x4c,0xfc,0xce,0x03,0x6b,
    0x2d,0x2e,0xa3,0x16,0x97,0x9a,0x58,0x97,0xc3,0x6b,0x2d,0xae,0x80,0xd3,0x5a,0xcc,
    0x37,0xb5,0x10,0xd9,0x95,0xfe,0xb9,0x8e,0x5a,0x5c,0x69,0xfc,0x5c,0x43,0xce,0xba,
    0xb7,0x5d,0xcb,0xf7,0xa4,0x6b,0xc8,0xe5,0x2a,0x38,0x39,0xe3,0xe7,0x63,0x7f,0x9d,
    0xb1,0xbf,0x3e,0x1a,0xf3,0x0d,0x70,0x47,0x93,0xc7,0x02,0x93,0x87,0xc8,0x6e,0xf2,
    0xcf,0xcd,0xf8,0xb9,0x89,0x18,0x37,0x26,0x0d,0xf7,0xe2,0x05,0xc8,0x6e,0x36,0x31,
    0x6e,0x61,0xbf,0x52,0x7c,0x1b,0x31,0x67,0x91,0xf3,0xed,0x7c,0x97,0xbb,0xcd,0x8c,
    0xe3,0x0e,0xec,0x6e,0x37,0xe7,0xc7,0x9d,0xf0,0xb7,0x9a,0xb8,0x77,0x46,0x71,0x17,
    0x98,0x38,0x77,0xb1,0xef,0x69,0x1d,0xee,0x8a,0xea,0x30,0x1f,0x3c,0x1b,0x7c,0xb7,
    0xb1,0xbd,0x87,0x75,0x21,0xb6,0x0b,0xc1,0x3a,0x9f,0xf7,0x66,0xb8,0x53,0xdc,0x07,
    0x2f,0xfa,0x8b,0xc0,0xba,0x0e,0xef,0xe7,0x6c,0x5b,0xc8,0x3e,0xab,0xf9,0xdc,0x6f,
    0x7c,0x3e,0x90,0xc1,0xe7,0x83,0xf0,0x5a,0x93,0xc5,0x70,0xf5,0xa6,0x7f,0x17,0x1b,
    0xfd,0x87,0xa8,0xb3,0xce,0xe5,0x23,0x70,0x0f,0x33,0x97,0x4b,0xcc,0x5c,0x8a,0xec,
    0x71,0xff,0x3c,0xc9,0xd8,0x1f,0xc7,0xe7,0x63,0x7c,0x4f,0x96,0xba,0x2c,0x41,0xf6,
    0xa4,0x89,0xf1,0x14,0x31,0x96,0xfb,0x18,0xb2,0x1e,0x9e,0xe6,0x4e,0xff,0x14,0xf3,
    0x29,0xdc,0x33,0x86,0x57,0x9f,0xcf,0x44,0x3e,0x97,0xe0,0x53,0xf4,0x9f,0xe5,0xbc,
    0xd1,0xb5,0xf4,0x1c,0x9c,0xae,0xa5,0xe7,0xa2,0x79,0x9a,0x6d,0xf2,0x79,0x3e,0xda,
    0xcf,0x5f,0xc8,0xb0,0x9f,0x2f,0x83,0xd7,0xfd,0xfc,0x45,0xec,0x96,0x19,0x9d,0xe5,
    0xd1,0x3a,0x58,0x01,0x67,0xf7,0xf3,0x97,0xb0,0x5d,0x41,0x3d,0x57,0x99,0x7a,0x8a,
    0x6c,0xa5,0x7f,0x56,0x93,0xe3,0x4a,0x93,0xd3,0xab,0xe4,0xf4,0x8a,0x89,0xf7,0x1a,
    0xbc,0x8c,0xf1,0x65,0xb0,0x8c,0x71,0x15,0xf6,0xab,0x8d,0xee,0xeb,0x9c,0xff,0x8a,
    0xdf,0xe0,0x7c,0x5f,0x46,0x5f,0xbc,0x89,0xce,0x1b,0x46,0xe7,0x2d,0xee,0x04,0x2b,
    0xd1,0x79,0x1b,0xbd,0xb7,0x4c,0xcc,0xb7,0xa3,0x98,0xab,0x8c,0xfd,0xbb,0x9c,0xf9,
    0xa2,0xfb,0x0e,0x58,0x65,0xef,0x71,0xfe,0xcb,0x79,0xf5,0x5e,0x74,0x3f,0xea,0x98,
    0xe1,0x7e,0xd4,0x01,0xff,0xdb,0x1a,0x1f,0xef,0xc3,0x8b,0x8f,0xf7,0x23,0x1f,0x45,
    0x19,0xee,0x81,0x9d,0xcc,0x7b,0x67,0xfc,0x6d,0x67,0xee,0x23,0x1f,0x44,0xf7,0x93,
    0x4f,0x23,0xfc,0x55,0x84,0xd7,0x44,0xf8,0x9b,0x08,0x7f,0x1f,0xe1,0xb5,0x11,0xfe,
    0x31,0xc2,0xbf,0x46,0x78,0x5d,0x74,0x9f,0xda,0x10,0xc9,0xb3,0x5c,0xe3,0xfb,0xd3,
    0x87,0x8c,0x51,0x7b,0xe6,0xa3,0x0c,0x77,0x9d,0x8f,0xe1,0xf5,0xac,0xfe,0x04,0xbb,
    0x8f,0x99,0xa7,0x0f,0xe0,0x54,0xff,0xb3,0xc8,0xe7,0xe7,0x19,0x7c,0x7e,0x01,0xaf,
    0xf7,0xa7,0x2f,0xb1,0xfb,0x02,0x9f,0x9f,0xc2,0xa9,0xfe,0xd7,0xd4,0x5a,0x64,0x6b,
    0xc0,0x2a,0xfb,0x96,0xba,0x8b,0xec,0x1b,0xb0,0xee,0x81,0xdf,0xf1,0xdd,0x67,0x0d,
    0xb5,0x16,0x9d,0xaf,0xe0,0xd5,0xfe,0x07,0xe6,0x49,0x64,0x6b,0xc1,0x9a,0xfb,0x4f,
    0x19,0xbe,0xab,0xfc,0x0c,0x2f,0xfa,0x3f,0x82,0x35,0xde,0x2f,0xec,0xb9,0x6b,0x99,
    0x2b,0xd1,0xf9,0x1e,0x5e,0x7d,0xfe,0x96,0xc1,0xe7,0xef,0xf0,0xba,0xe7,0xfe,0x01,
    0xa7,0x7b,0xee,0xaf,0x70,0xaa,0xff,0x27,0x73,0xaf,0xfb,0xc6,0x7a,0x38,0xdd,0x73,
    0x37,0x9a,0x3d,0x62,0x7d,0xfa,0x99,0x24,0x7f,0xd3,0xbf,0x7f,0xe1,0x73,0x83,0xd9,
    0x73,0x37,0x22,0xfb,0xdb,0xc4,0xd8,0x44,0x0c,0xdd,0x73,0xff,0x61,0x6f,0xdd,0x64,
    0xf6,0xdc,0xcd,0x86,0x57,0x9f,0x9b,0x23,0x9f,0x1b,0xcd,0x9e,0x9b,0xb8,0xd0,0x93,
    0xba,0xe7,0x3a,0xfe,0x41,0x23,0xb6,0xeb,0xc0,0x1a,0x3f,0xdb,0x85,0x35,0xa7,0x38,
    0xc7,0x85,0xfe,0xd6,0xbd,0xa5,0x89,0x0b,0x3a,0x39,0xc6,0x26,0xd7,0x85,0x35,0xb4,
    0x1c,0x9d,0x3c,0x17,0xf4,0x72,0x89,0x91,0xf6,0xbf,0xd1,0xcf,0x77,0x61,0x4d,0xc8,
    0x7e,0x20,0xef,0xba,0x1f,0x64,0x99,0xff,0x61,0x74,0x31,0x7b,0x40,0x31,0x63,0xea,
    0x6a,0x7e,0x33,0x6c,0x9d,0xe1,0xf7,0xaf,0x36,0xf0,0x3a,0xe7,0x6d,0xdd,0x96,0xdf,
    0x53,0xb7,0x71,0x81,0xd7,0x75,0xd5,0xce,0x05,0xae,0xce,0xdc,0x3d,0xda,0xbb,0xe0,
    0xab,0x9d,0xc9,0xb9,0x03,0xff,0xff,0xd0,0x7b,0x72,0x47,0x7e,0x0b,0x9e,0x89,0xbe,
    0x8c,0x53,0xb8,0x0e,0xe6,0x37,0x92,0x7f,0x01,0x71,0xd1,0x10,0x9c,0x70,0x1b,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        uint convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, uint value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                uint destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
