// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000D.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000D[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x53,0x41,
    0x10,0xc6,0xb7,0xe7,0xb4,0xe7,0x54,0x04,0x2d,0x2d,0x50,0x44,0x2e,0x02,0x82,0x16,
    0x95,0x54,0x6d,0x0d,0x06,0x11,0x14,0x4a,0x45,0xaa,0x72,0xf5,0x06,0x9a,0x90,0x20,
    0xea,0x83,0xfa,0xa0,0xef,0x3e,0x18,0xff,0x1a,0xff,0x3e,0xe3,0x25,0x31,0x71,0x66,
    0xcf,0x6f,0xc9,0x84,0x26,0xcb,0x9e,0xf9,0xe6,0x9b,0xcb,0xb7,0xbb,0x43,0x1c,0x4d,
    0xa6,0xce,0xe5,0x5c,0x97,0x2b,0xba,0x77,0x2e,0xfb,0xf5,0xba,0x48,0x10,0xe7,0x4e,
    0xbb,0xc4,0xef,0xed,0xce,0x76,0x67,0xf6,0xf3,0x97,0xc3,0xd9,0x46,0xb3,0xae,0xfe,
    0x33,0x2e,0xf6,0x3c,0xf5,0x9d,0x75,0xa9,0xcb,0xcb,0xae,0xeb,0xc3,0xc1,0xfb,0x8f,
    0x8a,0x77,0xcb,0x5a,0x91,0x55,0x12,0x9e,0xe2,0xa9,0xf9,0x56,0x5f,0x5b,0xbe,0xba,
    0x7d,0x7e,0x8d,0x77,0xee,0x81,0x2b,0xb8,0x3e,0x6a,0x4f,0xb2,0x07,0x2c,0x07,0x56,
    0x34,0x58,0x04,0x56,0x32,0x58,0x0c,0x36,0x68,0xb0,0x3c,0xd8,0xb0,0xc1,0x0a,0x60,
    0x17,0x0c,0x96,0x80,0x5d,0x34,0x58,0x0a,0x76,0xd9,0x60,0x45,0xb0,0xab,0x06,0x3b,
    0x05,0x56,0xf7,0xba,0xe2,0xe3,0xfe,0x54,0xe3,0x0a,0x1a,0x07,0xb0,0xdb,0xb2,0x4f,
    0xa0,0x2f,0xd8,0xe3,0xc6,0x5e,0x3f,0xe1,0x5f,0xc7,0xaf,0xf9,0x2a,0xf2,0x37,0xf2,
    0x76,0xec,0xb5,0x46,0x3e,0x6f,0xec,0x7b,0x57,0x2d,0x55,0xe1,0xa7,0x68,0x89,0xb0,
    0xbb,0xb0,0xf3,0x9e,0x93,0xf7,0xbd,0xe8,0x79,0x2a,0x3e,0x8f,0xdd,0x0d,0xd6,0x2f,
    0x76,0x99,0x5c,0xc1,0xae,0x60,0xeb,0x6f,0x54,0x98,0xe1,0x5c,0xc2,0x2a,0xb3,0x12,
    0xf6,0x8a,0x59,0x5a,0xaf,0x9f,0xf3,0xe9,0xa3,0x5e,0x3f,0x67,0xa1,0xd8,0x15,0xea,
    0x55,0xa9,0xa7,0xfc,0x41,0x7c,0xa9,0xf1,0x8f,0x50,0x3f,0xd8,0x13,0xf8,0x95,0x3f,
    0x09,0xbf,0xe2,0x6b,0x44,0x6e,0x1a,0x9e,0xda,0x97,0x4e,0xc4,0xd5,0xb9,0xbf,0x60,
    0xcf,0x13,0xab,0x79,0x96,0x79,0x3f,0x09,0x7d,0x2e,0xf3,0x7e,0x15,0x3b,0x27,0xac,
    0x16,0xbe,0x1c,0x39,0x4f,0xee,0x9a,0x63,0x95,0xef,0x16,0x39,0x56,0xfd,0x1d,0x66,
    0xbf,0x21,0xe9,0x6d,0x0d,0xde,0x43,0xb0,0x35,0x78,0x6a,0xaf,0x83,0x9d,0x97,0x8a,
    0x8f,0xc8,0x11,0xfa,0xdc,0xe0,0x3e,0x83,0xbd,0x43,0x5f,0x9a,0x6b,0x17,0x0d,0x65,
    0xee,0xfb,0x05,0x7d,0xaa,0xff,0x96,0xbc,0xcf,0x88,0xbb,0x77,0x60,0xbf,0x05,0xd1,
    0xf7,0xbf,0xc0,0xdb,0xe8,0xe1,0xfe,0x37,0x05,0x4d,0x98,0xc5,0x1e,0xf8,0x01,0x2b,
    0x81,0xe5,0x7c,0x2f,0x05,0x7f,0xf6,0xbd,0x70,0xd5,0x77,0x4f,0xb0,0x41,0x7f,0x4e,
    0xd9,0xdd,0x56,0xc9,0x9f,0x7a,0xdd,0x19,0xfe,0x9d,0xb8,0x61,0x62,0x87,0x4c,0xdc,
    0x28,0x71,0x23,0x26,0x6e,0x0c,0xfc,0x1b,0x71,0xe3,0xc4,0x8e,0x11,0x17,0x66,0x75,
    0x80,0xf7,0xb0,0xc0,0x9d,0x4f,0x81,0xff,0x10,0xce,0x34,0xb3,0x3b,0xc5,0x5b,0xf8,
    0x25,0x27,0x30,0x83,0xb6,0xbf,0xc2,0x57,0x5f,0x4d,0xd6,0x0c,0xe7,0x52,0x33,0x9a,
    0xaf,0x99,0xb9,0xfc,0x2a,0x5c,0xc5,0x66,0xc1,0xb7,0xc4,0xd2,0x9e,0x0e,0xc0,0x02,
    0xef,0x8f,0xe4,0x08,0xb9,0x74,0xff,0x29,0x2c,0xe5,0xbd,0x81,0x53,0x20,0xa6,0x66,
    0x34,0x5c,0x47,0x43,0xdd,0x68,0xb8,0x01,0x1e,0x34,0xdc,0x04,0x0b,0x1a,0x9a,0x46,
    0x83,0xfa,0x1a,0xb2,0x9a,0xd4,0x6d,0x18,0x0d,0x73,0xd4,0xce,0x19,0x0d,0xb7,0xc1,
    0x83,0x86,0x43,0xb0,0xc0,0x53,0x0d,0x21,0x57,0xd3,0x68,0x38,0x82,0x33,0x43,0x4c,
    0xc3,0x68,0xb8,0x83,0x86,0x79,0xa3,0x61,0x01,0x3c,0x68,0xb8,0x0b,0x16,0x34,0x2c,
    0x19,0x0d,0xea,0x5b,0x94,0xb5,0x44,0x5d,0xfd,0x7e,0x42,0xdd,0xfb,0xd4,0x3e,0x32,
    0xb3,0xa6,0x3d,0x06,0xee,0x92,0xe9,0xf1,0x2d,0xbc,0x26,0x71,0x8b,0xf4,0xd3,0xf2,
    0xff,0xab,0xb3,0x59,0x54,0x5b,0xe7,0xae,0xc3,0xcc,0x3d,0x95,0xfe,0x74,0xde,0x1e,
    0xc3,0xe9,0x98,0x77,0xb9,0x89,0xae,0x0d,0xf3,0x2e,0xb7,0xc0,0xc3,0x7b,0xde,0xa6,
    0xee,0x16,0x71,0xbb,0x3e,0x67,0x16,0xb7,0x43,0x9c,0xce,0xe6,0x33,0xf0,0x4f,0xdc,
    0xc3,0x73,0xb0,0x70,0x57,0x2f,0xc9,0x65,0xe7,0x6e,0x0f,0x2c,0x9b,0xbb,0xc4,0xcf,
    0xf6,0x3e,0xdc,0xbd,0xe3,0x1c,0x05,0x3f,0xc7,0xaf,0xd0,0xb0,0x6f,0xe2,0x5f,0x83,
    0x3b,0x7f,0xfe,0xb1,0xff,0x7f,0xa6,0xd8,0x3f,0xc9,0x38,0x27,0xeb,0x3f,0xdd,0x5c,
    0x45,0xbe,0xf8,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
// }
