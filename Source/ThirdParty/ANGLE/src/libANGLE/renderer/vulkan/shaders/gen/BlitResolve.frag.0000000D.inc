// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000D.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000D[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xfb,0x4b,0x54,0x41,
    0x14,0xc7,0x67,0xef,0xdd,0xdd,0xbb,0xf6,0xd2,0xa8,0x55,0xd3,0x08,0xd3,0x8c,0x5e,
    0x88,0x60,0x45,0x10,0x09,0xfd,0x54,0xe0,0x9a,0xad,0xab,0x65,0x66,0x0f,0x73,0x0b,
    0x8a,0x7c,0x90,0xd2,0x43,0x8a,0x2d,0x17,0xc3,0x6a,0x69,0x7f,0x08,0xca,0xfa,0x17,
    0xfa,0xfb,0xa2,0x07,0x04,0x9d,0x33,0xf7,0x33,0x71,0xd8,0x85,0x71,0xee,0xf9,0xcc,
    0x79,0xcc,0x77,0xce,0x8c,0x71,0x34,0x90,0x38,0x97,0x71,0x3b,0x5c,0xc1,0x7d,0x73,
    0xe9,0x6f,0xaf,0x8b,0x84,0x38,0xb7,0xd3,0xe5,0xfd,0x7c,0xa9,0x54,0x29,0x0d,0xad,
    0xae,0x55,0x87,0x4e,0x9f,0x19,0xd6,0xf5,0x3d,0x2e,0xf6,0x7e,0xba,0xd6,0xee,0x12,
    0x97,0x95,0x59,0xc7,0xe2,0xfc,0xc3,0x25,0xe7,0x99,0x73,0x25,0x19,0x1d,0xe2,0xa7,
    0x3c,0x31,0xdf,0xbb,0x34,0x9f,0x7c,0xb5,0xfb,0xfc,0xa9,0xef,0x65,0x97,0x73,0x5d,
    0xd4,0x1e,0x60,0x0e,0x2c,0x03,0x2b,0x18,0x16,0xc1,0x3a,0x0c,0x8b,0x61,0xdd,0x86,
    0x65,0x61,0x07,0x0d,0xcb,0xc1,0xfa,0x0c,0xcb,0xc3,0x8e,0x18,0x96,0xc0,0x8e,0x19,
    0x56,0x80,0x9d,0x32,0xac,0x0d,0x36,0xec,0x75,0xc5,0xff,0xf7,0xa7,0x1a,0x4b,0x68,
    0xec,0xc4,0x9e,0x90,0xb9,0x1f,0x7d,0xc1,0x3e,0x6c,0xec,0x4a,0xcb,0x7a,0x85,0x75,
    0xcd,0xb7,0x4f,0xfe,0x46,0xde,0x8e,0xbd,0xd6,0xc8,0xe7,0x8d,0xfd,0xde,0x55,0x4b,
    0x97,0xf8,0x27,0x68,0x89,0xb0,0x77,0x63,0x67,0xbd,0x4f,0x56,0xfa,0x96,0x9e,0xa7,
    0xf2,0xf3,0xd8,0xed,0xb0,0xa2,0xd8,0x45,0x72,0x05,0xbb,0x13,0x5b,0x7f,0x87,0xa4,
    0x73,0xe1,0x5c,0xc2,0x28,0x32,0xf2,0xcc,0x9d,0x66,0x68,0xbd,0x6e,0xce,0xa7,0x8b,
    0x7a,0x6a,0x1f,0x80,0x9d,0xa4,0x5e,0x0f,0xf5,0xd4,0xbf,0x97,0xb5,0xc4,0xac,0x87,
    0xfa,0xc1,0x1e,0x64,0x5d,0xfd,0x8f,0xe2,0xaf,0xf5,0xf6,0x8b,0xea,0xe3,0xf8,0xa9,
    0x7d,0xa2,0x25,0x6e,0x84,0xfe,0x05,0x7b,0x94,0x58,0xcd,0x33,0xc6,0xfd,0xc9,0xb3,
    0xcf,0x31,0xee,0x6f,0xec,0xf7,0xdb,0xe6,0xc6,0x59,0xcb,0x90,0xb3,0x75,0xd6,0x1c,
    0x57,0xf8,0x1e,0x27,0x87,0xda,0x13,0xb0,0x1e,0xd9,0x5b,0x19,0xbf,0x49,0x58,0x19,
    0x3f,0xb5,0x2b,0xb0,0x5e,0xa9,0x38,0x4d,0x8e,0xb0,0xcf,0x19,0xfa,0x19,0xec,0x39,
    0xf6,0xa5,0xb9,0x6e,0xa1,0xa1,0x48,0xbf,0xe7,0xd9,0xa7,0xae,0x9f,0x95,0xfb,0x19,
    0xd1,0x7b,0x07,0xfb,0x25,0x44,0xef,0xff,0x05,0xee,0xc6,0x23,0xfa,0x5f,0x16,0xaa,
    0x71,0x8f,0x61,0xce,0xb0,0x45,0x98,0x6a,0xbd,0x2a,0x4c,0xcf,0x7e,0x09,0x5f,0x5d,
    0xbb,0x28,0x4c,0xfb,0xb6,0x4c,0x6f,0x7b,0xc8,0xaf,0x7e,0x2b,0xf0,0x4d,0xe2,0x9e,
    0x10,0xbb,0x62,0xe2,0x56,0x89,0xeb,0x33,0x71,0x6b,0xf0,0x3a,0x71,0x4f,0x89,0x5d,
    0x23,0x4e,0xfb,0xfe,0x8c,0xb8,0x41,0xe2,0xb4,0xe7,0xcf,0xe1,0xdf,0xc5,0x47,0xef,
    0xc2,0x0b,0x98,0xde,0x85,0x9f,0x72,0x02,0x35,0xb4,0xfd,0x11,0x7f,0x5d,0x5b,0x97,
    0x51,0xe3,0x5c,0xd6,0x8d,0xe6,0x97,0xd4,0x74,0x7e,0x3d,0xeb,0xd9,0x2b,0xf8,0xa4,
    0x58,0xba,0xa7,0x4f,0xb0,0xe0,0xf7,0x5b,0x72,0x84,0x5c,0x3a,0xff,0x10,0x2f,0xf5,
    0xfb,0x82,0x4f,0x8e,0x98,0x75,0xa3,0xe1,0x35,0x1a,0x46,0x8c,0x86,0x37,0xf0,0xa0,
    0x61,0x03,0x16,0x34,0x6c,0x19,0x0d,0x1b,0xfe,0x8c,0x9c,0x67,0x5a,0xb7,0x6e,0x34,
    0x6c,0x52,0x3b,0x63,0x34,0xbc,0x85,0x07,0x0d,0x9f,0x61,0xc1,0x4f,0x35,0x84,0x5c,
    0x5b,0x46,0xc3,0x36,0x3e,0x35,0x62,0xea,0x46,0xc3,0x3b,0x34,0x8c,0x1a,0x0d,0xef,
    0xe1,0x41,0xc3,0x07,0x58,0xd0,0xd0,0x34,0x1a,0x74,0xad,0x21,0xa3,0x49,0xdd,0x86,
    0x7f,0x37,0x69,0xdd,0x8f,0xd4,0xde,0x36,0x6f,0x4d,0xf7,0x18,0x7c,0x9b,0x66,0x8f,
    0x5f,0xf1,0xdb,0x22,0xae,0xc1,0x7e,0xc6,0xfd,0xbd,0x4d,0xdf,0xa2,0xda,0xfa,0xee,
    0xa6,0x78,0x73,0xd7,0x64,0x7f,0xd3,0x7e,0x4e,0x7d,0xa6,0xcc,0xbd,0xbc,0x81,0xae,
    0x19,0x73,0x2f,0x67,0xe1,0xe1,0x3e,0xdf,0xa4,0xee,0x2c,0x71,0xfa,0x1e,0x6f,0x13,
    0x37,0x47,0x9c,0xbe,0xcd,0x3b,0xf0,0x65,0xfa,0x70,0x17,0x16,0x7a,0x75,0x8f,0x5c,
    0xf6,0xdd,0x2d,0xc0,0xd2,0x77,0x97,0xf7,0x6f,0xbb,0x8a,0xef,0x02,0x39,0xae,0x8b,
    0xaf,0xbe,0xe3,0xfb,0x68,0xa8,0x9a,0xf8,0x07,0x70,0xe7,0x7b,0x13,0xfb,0xff,0x67,
    0xca,0xfe,0x4a,0xc6,0x73,0x32,0xfe,0x01,0xec,0x21,0xc7,0xe5,0xf8,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texture(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
// }
