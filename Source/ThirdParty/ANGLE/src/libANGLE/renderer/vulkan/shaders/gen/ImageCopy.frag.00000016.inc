// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0x44,0x10,0x50,0x43,0xc5,0xf2,0x41,0x0f,0x31,
    0xc4,0x02,0x33,0x81,0x94,0x8c,0x24,0xa3,0x14,0x34,0x2b,0xa1,0x08,0x03,0x4b,0x4c,
    0x92,0x24,0x4d,0x22,0x31,0x45,0x2d,0xad,0xa4,0xf2,0xd1,0x4b,0xac,0x44,0x2b,0x11,
    0xeb,0xbf,0xe8,0x2f,0x6a,0x7a,0xcc,0x34,0xd3,0x5e,0xe7,0xfe,0x16,0xf3,0xcd,0x1d,
    0x2b,0x66,0xf6,0x9c,0xbb,0xbe,0xf5,0xed,0xb5,0xbf,0xb5,0xd6,0x3e,0xeb,0x90,0x4c,
    0xac,0x48,0x47,0x51,0x4e,0x54,0x18,0xe5,0x47,0xbf,0x44,0x99,0xbf,0x79,0x51,0x22,
    0x20,0x51,0x54,0x14,0xa5,0xe2,0xe7,0x96,0xf6,0x1d,0xed,0xb5,0x87,0x86,0xfb,0x6a,
    0xeb,0x1b,0xea,0xcc,0x3f,0x37,0x4a,0xc6,0x3c,0xf3,0x95,0x44,0xe9,0x28,0x37,0x3c,
    0x6d,0x1d,0xe8,0xdd,0x37,0x68,0x78,0x71,0x58,0xb7,0xc3,0x2a,0x0d,0x3c,0xc3,0xd3,
    0x16,0x23,0xfc,0x2a,0x8e,0x63,0xda,0x9e,0x28,0x6a,0x8b,0xf2,0xa2,0x72,0xce,0x5b,
    0xc1,0xd3,0xb1,0x1c,0xb0,0x7c,0xc1,0x12,0x60,0xa5,0x82,0x25,0xc1,0x2a,0x04,0xcb,
    0x05,0xbb,0x4b,0xb0,0x3c,0xb0,0x25,0x82,0xa5,0xc0,0xee,0x11,0x2c,0x0d,0xb6,0x52,
    0xb0,0x7c,0xb0,0xfb,0x05,0x2b,0x00,0x5b,0x2d,0x58,0x21,0x58,0x9d,0x60,0x45,0x60,
    0xf5,0x82,0xcd,0x01,0x5b,0x2f,0x58,0x31,0x58,0x53,0x5c,0xa7,0xe4,0x6c,0xbe,0x56,
    0xb3,0xcd,0xe1,0xb9,0x9c,0xfa,0xb8,0xbd,0x4c,0x6c,0xab,0xf3,0x52,0xec,0xf2,0xb0,
    0x2b,0x11,0xfb,0x93,0x71,0x6d,0xec,0xf7,0xfc,0xc0,0x49,0x91,0xa7,0xd5,0x75,0x61,
    0xb0,0xd3,0xe4,0x9f,0x88,0xf1,0xdc,0x38,0xc7,0x34,0x6b,0x41,0xd8,0x59,0x08,0xdf,
    0xb8,0x45,0xe4,0x96,0x0b,0x77,0x0e,0x71,0x0c,0x6f,0xc4,0x2e,0x96,0xd8,0x73,0xe1,
    0xfb,0xd9,0x65,0xc4,0x8a,0x62,0x9d,0xa5,0xb3,0x75,0x76,0x0d,0xb6,0xca,0xfe,0x67,
    0x39,0xc7,0xce,0xaf,0xa0,0xfe,0xe5,0x9c,0x5f,0x11,0x9f,0x93,0xc1,0x6a,0xc8,0x75,
    0x01,0x7a,0x8c,0xbf,0x10,0x5f,0x5a,0xfc,0x55,0x92,0xcf,0x52,0xfc,0x65,0xf1,0x3d,
    0x4a,0xc4,0xb5,0xad,0x41,0xb7,0xd7,0xdd,0x78,0xf7,0x8a,0x66,0x8f,0x53,0xc3,0xdd,
    0x72,0xfe,0x5a,0xce,0x75,0xff,0x3a,0x6a,0x63,0x75,0x79,0x8c,0xbd,0x7e,0xee,0x46,
    0xe2,0x19,0x5e,0x19,0x14,0xb4,0xe0,0xcf,0xe1,0xcc,0xec,0xa7,0xed,0x79,0x9c,0xdf,
    0x2d,0xe4,0x6e,0xf6,0x66,0x30,0x3f,0xb3,0x35,0xcb,0xde,0xca,0x7b,0x62,0xfb,0x9f,
    0x26,0xd7,0x14,0x9a,0x9e,0xe5,0x77,0x52,0xf8,0x9d,0xf4,0xce,0xed,0x5d,0x92,0xb3,
    0xe5,0xd8,0x9d,0xc5,0xdf,0x4b,0x1e,0x16,0x6f,0x84,0x3a,0x7a,0x8e,0xef,0xe2,0x1b,
    0x11,0xfe,0x18,0xef,0x94,0xf1,0x4f,0xc1,0xd7,0xf3,0xce,0xa1,0xd1,0xf6,0x7f,0xca,
    0xfe,0x32,0xf1,0x5f,0xe6,0x1d,0x72,0x3d,0xd7,0xe5,0x1e,0xcf,0xa0,0x6d,0x84,0xfa,
    0xcc,0x30,0x87,0x92,0x71,0x2f,0xf2,0x62,0x5e,0x2e,0xf5,0x31,0xec,0x8f,0x80,0xe4,
    0xc1,0xcd,0x97,0x7b,0xe2,0xf6,0x62,0xb1,0xad,0x5f,0x9b,0xc4,0xb6,0xdc,0x46,0xc5,
    0xb6,0xfb,0x71,0x09,0xbb,0x99,0xf7,0xa6,0x84,0xfe,0x6f,0x0b,0xe8,0x5c,0x66,0x57,
    0x09,0xcb,0x7b,0x3b,0xc8,0xfb,0x38,0x0f,0x7f,0x4b,0x50,0xb4,0x90,0xf9,0x35,0x9f,
    0xbb,0xdc,0x0c,0xa7,0x12,0xfc,0x44,0xe0,0x98,0xbd,0x88,0x7d,0x95,0xf1,0x3d,0x4a,
    0xc6,0xfa,0x17,0x09,0x7f,0x09,0x39,0x99,0x6f,0x31,0xb6,0xc5,0xb7,0x3b,0x7f,0x37,
    0xf1,0xab,0xe0,0xfb,0x7b,0x6a,0xf8,0x74,0xe0,0x2c,0x93,0xf9,0x68,0xef,0xc1,0xef,
    0x21,0x46,0x35,0xba,0xff,0x0a,0x7c,0x9f,0x93,0xd5,0xd4,0x71,0x25,0xb1,0xad,0x0e,
    0xf7,0x51,0xbb,0xe5,0xc4,0x4e,0x31,0x3f,0x0d,0x3f,0x86,0xfd,0x00,0x98,0xef,0x59,
    0x25,0x7b,0x4c,0xef,0x2a,0x38,0x7f,0x86,0xd8,0x7e,0x46,0xb5,0xe8,0x5f,0x8d,0xfe,
    0x1a,0xd1,0xff,0x20,0xb8,0xeb,0xaf,0x05,0x73,0xfd,0x75,0xa2,0xdf,0x7c,0x6b,0x98,
    0xd7,0x16,0x7b,0x8d,0x68,0x79,0x08,0x2d,0x6b,0x45,0xff,0xc3,0xe0,0xae,0xbf,0x1e,
    0xcc,0xf7,0x34,0xc8,0x1e,0xd3,0xdf,0x00,0xc7,0xf4,0xfb,0x19,0x75,0xa2,0xff,0x11,
    0xf4,0xaf,0x13,0xfd,0xeb,0xc1,0x5d,0xff,0xa3,0x60,0xae,0xbf,0x51,0xf4,0x9b,0x6f,
    0x43,0x7c,0xf7,0x32,0xb1,0x37,0x48,0xdf,0x9b,0xd0,0x62,0xf7,0x2e,0x73,0x1f,0x33,
    0x58,0x93,0xcc,0x13,0xbf,0x13,0xcd,0x68,0xf4,0x38,0x8d,0xc4,0xb1,0x19,0xf3,0x04,
    0xf3,0xc5,0xef,0xe4,0x93,0x68,0x6e,0x95,0xb3,0xb6,0x80,0xbb,0xdd,0xc6,0xd9,0xc7,
    0xb9,0xa3,0x4f,0xc1,0x69,0x23,0x8e,0xcd,0xa0,0x76,0xe2,0x6c,0x95,0xfa,0x3e,0x03,
    0xde,0x11,0x38,0xa9,0x58,0x7b,0x66,0x6f,0x24,0xd8,0x76,0xb0,0x9c,0xf8,0x77,0x2a,
    0x9e,0x5f,0x1d,0x70,0xb7,0x13,0xc3,0xcf,0xd8,0xc1,0x19,0x9d,0x72,0xc6,0x4e,0xf0,
    0x9e,0xa0,0xcc,0xe6,0xee,0x73,0xe4,0xd8,0xc1,0x0c,0xd9,0x49,0x5d,0x36,0xe1,0xf3,
    0x5e,0x3d,0x4f,0xac,0x5d,0xd2,0xab,0x17,0xc0,0xbd,0x57,0x2f,0x82,0x79,0xaf,0xba,
    0xa4,0x57,0xe6,0xdb,0x1d,0x56,0x3f,0x35,0xde,0x2d,0xf7,0xe6,0x25,0xe6,0x4a,0xb7,
    0xe8,0x7c,0x19,0xbc,0x99,0xef,0x46,0x0f,0x9c,0x6d,0x61,0x2a,0x59,0xce,0xaf,0x80,
    0xf5,0xc8,0x1c,0x49,0x48,0x4d,0x7a,0x89,0xe1,0x6b,0x3c,0x9c,0x65,0xf8,0x1e,0xf6,
    0xf6,0x4a,0xec,0x57,0x67,0x63,0x17,0xc4,0x76,0x1f,0xd8,0x1e,0x66,0x65,0x9e,0x7c,
    0x23,0xbc,0x36,0x7d,0xdc,0x99,0x2e,0xf2,0xe9,0x97,0x5a,0xbd,0x46,0xad,0xf6,0x4a,
    0xad,0x5e,0x07,0xf7,0x5a,0xed,0x03,0xf3,0x5a,0xed,0x97,0x5a,0x99,0x6f,0x20,0xac,
    0xfd,0xc4,0x1e,0x90,0x5a,0xbd,0x71,0x87,0x5a,0x1d,0x00,0x9f,0x21,0xf6,0x20,0x58,
    0x2b,0x1a,0x3d,0x8e,0x3d,0x7f,0x0b,0x7d,0x37,0xce,0x9b,0x68,0xe8,0x87,0x3f,0x80,
    0x8e,0x21,0xd1,0x61,0x9c,0x83,0x61,0x0d,0xb1,0xff,0xa0,0xe8,0x78,0xeb,0x0e,0x3a,
    0x0e,0x81,0x7b,0x5d,0x87,0xb3,0x7a,0xf6,0x36,0xd8,0xf0,0xbf,0xf4,0xec,0x30,0x31,
    0x7c,0x9d,0xa1,0x67,0x47,0xd8,0x7b,0x58,0x62,0xbf,0x93,0xd5,0xb3,0xa3,0x60,0x47,
    0xfe,0xa3,0x67,0x47,0xa9,0x87,0xe7,0x33,0x94,0xd5,0xc3,0x2e,0x89,0xff,0x1e,0xf1,
    0x47,0xf9,0xa6,0x1f,0x03,0xb3,0x58,0xa3,0xd8,0xde,0xef,0xe3,0xf4,0x7b,0x4c,0xfa,
    0xfd,0x3e,0xb8,0xf7,0xfb,0x04,0x98,0xf7,0x7b,0x5c,0xea,0x6c,0xbe,0x93,0x61,0x9d,
    0x45,0xc7,0x49,0xe2,0xd8,0xb9,0xa7,0xf9,0xc6,0xda,0x1c,0x3b,0x15,0xd7,0x24,0x83,
    0x9d,0x96,0x6f,0xb8,0x73,0x3f,0x98,0xe5,0x16,0xc4,0xf6,0x87,0x60,0x67,0xa4,0x26,
    0x09,0xa9,0xc9,0x28,0x1c,0xab,0xc1,0x38,0x67,0x9f,0x95,0xbc,0x3e,0x22,0xaf,0x73,
    0x92,0xd7,0xc7,0xe0,0x9e,0xd7,0x27,0x60,0x9e,0xd7,0x84,0xe4,0x65,0xbe,0xf3,0x61,
    0x5d,0x24,0xf6,0x79,0x62,0xdb,0xff,0x34,0x9f,0xa1,0xb5,0x5b,0x62,0x7f,0x0e,0xee,
    0x9c,0x0b,0x70,0xfc,0x7b,0x78,0x01,0x8e,0xe9,0x9d,0x20,0xe6,0x45,0x99,0x77,0x5f,
    0xa0,0xf7,0xb2,0xdc,0xc9,0x2f,0xc1,0x6d,0xff,0x25,0x6c,0xf7,0x7d,0xc5,0xff,0x2b,
    0xbf,0x32,0x5b,0xbf,0x06,0xeb,0x94,0xfc,0xbe,0x01,0x6f,0x25,0xbf,0x49,0xc9,0xcf,
    0x7c,0x57,0xc2,0x9a,0x44,0xcb,0x15,0xd1,0x7e,0x15,0xed,0xfe,0x2d,0xbc,0x4a,0x1e,
    0xa6,0xdd,0xf9,0x93,0xa2,0xe5,0xdb,0x2c,0x2d,0xdf,0x81,0x55,0x89,0x96,0xef,0xc1,
    0x5d,0xcb,0x94,0x68,0x31,0xdf,0xb5,0xb0,0xa6,0x88,0x7d,0x4d,0xb4,0xdc,0x40,0xcb,
    0x75,0xb4,0xdc,0x10,0x2d,0xce,0x9f,0x12,0x2d,0x3f,0x64,0x69,0xf9,0x11,0x6c,0x4c,
    0xb4,0xfc,0x04,0xee,0x5a,0xa6,0x45,0x8b,0xf9,0x6e,0xc6,0xdc,0x4c,0xec,0x9b,0xa2,
    0xe5,0x96,0xf4,0xdd,0xb4,0xdc,0xa2,0x46,0xa6,0xc5,0xf9,0xd3,0x59,0x3d,0x9e,0xc8,
    0xba,0xa3,0xe3,0x72,0xe7,0x7f,0x26,0x9e,0xc5,0xba,0x8d,0xfd,0x77,0x98,0x2c,0xeb,
    0xc3,0xfa,0x07,0x28,0x71,0xb7,0x15,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
