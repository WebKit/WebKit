// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4b,0x9e,0x55,
    0x18,0xc7,0xef,0xe7,0xdd,0x69,0xbe,0x4c,0xdd,0xcc,0x91,0xab,0xb5,0x09,0x85,0x4b,
    0x8d,0x6c,0x99,0xb6,0x81,0x2d,0x5b,0x2d,0x6b,0xd3,0xbd,0x54,0x0a,0x95,0x63,0xae,
    0xa6,0xcc,0x94,0xd5,0x46,0x23,0x74,0x4d,0x21,0xda,0x2a,0x85,0x90,0x15,0xa5,0x50,
    0xfa,0x43,0x29,0xee,0x87,0xa0,0x9f,0x22,0xa2,0x36,0xda,0xd6,0xcb,0x9f,0x13,0xbd,
    0x40,0xd0,0xb9,0xce,0xf3,0xb9,0xc6,0x97,0x87,0x62,0xc2,0xe1,0xbe,0xcf,0xf7,0x7a,
    0xfb,0x7e,0xaf,0x73,0xdd,0xe7,0x31,0x93,0xde,0x5e,0x48,0x92,0x54,0x52,0x9e,0x94,
    0x25,0xbf,0x25,0xc5,0xbf,0x8d,0x49,0x3a,0x20,0x49,0x52,0x91,0xe4,0xe3,0x73,0x5f,
    0xdf,0xa1,0xbe,0xd6,0xd3,0x6f,0x1c,0x6f,0xed,0x78,0xb8,0xdd,0xec,0x55,0x49,0x26,
    0xfa,0x99,0xad,0x3a,0x29,0x24,0xd9,0xf0,0xb4,0x75,0x6a,0xf8,0xe4,0xb8,0xe1,0x95,
    0x61,0x5d,0x09,0xab,0x26,0xf8,0x19,0x5e,0xb0,0x1c,0xe1,0xad,0x32,0xe6,0xb4,0x98,
    0x24,0x79,0x2a,0xc9,0x25,0x75,0xd4,0xdb,0xce,0xd3,0xb1,0x14,0x58,0x99,0x60,0x69,
    0xb0,0x1a,0xc1,0x32,0x60,0xf5,0x82,0x65,0xc1,0xee,0x14,0x2c,0x07,0x76,0x97,0x60,
    0x79,0xb0,0x7b,0x04,0x2b,0x80,0xed,0x10,0xac,0x0c,0xec,0x3e,0xc1,0x36,0x80,0xed,
    0x14,0xac,0x1c,0xac,0x5d,0xb0,0x0a,0xb0,0x0e,0xc1,0xee,0x00,0xeb,0x14,0xac,0x12,
    0xec,0xb1,0xd8,0xa7,0xcc,0x2d,0xbd,0xd6,0xb3,0xbd,0xe1,0x79,0x2f,0xfd,0xf1,0xfd,
    0x36,0xd9,0x5b,0x9f,0xb7,0xb2,0xaf,0x0b,0x51,0xe9,0x68,0xcf,0xc4,0xde,0xd8,0xfb,
    0xa6,0xe0,0x93,0x47,0xa7,0xf5,0xb5,0x21,0xec,0x0b,0xe8,0x37,0xfb,0xe6,0xe0,0x59,
    0x8e,0xdd,0x6c,0x15,0x68,0xc9,0x46,0x2c,0x1b,0xf9,0xa6,0xd0,0xd2,0xcd,0xbe,0x52,
    0x72,0x55,0xe1,0xef,0xb5,0x6a,0xc9,0x95,0x44,0x5e,0x35,0xb7,0xfa,0xea,0x35,0x6d,
    0xd5,0xde,0x66,0xb9,0x8f,0xd5,0xaf,0xa7,0xdf,0x75,0xd4,0xaf,0x8f,0x75,0x8a,0x58,
    0x0b,0xda,0x36,0xc3,0xc7,0xfc,0x1b,0xb0,0x15,0xc4,0xde,0x24,0x7a,0xb6,0x62,0xaf,
    0x8d,0x73,0x93,0x8e,0xbd,0x6c,0x81,0xb7,0xf7,0xd9,0xe3,0x5a,0x98,0x1d,0xb7,0x3f,
    0x48,0x1d,0xb7,0xef,0xa2,0x17,0xd6,0x87,0x3d,0xf0,0xb6,0x3a,0x8d,0xa1,0x42,0x0f,
    0xfb,0x14,0x39,0x4b,0x9f,0xc6,0xe5,0x71,0xde,0x7b,0xd0,0x66,0xfb,0xbd,0x25,0x1c,
    0x7a,0x4b,0xf6,0xfb,0x99,0x7b,0x8b,0x7f,0x06,0x2d,0x79,0x38,0x3c,0xc7,0x7b,0x46,
    0xfc,0x07,0x38,0x1b,0xdf,0x1f,0xc5,0xc7,0xf7,0x27,0xe8,0x95,0xc5,0x9f,0xa3,0x2f,
    0x59,0xb1,0x4f,0xf3,0x0d,0xf8,0xfe,0x52,0x49,0xef,0x2f,0x33,0xd3,0xc6,0x67,0x9d,
    0xda,0xe7,0xd0,0xb3,0xce,0x3d,0x90,0x89,0xbd,0xca,0x45,0x1e,0x59,0xf4,0x18,0xf6,
    0x67,0x40,0xac,0xbf,0xbb,0x99,0xbb,0x6a,0xfa,0x79,0x20,0x30,0xaa,0xe2,0x5b,0xaf,
    0x66,0x79,0xef,0xc6,0x99,0xdf,0x8d,0xd8,0x7b,0x42,0x86,0x06,0xbe,0xf7,0x4d,0xcc,
    0xc2,0x6e,0x7c,0x1a,0xc1,0x2f,0x04,0x1f,0xdb,0x6f,0x21,0xae,0x91,0x38,0x9b,0x85,
    0xbb,0x89,0x6b,0x22,0xce,0xe7,0xd7,0xf0,0xb5,0xe0,0xb3,0x4d,0xee,0x09,0x9b,0x8f,
    0x3f,0x02,0xf3,0x66,0xf8,0xfc,0x1d,0xfc,0xfd,0xbe,0x68,0x46,0x8f,0xbd,0xf7,0x87,
    0xb8,0x3c,0x77,0xc6,0x16,0x7c,0xa7,0xe8,0xd7,0xfd,0xe0,0x03,0x61,0x67,0x9c,0xbe,
    0x06,0x73,0xbf,0xbf,0x42,0x0e,0xcf,0x65,0xcf,0xdf,0x83,0x97,0xf9,0xfd,0x88,0x4f,
    0x8e,0x98,0x1d,0xa2,0x61,0x27,0x1a,0x5a,0x44,0xc3,0x03,0xe0,0xae,0xa1,0x15,0xcc,
    0x35,0xb4,0x8b,0x06,0xb3,0xb5,0x71,0x77,0x59,0xdd,0x36,0xd1,0xf0,0x10,0xb5,0x53,
    0xa2,0xa1,0x03,0xdc,0x35,0x7c,0x03,0xe6,0x7e,0xa6,0xc1,0x73,0xb5,0x8b,0x86,0xab,
    0xf8,0x34,0x13,0xd3,0x26,0x1a,0x1e,0x41,0xc3,0x2e,0xd1,0xd0,0x09,0xee,0x1a,0x1e,
    0x05,0x73,0x0d,0xdd,0xa2,0xc1,0x6c,0x5d,0x71,0xee,0x8a,0x75,0xbb,0x98,0xa3,0x42,
    0xcc,0x57,0xac,0x7d,0x55,0xbe,0x3f,0xe3,0xe8,0xbe,0xdd,0xc2,0xf1,0x1a,0x7e,0xed,
    0xc4,0x75,0xc1,0xc7,0xbe,0xd1,0x27,0xf8,0x3e,0x7d,0xe6,0x9e,0x84,0x73,0xaf,0xcc,
    0xdc,0x3e,0xf0,0xf3,0xcc,0xdc,0xd3,0x60,0xd7,0x88,0xb3,0x6f,0xb6,0x8f,0xb8,0xfd,
    0xc4,0x59,0x4f,0x9f,0x05,0xf7,0xbe,0x1f,0x20,0x36,0x11,0xec,0x20,0x58,0x2a,0xbe,
    0xe7,0xe3,0xf7,0xde,0x8f,0xef,0x41,0x72,0x78,0x8d,0x43,0xd4,0x18,0x90,0x1a,0x87,
    0xc1,0x5f,0x0e,0xcc,0xec,0xbe,0x3a,0x82,0xa6,0x7e,0xee,0x88,0xc3,0x72,0x1e,0xcf,
    0x13,0x7f,0x54,0xce,0xe3,0x05,0x70,0x3f,0x8f,0x17,0xc1,0xfc,0x3c,0x86,0xe4,0x3c,
    0xcc,0x36,0x18,0xd6,0x08,0x3d,0x1e,0x14,0x1d,0x2f,0x51,0x3b,0x13,0xb9,0x97,0x45,
    0x1d,0xaf,0x80,0x1d,0x91,0x6f,0x3d,0x2d,0x3a,0x87,0x89,0xf3,0x35,0x1b,0x72,0x19,
    0x7e,0x8c,0xd8,0xe1,0x98,0x6b,0x43,0xd4,0x75,0x9c,0x3c,0xc7,0xb8,0x6f,0x72,0x72,
    0x2f,0xda,0xb9,0x0f,0xc1,0x69,0x44,0xf4,0xbe,0x8a,0xde,0x13,0xa2,0xf7,0x35,0x70,
    0xd7,0x7b,0x12,0xcc,0xf5,0x8e,0x89,0x5e,0xb3,0x8d,0x86,0x35,0x46,0xee,0x51,0xd1,
    0x7b,0x4a,0xf4,0xae,0x93,0x6b,0x1c,0xbc,0x17,0x4e,0x1e,0x37,0xc6,0x2c,0x9a,0xcf,
    0xeb,0xd4,0x1c,0xc1,0x7f,0x94,0xba,0x93,0x52,0xd7,0x7c,0x26,0xc2,0x9a,0x24,0x7e,
    0x42,0xea,0x9e,0xfe,0x8f,0x3e,0xbf,0x79,0x9b,0x3e,0x9f,0x21,0xce,0xd7,0xbb,0xf4,
    0xf9,0x2c,0xb1,0x67,0xa4,0xcf,0x6f,0x91,0xe7,0xec,0xff,0xf4,0xd9,0x39,0x4d,0xa2,
    0xc9,0x62,0xae,0x13,0x33,0x46,0xfc,0x44,0xc9,0x99,0x0c,0x89,0xef,0x4f,0x9c,0xe5,
    0x20,0x71,0x96,0xe7,0x6d,0x7e,0xa7,0xa6,0xb0,0xfb,0xf9,0x9d,0xe7,0xfc,0xa6,0xe5,
    0xfc,0xde,0x01,0xf7,0xf3,0xbb,0x00,0xe6,0xe7,0x37,0x2b,0x7d,0x34,0xdb,0x4c,0x58,
    0x17,0xe1,0x31,0x83,0x4e,0xab,0xf5,0x1e,0xf5,0xa6,0xd0,0x59,0xa0,0x67,0xae,0x73,
    0x96,0x98,0x8b,0xc2,0xe7,0x7d,0xf8,0x5c,0x12,0x3e,0x1f,0x80,0x3b,0x9f,0x0f,0xc1,
    0x9c,0xcf,0xbc,0xf0,0x31,0xdb,0x5c,0x58,0x0b,0xe4,0x9e,0xe3,0x5c,0x2d,0xcf,0x47,
    0x70,0xc9,0x70,0x07,0x1b,0xc7,0x6f,0x05,0xf7,0xfb,0x6d,0x9e,0xd8,0x05,0xb9,0x17,
    0x3e,0x86,0xd7,0x65,0xb9,0x17,0x3e,0x01,0xbf,0xce,0xdc,0x7c,0x0a,0x36,0x20,0x5c,
    0x3f,0x03,0xef,0x85,0xeb,0x92,0x70,0x35,0xdb,0x62,0x58,0x4b,0xd4,0x5b,0x14,0x5e,
    0xdf,0xa1,0x6f,0x4a,0x7e,0x1b,0xdc,0x6f,0x89,0xb3,0x36,0xbf,0x1b,0xf8,0x2c,0x10,
    0xb3,0x28,0x7c,0x3e,0x87,0x4f,0x93,0xf0,0xf9,0x02,0xdc,0xf9,0xac,0x08,0x1f,0xb3,
    0x2d,0x87,0xb5,0x42,0x9d,0x65,0xe1,0xf3,0x3d,0x7c,0x6e,0x70,0x86,0xc6,0xc7,0xfd,
    0x56,0x84,0xcf,0x4d,0x7c,0x96,0x88,0x59,0x16,0x3e,0x5f,0xc2,0x67,0x5a,0xf8,0x7c,
    0x05,0xee,0x7c,0xd6,0x84,0x8f,0xd9,0x56,0xa3,0x6f,0xb1,0xce,0xaa,0xf0,0xf9,0x81,
    0xff,0x2b,0x6f,0xca,0x3c,0xb9,0xdf,0x9a,0xf0,0xf9,0x15,0x9f,0x15,0x62,0x56,0x4b,
    0xce,0x78,0x5e,0x7c,0x7f,0x61,0x1e,0xe6,0x88,0x5b,0x2b,0x99,0xd3,0x59,0xf1,0xfd,
    0x99,0xf9,0x9e,0x21,0xce,0xf2,0xec,0x09,0x4c,0xae,0x60,0xfb,0x27,0x9c,0x5a,0x67,
    0x58,0xff,0x02,0x9b,0x13,0x36,0x51,0x28,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
