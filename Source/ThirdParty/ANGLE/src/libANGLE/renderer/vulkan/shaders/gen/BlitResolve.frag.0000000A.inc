// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x68,0x5d,0x55,
    0x14,0x86,0xf7,0xb9,0xf7,0xe6,0x24,0xed,0x4d,0x34,0xad,0xb7,0x4d,0xac,0x37,0x4d,
    0xb4,0x56,0x7c,0x94,0x52,0x88,0x8a,0x20,0x96,0x3a,0xd2,0x4a,0x83,0x98,0x0e,0x3a,
    0x09,0x18,0xc1,0x0c,0x1c,0xa4,0x58,0x94,0x0c,0x3a,0x30,0xc5,0x4e,0x32,0x28,0x42,
    0x26,0xd2,0x76,0xa0,0xad,0x15,0x8a,0x88,0x7d,0xcf,0xaa,0x16,0x1f,0xa5,0x12,0x6b,
    0x50,0xa2,0x06,0x03,0x3e,0x4a,0x40,0x4b,0x40,0x4b,0xc0,0xd4,0xf8,0x08,0x71,0xfd,
    0xfb,0x7c,0x3b,0x5d,0xdc,0xc0,0xca,0x3e,0xeb,0xff,0xd7,0x5e,0xff,0x5a,0xeb,0xec,
    0x7d,0x6e,0xb9,0xb4,0xa9,0x39,0x84,0x2c,0xac,0x0e,0x2d,0xa1,0x27,0x0b,0xf1,0x6f,
    0x4d,0x28,0x05,0x3d,0x56,0x43,0x1e,0xd7,0xa7,0x76,0xed,0xde,0xb5,0xf5,0x95,0x57,
    0x5f,0xdc,0xfa,0xf0,0x23,0xdb,0xc4,0xdf,0x16,0xca,0x31,0x4e,0xdc,0xed,0xe6,0x55,
    0x6c,0x95,0x0d,0xbf,0xf0,0xd2,0x5e,0xe1,0x1d,0x66,0xbb,0xcd,0x06,0xcc,0x86,0x84,
    0x9b,0x8d,0x98,0x8d,0x9a,0x8d,0x99,0x8d,0x9b,0xb5,0x5b,0x0e,0xed,0x69,0x56,0x7e,
    0x7b,0xea,0x88,0x7a,0xca,0x17,0xc2,0xd3,0xa1,0x29,0xd4,0x8b,0x52,0xc2,0x26,0xd6,
    0x84,0x65,0x60,0x2d,0x0e,0x2b,0x81,0xb5,0x3b,0xac,0x0c,0xd6,0xe9,0xb0,0x0a,0x58,
    0xdd,0x61,0x4d,0x60,0x3d,0x0e,0xcb,0xc1,0xee,0x75,0x58,0x33,0xd8,0xfd,0x0e,0x6b,
    0x01,0xdb,0xe2,0xb0,0x55,0x60,0xdb,0x62,0x5f,0xe5,0x95,0xfa,0xd4,0xa3,0x66,0xb2,
    0x91,0x7e,0xe4,0x0f,0xe0,0x67,0xf8,0x43,0xf8,0x29,0x7e,0x18,0xbf,0x8c,0x3f,0x82,
    0x5f,0xc1,0x1f,0xc5,0x6f,0xc2,0x1f,0xc3,0xcf,0xf1,0xc7,0xf1,0xd3,0x8c,0x4f,0xd8,
    0x7a,0x8f,0xd3,0x97,0x7f,0x37,0xfe,0x1d,0xa6,0x5a,0x8a,0x7e,0x39,0xea,0xe9,0x79,
    0x9d,0xc5,0xe4,0xcc,0x26,0x8b,0xef,0xb5,0x12,0x73,0xe5,0x8e,0xaf,0xc2,0x07,0xf8,
    0x56,0xde,0xa3,0x6a,0x5c,0x6f,0x99,0x6a,0xf0,0xe2,0xd6,0xd9,0x5a,0x83,0xeb,0xb1,
    0xff,0xeb,0xc9,0x2b,0xfc,0x71,0xfc,0x0e,0xa7,0xd5,0x49,0x7c,0x29,0xf6,0xd1,0xba,
    0xf2,0x1e,0x3a,0xb1,0x1c,0xab,0xb1,0x56,0x9d,0x29,0x7f,0x17,0xef,0xa3,0x4e,0xfe,
    0x2e,0xe6,0x21,0xec,0x21,0x7a,0xeb,0xa6,0x76,0xc5,0xf7,0xc0,0x35,0x3b,0x7e,0x33,
    0xbe,0xf8,0xfb,0xe0,0xab,0x51,0xb3,0x14,0x1e,0x20,0x4e,0xfe,0x83,0xe4,0x49,0xfb,
    0x7a,0x39,0x1f,0xc9,0xdf,0xde,0xa0,0xbb,0x93,0x9a,0x95,0xf7,0x19,0xb8,0xdc,0xf1,
    0x7d,0xcc,0x41,0x7c,0x3f,0x67,0xa0,0x95,0x3e,0xfa,0xb9,0x5f,0x65,0x17,0xbf,0x87,
    0x39,0x25,0x7e,0xa0,0x81,0x1f,0x64,0xee,0x89,0x1f,0x82,0x4f,0xfe,0x70,0x43,0xfc,
    0x3e,0xee,0x53,0xe2,0x47,0x1a,0xf8,0xfd,0xbc,0xd7,0xc4,0x8f,0x36,0xf0,0x07,0xcd,
    0x76,0x38,0x7e,0xac,0x81,0x3f,0x64,0x76,0xc0,0xf1,0xe3,0xf0,0x5b,0x6c,0xda,0xea,
    0xf3,0x4d,0x66,0xea,0xed,0x4e,0x9b,0xd2,0x71,0xe6,0xcf,0xa7,0x6a,0xe5,0x3b,0x94,
    0xb9,0xf7,0xf8,0x0e,0xcf,0xc7,0xc9,0x2f,0xff,0x44,0xc3,0xfb,0x39,0xc5,0xbd,0x51,
    0xfc,0x69,0xe6,0xaf,0x73,0xf4,0xa8,0xa1,0x25,0x66,0x15,0xa8,0x69,0xd1,0x10,0xc5,
    0x3e,0xc1,0x19,0xbe,0xc8,0x39,0x7d,0xd6,0x6a,0xd5,0x39,0xfc,0x10,0xec,0xa2,0xab,
    0x67,0x2f,0x77,0xe5,0x23,0xf8,0x27,0x2d,0x83,0xe6,0xf5,0x31,0x67,0xb0,0x9b,0x7c,
    0x8a,0xb9,0x04,0xfe,0xba,0xc5,0xc8,0xff,0x84,0x7d,0x97,0xd8,0xa7,0x73,0xf7,0x29,
    0xfb,0x36,0xb3,0x4f,0x33,0xf8,0x0c,0xfc,0x7d,0x8b,0xd1,0x59,0xfc,0x1c,0x4c,0xb3,
    0xfa,0xcb,0x2a,0x9f,0xa0,0x9e,0x7f,0x2c,0x5e,0xdc,0x65,0xb3,0x09,0xfa,0xd1,0xf3,
    0x73,0xb6,0x4f,0xb3,0xb8,0x82,0xa6,0xfe,0x5e,0x63,0x3e,0x5f,0x80,0xf7,0x9b,0xa7,
    0x9a,0x3a,0xb2,0x02,0x4b,0x71,0x7f,0x5b,0x8e,0x94,0x4b,0xeb,0x82,0x45,0x29,0xee,
    0xae,0xac,0x88,0x69,0x62,0xcf,0x65,0xd7,0xc3,0x97,0xf4,0xd0,0xeb,0x7a,0xb8,0x0a,
    0x9e,0x7a,0xf8,0x0a,0x2c,0xf5,0x30,0xe5,0x7a,0x10,0x37,0x69,0x36,0x85,0xee,0xa4,
    0xeb,0xe1,0x6b,0xb4,0x33,0xd7,0xc3,0x37,0xe0,0xa9,0x87,0x0d,0x59,0x81,0xa5,0x38,
    0xf5,0x90,0x72,0x4d,0xb9,0x1e,0xea,0x59,0x11,0x33,0xc1,0x9e,0x49,0xd7,0xc3,0xb7,
    0xf4,0xb0,0xdd,0xf5,0xf0,0x1d,0x78,0xea,0xe1,0x7b,0xb0,0xd4,0xc3,0x8c,0xeb,0x41,
    0xdc,0xb4,0xd9,0x0c,0xba,0xd3,0x9c,0x23,0xe9,0xfe,0x80,0x76,0x3d,0xbb,0x75,0x9e,
    0x55,0x63,0x8a,0x9d,0x71,0x35,0x76,0x11,0x37,0xc5,0xbe,0x69,0x62,0x0f,0x13,0x7b,
    0x98,0x58,0xdd,0xa5,0xee,0xac,0xb8,0x4f,0xda,0xff,0x9e,0xd9,0x11,0x38,0xcd,0x68,
    0x63,0x56,0x9c,0xc5,0x99,0x58,0x7f,0xc1,0xa9,0x57,0x7d,0x93,0xde,0xa2,0xd7,0x41,
    0x7a,0x55,0xfc,0xdb,0xe0,0x67,0xe9,0xf5,0x18,0x39,0x84,0xdf,0xb4,0x98,0xa3,0xe4,
    0x48,0xfd,0x1e,0xc3,0x3f,0x4a,0x5d,0x47,0xc8,0xa5,0xbb,0xf9,0x2e,0xf7,0xf2,0x79,
    0xea,0x3c,0x09,0xa6,0xde,0x76,0x90,0xf7,0x80,0xe9,0xb4,0x52,0xb7,0xfa,0x38,0x19,
    0x0a,0x2c,0xa7,0x5e,0xc5,0xf4,0x35,0xf4,0x2e,0xad,0x97,0xb9,0xab,0x1f,0xb0,0x4f,
    0x3d,0xe9,0x9e,0x9f,0xa1,0xa7,0x53,0xd4,0x51,0x8b,0xbd,0x14,0xf8,0x1b,0x16,0xa3,
    0x3d,0xe7,0xd8,0x77,0x36,0x7e,0x73,0xf3,0x88,0x9d,0x77,0xdf,0x99,0x73,0xf1,0x7b,
    0x59,0xfc,0xd6,0x5d,0x80,0x4b,0x33,0xfb,0x91,0xfc,0x3b,0xdd,0xcc,0x7e,0x02,0xbf,
    0x42,0xdd,0x3f,0x83,0xf5,0xb9,0x33,0xf3,0x0b,0x78,0x37,0x67,0x66,0xd6,0xcd,0x50,
    0xdc,0x35,0xb3,0x59,0xfa,0xbb,0x16,0xcf,0x5f,0x39,0xfe,0x06,0x5c,0xa0,0xf7,0xc4,
    0xcd,0x3a,0x9d,0x5f,0xd1,0xd9,0xe3,0x74,0x7e,0x03,0x4f,0x3a,0x73,0x4e,0x47,0xdc,
    0x75,0xb3,0x39,0x72,0x5d,0x47,0x67,0xc0,0xe9,0x24,0x6e,0xce,0xe9,0xfc,0x8e,0xce,
    0xa0,0xd3,0xf9,0x03,0x3c,0xe9,0xcc,0x3b,0x1d,0x71,0x37,0xcc,0xe6,0xc9,0x75,0x03,
    0x9d,0x21,0xa7,0x93,0xb8,0x79,0xa7,0xf3,0x27,0x3a,0xbd,0x4e,0x67,0x01,0x3c,0xe9,
    0x2c,0x3a,0x9d,0x85,0x78,0x26,0x43,0xc4,0x94,0xeb,0x26,0x3a,0xc3,0x4e,0x27,0x71,
    0x8b,0x4e,0xe7,0x5f,0x74,0xf6,0x39,0x9d,0xff,0xc0,0x93,0xce,0xb2,0xd3,0x11,0xb7,
    0x64,0xb6,0x4c,0xae,0x25,0x74,0x46,0x9c,0x4e,0xe2,0x96,0x9d,0x4e,0x29,0x2b,0x74,
    0xf6,0x3b,0x9d,0x72,0x56,0xe0,0x49,0x27,0xcf,0x6e,0xe9,0x88,0xab,0x98,0x09,0x53,
    0x2e,0x3d,0x4b,0x67,0xd4,0xe9,0x24,0x4e,0x6b,0xd2,0x59,0x85,0xce,0x41,0xa7,0xb3,
    0x3a,0x2b,0xf0,0xa4,0xd3,0xe6,0x74,0xc4,0x55,0xcd,0xda,0xc8,0x55,0x45,0x67,0xcc,
    0xe9,0x24,0xae,0xcd,0xe9,0xb4,0xa3,0x73,0xc8,0xe9,0xac,0xc9,0x0a,0x3c,0xe9,0xd4,
    0x9c,0x8e,0xb8,0xb5,0x66,0x35,0x72,0xad,0x45,0x67,0xdc,0xe9,0x24,0x4e,0xeb,0x92,
    0xdd,0xbe,0xc7,0xcc,0xfe,0x07,0x7d,0xe5,0xad,0x67,0xb4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
