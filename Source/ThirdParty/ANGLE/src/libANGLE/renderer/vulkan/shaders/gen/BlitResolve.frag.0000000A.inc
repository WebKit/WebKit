// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xd7,0xb9,0xe3,0x11,0x10,0xb9,0x96,0x54,0x0b,0x0a,0x49,0x0d,0xea,0xc1,
    0x54,0xb1,0x42,0xa5,0x69,0xd5,0x44,0x54,0xac,0xb6,0xc4,0x68,0xb4,0xad,0xd7,0xb6,
    0x60,0x22,0x55,0x4e,0x93,0x56,0x48,0x5a,0x85,0x07,0xad,0x90,0x06,0x15,0x1e,0x68,
    0x85,0x07,0x6f,0x3c,0x98,0x58,0xf1,0x55,0xdf,0xfd,0x8b,0x5a,0x2f,0x89,0x89,0x33,
    0xeb,0xfc,0x06,0x27,0xe7,0x24,0x73,0xf6,0x9e,0xef,0x9b,0x99,0x6f,0x66,0xed,0xb5,
    0x56,0x2a,0xd9,0x96,0x0b,0x21,0x11,0xf2,0xa1,0x22,0x3c,0x0f,0xa5,0xdf,0xea,0x90,
    0x14,0x24,0x84,0x95,0x21,0x1b,0x9f,0x7b,0xfb,0x07,0xfa,0x0b,0xc5,0x5f,0xce,0x15,
    0xb6,0x75,0x6d,0x51,0xbe,0x3a,0xa4,0x62,0x9c,0x72,0xab,0xc4,0x4b,0xcb,0x53,0xed,
    0xc2,0xe9,0xa1,0x61,0xc5,0xab,0xc4,0xce,0x8b,0x15,0xc5,0xc6,0xc4,0x26,0xc4,0xa6,
    0xc4,0x66,0xc5,0x16,0xc4,0x16,0xc5,0x6a,0xa4,0x86,0xe6,0xe4,0xb4,0xbe,0xbc,0x55,
    0x45,0x3d,0xad,0x17,0x42,0x5f,0xc8,0x84,0x3a,0x7a,0x69,0xe3,0x69,0x58,0x02,0xac,
    0xc2,0x61,0x49,0xb0,0x1a,0x87,0xa5,0xc0,0x3e,0x70,0x58,0x1a,0x6c,0x8d,0xc3,0x32,
    0x60,0xad,0x0e,0xcb,0x82,0xb5,0x3b,0x2c,0x07,0xb6,0xc1,0x61,0x15,0x60,0x9b,0x1c,
    0xb6,0x02,0x6c,0x4b,0x9c,0x2b,0xb5,0xdc,0x9f,0xce,0x78,0x48,0x9e,0xeb,0x99,0xc7,
    0xfc,0x75,0xce,0xd7,0x35,0xfb,0xc8,0xf9,0x45,0xfc,0x04,0xfe,0x18,0xbe,0xd5,0x9b,
    0xc0,0x4f,0xe1,0x4f,0xe1,0xa7,0xf1,0x67,0xf1,0x33,0xf8,0x0b,0xf8,0x59,0xfc,0x45,
    0x7c,0x9d,0xad,0x4e,0xaa,0x26,0x63,0x3f,0xa9,0x58,0x4f,0xdf,0x1b,0x24,0x26,0xcb,
    0xda,0x68,0x0f,0x4d,0xe2,0xe7,0xc8,0x57,0xbe,0x51,0x22,0xf3,0xf0,0xca,0xe9,0xf7,
    0xcb,0xa3,0xdf,0x2a,0xff,0x95,0xe4,0x29,0xfe,0x19,0x7e,0x95,0xab,0x55,0x4d,0xbc,
    0x69,0xd5,0x52,0x2b,0xc4,0xbe,0x2a,0x97,0xd7,0xbd,0x1a,0xcb,0x62,0x79,0x9e,0xb5,
    0xce,0x54,0xaf,0x9e,0xf5,0xaf,0x43,0xaf,0x3e,0xd6,0x2d,0x61,0x1b,0x99,0xa5,0x91,
    0xfa,0x1a,0xdf,0x04,0x97,0x73,0xfc,0x1a,0x7c,0xe5,0xd7,0xc2,0x6b,0xfd,0x7a,0xe9,
    0xb2,0x95,0xb8,0x5a,0xf7,0xdd,0x2c,0xaf,0x83,0xfd,0x60,0x7e,0x17,0xb9,0x3a,0x67,
    0x2f,0x35,0xd2,0x71,0xaf,0xe4,0xa2,0xff,0x05,0x35,0xbc,0x59,0x6e,0x9f,0x5b,0xc3,
    0x7d,0xd4,0x51,0xbc,0x59,0xde,0x0e,0x52,0x2b,0x11,0xde,0xff,0x12,0xce,0xd7,0x9c,
    0xaf,0x78,0x3f,0xc8,0x3a,0xa8,0x7f,0xa8,0xac,0xdf,0xa3,0xe4,0x98,0x7f,0x82,0x7d,
    0xa2,0xf9,0xdf,0xa2,0x99,0x77,0xfc,0x19,0x7a,0x50,0x7e,0x88,0x3d,0xd7,0x4b,0xfd,
    0x21,0xce,0x7b,0xca,0xc5,0x0f,0xf3,0x5d,0x8d,0x2f,0xc2,0x9b,0x3f,0x56,0xe6,0x4f,
    0x94,0xe5,0x5f,0xe3,0x3c,0x1b,0x3f,0x55,0xc6,0x4f,0xb3,0x57,0x8c,0x9f,0x2d,0xe3,
    0xe7,0x58,0x63,0xe3,0x17,0xca,0xf8,0xbb,0x62,0x57,0x1c,0xbf,0x08,0xbf,0x5d,0x56,
    0x21,0xc9,0xfa,0x07,0xb0,0x57,0x82,0x64,0xe2,0xbc,0xe9,0xe5,0x3b,0xaa,0x2a,0xae,
    0x69,0x2e,0xee,0xcb,0x1a,0xb0,0x55,0xee,0x7b,0x0c,0x73,0x56,0x56,0xc3,0x7f,0x29,
    0x15,0x9a,0xb8,0x8f,0x1a,0xd8,0x87,0xbd,0xc4,0x34,0x83,0x8f,0x4b,0x8c,0xfa,0x1f,
    0x92,0xd7,0x4c,0xde,0x5a,0xce,0x69,0x03,0xfb,0xb3,0x97,0x3d,0xd8,0x02,0xfe,0x48,
    0x62,0x5a,0xb9,0x5b,0x5a,0xd8,0x4b,0x2f,0xa5,0xf3,0x76,0xfa,0x79,0x23,0xf1,0xeb,
    0xdd,0x9d,0xa6,0xf3,0xe8,0xfb,0xd7,0x92,0xa7,0x6b,0xf1,0x31,0x9a,0xfa,0xfb,0x9d,
    0xf5,0xd9,0x00,0xfe,0x8d,0x78,0xb9,0xa8,0x51,0xc2,0x2c,0xee,0xb5,0xd4,0xb0,0x5a,
    0xfa,0xfc,0x4f,0xa2,0x34,0xee,0x5f,0x62,0x32,0xe4,0xb4,0xb9,0x19,0x36,0x32,0x43,
    0x87,0x9b,0x61,0x13,0xb8,0xcd,0xb0,0x19,0xcc,0x66,0xe8,0x74,0x33,0x28,0x57,0x10,
    0xeb,0x44,0xb7,0xe0,0x66,0xf8,0x04,0xed,0x84,0x9b,0x61,0x2b,0xb8,0xcd,0xf0,0x18,
    0xcc,0xe2,0x74,0x06,0xab,0xd5,0xe9,0x66,0x78,0x42,0x4c,0x3b,0x39,0x05,0x37,0xc3,
    0x76,0x66,0xe8,0x72,0x33,0x7c,0x0a,0x6e,0x33,0xec,0x00,0xb3,0x19,0x7a,0xdc,0x0c,
    0xca,0x75,0x8b,0xf5,0xa0,0xdb,0xcd,0x3e,0x52,0xdd,0x9d,0x68,0x3f,0x71,0xe7,0x59,
    0x7b,0xb4,0xd8,0x1e,0xd7,0xe3,0x33,0xe2,0x3a,0xc9,0xeb,0x26,0x76,0x17,0xb1,0xbb,
    0x88,0xd5,0x33,0xfa,0x94,0xb3,0xa0,0xf9,0x47,0xc4,0x76,0xc3,0xe9,0x1a,0x2d,0xb1,
    0x17,0x95,0x3b,0x06,0xa7,0xb3,0xea,0xbd,0xb3,0x9f,0x59,0xfb,0x98,0x55,0xe3,0x0f,
    0x80,0x2f,0x31,0x6b,0x3f,0x35,0x14,0xff,0x5f,0x62,0xf6,0x50,0xc3,0xe6,0xed,0xc7,
    0xdf,0x43,0x5f,0xbb,0xa9,0xa5,0x77,0xd3,0x61,0xee,0xa5,0x93,0xf4,0x39,0x00,0xf6,
    0x8c,0x7e,0x97,0xe2,0x19,0xcd,0x44,0xee,0x08,0x73,0x0c,0x80,0x65,0xe9,0x77,0x89,
    0xbb,0xcc,0xcf,0xae,0x5a,0x17,0x39,0xab,0xc7,0xc9,0xd3,0x99,0xf4,0x5e,0xfb,0x8e,
    0x99,0x4e,0xd0,0x87,0xde,0x71,0xdf,0x83,0xff,0x25,0x31,0x2b,0x63,0x3f,0xa5,0x3c,
    0xc5,0x2b,0x45,0x49,0xb1,0x53,0xee,0x9e,0x55,0xfe,0x02,0xf7,0xfa,0x69,0x38,0x5b,
    0xb3,0xb3,0xd4,0x3f,0xe3,0xd6,0xec,0x1c,0xf8,0x0b,0xfa,0xfe,0x01,0xec,0xa8,0xdb,
    0x33,0x3f,0x82,0x37,0xb2,0x67,0x06,0xdd,0x1a,0x2a,0xf7,0x93,0xd8,0x20,0xf3,0xe9,
    0xfb,0xe7,0x12,0x73,0x1e,0x7d,0x9d,0xdd,0xb8,0x41,0xa7,0xf3,0x33,0x3a,0xc3,0x4e,
    0xe7,0x22,0xb8,0xe9,0x8c,0x38,0x1d,0xe5,0x2e,0x89,0x8d,0x50,0xeb,0x12,0x3a,0x45,
    0xa7,0x63,0xdc,0x88,0xd3,0xf9,0x15,0x9d,0x3e,0xa7,0xf3,0x1b,0xb8,0xe9,0x8c,0x3a,
    0x1d,0xe5,0x2e,0x8b,0x8d,0x52,0xeb,0x32,0x3a,0x63,0x4e,0xc7,0xb8,0x51,0xa7,0xf3,
    0x07,0x3a,0x1d,0x4e,0xe7,0x0a,0xb8,0xe9,0x8c,0x3b,0x1d,0xe5,0xae,0xc6,0x7b,0xb5,
    0x54,0xeb,0x2a,0x3a,0x13,0x4e,0xc7,0xb8,0x71,0xa7,0x73,0x1d,0x9d,0x6b,0x4e,0xe7,
    0x4f,0x70,0xd3,0x99,0x74,0x3a,0xca,0xdd,0x10,0x9b,0xa4,0xd6,0x0d,0x74,0xa6,0x9c,
    0x8e,0x71,0x93,0x4e,0xe7,0x26,0x3a,0xd3,0x4e,0xe7,0x16,0xb8,0xe9,0xcc,0x38,0x1d,
    0xe5,0x6e,0x8b,0xcd,0x50,0xeb,0x36,0x3a,0xb3,0x4e,0xc7,0xb8,0x19,0xa7,0xf3,0x37,
    0x3a,0x73,0x4e,0xe7,0x1f,0x70,0xd3,0x99,0x77,0x3a,0xca,0xdd,0x11,0x9b,0xa7,0xd6,
    0x1d,0x74,0x16,0x9c,0x8e,0x71,0xf3,0x4e,0xe7,0x1e,0x3a,0x77,0x9d,0xce,0x7d,0x70,
    0xd3,0x79,0xe8,0x74,0x94,0x7b,0x20,0xf6,0x90,0x5a,0x0f,0xd0,0x59,0x74,0x3a,0xc6,
    0xe9,0xf3,0xad,0x9c,0xbe,0x1d,0x62,0xef,0x00,0xa1,0x3f,0xdf,0x25,0xb4,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMS color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
