// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x53,0x95,0x65,
    0x14,0xc6,0xdf,0xbd,0x37,0x6c,0x08,0x05,0x94,0x63,0x4c,0x9a,0x24,0xcc,0xe4,0x20,
    0x6d,0x9c,0x0a,0x13,0x8a,0x0e,0xca,0x4c,0x54,0x18,0x85,0x95,0x4e,0xd3,0x80,0x66,
    0x59,0x16,0x70,0xe1,0x01,0x2e,0x4a,0xb0,0x83,0x70,0x61,0x2a,0x17,0x9a,0x70,0x61,
    0x09,0x17,0x96,0xee,0x8b,0xa6,0x32,0x6f,0xeb,0xae,0xbf,0xa8,0xe3,0x4c,0x33,0xad,
    0xf5,0xf1,0x5b,0xce,0x33,0x9b,0x99,0xc5,0xb7,0xd7,0xf3,0xac,0xf7,0x79,0xd6,0x7a,
    0xbf,0xf7,0x7b,0x0b,0xf9,0xae,0x9a,0x94,0x72,0xa9,0x2e,0xd5,0xa6,0xdf,0xd2,0xc6,
    0xdf,0xd6,0x94,0x37,0x24,0xa5,0x4d,0xa9,0x98,0x3d,0x5f,0x1c,0x3d,0x34,0x5a,0x3a,
    0x7d,0xe6,0xbd,0xd2,0x93,0xfd,0x7b,0x9c,0x6f,0x48,0x85,0xac,0xce,0xb9,0x46,0xcb,
    0xaa,0xec,0xe9,0x31,0x7d,0xec,0xe4,0x8c,0xe3,0xf5,0x16,0xfe,0x63,0xce,0x62,0xc1,
    0x62,0xc9,0x62,0xd9,0x62,0xd5,0x62,0xdd,0xa2,0x6c,0xb1,0xc5,0x34,0x7c,0x4d,0x8d,
    0xeb,0xdb,0xaf,0xfa,0xcc,0xcf,0xf5,0x52,0x1a,0x49,0xd5,0xa9,0x99,0x5e,0xba,0x78,
    0x06,0x96,0x03,0xab,0x15,0x2c,0x0f,0xb6,0x45,0xb0,0x02,0xd8,0x83,0x82,0x55,0x81,
    0x6d,0x13,0xac,0x1a,0xac,0x53,0xb0,0x22,0x58,0xb7,0x60,0x35,0x60,0xbb,0x04,0xab,
    0x05,0xeb,0x15,0xec,0x01,0xb0,0x3d,0xd9,0x5c,0x85,0xfb,0xfd,0xf9,0x8c,0x63,0xf6,
    0xdc,0xc9,0x3c,0x91,0x3f,0x22,0xb9,0xef,0xd9,0xc3,0x92,0xcf,0x91,0xe7,0xc8,0x17,
    0xc8,0x43,0x6f,0x89,0xbc,0x40,0xbe,0x4c,0x5e,0x45,0xbe,0x4a,0x5e,0x4d,0xbe,0x4e,
    0x5e,0x24,0x2f,0x93,0xfb,0x6c,0xcd,0xa6,0x9a,0xcf,0xfa,0x29,0x64,0x7a,0xfe,0xbb,
    0xd5,0x6a,0x8a,0xec,0x8d,0xf7,0xd0,0x6e,0x79,0x0d,0xeb,0x9d,0x6f,0xb3,0xca,0x3a,
    0x78,0xe7,0xfc,0xfd,0xd5,0xe1,0xdf,0x69,0xff,0x37,0xb3,0xce,0xf1,0xa7,0xc9,0xeb,
    0x45,0xab,0x81,0xfa,0xf0,0x6a,0x42,0x2b,0x65,0x7d,0x6d,0xbe,0xbf,0xef,0x0d,0x44,
    0x91,0xa8,0xe3,0xd9,0x24,0xe1,0x7e,0x2d,0xec,0x7f,0x33,0x7e,0x2d,0x99,0xee,0x06,
    0xb6,0x9b,0x59,0xda,0xd0,0xf7,0xfa,0x76,0xb8,0x1a,0xe1,0xb7,0x91,0x3b,0xbf,0x1d,
    0xde,0xf5,0x5b,0xac,0xcb,0x4e,0xea,0x9a,0xe4,0xbd,0xc5,0xba,0x1e,0xce,0x43,0xe4,
    0xfd,0xe2,0xeb,0xfd,0x3e,0x47,0x7d,0xaf,0xa9,0xfb,0x7e,0x3c,0x0f,0xa6,0x11,0x6b,
    0x47,0x64,0x0f,0x5f,0x42,0xc7,0xf1,0x0e,0xfb,0x75,0x90,0xf9,0x73,0xe8,0xe5,0x24,
    0x62,0xae,0x57,0xf9,0x7d,0x90,0x7d,0xf0,0x7c,0xac,0xa2,0xdf,0x71,0xce,0x8d,0xbf,
    0x87,0x37,0xd1,0x2f,0x08,0x3f,0x81,0x66,0xe4,0x47,0x39,0x47,0xae,0x7f,0x8c,0x9e,
    0xea,0x84,0x3f,0x81,0x86,0xf3,0xd3,0x68,0xc5,0x7b,0x9f,0xe6,0x3e,0x50,0xfd,0x53,
    0xbc,0xf7,0xe0,0xe7,0xe0,0x23,0x5f,0xa8,0xc8,0x97,0x2a,0xd6,0x5f,0xe4,0x7b,0x0f,
    0x7e,0xb9,0x82,0xbf,0xca,0x59,0x0a,0x7e,0xb5,0x82,0xbf,0xc1,0x3b,0x08,0x7e,0xbd,
    0x82,0xbf,0x65,0x71,0x5e,0xf8,0x32,0xfc,0x5e,0xdb,0x85,0x3c,0xef,0x27,0x81,0xfd,
    0x6d,0x88,0xef,0xcd,0x10,0xdf,0x40,0x23,0xe7,0x7c,0xcc,0xde,0x75,0x03,0x7d,0x36,
    0x12,0xf1,0xce,0x66,0xf8,0x96,0xb6,0xc2,0xbf,0x60,0x0a,0xed,0xdc,0x57,0xad,0x9c,
    0xd3,0x21,0x6a,0x3a,0xc0,0x3f,0xb7,0x1a,0xcf,0x1f,0x62,0x5d,0x07,0xeb,0xb6,0xf3,
    0x1d,0xb7,0x72,0x7e,0x87,0x38,0xa3,0x3b,0xc0,0xcb,0x56,0xd3,0xc9,0xdd,0xb3,0x83,
    0xb3,0xfb,0x97,0x75,0xde,0x4d,0x3f,0xff,0x5a,0xfd,0x4e,0xb9,0xf3,0x7c,0x1e,0xff,
    0xfd,0xba,0xad,0xf3,0xbd,0x78,0x14,0x4f,0xff,0x9b,0x67,0x7f,0x76,0x81,0x8f,0x5b,
    0xe6,0x3d,0xfd,0x00,0x16,0x75,0xff,0x98,0x46,0x68,0xf9,0xf3,0x0f,0xab,0xf2,0xba,
    0x9f,0xa9,0xa9,0x66,0x4d,0x97,0xcc,0xb0,0x9b,0x19,0x7a,0x64,0x86,0x5e,0xf0,0x98,
    0xe1,0x31,0xb0,0x98,0xa1,0x4f,0x66,0x70,0xae,0x64,0xd1,0x87,0x6f,0x49,0x66,0x78,
    0x1c,0xef,0x9c,0xcc,0xf0,0x04,0x78,0xcc,0xf0,0x13,0x58,0xd4,0xf9,0x0c,0xa1,0xd5,
    0x27,0x33,0xdc,0xa5,0xa6,0x9b,0x35,0x25,0x99,0x61,0x2f,0x33,0xf4,0xcb,0x0c,0x4f,
    0x81,0xc7,0x0c,0xfb,0xc0,0x62,0x86,0x41,0x99,0xc1,0xb9,0x01,0x8b,0x41,0x7c,0x07,
    0x38,0x47,0xee,0xfb,0x0c,0xde,0x77,0xe5,0x7b,0xf7,0x1e,0xa3,0x76,0x50,0x7a,0xfc,
    0x95,0xba,0x3e,0xd6,0x0d,0x50,0xbb,0x9f,0xda,0xfd,0xd4,0xfa,0x79,0xbd,0xc7,0xb7,
    0xe0,0xeb,0xdf,0xb1,0x38,0x00,0xe7,0x7b,0xf4,0x0b,0x67,0xd1,0xb9,0x49,0x38,0x9f,
    0xd5,0xef,0xa5,0x97,0x99,0x75,0x84,0x59,0xbd,0xfe,0x15,0xf0,0x1f,0x99,0x75,0x14,
    0x0d,0xc7,0xff,0xb4,0x9a,0x61,0x34,0x62,0xde,0x51,0xf2,0x61,0xfa,0x3a,0x80,0x96,
    0xdf,0x5d,0xaf,0x71,0x6f,0x85,0xdf,0x21,0xfc,0xc6,0xc5,0xef,0x0d,0xf0,0x78,0xcf,
    0x6f,0x31,0x7b,0x12,0xec,0x30,0x58,0x2e,0xd3,0x2c,0x66,0xf7,0xdd,0x11,0x6a,0x0f,
    0xa3,0x31,0xc9,0x5e,0xbc,0x8d,0xef,0x11,0xf6,0xc4,0x7b,0xff,0xcc,0x74,0x36,0xb1,
    0x37,0xf7,0xa8,0x39,0x8f,0xf6,0x24,0x35,0x13,0x15,0xfb,0x3b,0x4c,0xdf,0x7e,0x57,
    0xbe,0x4b,0xdf,0x47,0xe9,0xdb,0xef,0xcd,0xe3,0xe0,0x97,0xd1,0x7e,0x1f,0xed,0xe3,
    0x32,0xef,0x07,0xac,0x3b,0x21,0xf3,0x7e,0x08,0xfe,0x3b,0xfe,0x27,0xc1,0x26,0xe4,
    0x7c,0x7d,0x04,0xde,0xc6,0xf9,0x9a,0x92,0xfd,0x76,0xee,0x63,0x8b,0x29,0xfa,0xf4,
    0xdf,0xcf,0x5a,0xcd,0x0c,0x3d,0xf8,0x0c,0xc1,0x4d,0x89,0xcf,0x69,0x7c,0x4e,0x89,
    0xcf,0x19,0xf0,0xf0,0x99,0x15,0x1f,0xe7,0xce,0x5a,0xcc,0xa2,0x75,0x16,0x9f,0x39,
    0xf1,0x09,0x6e,0x56,0x7c,0x3e,0xc1,0x67,0x44,0x7c,0x3e,0x05,0x0f,0x9f,0x79,0xf1,
    0x71,0xee,0x5c,0xf6,0x4d,0x6f,0x68,0x9d,0xc3,0x67,0x41,0x7c,0x82,0x9b,0x17,0x9f,
    0x2f,0xf0,0xe9,0x11,0x9f,0x2f,0xc1,0xc3,0x67,0x51,0x7c,0x9c,0xbb,0x60,0xb1,0x88,
    0xd6,0x05,0x7c,0x96,0xc4,0x27,0xb8,0x45,0xf1,0xf9,0x0a,0x9f,0x8b,0xe2,0x73,0x09,
    0x3c,0x7c,0xae,0x88,0xcf,0xa5,0xec,0x4c,0xa4,0x0c,0x73,0xad,0xcb,0xf8,0x2c,0x8b,
    0x4f,0x70,0x57,0xc4,0xe7,0x1a,0x3e,0x57,0xc5,0xe7,0x6b,0xf0,0xf0,0x59,0x11,0x1f,
    0xe7,0xae,0x5b,0xac,0xa0,0x75,0x1d,0x9f,0x55,0xf1,0x09,0x6e,0x45,0x7c,0xbe,0xc1,
    0xe7,0x86,0xf8,0x7c,0x0b,0x1e,0x3e,0x6b,0xe2,0xe3,0xdc,0x4d,0x8b,0x35,0xb4,0x6e,
    0xe2,0xb3,0x2e,0x3e,0xc1,0xad,0x89,0xcf,0x77,0xf8,0xdc,0x12,0x9f,0xef,0xc1,0xc3,
    0xe7,0x8e,0xf8,0x38,0x77,0xdb,0xe2,0x0e,0x5a,0xb7,0xf1,0x29,0x8b,0x4f,0x70,0xfe,
    0xfc,0xcf,0x6e,0x83,0x7d,0x16,0xff,0x03,0x38,0xb3,0xfe,0x17,0x00,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue *= params . invSamples;
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
