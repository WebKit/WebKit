// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4f,0x68,0x5d,0x55,
    0x10,0xc6,0xcf,0x7d,0xef,0xe5,0xbd,0x98,0xc4,0xa6,0xc1,0x24,0xc6,0xa6,0xa6,0x69,
    0x13,0xa1,0x62,0x29,0x25,0xa8,0x08,0x52,0xd1,0x95,0x11,0x02,0x9a,0x08,0xdd,0x64,
    0x11,0x84,0x6c,0x84,0x58,0x0a,0x9a,0x45,0x37,0x41,0xb3,0xc9,0xa2,0x20,0xd9,0x28,
    0x6d,0x16,0xda,0x5a,0xa9,0x7f,0x52,0x8a,0xb6,0x5a,0xdc,0x55,0x2d,0x5a,0x8b,0x12,
    0x6d,0x50,0xa2,0x06,0x03,0xfe,0x23,0xa0,0x25,0xa0,0x25,0xda,0x94,0x4a,0x9d,0xef,
    0xde,0xdf,0xb4,0xc3,0x7b,0x30,0x9c,0x37,0xdf,0x37,0x67,0xbe,0x99,0x39,0xe7,0xdc,
    0x72,0xa9,0xaf,0x96,0x52,0x96,0x9a,0x52,0x63,0xea,0xcf,0x52,0xfe,0x6b,0x4b,0xa5,
    0xa4,0xbf,0xcd,0xa9,0x9a,0xaf,0x8f,0x0f,0x3d,0x3d,0xb4,0xfb,0xf9,0x17,0xc6,0x77,
    0xdf,0xff,0xc0,0x1e,0xf1,0x9b,0x52,0x39,0x8f,0x13,0xd7,0x6a,0x5e,0xc5,0x56,0xd9,
    0x73,0xcf,0x3c,0xbb,0x5f,0x78,0x87,0xd9,0x88,0xd9,0xa8,0xd9,0xb8,0xd9,0x84,0xd9,
    0xa4,0xd9,0x94,0xd9,0x8c,0xd9,0xac,0xd9,0x66,0xcb,0xa1,0x3d,0x35,0xe5,0xb7,0x7f,
    0x1d,0xb9,0x9e,0xf2,0xa5,0x34,0x98,0x1a,0x52,0x77,0x51,0x4a,0xea,0x63,0x75,0x2c,
    0x03,0x6b,0x0c,0x58,0x09,0x6c,0x73,0xc0,0xca,0x60,0x5d,0x01,0xab,0x80,0x6d,0x0d,
    0x58,0x03,0x58,0x6f,0xc0,0xaa,0x60,0xfd,0x01,0xab,0x81,0xed,0x0c,0x58,0x23,0xd8,
    0xae,0x80,0xdd,0x06,0xb6,0x27,0xef,0xab,0x7c,0xb3,0x3e,0xf5,0xa8,0x99,0xf4,0xd0,
    0x8f,0xfc,0x51,0xfc,0x0c,0x7f,0x1c,0xdf,0xe3,0x27,0xf0,0xcb,0xf8,0x93,0xf8,0x15,
    0xfc,0x29,0xfc,0x06,0xfc,0x19,0xfc,0x2a,0xfe,0x2c,0xbe,0xcf,0xf8,0xb8,0xad,0x3b,
    0x82,0xbe,0xfc,0xed,0xf8,0x77,0x98,0x6a,0x29,0xf7,0xcb,0xb9,0x5e,0x29,0x3f,0xc7,
    0x4a,0x9e,0xab,0x97,0x1a,0xef,0x34,0xbf,0x46,0x7e,0xf1,0x9d,0x16,0xd9,0x0c,0x2f,
    0xae,0x85,0x33,0xac,0xe4,0x58,0x25,0xb5,0xb3,0x4f,0xf8,0xc3,0xf8,0x1d,0x21,0x57,
    0x27,0xf1,0xae,0xb5,0x85,0x5c,0x29,0xaf,0xbb,0xe5,0xe6,0xdc,0x3b,0xb1,0x2a,0xd6,
    0xcc,0xba,0x25,0x98,0xf4,0xb6,0x32,0xff,0x6e,0xf4,0xe4,0xdf,0x0d,0x76,0x1f,0xbd,
    0xf8,0xfc,0x15,0xbf,0x0d,0xae,0x16,0xf8,0x7e,0x7c,0xf1,0xf7,0xc0,0x2b,0x7f,0xbb,
    0x55,0xb9,0x93,0x38,0xf9,0xf7,0x92,0xc7,0xf7,0x0d,0x70,0x1f,0xdc,0xdf,0x5b,0xa7,
    0x3b,0x48,0xcd,0xca,0xfb,0x04,0x5c,0x35,0xf0,0x43,0xcc,0x45,0xfc,0x30,0x67,0xee,
    0x73,0x1b,0xe6,0x3d,0x95,0x43,0xfc,0x3e,0xe6,0xe6,0xfc,0x68,0x1d,0x3f,0xc6,0x39,
    0x38,0x3f,0x0e,0xef,0xfe,0x44,0x5d,0xfc,0x01,0xde,0x8f,0xf3,0x93,0x75,0xfc,0x41,
    0xce,0xc6,0xf9,0xa9,0x3a,0x7e,0xda,0xec,0xd1,0xc0,0xcf,0xd4,0xf1,0x87,0xcc,0x5e,
    0x0c,0xfc,0x6c,0xe0,0x75,0x9e,0xaf,0x30,0xcf,0x5d,0x36,0x7d,0xf5,0xfd,0x2a,0x58,
    0xb4,0xbb,0x6c,0x6a,0xc7,0x38,0x7f,0x3e,0x55,0xf9,0x9a,0x05,0x5f,0xf3,0x7b,0x83,
    0xff,0xc7,0xd0,0x93,0x7f,0xbc,0xee,0xbc,0x4e,0xa0,0xaf,0x7b,0xf8,0x0e,0x67,0x11,
    0xeb,0x3d,0xc3,0xbb,0x52,0xbe,0x0f,0x38,0x2f,0xe9,0x3e,0x68,0x68,0x89,0xd9,0x26,
    0xf6,0x5c,0x35,0xa4,0x21,0x3f,0xf3,0xe2,0x0d,0x9c,0xe3,0x9e,0x3f,0x69,0xbd,0xe8,
    0xde,0x7e,0x0c,0x76,0x2e,0xd4,0xbc,0x9f,0xb7,0xf4,0x09,0xfc,0x63,0x96,0x41,0xf7,
    0xf1,0x53,0xee,0x6c,0x0f,0xf9,0x14,0x73,0x1e,0x7c,0xda,0x62,0xe4,0x7f,0xc6,0xbe,
    0xf3,0xec,0xd3,0x3d,0xfd,0x9c,0x7d,0xfd,0xec,0xd3,0x1d,0xbd,0x00,0x3e,0x6f,0x31,
    0xba,0xbb,0x5f,0x80,0xe9,0xee,0xfe,0x6b,0x95,0x2f,0x50,0xcf,0x35,0x8b,0x17,0x77,
    0xd1,0x6c,0x81,0x7e,0xf4,0x7f,0xd8,0xf6,0x69,0x16,0x5f,0xa2,0x99,0xf2,0x73,0x2f,
    0xe6,0xf3,0x15,0xf8,0x88,0x79,0xaa,0xa9,0x3b,0x2b,0x30,0x8f,0xdb,0xb0,0x1c,0x9e,
    0x4b,0xeb,0xba,0x45,0x29,0x6e,0x5b,0x56,0xc4,0x34,0xb0,0xe7,0x62,0xe8,0xe1,0x6b,
    0x7a,0x18,0x08,0x3d,0x7c,0x03,0xee,0x3d,0x5c,0x02,0xf3,0x1e,0x96,0x42,0x0f,0xe2,
    0x16,0xcd,0x96,0xd0,0x5d,0x0c,0x3d,0x7c,0x8b,0x76,0x16,0x7a,0xf8,0x0e,0xdc,0x7b,
    0xe8,0xc9,0x0a,0xcc,0xe3,0xd4,0x83,0xe7,0x5a,0x0a,0x3d,0xf4,0x66,0x45,0xcc,0x02,
    0x7b,0x16,0x43,0x0f,0xdf,0xd3,0xc3,0xde,0xd0,0xc3,0x0f,0xe0,0xde,0xc3,0x8f,0x60,
    0xde,0xc3,0x4a,0xe8,0x41,0xdc,0xb2,0xd9,0x0a,0xba,0xcb,0xdc,0x23,0xe9,0xfe,0x84,
    0x76,0x6f,0x76,0xeb,0xbe,0xab,0x46,0x8f,0x5d,0x09,0x35,0x6e,0x27,0x6e,0x89,0x7d,
    0xcb,0xc4,0x1e,0x26,0xf6,0x30,0xb1,0xba,0xaf,0x7d,0x59,0xf1,0xde,0xb4,0xff,0x3d,
    0xb3,0x23,0x70,0x9a,0xd1,0x8e,0xac,0xb8,0x8b,0xe2,0x4e,0xc3,0xa9,0x57,0x7d,0xc3,
    0x5e,0xa3,0xd7,0x31,0x7a,0x55,0xfc,0xeb,0xe0,0xef,0xd3,0xeb,0x51,0x72,0x08,0xff,
    0xc7,0x62,0xe6,0xc8,0xe1,0xfd,0x1e,0xc5,0x9f,0xa3,0xae,0x23,0xe4,0xd2,0xdb,0x7d,
    0x93,0x77,0xeb,0x7a,0x6f,0xa1,0x77,0x22,0xe8,0xbd,0x0d,0xee,0xe7,0xfc,0x2e,0xbd,
    0xa7,0x80,0xcd,0x83,0x09,0x7e,0xca,0x10,0xbd,0xf7,0x93,0xc4,0xce,0x93,0x63,0x8c,
    0x59,0x9c,0x42,0xf7,0x24,0xdf,0x33,0xd5,0xfe,0x92,0xe5,0x69,0x61,0x36,0x9a,0xd5,
    0xa9,0xfc,0x5b,0x56,0xe4,0x3e,0x4d,0xcc,0x50,0xdd,0x7c,0xe7,0xa8,0x5b,0xdf,0x8e,
    0x0f,0xa9,0xfb,0x0c,0x75,0xeb,0x3b,0x72,0x16,0xfc,0x65,0x72,0x7f,0x44,0xee,0xb3,
    0xa1,0xdf,0x9f,0xd9,0x37,0x18,0xfa,0xfd,0x05,0xfc,0x02,0xfa,0xbf,0x82,0x0d,0x85,
    0xfb,0xf5,0x1b,0x78,0x0f,0xf7,0x6b,0x35,0xcc,0x5b,0xdc,0xef,0x66,0xab,0xd4,0xa9,
    0xff,0x8f,0x58,0xcc,0x08,0x35,0xa8,0x07,0xe7,0x56,0x83,0xce,0x1f,0xe8,0xec,0x0b,
    0x3a,0x7f,0x82,0xbb,0xce,0x5a,0xd0,0x11,0x77,0xd9,0x6c,0x8d,0x5c,0x97,0xd1,0x19,
    0x0d,0x3a,0xce,0xad,0x05,0x9d,0xbf,0xd0,0x19,0x0b,0x3a,0x7f,0x83,0xbb,0xce,0x7a,
    0xd0,0x11,0x77,0x25,0xbf,0xaf,0x45,0xae,0x2b,0xe8,0x8c,0x07,0x1d,0xe7,0xd6,0x83,
    0xce,0x55,0x74,0x06,0x82,0xce,0x06,0xb8,0xeb,0x5c,0x0f,0x3a,0x1b,0xf9,0x9a,0x72,
    0x4c,0xb9,0xae,0xa1,0x33,0x11,0x74,0x9c,0xbb,0x1e,0x74,0x6e,0xa0,0x73,0x20,0xe8,
    0xe8,0x22,0xde,0x08,0x3a,0xe5,0xec,0x96,0x8e,0xb8,0xcc,0x4c,0x98,0x72,0xe9,0xbf,
    0x74,0x26,0x83,0x8e,0x73,0x5a,0x5d,0xa7,0x9a,0x15,0x3a,0x07,0x83,0x4e,0x2d,0x2b,
    0x70,0xd7,0x69,0x0a,0x3a,0xe2,0x1a,0xcd,0x9a,0xc8,0xd5,0x88,0xce,0x54,0xd0,0x71,
    0xae,0x29,0xe8,0xdc,0x8e,0xce,0x74,0xd0,0xd9,0x94,0x15,0xb8,0xeb,0xb4,0x05,0x1d,
    0x71,0xad,0x66,0x6d,0xe4,0x6a,0x45,0x67,0x26,0xe8,0x38,0xd7,0x16,0x74,0xda,0xd1,
    0x39,0x14,0x74,0x3a,0xb2,0x02,0x77,0x9d,0xae,0xa0,0x23,0xae,0xd3,0xac,0x8b,0x5c,
    0x9d,0xe8,0xcc,0x06,0x1d,0xe7,0xb4,0xfe,0x67,0x83,0x7e,0xc8,0xec,0x7f,0x79,0xd8,
    0x48,0xef,0x00,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMSArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue *= params . invSamples;
//
//     broadcastColor(colorValue);
//
// }
