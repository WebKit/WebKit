// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000023.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000023[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x4c,0x96,0x55,
    0x18,0xc7,0xef,0xf3,0x3c,0x0f,0x0f,0xbe,0x61,0x36,0x5f,0x82,0x24,0x81,0x54,0xb2,
    0x20,0x34,0xf2,0x1d,0x1f,0x5f,0x53,0x68,0x2a,0x08,0x2c,0x9b,0x66,0x94,0x65,0x29,
    0x95,0x52,0xc2,0x87,0x5a,0x5a,0xa8,0xc1,0x2a,0x59,0x4b,0xd7,0x87,0x6a,0x69,0xe9,
    0xd6,0xda,0xaa,0xb9,0x36,0x2b,0xfd,0x90,0x56,0xb2,0xc6,0xac,0x95,0xb4,0x95,0x6c,
    0x25,0x4d,0xbf,0xf4,0xb5,0xe5,0x62,0x9a,0xae,0xd5,0xb9,0xee,0xf3,0xbb,0x78,0xae,
    0x58,0x2f,0x6c,0x67,0xf7,0x7d,0xfd,0xaf,0xf7,0xff,0xb9,0xce,0xb9,0x81,0x64,0x62,
    0x72,0x6e,0x14,0xb9,0x68,0x44,0x34,0x2c,0x6a,0x74,0x51,0xfc,0x73,0x6d,0x94,0x88,
    0x1c,0xcf,0x4a,0xff,0x1c,0x19,0xa5,0x63,0xb9,0x7a,0x55,0xe3,0xaa,0x8a,0xd6,0xb6,
    0x4d,0x15,0x33,0x67,0xcd,0x10,0xbb,0xd1,0x51,0x32,0xb6,0x17,0xdd,0x35,0x51,0x6e,
    0x94,0xf2,0x4f,0x59,0x5b,0x37,0x36,0x6f,0x13,0xbc,0xd4,0xaf,0x0b,0x7e,0x8d,0xf1,
    0x76,0x82,0xe7,0x4a,0x0c,0xff,0x56,0x1a,0xc7,0x14,0x9f,0x28,0xaa,0x89,0x72,0xa2,
    0xf2,0x90,0x36,0x9a,0xcc,0x53,0x31,0x07,0x36,0xcc,0x60,0x09,0xb0,0x31,0x06,0x4b,
    0x82,0x8d,0x33,0x58,0x0a,0x2c,0xdf,0x60,0x39,0x60,0x85,0x06,0x4b,0x83,0x15,0x1b,
    0x2c,0x17,0x6c,0x8a,0xc1,0x86,0x81,0x4d,0x33,0xd8,0x70,0xb0,0x72,0x83,0x8d,0x00,
    0x9b,0x61,0xb0,0x91,0x60,0x33,0x0d,0x36,0x0a,0x6c,0xae,0xc1,0xf2,0xc0,0x16,0xc4,
    0x3c,0x25,0x07,0xfb,0x15,0xce,0x36,0xf8,0xe7,0x8d,0xf0,0xa3,0x72,0x89,0x91,0x85,
    0xe7,0x49,0xc8,0x63,0xbd,0x57,0x22,0xd6,0x27,0x63,0x6e,0xe4,0x7d,0x82,0x7f,0x4b,
    0xd3,0x67,0x99,0xb7,0x4f,0x93,0xef,0xe7,0x23,0x53,0x33,0xe3,0xbc,0xc5,0x68,0x83,
    0x0b,0x67,0x47,0xaa,0x37,0x66,0x54,0x16,0xbe,0x5e,0x7f,0xad,0x60,0xf1,0x78,0x2f,
    0x17,0x13,0x43,0xf6,0xe6,0x3a,0x2f,0x97,0x20,0x27,0x90,0xa7,0xc0,0x69,0x2a,0xc6,
    0x53,0xd1,0x54,0x6c,0x05,0xaf,0x42,0x2e,0x35,0xfe,0x37,0x61,0x2f,0xfe,0x12,0xbf,
    0x8c,0x78,0x51,0xdc,0xcf,0x98,0x98,0x83,0x12,0x56,0xf1,0x60,0xfd,0xff,0xbd,0x8a,
    0x07,0x9f,0xa9,0xe8,0x56,0xf6,0xa9,0x9c,0xfc,0x22,0x57,0x80,0x95,0xd1,0xcf,0x74,
    0xea,0x11,0xfb,0x19,0xe8,0x4a,0x8c,0x7e,0xb6,0xe9,0x67,0xce,0xa0,0x6f,0xd0,0xcb,
    0x73,0x3e,0xf5,0xaa,0xfd,0x32,0x66,0x4d,0xe5,0x5a,0xb8,0x96,0x7e,0xd7,0xe2,0x2b,
    0xf1,0x0a,0x7c,0xa4,0x75,0xc8,0x1c,0xbd,0xc1,0x1f,0x95,0x27,0xfa,0x7d,0x5b,0xef,
    0x9f,0xeb,0xc8,0x7f,0x0f,0xf8,0x7a,0xfa,0x11,0x79,0xc3,0x90,0xfc,0x4d,0x43,0xe4,
    0x66,0xf8,0x15,0xff,0x47,0xa8,0xbf,0xd8,0xe8,0x5b,0xd8,0x03,0xa9,0xef,0x29,0xea,
    0x49,0x1a,0xfd,0x2e,0xce,0x84,0xca,0x07,0x98,0x69,0x95,0x8f,0x72,0x3e,0x54,0x3e,
    0x39,0x84,0xdf,0xd3,0xcc,0xbb,0xce,0xd3,0xb7,0xa6,0x3e,0x91,0x7f,0x8a,0xa5,0xf6,
    0x45,0x52,0xdf,0x79,0x72,0xeb,0xbc,0x9c,0xe7,0x0e,0x49,0x1a,0xfb,0x8c,0x27,0x67,
    0x57,0x7b,0x7b,0x55,0xb9,0xaf,0x4a,0xec,0x16,0xba,0x80,0xd9,0xa5,0xb6,0x8b,0xfc,
    0x7b,0xcb,0x3b,0xdb,0x17,0xa9,0xbc,0xd8,0xcb,0xfb,0xf6,0x1c,0xcc,0xcc,0xf6,0x3b,
    0x94,0x60,0x1f,0x22,0xe2,0x5f,0xf6,0x88,0xec,0x5b,0x86,0x39,0x9e,0xc6,0xac,0xd6,
    0xf9,0x3c,0x32,0xa7,0x37,0x83,0x4d,0x33,0x7b,0xb4,0x8d,0x33,0x70,0x0b,0xfa,0x25,
    0x3e,0x82,0xcc,0xd0,0x6d,0xcc,0xd9,0x74,0xe2,0x89,0x4d,0x25,0xf8,0x6e,0x6f,0x23,
    0xf2,0xed,0xf8,0x55,0xe2,0x37,0x87,0xfb,0xa0,0x82,0x99,0xcb,0x30,0x5f,0xf3,0xc0,
    0xdf,0xf3,0x36,0xa3,0x63,0x5e,0x02,0x26,0x73,0x77,0xc9,0x57,0x9e,0xa1,0x9e,0x2b,
    0xde,0xbe,0x8a,0xfb,0x23,0x43,0x3f,0xf2,0x5e,0xef,0xfd,0x64,0x1f,0x16,0x93,0x53,
    0x7e,0x9e,0x61,0x6f,0x96,0x80,0x37,0x78,0x76,0xa4,0xa6,0xc9,0x2e,0x60,0x6a,0xf7,
    0xbb,0x8f,0xa1,0xb1,0xe4,0x39,0xe0,0xb9,0x10,0xbb,0x25,0x2e,0xd8,0xe4,0xe0,0xb3,
    0xc0,0xf4,0x70,0x07,0x3d,0x2c,0x33,0x3d,0x2c,0x07,0xd7,0x1e,0x56,0x80,0x69,0x0f,
    0x35,0xa6,0x87,0x15,0xf1,0x9d,0x16,0xc5,0x98,0xe4,0xad,0x36,0x3d,0xac,0x24,0xb7,
    0x33,0x3d,0xac,0x02,0xd7,0x1e,0x4a,0x5d,0xc0,0xd4,0x4e,0x7a,0xd0,0x58,0x35,0xa6,
    0x87,0xa5,0x2e,0xd8,0x64,0xf0,0xa9,0x36,0x3d,0xd4,0xd1,0x43,0xad,0xe9,0x61,0x0d,
    0xb8,0xf6,0x50,0x0f,0xa6,0x3d,0x34,0x9a,0x1e,0xea,0xe3,0x7a,0xa2,0x18,0x93,0xbc,
    0x0d,0xcc,0x91,0xe4,0xbd,0x8b,0xdc,0x4b,0x5d,0xf6,0x9c,0x4b,0x8d,0x6a,0xdb,0x68,
    0x6a,0x5c,0x86,0x5d,0x0d,0x7e,0x0d,0xd4,0x23,0xe7,0xff,0x5e,0xce,0xbe,0xce,0xdc,
    0x7d,0xd4,0xdc,0x64,0x66,0xee,0x7e,0xf0,0x76,0x66,0xee,0x01,0x30,0x89,0xdb,0xc2,
    0xfd,0xfb,0x20,0xf8,0x26,0x2f,0xcb,0x3d,0xf3,0x10,0xb1,0x37,0xe3,0xf3,0x30,0x58,
    0x53,0x94,0xf5,0xd9,0x0c,0xfe,0xbc,0xb7,0x11,0x79,0x0b,0x71,0x36,0x53,0x8f,0xdc,
    0x33,0x8f,0x52,0x4f,0x33,0xf5,0xc8,0x5e,0x3d,0x06,0xde,0xc2,0x79,0xdc,0x0a,0x76,
    0xb7,0xef,0x77,0x6d,0x7c,0x9e,0x42,0xee,0x2d,0x9c,0xaf,0xad,0x66,0x4f,0x1e,0x27,
    0x5e,0x8b,0xd9,0x93,0x27,0xc0,0x75,0x4f,0xb6,0x83,0xe9,0x9e,0xb4,0x99,0x3d,0x11,
    0x5d,0x6b,0xcc,0x45,0xe0,0xb9,0xdd,0xc4,0xde,0x4d,0xec,0x5d,0x26,0xf6,0x1e,0x70,
    0x8d,0xfd,0x1c,0x98,0xc6,0xee,0x34,0xb1,0x45,0xd7,0xe1,0x57,0x27,0xb1,0x3b,0x98,
    0xd9,0xb2,0x98,0xa3,0xd0,0x97,0xdc,0x31,0xef,0x13,0xeb,0x05,0xf0,0xf9,0xec,0xbd,
    0xfa,0x75,0xb2,0xf7,0x62,0xf3,0x22,0x39,0xdb,0xb1,0xef,0x20,0x6f,0x97,0xc9,0x2b,
    0x36,0x7b,0xfd,0xea,0xc2,0x7f,0xaf,0xc9,0xfb,0x92,0xc9,0x5b,0xe7,0x6f,0x68,0xb9,
    0xdb,0x5f,0x06,0xdb,0x66,0xee,0xb0,0x44,0x3c,0xc7,0xe9,0x58,0xbf,0x0f,0x3f,0x5d,
    0x9d,0x3e,0x96,0xe0,0xfb,0xf1,0xdd,0x17,0xc7,0x1a,0x1e,0xef,0xd5,0x2b,0xc4,0xd9,
    0xcf,0x3d,0x9a,0xc3,0x77,0x24,0x49,0x4f,0x5a,0x53,0x17,0x3d,0x89,0xcf,0x0a,0x17,
    0x7c,0x3a,0xf1,0xdf,0x8b,0x6d,0x1b,0xb6,0xad,0xa6,0xfe,0x27,0xff,0xa1,0xfe,0xa7,
    0xff,0xa7,0xfe,0x1d,0xf8,0xe9,0x7a,0x8e,0xfa,0x77,0xe2,0xbb,0xc3,0xd4,0xff,0x2c,
    0x71,0x76,0xfe,0x4b,0xfd,0x5a,0x53,0x9b,0xa9,0x7f,0xb9,0x0b,0x3d,0x74,0xe1,0xdf,
    0x1a,0xcf,0x5f,0xf8,0x5e,0xbc,0x8a,0xbe,0xc3,0x47,0x12,0xf9,0x0d,0xb0,0x85,0x2e,
    0x3b,0x67,0x07,0x99,0xb3,0x03,0x66,0xce,0xde,0x04,0xd7,0x39,0x7b,0x0b,0x4c,0xe7,
    0xec,0xb0,0xd9,0x6f,0xd1,0x1d,0xf2,0xeb,0x30,0xb5,0x1d,0x82,0x2f,0xa9,0xfb,0x6d,
    0x72,0x46,0xf8,0x5d,0xe5,0xfd,0xaa,0x7f,0x97,0x58,0xbf,0xe0,0x23,0xcf,0x4f,0xc8,
    0xf5,0x2b,0x7e,0x79,0xf8,0x5c,0x31,0xb9,0x44,0x77,0x31,0xee,0x3d,0xf8,0x0d,0xc4,
    0xe7,0x23,0xe4,0xba,0x84,0x5f,0x7e,0x14,0xfa,0x4d,0xc7,0x36,0x01,0x97,0x6f,0xee,
    0x28,0xcf,0x57,0x3a,0xe6,0x31,0xec,0xd1,0xf5,0xe8,0x0b,0xe1,0xf6,0x2a,0x31,0x2f,
    0x1a,0xff,0xdf,0x88,0x29,0xdf,0x68,0x6b,0x23,0x35,0xfd,0xe9,0xa3,0x5c,0x06,0x1b,
    0x20,0x76,0xb5,0x0b,0xf1,0x07,0xf0,0xbd,0xc8,0x37,0x40,0xb8,0x2f,0x77,0x41,0xaf,
    0x7c,0x28,0x47,0xef,0xc2,0x91,0xa3,0xdf,0x3c,0xf7,0x77,0x8e,0x9c,0x0b,0x39,0xe5,
    0xa9,0x1c,0x25,0x5d,0xf0,0x53,0x8e,0x46,0xb9,0x2c,0x47,0xa2,0x4b,0xf9,0x95,0x8b,
    0x9f,0x3c,0x95,0xa3,0xe1,0xf8,0x59,0x8e,0x46,0xb8,0x80,0x5b,0x8e,0x46,0xba,0x2c,
    0x47,0xa2,0x57,0x8e,0xf2,0x88,0x99,0x72,0x59,0xff,0x34,0x31,0x95,0x23,0xb5,0x91,
    0x9a,0x94,0x23,0xc1,0x94,0xa3,0x3b,0x5d,0x88,0x2f,0x75,0xa5,0xa9,0x55,0x39,0x9a,
    0xee,0x82,0xbe,0x9c,0xfc,0xca,0xd1,0x07,0x70,0x94,0xa0,0xdf,0xa2,0x21,0x1c,0x8d,
    0x25,0xe7,0x58,0xc3,0xd1,0x78,0x17,0xfc,0x94,0xa3,0x49,0x86,0x23,0xd1,0x4d,0xf0,
    0xab,0x00,0xbf,0x02,0xc3,0xd1,0x44,0xfc,0x2c,0x47,0x85,0x2e,0xe0,0x96,0xa3,0x1b,
    0x0c,0x47,0x85,0x86,0xa3,0x22,0x62,0x4e,0x30,0x1c,0xe5,0x13,0x53,0x39,0x52,0x9b,
    0x49,0x86,0xa3,0x22,0xc3,0xd1,0x4a,0x17,0xe2,0x4b,0x5d,0xf9,0xd4,0xaa,0x1c,0x55,
    0xba,0xa0,0x17,0xae,0x12,0xe4,0xd4,0xb3,0x77,0x98,0x59,0x14,0xbb,0xd5,0xcc,0x5a,
    0x1b,0x3e,0x45,0xe6,0xcc,0x7f,0xc8,0x99,0x3f,0x6a,0xce,0xfc,0x47,0xe0,0x7a,0xe6,
    0x3f,0x06,0xd3,0x33,0x7f,0xdc,0x9c,0x43,0xd1,0x1d,0xf3,0xeb,0x04,0x79,0x4f,0x98,
    0xef,0xd6,0xa7,0xc4,0x3e,0x69,0x62,0x7f,0x06,0xae,0xb1,0x3f,0x07,0xd3,0xd8,0xdd,
    0x26,0xb6,0xe8,0x4e,0xf9,0xd5,0x43,0xec,0x1e,0xf3,0xfd,0xfe,0x92,0xd8,0xa7,0xcd,
    0xf7,0xfb,0x2b,0xf0,0x1e,0x7e,0x1f,0xfb,0x1a,0xac,0xd9,0xe4,0xfb,0x06,0xbc,0x89,
    0x7c,0xbd,0x26,0x9f,0xe8,0xce,0xf8,0xd5,0x4b,0xbe,0x33,0xe6,0xcc,0xce,0x71,0xe1,
    0x6f,0x83,0xd5,0xe6,0xf7,0x36,0xb5,0xeb,0x35,0x5c,0xd7,0xba,0x60,0xd3,0x83,0xcf,
    0x19,0x53,0xcf,0x77,0xd4,0x33,0xdb,0xd4,0xf3,0x3d,0xb8,0xd6,0xd3,0x67,0xea,0x11,
    0xdd,0x59,0xbf,0xfa,0xc8,0x73,0xd6,0xd4,0x33,0x8f,0x7a,0x6a,0xcd,0xde,0xab,0x5d,
    0x9f,0xa9,0xa7,0xce,0x05,0x9b,0x5e,0x7c,0xce,0x9a,0x7a,0x7e,0xa0,0x9e,0xa3,0xa6,
    0x9e,0x1f,0xc1,0xb5,0x9e,0x7e,0x53,0x8f,0xe8,0xce,0xf9,0xd5,0x4f,0x9e,0x73,0xa6,
    0x9e,0x2a,0x17,0xfe,0x56,0x92,0x7c,0xfa,0x8d,0x52,0xbb,0x7e,0x53,0x4f,0x83,0x0b,
    0x36,0x7d,0xf8,0x9c,0xc3,0xb6,0x1b,0xdb,0x53,0xe6,0xac,0x7f,0x01,0xdf,0x49,0x93,
    0x67,0x96,0xcb,0xe2,0xd1,0x10,0xdf,0x6e,0x93,0xa7,0xde,0x85,0x5c,0xfd,0xf8,0x9c,
    0xc2,0xf6,0x38,0xb6,0xc7,0xf8,0xd6,0x4e,0x89,0xbf,0x37,0x21,0x9e,0x2c,0xfd,0x5f,
    0x50,0xc2,0x7c,0x6b,0xd5,0xe7,0xb8,0x89,0xbf,0xc6,0x85,0x1c,0xdd,0xf8,0x4b,0xbc,
    0x85,0xde,0xe3,0x02,0xba,0x3f,0xfc,0x94,0xcc,0xf5,0xeb,0x2f,0x75,0x22,0xb4,0x0d,
    0xc4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
