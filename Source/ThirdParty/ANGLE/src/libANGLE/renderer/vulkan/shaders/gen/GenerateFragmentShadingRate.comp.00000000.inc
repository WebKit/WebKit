// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/GenerateFragmentShadingRate.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kGenerateFragmentShadingRate_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x96,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xd7,0x3a,0xe7,0xf4,0x72,0xa4,0x39,0x05,0xa5,0x95,0x72,0xb6,0x2d,0xd2,
    0x34,0x62,0x39,0x01,0x0d,0x6a,0x9a,0x18,0x53,0x7d,0xaa,0x31,0x40,0x9a,0xf8,0xd0,
    0x67,0x53,0x5f,0x78,0x40,0x49,0xe4,0xb1,0x0f,0x18,0xd3,0xc0,0x03,0xa0,0x46,0xe3,
    0xa5,0xc4,0x0b,0x7d,0x30,0x05,0xc1,0x18,0x2f,0x40,0xfb,0x27,0xa8,0xa8,0x08,0x09,
    0x8a,0xca,0x2d,0x51,0x88,0x46,0xc2,0x25,0x60,0x11,0x44,0x67,0xd6,0xfe,0x4d,0x1d,
    0xb7,0x8d,0x27,0x59,0x59,0x7b,0xbe,0x99,0xf5,0xcd,0x37,0x6b,0xcd,0x5e,0xfb,0x94,
    0x4b,0xbd,0x2d,0x21,0xc4,0x70,0x5b,0x68,0x0d,0xfd,0x31,0xa4,0xdf,0xa2,0x50,0x0a,
    0x91,0xf9,0x7e,0x99,0x17,0x84,0xe6,0x64,0x0f,0xad,0x7d,0x72,0xed,0xaa,0xe7,0x36,
    0x3f,0xbd,0xea,0x81,0x07,0xef,0xd3,0xb8,0x5a,0x28,0xa7,0x78,0xf5,0xb5,0x4b,0x4c,
    0x93,0xcc,0x15,0x19,0x1b,0x9f,0xda,0xf0,0x8c,0xe2,0x3b,0x65,0x2c,0x14,0xbc,0x92,
    0xb8,0x82,0x64,0xc8,0x87,0xc6,0x3f,0x2e,0xd1,0x5d,0x79,0xba,0xd0,0xcb,0x6c,0x58,
    0x04,0xab,0x38,0xac,0x04,0xd6,0xea,0xb0,0x32,0x58,0x9b,0xc3,0x2a,0x60,0x0b,0x55,
    0xaf,0x58,0x75,0x99,0x9b,0x65,0x2c,0x26,0x26,0x9b,0x27,0x67,0x36,0x4f,0xce,0x6c,
    0x9e,0x9c,0xd9,0x3c,0x39,0xb3,0x42,0x4e,0xc3,0x9a,0xc0,0x7c,0xde,0x66,0xb0,0x25,
    0x0e,0x6b,0x01,0xcb,0x92,0xde,0xf2,0x5c,0x5e,0xd5,0xbe,0x33,0xed,0xbd,0xf9,0x2a,
    0x61,0x9f,0xcc,0xcb,0xd1,0x6d,0xf6,0xdd,0x73,0x76,0x39,0xd9,0x5d,0xf8,0x0e,0xb1,
    0x56,0xed,0x3b,0x84,0xb1,0x94,0x62,0xcb,0x49,0xbf,0x3e,0x77,0x48,0x8c,0xea,0x59,
    0x46,0xed,0x77,0x8a,0xdd,0x82,0x46,0xf3,0x57,0xf1,0xeb,0xaf,0x53,0x56,0xd6,0xb0,
    0x57,0x8a,0xaf,0xc6,0x99,0x06,0xec,0x2a,0xb5,0xea,0xaf,0x5b,0x98,0xba,0x52,0x7f,
    0xfc,0x77,0x58,0xec,0x52,0xf2,0x64,0x9c,0x51,0x17,0x58,0xb7,0x74,0xa2,0xd6,0x5b,
    0xfd,0x9f,0x51,0x4f,0x3a,0x2a,0xe1,0x2e,0x6c,0x8d,0x7f,0x18,0xbb,0x1b,0x6c,0x25,
    0xf5,0xf5,0x70,0x3e,0x1a,0xbf,0xcc,0x71,0x98,0xbf,0xcf,0xd5,0xa0,0xfa,0xfa,0x73,
    0x73,0xd0,0xec,0x46,0x6e,0x3f,0x6a,0xba,0x57,0xb3,0x5f,0xb6,0x7e,0x0d,0x67,0x6d,
    0xf6,0x40,0xc1,0x3f,0x34,0xd7,0x7f,0xa5,0xf0,0x84,0xcb,0xb3,0x2e,0xd1,0x6e,0x19,
    0xb4,0xb8,0xf5,0xf4,0x82,0xea,0x1c,0x46,0x63,0xcd,0xf1,0x8c,0xb0,0x5f,0x66,0x8f,
    0xd2,0x8b,0xc6,0x37,0x96,0xcb,0x1c,0x34,0x9d,0xe3,0xd4,0x6d,0xf6,0x56,0x74,0xea,
    0x39,0x6f,0x87,0xbf,0x4c,0xbe,0x1d,0x68,0xde,0xce,0x3e,0xee,0xe0,0xdd,0x8d,0xf8,
    0x5f,0xe4,0xb9,0x9a,0xce,0xa9,0x1a,0xf6,0xf2,0xcc,0x75,0x31,0xf7,0x53,0x7d,0xf7,
    0xb0,0xe6,0x7d,0xb0,0xbd,0x70,0xaa,0xbd,0x0f,0x4c,0x35,0x7c,0xcc,0xbe,0x54,0xb0,
    0x3f,0x85,0xd3,0x6b,0x3e,0xc8,0xbb,0xd7,0x90,0x48,0xd5,0x76,0x08,0xec,0x20,0xe7,
    0xf0,0x90,0x54,0x54,0x62,0x4d,0xa0,0x9e,0x59,0x41,0xb4,0xce,0xdf,0xc5,0x9a,0x06,
    0xbf,0x21,0xcf,0xda,0x9b,0x33,0xf8,0x75,0x7e,0x4c,0xa2,0xb4,0xae,0x97,0xa8,0x55,
    0xfd,0x8f,0x90,0xf7,0x65,0x70,0x8b,0x79,0x85,0x98,0xd5,0x2e,0xe6,0x55,0x70,0x8d,
    0xd1,0xbe,0x7a,0x8d,0xde,0x1b,0x71,0x31,0xaf,0x83,0x7f,0x20,0x31,0x7a,0xf6,0x6f,
    0xc0,0xad,0xf8,0x94,0xc4,0x28,0xf6,0x26,0xb8,0xea,0xdd,0x85,0xde,0x3f,0xc4,0xa7,
    0xf8,0x84,0x8c,0x5d,0x68,0x9e,0x70,0xb9,0xde,0x22,0xd7,0xa8,0xcb,0xf5,0x36,0xb8,
    0xe5,0x7a,0x07,0x8d,0x8a,0x5f,0x97,0xf5,0xc6,0xa3,0xf3,0x55,0xe9,0x34,0x8d,0x79,
    0x97,0xdc,0x33,0xc4,0x4f,0xa0,0x63,0xd2,0xe9,0xd0,0x98,0xdd,0x32,0x26,0x59,0xbf,
    0x1b,0xbe,0x69,0xec,0xc9,0xd4,0x7b,0x79,0x4f,0xbe,0x47,0x7d,0x66,0x4f,0xa1,0x61,
    0x58,0x34,0x69,0x6f,0xef,0x21,0x66,0x0a,0xdd,0xda,0x1b,0xfb,0xe9,0x8b,0x67,0xe9,
    0xe3,0xcf,0x88,0xb1,0x5a,0x3f,0xa7,0xd6,0x1e,0x57,0xeb,0x17,0xe0,0x9b,0x58,0x73,
    0x18,0x6c,0x5c,0xd6,0xa8,0xfd,0x25,0x3c,0x87,0x1d,0xcf,0x57,0xf0,0xf4,0x39,0x9e,
    0xaf,0xc1,0x8d,0xe7,0x08,0xd8,0x36,0x78,0xbe,0x81,0x4b,0xf1,0x17,0xc0,0x8e,0x82,
    0xf7,0xbb,0x7c,0xc7,0xc0,0x1b,0xae,0x8e,0xe3,0xd4,0x69,0xf9,0xbf,0x25,0xff,0x1a,
    0x97,0xff,0x3b,0x70,0xcb,0x7f,0x02,0xcc,0x78,0xbf,0x87,0xe7,0x84,0xe3,0xf9,0x01,
    0x9e,0x01,0xc7,0xf3,0x23,0xb8,0xf1,0x9c,0x04,0xb3,0x3a,0x4e,0xc1,0x75,0xd2,0xd5,
    0x71,0x1a,0xdc,0xd7,0x71,0x06,0xbc,0xc1,0x19,0x9f,0xe5,0x8c,0xcf,0xd2,0x33,0x1a,
    0xb3,0x3c,0xe6,0xf7,0xbe,0x9e,0xfb,0x0a,0x79,0x6e,0x8b,0xb9,0x2f,0x7d,0x2b,0x62,
    0xfe,0x1e,0xa9,0xaf,0x86,0xcf,0x74,0xff,0x84,0xee,0x21,0xa7,0xfb,0x67,0xf0,0x0f,
    0xe9,0xd9,0x73,0x70,0x28,0x7e,0x4d,0x62,0xda,0xe1,0xb0,0x5e,0x54,0xff,0x79,0xfd,
    0xaf,0x11,0x73,0x5d,0xe7,0xd3,0xbe,0xb4,0xa4,0xfb,0xf2,0x17,0xf8,0xd7,0xc3,0x61,
    0xe7,0xac,0x9a,0x7f,0xc5,0x6f,0xb5,0xff,0x06,0x76,0x2c,0x7d,0xc7,0xf3,0xba,0x2e,
    0x70,0x9f,0x2d,0xc5,0xdf,0x70,0xdc,0x17,0x0b,0xdc,0x23,0x8e,0xfb,0x12,0x7e,0xe3,
    0xb9,0xec,0x78,0x2e,0xc1,0x63,0xfb,0x7b,0x85,0x3c,0x97,0x1d,0xf7,0xd5,0x02,0xf7,
    0x80,0xe3,0xbe,0x86,0xdf,0x74,0xcf,0x82,0x9d,0x71,0xf9,0xae,0xbb,0x7c,0xb3,0x05,
    0xdd,0x37,0x0a,0xdc,0xa3,0x8e,0xfb,0x26,0x7e,0xe3,0xf9,0xd3,0xf1,0xdc,0x2c,0xe8,
    0xbe,0x45,0x1e,0x8d,0x79,0x1e,0xec,0x2f,0xea,0xb9,0xe5,0xf2,0xc5,0xf8,0xef,0x7c,
    0x3d,0x2e,0x5f,0x29,0xe6,0x7e,0xab,0xa5,0x1c,0x73,0x0e,0xc5,0x4d,0x43,0x25,0xe6,
    0x1a,0x56,0xe0,0x5f,0xe7,0x7a,0xb8,0x09,0x5b,0x63,0x66,0xe8,0x97,0xd6,0x98,0xe3,
    0xda,0x93,0xda,0xaf,0x0b,0xe8,0x0b,0x9d,0xf7,0xc8,0x0d,0x54,0xa3,0x47,0x8b,0x71,
    0x6d,0xc4,0xe9,0xbc,0x45,0xb8,0xaa,0xf4,0xab,0xed,0xbf,0xef,0xfd,0x76,0xa7,0xef,
    0x76,0xa7,0x6f,0x11,0xef,0x82,0x69,0x59,0x1c,0x73,0xff,0x18,0x77,0x68,0xe6,0xfa,
    0x56,0x7d,0x1d,0x32,0x3a,0xc9,0xdb,0x81,0x8e,0x0c,0xbb,0xd3,0xf1,0x2c,0x81,0xa7,
    0x1f,0x1d,0x75,0x62,0xea,0xd4,0xa4,0x5a,0xef,0x8d,0x79,0xdc,0x38,0xdf,0x75,0xcf,
    0x95,0xb9,0xf7,0xb1,0x97,0xf7,0x51,0xf3,0xe9,0x9a,0x7a,0xfc,0xe7,0x6e,0xfe,0x08,
    0xff,0xb0,0xc4,0xea,0xb7,0xf8,0x13,0xb0,0x3e,0x37,0xc6,0xf8,0x2e,0x1f,0xc0,0x3f,
    0x2a,0xf6,0x7e,0xee,0xf1,0x03,0x85,0xef,0xc0,0x74,0xea,0x8f,0x28,0xfb,0x17,0xc3,
    0xdf,0x5e,0x68,0x45,0x0b,0x54,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// struct FocalPoint {
//     float focalX;
//     float focalY;
//     float gainX;
//     float gainY;
//     float foveaArea;
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint textureWidth;
//     uint textureHeight;
//     uint attachmentWidth;
//     uint attachmentHeight;
//     uint attachmentBlockWidth;
//     uint attachmentBlockHeight;
//     uint numOfFocalPoints;
//     FocalPoint focalPoints[2];
// } params;
//
// layout(binding = 0, r8ui)uniform writeonly uimage2D fragmentShadingRateImage;
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// uint computeValue(ivec2 pos)
// {
//     float minPixelDensity = 0.0f;
//     float focalPointDensity = 0.0f;
//     float px =((float(pos . x)* params . attachmentBlockWidth)/ params . textureWidth - 0.5f)* 2.0f;
//     float py =((float(pos . y)* params . attachmentBlockHeight)/ params . textureHeight - 0.5f)* 2.0f;
//
//     for(uint point = 0;point < params . numOfFocalPoints;point ++)
//     {
//         float density = 1.0f / max(pow(params . focalPoints[point]. focalX - px, 2)*
//                                    pow(params . focalPoints[point]. gainX, 2)+
//                                    pow(params . focalPoints[point]. focalY - py, 2)*
//                                    pow(params . focalPoints[point]. gainY, 2)-
//                                    params . focalPoints[point]. foveaArea,
//                                    1.0f);
//
//         if(density > focalPointDensity)
//         {
//             focalPointDensity = density;
//         }
//     }
//     minPixelDensity = max(minPixelDensity, focalPointDensity);
//
//     uint val = 0;
//     if(minPixelDensity > 0.75f)
//     {
//
//         val = 0;
//     }
//     else if(minPixelDensity > 0.5f)
//     {
//
//         val =(1 << 2);
//     }
//     else
//     {
//
//         val =(1 << 2)| 1;
//     }
//     return val;
// }
//
// void main()
// {
//     uint i = gl_GlobalInvocationID . x;
//     uint j = gl_GlobalInvocationID . y;
//
//     if(i >= params . attachmentWidth || j >= params . attachmentHeight)
//     {
//         return;
//     }
//
//     ivec2 pos = ivec2(i, j);
//     imageStore(fragmentShadingRateImage, pos, ivec4(computeValue(pos), 0, 0, 0));
// }
