// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0xef,0x73,0x7e,0xe7,0x9c,0x1f,0x42,0x3c,0x08,0x28,0xe1,0xc2,0xf2,0x81,
    0xad,0x86,0xc1,0xd9,0x22,0x23,0x48,0x37,0x32,0x32,0x11,0x25,0x85,0x17,0xb5,0x74,
    0x42,0x09,0xcb,0x20,0x96,0xa6,0x2f,0x20,0x85,0x56,0x6a,0xc1,0x1a,0xb3,0x56,0xb0,
    0x19,0xbc,0x48,0x98,0xbe,0xa8,0xf5,0xaa,0xb5,0x56,0xba,0xd2,0x9e,0xfe,0xa2,0xd6,
    0xc3,0xd6,0xd6,0x75,0xdd,0xe7,0x73,0xb9,0xab,0xb3,0x9a,0x6c,0xf7,0x7e,0xe7,0xfe,
    0x5e,0x4f,0xdf,0xef,0x75,0x5f,0xf7,0xad,0x49,0x76,0x47,0x1a,0x42,0x26,0x54,0x86,
    0x8a,0xf0,0x4b,0x28,0xfd,0x6d,0x0c,0x59,0x41,0x42,0xa8,0x0a,0x85,0xf8,0xdd,0x3f,
    0x30,0x34,0xd0,0xfe,0xe6,0xd9,0x93,0xed,0x9d,0x8f,0x17,0xd5,0x5e,0x13,0x92,0xe8,
    0xa7,0xb6,0xda,0x90,0x86,0x9c,0x7c,0x75,0xbd,0x3e,0x7a,0x6a,0x4a,0xf1,0x6a,0x59,
    0x37,0x64,0xd5,0x89,0x9f,0xe2,0xa9,0xe6,0x90,0x5f,0xd5,0x31,0xa7,0xc6,0x84,0xf0,
    0x5c,0xc8,0x87,0x06,0xea,0xed,0xe0,0x6b,0x58,0x06,0xac,0xc2,0x61,0x59,0xb0,0x3a,
    0x87,0x25,0x60,0x8d,0x0e,0xcb,0x81,0xdd,0xef,0xb0,0x3c,0xd8,0x03,0x0e,0x2b,0x80,
    0x3d,0xe4,0xb0,0x14,0x6c,0xa7,0xc3,0x2a,0xc0,0x1e,0x76,0xd8,0x06,0xb0,0x5d,0x0e,
    0xab,0x04,0x2b,0x3a,0xac,0x0a,0xac,0xd3,0x61,0xf7,0x81,0x75,0x39,0xac,0x1a,0xec,
    0xa9,0xd8,0xa7,0xe4,0xae,0x5e,0xed,0xd9,0x3e,0xf9,0x6e,0xa7,0x3f,0xb6,0xdf,0xe6,
    0xf6,0xda,0xe7,0xad,0xec,0x1b,0x24,0x2a,0x1b,0xed,0x49,0xec,0x8d,0xfe,0xde,0x24,
    0x3e,0x05,0x74,0x6a,0x5f,0x9b,0x64,0x9f,0xa2,0x5f,0xed,0x9b,0xc5,0xb3,0x12,0xbb,
    0xda,0xaa,0xd0,0x92,0x8b,0x58,0x2e,0xf2,0xcd,0xa0,0xa5,0x87,0x7d,0xb5,0xcb,0x55,
    0x83,0xbf,0xd5,0xaa,0x27,0x57,0x88,0xbc,0xea,0xee,0xf6,0xd5,0x6a,0xea,0xaa,0xbf,
    0xc7,0x32,0x1f,0xad,0xdf,0x48,0xbf,0x1b,0xa8,0xdf,0x18,0xeb,0x94,0xb0,0x36,0xb4,
    0x6d,0x86,0x8f,0xfa,0x37,0x61,0x4b,0x9d,0xbd,0xc5,0xe9,0xd9,0x8a,0xbd,0x3e,0xce,
    0x4d,0x36,0xf6,0xb2,0x0d,0xde,0xd6,0x67,0x8b,0x6b,0x63,0x76,0x6c,0xbf,0x1b,0xed,
    0xaa,0x7b,0x2f,0x39,0x34,0x6f,0xb3,0x64,0xec,0x65,0x9f,0x09,0xff,0xfe,0xb3,0xbd,
    0xd6,0x7e,0x9a,0xdf,0xbd,0x68,0xd1,0xfd,0xbe,0xb2,0x9a,0x7d,0x65,0xfb,0x7e,0x7a,
    0xab,0xf1,0x07,0xe1,0x5e,0x70,0xf6,0x41,0xf6,0xca,0xe9,0x45,0x38,0x24,0xce,0x3e,
    0x4a,0x2f,0xd4,0x7e,0x0e,0xdf,0x9c,0xb3,0xcf,0x30,0xe3,0xb6,0xbf,0x54,0xd6,0xdb,
    0x2b,0xcc,0xac,0xd6,0xbf,0x4e,0xee,0x73,0xf0,0xbf,0xce,0x3d,0x4f,0x62,0x6f,0xf2,
    0x91,0x67,0x0e,0xfe,0x8a,0xfd,0x21,0x88,0xf6,0x6f,0x0f,0x73,0x55,0x4b,0xff,0x06,
    0x85,0x51,0x0d,0x77,0xb9,0x96,0x65,0xbd,0x9a,0x62,0x3e,0x37,0x62,0xef,0x95,0x0c,
    0x4d,0xdc,0xe7,0x4d,0x9c,0xf5,0x1e,0x7c,0x9a,0xc1,0xdf,0x11,0x1f,0xdd,0x6f,0x21,
    0xae,0x99,0x38,0x3d,0xeb,0x07,0x89,0x6b,0x21,0xce,0xe6,0x53,0xf1,0xcf,0xc5,0x67,
    0x9b,0x7b,0x07,0xf4,0xfc,0x7f,0x17,0xe6,0xad,0xf0,0xf9,0x4b,0xfc,0xed,0x3d,0x68,
    0x45,0x8f,0xfe,0x3e,0x22,0x71,0x05,0xde,0x84,0x2d,0xf8,0xce,0xd2,0xaf,0x47,0xc0,
    0x8f,0xca,0x2e,0x8d,0x35,0x4a,0x98,0xf9,0xfd,0x29,0x39,0x2c,0x97,0x7e,0x7f,0x13,
    0x2f,0xf5,0xfb,0x0e,0x9f,0x3c,0x31,0x3b,0x9d,0x86,0x5d,0x68,0x68,0x73,0x1a,0x1e,
    0x05,0x37,0x0d,0xed,0x60,0xa6,0xa1,0xe8,0x34,0xa8,0xad,0x83,0xb7,0x49,0xeb,0x76,
    0x38,0x0d,0x8f,0x51,0x3b,0xe3,0x34,0x74,0x82,0x9b,0x86,0x2f,0xc1,0xcc,0x4f,0x35,
    0x58,0xae,0xa2,0xd3,0x70,0x13,0x9f,0x56,0x62,0x3a,0x9c,0x86,0x27,0xd0,0xb0,0xdb,
    0x69,0xe8,0x02,0x37,0x0d,0x4f,0x82,0x99,0x86,0x1e,0xa7,0x41,0x6d,0xdd,0x71,0xee,
    0x4a,0x75,0xbb,0x99,0xa3,0x34,0xe6,0x2b,0xd5,0xbe,0xe9,0xee,0x9b,0x72,0x34,0xdf,
    0x1e,0xc7,0xf1,0x16,0x7e,0x45,0xe2,0xba,0xe1,0xa3,0x77,0xf2,0x19,0xee,0xa3,0xcd,
    0xdc,0xb3,0x70,0xee,0x73,0x33,0xb7,0x1f,0xfc,0x6d,0x66,0xee,0x00,0xd8,0x2d,0xe2,
    0xf4,0x8e,0x0e,0x10,0xd7,0x4f,0x9c,0xf6,0xf4,0x10,0xf8,0x09,0x89,0xd2,0xb7,0xe3,
    0x30,0xf5,0x0e,0x70,0xbf,0x0f,0xb9,0x5e,0x3d,0x4f,0xfc,0xa0,0xeb,0xd5,0x11,0x70,
    0xeb,0xd5,0x51,0x30,0xeb,0xd5,0xb0,0xeb,0x95,0xda,0x86,0x64,0x8d,0xa0,0x7f,0x88,
    0xf3,0xd6,0x3c,0x2f,0x50,0x3b,0x89,0xf9,0x2b,0xe2,0x9b,0xf1,0x12,0xd8,0x61,0x77,
    0x0f,0xb3,0xb1,0x5e,0x21,0xda,0x8f,0x11,0x67,0xeb,0xa2,0xe4,0x52,0xfc,0x38,0xb1,
    0xc7,0x62,0xae,0x0d,0x51,0xd7,0x09,0xf2,0x1c,0xe7,0x2d,0xc8,0xf3,0xe6,0x24,0x9c,
    0xc9,0x30,0x9c,0x46,0x9c,0xde,0x97,0xd1,0x3b,0xea,0xf4,0xbe,0x02,0x6e,0x7a,0x4f,
    0x82,0x99,0xde,0x71,0xa7,0x57,0x6d,0x63,0xb2,0xc6,0xc9,0x3d,0xe6,0xf4,0xbe,0xea,
    0xf4,0x7e,0x41,0xae,0x53,0xe0,0xdb,0xe1,0x64,0x71,0xe3,0xcc,0x89,0xfa,0xbc,0x46,
    0xcd,0x11,0xfc,0xc7,0xa8,0x3b,0xe9,0xea,0xaa,0xcf,0x84,0xac,0x49,0xe2,0x27,0x5c,
    0xdd,0xa9,0xff,0xe8,0xf3,0x1b,0xf7,0xe8,0xf3,0x69,0xe2,0x6c,0x5d,0xa6,0xcf,0x67,
    0x88,0x3d,0xed,0xfa,0x7c,0x96,0x3c,0x67,0xfe,0xa7,0xcf,0xc6,0x69,0x12,0x4d,0x1a,
    0xf3,0x03,0x31,0xe3,0xc4,0x4f,0x94,0x9d,0xc9,0xb0,0xf3,0xfd,0x9e,0xb3,0x1c,0x22,
    0x4e,0xf3,0x9c,0xe7,0xdf,0x90,0x69,0xec,0x76,0x7e,0x6f,0x71,0x7e,0x33,0xee,0xfc,
    0xce,0x83,0xdb,0xf9,0x5d,0x00,0xb3,0xf3,0x9b,0x73,0x7d,0xbc,0x10,0xdf,0x1e,0x9d,
    0xab,0x12,0x8f,0x59,0x74,0x6a,0xad,0x77,0xa9,0x37,0x8d,0xce,0x94,0x9e,0x99,0xce,
    0x39,0x62,0x2e,0x3a,0x3e,0x97,0xe1,0x73,0xc9,0xf1,0x79,0x0f,0xdc,0xf8,0xbc,0x0f,
    0x66,0x7c,0x16,0x1c,0x1f,0xb5,0xcd,0xcb,0x5a,0x24,0xf7,0xbc,0x7b,0x2f,0x3f,0x80,
    0x4b,0xc2,0xfb,0xa8,0x1c,0xbf,0x72,0xb8,0xbd,0x3d,0x0b,0xc4,0x2e,0xba,0x77,0xe1,
    0x43,0x78,0x5d,0x71,0xef,0xc2,0x47,0xe0,0xbf,0x92,0xff,0x63,0xb0,0x7e,0xc7,0xf5,
    0x13,0xf0,0x3e,0xb8,0x2e,0x3b,0xae,0x6a,0x5b,0x92,0xb5,0x4c,0xbd,0x25,0xc7,0xeb,
    0x6b,0x62,0xa6,0xdd,0xbb,0x6d,0x7e,0xcb,0x9c,0xb5,0xfa,0xdd,0xc6,0x67,0x91,0x98,
    0x25,0xc7,0xe7,0x2a,0x7c,0x5a,0x1c,0x9f,0x4f,0xc1,0x8d,0xcf,0xaa,0xe3,0xa3,0xb6,
    0x15,0x59,0xab,0xd4,0x59,0x71,0x7c,0xbe,0x21,0xe6,0x36,0x67,0xa8,0x7c,0xcc,0x6f,
    0xd5,0xf1,0xb9,0x83,0xcf,0x32,0x31,0x2b,0x8e,0xcf,0x67,0xf0,0x99,0x71,0x7c,0xae,
    0x81,0x1b,0x9f,0x75,0xc7,0x47,0x6d,0x6b,0xb2,0xd6,0xa9,0xb3,0xe6,0xf8,0x7c,0xcb,
    0xff,0x27,0xee,0xb8,0x79,0x32,0xbf,0x75,0xc7,0xe7,0x67,0x7c,0x56,0x89,0x59,0x2b,
    0x3b,0xe3,0x05,0xe7,0xfb,0x13,0xf3,0x30,0x4f,0xdc,0x7a,0xd9,0x9c,0xce,0x39,0xdf,
    0x1f,0x99,0xef,0x59,0xe2,0x34,0xcf,0x5e,0x61,0x72,0x03,0xdb,0xdf,0x72,0x6a,0x5d,
    0xb2,0xfe,0x01,0x8a,0xb7,0x70,0x53,0xa4,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
