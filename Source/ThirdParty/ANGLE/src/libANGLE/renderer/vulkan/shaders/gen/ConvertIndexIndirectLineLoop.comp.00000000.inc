// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndexIndirectLineLoop.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndexIndirectLineLoop_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x7f,0x68,0x55,0x65,
    0x18,0x3e,0xef,0xbd,0xd7,0x3b,0xd3,0x28,0xa7,0xbb,0xe9,0xad,0xdc,0xdd,0x52,0x82,
    0xb1,0x58,0x4d,0xb4,0x46,0xba,0xb9,0xe1,0x1f,0x0a,0x0d,0xa5,0x1f,0xa3,0xdd,0x56,
    0xab,0x70,0x45,0xb2,0x1f,0xe6,0x75,0x8e,0xc0,0x24,0xb7,0x5c,0x30,0x09,0x59,0x69,
    0x05,0x73,0xa3,0x8d,0xfe,0x88,0x6d,0xd5,0x1f,0xfb,0x2f,0x22,0x07,0x51,0x6d,0xad,
    0x10,0x04,0x4b,0x50,0x10,0x2c,0x61,0x82,0x65,0x2e,0xe8,0x77,0x59,0xdf,0x7b,0xde,
    0xe7,0x93,0xc7,0xc3,0x19,0x1c,0xce,0xbe,0xe7,0x7d,0xdf,0xe7,0x7d,0xbf,0xe7,0xf9,
    0xce,0xb9,0x27,0x99,0x58,0x53,0x14,0x04,0x12,0x2c,0x09,0x16,0x07,0xc7,0x25,0x08,
    0xff,0x8a,0x83,0x44,0xa0,0xff,0x2e,0x0d,0xd2,0xe1,0x7d,0x6b,0xe3,0xa3,0x8d,0x55,
    0x7b,0xbb,0xdb,0xaa,0xd6,0x6f,0xb8,0x4f,0xe3,0xb7,0x04,0xc9,0x30,0x4f,0x63,0xb7,
    0xba,0x9c,0x45,0xee,0x9e,0x72,0x57,0xe7,0xb3,0xbb,0xba,0x14,0xef,0x74,0xd7,0x32,
    0x87,0xa7,0x42,0xae,0x20,0xa8,0x47,0xae,0x5e,0xdb,0x5c,0x76,0xb1,0xb5,0x09,0xd6,
    0xe0,0xee,0x31,0x01,0x96,0x22,0x2c,0x01,0x6c,0x31,0x61,0x49,0x60,0x37,0x13,0x96,
    0x02,0xb6,0x4c,0xe7,0x75,0x19,0xbe,0x76,0xab,0x8b,0x94,0xba,0x7b,0xfa,0x3a,0x6f,
    0x2a,0xc8,0xa1,0xef,0x2a,0xd4,0xe7,0x22,0xf3,0x68,0x7d,0x0e,0x7d,0xb4,0xbe,0xdc,
    0xdd,0xef,0xba,0x1e,0xb3,0x75,0x39,0xe6,0xd5,0x75,0xed,0x0d,0xfc,0x8b,0x82,0xba,
    0x18,0xbe,0x3a,0xe2,0xab,0x8f,0xf0,0xd5,0x83,0xcf,0xaf,0x9b,0x23,0xf3,0xe6,0x23,
    0xf3,0xe6,0x63,0xf8,0xf3,0xc4,0xdf,0x12,0xe1,0x6f,0x01,0xbf,0xd7,0xa3,0x33,0xf4,
    0x36,0x08,0xee,0xc4,0x7a,0x26,0x32,0xff,0x6c,0x0c,0xff,0x2c,0xf1,0xcf,0x45,0xf8,
    0xe7,0xc0,0xef,0xe3,0x57,0xc1,0x9f,0x75,0xd7,0x0a,0xd7,0x35,0x11,0xc6,0x93,0x61,
    0x5c,0xff,0xcf,0xb8,0x1c,0xed,0x57,0x06,0x8e,0xd2,0xa0,0x28,0xf4,0x2b,0x1d,0x73,
    0x95,0xb9,0xdc,0xe5,0xee,0x7e,0x13,0xce,0xd2,0x46,0xac,0x57,0x00,0x53,0xae,0x12,
    0x70,0xa9,0x1f,0x95,0x58,0x67,0xd0,0x4b,0xeb,0x6f,0x43,0x6e,0x9a,0xe2,0x59,0xf4,
    0x5e,0xed,0xa6,0xf2,0xe7,0xa3,0x14,0xbe,0x97,0xa2,0xae,0x0c,0x1c,0x39,0xf4,0x2d,
    0x23,0x1d,0x35,0xbe,0x16,0xff,0x7b,0x5e,0xbd,0x57,0x40,0x07,0xdf,0xa7,0x92,0xd6,
    0x1a,0xaf,0x76,0xd7,0x7f,0xe8,0x5b,0x4b,0x7d,0xf5,0x7c,0xd4,0x82,0x77,0x33,0x78,
    0xeb,0xd0,0x77,0x33,0x9e,0xa1,0x04,0xf1,0x6e,0x23,0x9e,0x66,0xe2,0xd1,0x73,0xd0,
    0x0c,0x9e,0x27,0x50,0x93,0x07,0x8f,0xae,0x5b,0x88,0x47,0x6b,0x76,0x62,0xbd,0xd2,
    0xad,0xdb,0xc1,0x93,0x44,0x7d,0x07,0x34,0x6d,0x47,0x7d,0x07,0x9e,0x6d,0xa1,0xfa,
    0x2e,0xe8,0xa8,0xf9,0xbb,0x11,0x63,0x3d,0x0a,0xc0,0x4a,0x5c,0x97,0xbd,0x34,0xff,
    0x40,0xc4,0xaf,0x63,0x38,0x7f,0xba,0x9f,0x19,0xda,0x8f,0x9e,0xbb,0x19,0xf0,0x7f,
    0x85,0x59,0x67,0x31,0x8f,0xae,0xe7,0x22,0xfb,0x99,0x07,0x8f,0x5f,0xff,0x0c,0xed,
    0xee,0x71,0x2b,0xdd,0xc7,0x55,0x60,0x05,0x5c,0xf7,0xbb,0xf3,0x9e,0x40,0x4d,0x80,
    0xbd,0xff,0xe1,0x10,0x7d,0xa7,0xfd,0xee,0x56,0x0b,0xc0,0xff,0x76,0xff,0xeb,0x5e,
    0x7f,0x41,0x5c,0xef,0x0d,0x2e,0x4b,0xcf,0xd6,0x93,0x38,0x8f,0xd9,0xd0,0x43,0xeb,
    0xfb,0x14,0xf0,0x06,0xb7,0xd2,0x73,0xd2,0x0a,0xed,0xb3,0x88,0xf9,0xbc,0xa7,0x11,
    0x3b,0xe8,0xb8,0x74,0xdd,0x86,0xf8,0x4e,0xaa,0x7d,0x8e,0x6a,0xdb,0xa8,0xf6,0x79,
    0xc4,0x74,0x0e,0xd5,0xfe,0x45,0xf8,0xd3,0x45,0x39,0x7b,0x80,0x7f,0xe4,0x72,0x54,
    0xff,0x6e,0x60,0x05,0xec,0xaf,0x07,0xfb,0xfb,0xcb,0xe5,0x6b,0x6c,0x9f,0xbb,0x7a,
    0xb0,0x47,0xfd,0xff,0x4f,0x77,0x5f,0xc0,0xba,0x07,0xeb,0x57,0xb0,0xd6,0xfb,0xaf,
    0xee,0xd9,0xd5,0x3e,0xaf,0x89,0xcd,0xa3,0x39,0x87,0xdd,0xd5,0x47,0xb1,0x43,0x62,
    0x33,0x69,0x6c,0x48,0x6e,0x8c,0xbd,0x4a,0xb1,0x37,0x22,0xb1,0x3e,0x8a,0x0d,0x46,
    0x62,0xbd,0x62,0xda,0x69,0xec,0x28,0xfa,0x7d,0x80,0x3d,0xf6,0x23,0xae,0xb5,0xbf,
    0xb9,0x7d,0xf5,0x22,0xee,0xf7,0xd9,0x1f,0xea,0x1d,0x84,0xb8,0xee,0xe3,0x20,0xe9,
    0x7f,0x18,0x7b,0x19,0x20,0x7f,0xff,0x81,0xbf,0x19,0xd2,0xf5,0x5f,0xe0,0x9f,0xa1,
    0xee,0x1a,0xb0,0x2c,0x71,0xe9,0x01,0x57,0xae,0x6b,0x94,0x97,0xc0,0x0f,0x61,0x86,
    0xfc,0x4d,0x8a,0xbd,0x57,0xb2,0x88,0xfb,0x1e,0x29,0xb1,0xd8,0x0c,0x6a,0xd3,0xa8,
    0xd5,0x77,0xcc,0xe7,0xc0,0x8a,0xc4,0xf0,0x4a,0xea,0xb1,0x44,0xac,0xb6,0x88,0x6a,
    0x97,0x8a,0xe1,0xfa,0xfe,0x99,0x80,0x4e,0x47,0x48,0x63,0xf5,0x75,0x10,0x7a,0xe8,
    0x7d,0xdc,0x55,0xa5,0xe1,0xd7,0x11,0xd4,0x1f,0x0a,0x3d,0x30,0xbe,0xa3,0xd0,0x98,
    0x75,0x7a,0x0b,0x3a,0x1d,0x23,0x9d,0xde,0x06,0xee,0x7b,0xbe,0x03,0xac,0x40,0xd8,
    0x10,0xf8,0x75,0xb6,0xf7,0x81,0x1d,0x47,0xee,0x10,0xce,0xe9,0x08,0xf9,0xa7,0xb1,
    0x61,0x77,0x4d,0x61,0xde,0x61,0xf2,0xfe,0x5d,0xec,0xc9,0x9f,0xef,0x31,0xaa,0xd3,
    0xd8,0xa8,0xbb,0xc6,0x50,0x37,0x4a,0x5e,0xbd,0x87,0xb3,0xc8,0xfb,0x29,0x16,0xdb,
    0x4f,0x25,0xed,0x67,0xb9,0x18,0xee,0xb5,0x2e,0x11,0xab,0xcb,0x10,0x57,0x46,0x2c,
    0x4f,0x63,0xde,0xe3,0x95,0x62,0xef,0xa1,0x2c,0xe2,0x9e,0x6f,0x95,0x58,0xcc,0xfb,
    0x74,0x3b,0xf8,0xd8,0xe3,0x3b,0xc4,0xf0,0x4a,0x60,0xfa,0xbe,0x5c,0x2d,0xf6,0x1b,
    0xa0,0xb1,0x59,0xbc,0x43,0x4b,0xc5,0xf0,0x97,0xc1,0x9d,0x13,0xc3,0x3c,0x77,0xb9,
    0x58,0x3f,0xc5,0x3d,0xf7,0x5a,0x31,0x8f,0x95,0xe7,0x0b,0x60,0x77,0x8b,0xe5,0x6a,
    0xac,0xce,0x69,0xa8,0xf3,0x29,0xa6,0x67,0xc4,0x6b,0x37,0x46,0xcf,0xe2,0xeb,0x98,
    0x79,0x18,0x3a,0x8e,0x92,0x1f,0xe3,0x74,0xc6,0xd4,0x8f,0x49,0xf2,0x63,0x3c,0x3c,
    0x03,0x41,0x88,0x29,0xe7,0x04,0x69,0xf8,0x21,0x78,0xd9,0x8f,0xaa,0x18,0x3f,0xee,
    0x15,0xc3,0xbd,0x1f,0xd5,0x62,0x75,0xec,0xc7,0x3a,0xb1,0xbc,0x6a,0xf2,0x63,0x3d,
    0xf9,0xb1,0x8e,0xfc,0xd8,0x20,0x16,0xf3,0x9a,0x3d,0x00,0x3e,0xf6,0xa3,0x46,0x0c,
    0x67,0x3f,0x1e,0x84,0x1f,0x35,0xe4,0xc7,0x46,0x31,0xdc,0xfb,0xb1,0x49,0x0c,0xf3,
    0xdc,0x75,0x62,0xfd,0x36,0x91,0x1f,0x0d,0x78,0x0e,0x6a,0xc8,0x8f,0x2d,0x62,0xb9,
    0x0d,0xf0,0x43,0xe7,0xdb,0x02,0x3f,0xbc,0x76,0x93,0xe4,0xc7,0x9b,0x98,0x79,0x0c,
    0x3a,0x4e,0xe0,0xf9,0x1e,0x41,0xee,0x14,0x69,0xfa,0x50,0x8c,0xa6,0x8d,0x62,0xb8,
    0xd7,0x74,0x7b,0xcc,0x19,0xdf,0x21,0x96,0xb7,0x9d,0x34,0x7d,0x98,0x34,0xdd,0x41,
    0x9a,0x3e,0x22,0x16,0xf3,0xfb,0x7e,0x2c,0xe6,0x8c,0x37,0x89,0xe1,0xac,0xe9,0xe3,
    0xd0,0xb4,0x89,0x34,0x6d,0x16,0xc3,0xbd,0xa6,0x79,0x31,0xcc,0x73,0xb7,0x88,0xf5,
    0xcb,0x93,0xa6,0xad,0x62,0xef,0x97,0x26,0xd2,0xf4,0x19,0xb1,0xdc,0x56,0x68,0xaa,
    0xf3,0x29,0xe6,0xf7,0xf7,0x31,0xbd,0x0f,0x3c,0xf6,0x09,0xce,0xf2,0x40,0x44,0xcf,
    0x11,0xd2,0x5e,0x7f,0xc3,0x54,0xff,0x49,0x70,0x4c,0x51,0x6c,0x10,0xcf,0xc1,0x24,
    0xb8,0xa6,0xc0,0xd3,0x07,0x9e,0xbe,0xc8,0xef,0x6b,0x2f,0x3d,0x47,0x9f,0x46,0xde,
    0x6b,0xd3,0xf4,0x1c,0x69,0xec,0x84,0xbb,0xa6,0x51,0x77,0x82,0xfc,0x7d,0x21,0xc6,
    0xdf,0x5d,0x62,0xb8,0xf7,0xb7,0x3d,0xc6,0xdf,0x0e,0xb1,0xbc,0x76,0xf2,0xb7,0x8b,
    0xfc,0xed,0x20,0x7f,0x77,0x8b,0xc5,0xbc,0x07,0x7b,0x62,0xfc,0x2d,0x88,0xe1,0xec,
    0x6f,0x37,0xfc,0x2d,0x90,0xbf,0xfb,0xc4,0x70,0xef,0x6f,0x8f,0x18,0xe6,0xb9,0x5f,
    0x12,0xeb,0xd7,0x43,0xfe,0xee,0xc7,0x6f,0x53,0x81,0xfc,0x3d,0x20,0x96,0xbb,0x1f,
    0xfe,0xea,0x7c,0x07,0xc8,0xdf,0x2f,0xc9,0x5f,0xd5,0xdc,0x6b,0x37,0x4d,0x7e,0xf5,
    0x63,0x1f,0xbd,0xc8,0x67,0x5d,0xbf,0xc6,0x6f,0xdd,0x00,0xe9,0xfa,0x0d,0x70,0xaf,
    0xd7,0x49,0x7c,0x9f,0x66,0x11,0xd3,0x39,0x4e,0x82,0xd7,0xcf,0x71,0x0a,0xb1,0x02,
    0x69,0x7f,0x1a,0xdf,0x80,0x05,0xe2,0xfa,0x96,0xbe,0x01,0x4f,0x53,0xcf,0xef,0x10,
    0xf3,0x79,0x67,0xa8,0xe7,0x29,0xf4,0x3c,0x83,0x3c,0xcf,0x7f,0x16,0x3d,0xf9,0x1b,
    0xf3,0x1c,0xd5,0x9d,0x45,0xdd,0x39,0x7c,0x4b,0xfa,0xba,0xf3,0xa8,0xab,0x20,0xec,
    0x02,0x66,0xad,0x20,0xae,0xef,0x69,0xd6,0x0b,0x34,0xeb,0x0f,0x88,0xf9,0xbc,0x8b,
    0xd4,0xf3,0x3c,0x7a,0x5e,0x44,0x9e,0xe7,0xbf,0x84,0x9e,0xf3,0x84,0x5d,0x46,0xcf,
    0x79,0xe2,0xfa,0x91,0x7a,0x5e,0xa6,0x9e,0x3f,0x21,0xe6,0xf3,0xae,0x50,0xcf,0x4b,
    0xe8,0x79,0x05,0x79,0xfc,0xad,0xbb,0x10,0x7e,0xcf,0x49,0x50,0xe3,0xae,0xff,0x01,
    0xcd,0xfd,0x4e,0x8c,0x24,0x11,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcData[];
// };
//
// layout(set = 0, binding = 2)readonly buffer cmd
// {
//
//     uint cmdData[];
// };
//
// layout(set = 0, binding = 3)buffer dstCmd
// {
//
//     uint dstCmdData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint cmdOffsetDiv4;
//
//     uint dstCmdOffsetDiv4;
//
//     uint srcOffset;
//
//     uint dstOffsetDiv4;
//
//     uint isRestartEnabled;
// };
//
// uint GetIndexValue(uint index)
// {
//
//     index += srcOffset >>(2 - 2);
//
//     uint srcBlock = srcData[index >> 2];
//
//     uint srcShift =((index & 0x3)<< 3);
//
//     uint value =(srcBlock >> srcShift)& 0xff;
//     return value;
//
// }
//
// void PutIndexValue(uint index, uint value)
// {
//
//     uint dstIndex = dstOffsetDiv4 +(index >> 2);
//
//     uint srcBlock = dstData[dstIndex];
//
//     uint srcShift =((index & 0x3)<< 3);
//
//     srcBlock &= ~(0xff << srcShift);
//
//     srcBlock |= value << srcShift;
//
//     dstData[dstIndex]= srcBlock;
//
// }
//
// void main()
// {
//
//     uint indexCount = cmdData[cmdOffsetDiv4];
//     uint firstIndex = cmdData[cmdOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     uint workingCount = 0;
//     uint srcIdx = firstIndex;
//     uint indicesRemaining = indexCount;
//     uint lineSize = 0;
//     uint firstIndexValue = 0;
//     while(indicesRemaining > 0)
//     {
//         uint indexValue;
//         uint restartValue = 0xff;
//         indexValue = GetIndexValue(srcIdx ++);
//         if(lineSize == 0)
//         {
//             firstIndexValue = indexValue;
//         }
//         indicesRemaining --;
//         if((isRestartEnabled == 1)&&(indexValue == restartValue))
//         {
//
//             if(lineSize > 1)
//             {
//                 PutIndexValue(workingCount ++, firstIndexValue);
//             }
//             if(lineSize > 0)
//             {
//                 PutIndexValue(workingCount ++, restartValue);
//             }
//             lineSize = 0;
//         } else {
//             PutIndexValue(workingCount, indexValue);
//             workingCount ++;
//             lineSize ++;
//         }
//     }
//     if(lineSize > 1)
//     {
//         PutIndexValue(workingCount, firstIndexValue);
//         workingCount ++;
//     }
//
//     dstCmdData[dstCmdOffsetDiv4]= workingCount;
//     dstCmdData[dstCmdOffsetDiv4 + 1]= cmdData[cmdOffsetDiv4 + 1];
//     dstCmdData[dstCmdOffsetDiv4 + 2]= 0;
//     dstCmdData[dstCmdOffsetDiv4 + 3]= cmdData[cmdOffsetDiv4 + 3];
//     dstCmdData[dstCmdOffsetDiv4 + 4]= cmdData[cmdOffsetDiv4 + 4];
// }
