// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000E.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000E[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x93,0x5b,0x6b,0x53,0x51,
    0x10,0x85,0x77,0xce,0x69,0x2e,0x55,0xd3,0x26,0x68,0x12,0x2b,0x62,0xa3,0xf1,0x41,
    0xd0,0x96,0x3e,0xa8,0x04,0x44,0xd1,0x87,0xc6,0x56,0x22,0xd2,0xd6,0x52,0xb5,0xa8,
    0xa9,0x06,0x25,0x6a,0x6a,0xc0,0x82,0x56,0xc1,0x07,0xff,0x8e,0xbf,0x4f,0xbc,0x80,
    0xe0,0xac,0x9d,0x6f,0xd7,0xd9,0x30,0xd9,0x67,0xd6,0x5c,0xd7,0xec,0x49,0x9e,0x75,
    0xca,0x21,0x14,0xc2,0xb1,0x50,0x09,0x5f,0xc2,0xf4,0xd4,0x43,0x66,0x48,0x08,0xc7,
    0x43,0x29,0xde,0x77,0xfb,0x5b,0xfd,0xe5,0x0f,0x07,0xc3,0xe5,0xab,0xd7,0x56,0x64,
    0x9f,0x0b,0x79,0xf4,0x93,0x6d,0x3e,0x94,0xc3,0x8c,0xdd,0x92,0xf1,0xde,0x68,0x5f,
    0x78,0xcd,0xa4,0x17,0xef,0x3c,0xe2,0x65,0xf7,0x7d,0x42,0xf9,0xec,0xab,0x16,0xf3,
    0x2b,0x3e,0x84,0xb5,0x50,0x0c,0x4d,0x6a,0x77,0xb8,0x13,0x56,0x00,0xab,0x38,0x2c,
    0x03,0xab,0x39,0x2c,0x07,0x3b,0xed,0xb0,0x19,0xb0,0xb3,0x0e,0x2b,0x82,0xb5,0x1d,
    0x56,0x02,0xbb,0xe8,0xb0,0x32,0xd8,0x25,0x87,0x55,0xc0,0xae,0x38,0x6c,0x16,0x6c,
    0x25,0xf2,0xca,0x8f,0xfa,0x13,0xc7,0x1e,0x1c,0x9b,0xe8,0xeb,0x76,0x5f,0x80,0x5f,
    0xd2,0xcf,0xa3,0x9f,0xb4,0xa8,0x2c,0xea,0x79,0xe4,0xa2,0xef,0x86,0xf9,0x94,0xe8,
    0x55,0x73,0x68,0x99,0x5e,0xa6,0xdf,0x2c,0xe6,0xcd,0x43,0x15,0xbb,0x6c,0x73,0x76,
    0x57,0xe1,0xdd,0xb6,0xdf,0x79,0xe2,0x84,0xdf,0x40,0xaf,0xb9,0x5c,0x75,0xfc,0x53,
    0xad,0x06,0xb9,0x74,0xce,0xd9,0x4b,0xa5,0x39,0xd4,0x91,0x12,0x52,0xe5,0x6e,0x38,
    0x51,0xbd,0x16,0xf3,0x68,0x52,0xaf,0xc5,0x7b,0x08,0xbb,0x0c,0x97,0x05,0xf2,0xcb,
    0xff,0x0c,0xb6,0xb2,0xb3,0x2f,0xa2,0xcb,0xde,0xc6,0xae,0xfc,0xa7,0xac,0xcb,0x0e,
    0x7e,0x0d,0xde,0x2a,0xb8,0xb8,0x25,0xde,0x27,0xe9,0x5d,0x62,0x95,0x67,0x95,0xfd,
    0xa8,0xd2,0xd7,0x2a,0xfb,0x99,0xc7,0x7e,0x66,0xed,0x2d,0xa6,0xb6,0x42,0xf8,0x7f,
    0x0a,0x4e,0x57,0x8e,0xb5,0xa3,0x77,0x9b,0xe6,0x90,0xbe,0x0e,0x76,0xdd,0x76,0x21,
    0x63,0xee,0x81,0xbc,0xbf,0x0c,0xd1,0xae,0xdd,0xe4,0x5d,0x36,0x98,0xfd,0x03,0x63,
    0xa7,0x59,0x6e,0x82,0x6d,0xb8,0x7a,0xfb,0xbc,0xef,0x16,0xf6,0x3b,0x96,0x41,0x33,
    0x7a,0xc8,0x1c,0x17,0xc8,0x27,0x9f,0x6d,0xf0,0x6f,0xe6,0x23,0x7d,0x87,0xb8,0x6d,
    0xe2,0x34,0xbb,0x47,0xc4,0x2d,0x12,0xa7,0xb9,0x3d,0x06,0xff,0x6e,0x3e,0x9a,0xe7,
    0x13,0x30,0xcd,0xf3,0xa7,0x75,0x3e,0xa0,0x9f,0x3f,0xe6,0x2f,0xdb,0xae,0xc9,0x00,
    0x3e,0xbb,0xb1,0xdf,0x62,0x9c,0xef,0x53,0x6a,0xea,0x7c,0x65,0xe6,0xcf,0xc0,0x37,
    0x4d,0x53,0x4f,0x07,0x60,0xc9,0xef,0xb7,0xe5,0x48,0xb9,0x74,0xff,0x30,0x2f,0xf9,
    0x7d,0xc2,0xa7,0x48,0xcc,0xae,0xe3,0xb0,0x07,0x87,0x25,0xc7,0xe1,0x05,0x78,0xe2,
    0xf0,0x12,0x2c,0x71,0x18,0x39,0x0e,0xb2,0x0d,0x4d,0x46,0xd4,0x1d,0x3a,0x0e,0xaf,
    0xa8,0x5d,0x70,0x1c,0x5e,0x83,0x27,0x0e,0x1f,0xc1,0x92,0x9f,0x38,0xa4,0x5c,0x23,
    0xc7,0xe1,0x10,0x9f,0x01,0x31,0x43,0xc7,0xe1,0x0d,0x1c,0xba,0x8e,0xc3,0x5b,0xf0,
    0xc4,0xe1,0x1d,0x58,0xe2,0x30,0x71,0x1c,0x64,0x1b,0x9b,0x4c,0xa8,0x3b,0x66,0x8f,
    0x54,0xf7,0x3d,0xb5,0x0f,0xdd,0xbe,0xaa,0xc7,0xe4,0x3b,0x71,0x3d,0x7e,0xc6,0x6f,
    0x44,0xdc,0x98,0x7e,0xb4,0xd3,0xf7,0xd8,0xe7,0xe7,0xe6,0xa9,0x7d,0xed,0x83,0x29,
    0xe6,0x36,0xbb,0xa7,0xb9,0xe9,0x7f,0x72,0x1f,0xbb,0xce,0x2d,0xeb,0xb5,0x07,0xf6,
    0xd7,0x3a,0xe8,0x9a,0xfc,0x03,0x52,0x53,0x8a,0x15,0x54,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
// }
