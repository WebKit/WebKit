// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000E.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000E[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x93,0x5d,0x6f,0x12,0x51,
    0x10,0x86,0x67,0x77,0x0b,0x8b,0x58,0xa0,0x05,0x5a,0x24,0x52,0x8b,0x85,0xc4,0xa6,
    0xad,0x4b,0xa3,0x52,0x0b,0x4a,0x5b,0x8c,0x8d,0x26,0x52,0x1b,0xf5,0x07,0x18,0x13,
    0x6f,0xbc,0xb0,0x37,0x7a,0xed,0x85,0x7f,0xc7,0xdf,0x67,0xfc,0x48,0x4c,0x9c,0x39,
    0x3c,0x47,0x87,0xe4,0x70,0x76,0xde,0x79,0xe7,0xe3,0x9d,0x9d,0xcd,0xd2,0x41,0x2e,
    0x92,0x48,0x55,0x2a,0x72,0x29,0xcb,0xdf,0xba,0xa4,0x8a,0x88,0x5c,0x97,0x72,0xb8,
    0x9f,0x2d,0xde,0x2c,0x8a,0x4f,0x9f,0xdf,0x17,0x0f,0xc6,0x87,0xe6,0xaf,0x4b,0x16,
    0x78,0xe6,0x6b,0x48,0x2e,0x2b,0x7a,0xdb,0xf9,0xf8,0xee,0xc3,0x95,0xe1,0x35,0x3d,
    0x27,0x7a,0xd6,0x94,0x67,0x78,0xee,0x9e,0x57,0x2d,0x9f,0x3e,0xd5,0x42,0x7e,0x8b,
    0x17,0x79,0x2e,0x25,0x69,0x51,0x7b,0xc0,0x1d,0xb1,0x04,0xac,0xe2,0xb0,0x14,0x6c,
    0xcd,0x61,0x19,0xd8,0x0d,0x87,0xad,0x80,0xf5,0x1c,0x56,0x02,0xeb,0x3b,0xac,0x0c,
    0x36,0x74,0x58,0x0e,0xb6,0xeb,0xb0,0x0a,0xd8,0x81,0xc3,0xae,0x81,0x1d,0x06,0x5d,
    0xd9,0xbf,0xfe,0x4c,0xe3,0x09,0x1a,0x37,0xb1,0xe7,0x7a,0xef,0xa0,0x2f,0xda,0xb7,
    0xb1,0x5b,0x1a,0x95,0x06,0x3b,0x0b,0x5a,0xec,0x79,0x43,0x39,0x65,0x7a,0xb5,0x39,
    0x74,0xd4,0xce,0xe9,0x37,0x0d,0x79,0x33,0x7d,0x6f,0x4b,0xbf,0xf9,0xac,0x56,0x15,
    0xdd,0x7d,0xfd,0x5f,0x25,0xce,0xf0,0x47,0xd8,0x35,0x97,0xab,0x0e,0x3f,0xd6,0x6a,
    0x92,0xcb,0x7e,0xb7,0x94,0x1d,0xe7,0x50,0xe7,0x94,0x39,0x55,0xee,0xa6,0x3b,0x56,
    0xaf,0xcd,0x3c,0x5a,0xd4,0x6b,0x87,0xbc,0x4b,0x6c,0x1f,0x2d,0x9b,0xe4,0x37,0x7e,
    0x07,0x5f,0xee,0xfc,0x3d,0x6c,0xf3,0x6f,0xe1,0xb7,0xfc,0x6d,0xed,0xb2,0x0f,0xaf,
    0xe9,0xe6,0x16,0xe3,0xf6,0x78,0x3f,0xd1,0x1e,0x13,0x6b,0x79,0x66,0xec,0x47,0x95,
    0xbe,0x66,0xec,0xa7,0x61,0x5d,0x65,0x9d,0xe2,0x4b,0xe4,0xff,0x2f,0x71,0xb6,0xe5,
    0x38,0xe3,0xf9,0x94,0x1c,0x66,0xcf,0xc1,0x8e,0x74,0x17,0x52,0xe6,0x2e,0xe4,0xfd,
    0xa9,0x88,0xed,0xda,0x8c,0xf7,0xd2,0x60,0xf6,0x97,0xaa,0xae,0xce,0xee,0x36,0x38,
    0xb1,0xde,0x15,0xef,0x77,0x1d,0xff,0x5c,0x33,0x74,0xd8,0xe9,0x0d,0x66,0x37,0x83,
    0xd3,0x05,0xff,0xaa,0x1c,0xb3,0x6f,0x12,0xd7,0x25,0x6e,0x2b,0xbc,0xc3,0x65,0x5c,
    0x8f,0x38,0x9b,0xdb,0x36,0xf8,0x37,0xe5,0xf4,0xd9,0xc7,0x6d,0xe6,0xf9,0x43,0x3b,
    0x1f,0xd2,0xcf,0x6f,0xe5,0xef,0xb8,0xef,0xc2,0xf4,0xd8,0xf3,0x2b,0x8d,0xb3,0xf9,
    0xde,0xa1,0xa6,0xfd,0xbe,0x30,0xf3,0x5d,0xf0,0xd7,0x6a,0xe5,0xe1,0x1b,0x59,0x62,
    0x91,0xf7,0x4b,0x73,0xc4,0x5c,0x76,0x7f,0x57,0x96,0xf1,0x16,0x70,0x4a,0xc4,0x0c,
    0x9c,0x86,0x7d,0x34,0xec,0x39,0x0d,0x07,0xe0,0x51,0xc3,0x5d,0xb0,0xa8,0x61,0xe4,
    0x34,0x98,0xaf,0xd0,0x33,0xa2,0x6e,0xe1,0x34,0xdc,0xa3,0x76,0xe2,0x34,0xdc,0x07,
    0x8f,0x1a,0x5e,0x80,0x45,0x9e,0x69,0x88,0xb9,0x46,0x4e,0xc3,0x05,0x9c,0x21,0x31,
    0x85,0xd3,0x70,0x84,0x86,0xb1,0xd3,0xf0,0x10,0x3c,0x6a,0x38,0x06,0x8b,0x1a,0xa6,
    0x4e,0x83,0xf9,0x26,0x7a,0xa6,0xd4,0x9d,0xb0,0x47,0x56,0xf7,0x31,0xb5,0x2f,0xdc,
    0xbe,0x5a,0x8f,0x91,0x3b,0x75,0x3d,0xbe,0x84,0x37,0x22,0x6e,0x42,0x3f,0xb6,0xd3,
    0x4f,0xd8,0xe7,0xb7,0xca,0xb4,0x7d,0x7d,0x0a,0x66,0x31,0x67,0xec,0x9e,0xcd,0xcd,
    0xbe,0x93,0x73,0xfc,0x12,0xbe,0xa3,0x2c,0x7c,0x4b,0x86,0xfd,0xd1,0x0e,0x8e,0xf5,
    0xfc,0x05,0x1d,0x98,0x34,0x58,0x54,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
// }
