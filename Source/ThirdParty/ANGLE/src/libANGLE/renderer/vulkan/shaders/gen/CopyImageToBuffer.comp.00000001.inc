// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/CopyImageToBuffer.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kCopyImageToBuffer_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4d,0x6c,0x95,0x45,
    0x14,0x86,0x67,0xbe,0xef,0xf6,0xb6,0xc5,0xaa,0x28,0x70,0x11,0xab,0x05,0xdb,0x84,
    0x2e,0xda,0x10,0x17,0x17,0x63,0x82,0xf8,0x53,0x12,0x75,0x41,0xf0,0x07,0x16,0x26,
    0x2e,0x8c,0x4a,0x62,0x34,0x81,0x85,0xba,0x60,0x41,0xb0,0x31,0x4d,0x48,0x5c,0xb8,
    0x68,0x6d,0x62,0x40,0xfc,0xe9,0xd6,0xd0,0xb2,0x57,0xab,0x41,0x45,0xa2,0x51,0x04,
    0x56,0x0a,0x91,0xd8,0x85,0xda,0xc4,0x18,0x31,0x56,0x69,0x8d,0xd4,0xf3,0xce,0x3c,
    0x43,0x8e,0x6d,0x32,0xfd,0xe6,0xbc,0xe7,0x9c,0xf7,0xfc,0xcc,0x9c,0xb9,0x75,0x35,
    0xd0,0x19,0x42,0x0c,0xab,0x42,0x57,0x58,0x1f,0x43,0xfa,0xbb,0x29,0x54,0x41,0xdb,
    0xeb,0x42,0x33,0x7d,0x1f,0xda,0xb9,0x7b,0xe7,0x96,0x97,0x5e,0xde,0xbb,0xa5,0xbd,
    0xf5,0x4e,0xe9,0x6f,0x08,0x75,0xb2,0x93,0xee,0x46,0xb3,0xe9,0xb0,0x6f,0xc3,0xd6,
    0xbe,0xa7,0x9f,0xdf,0x2f,0xbc,0xd7,0xd6,0x6a,0xc3,0x1b,0x89,0x2b,0x18,0x73,0x5e,
    0x89,0xcb,0xd0,0xde,0xc4,0x1d,0xc2,0x6d,0xb6,0x1e,0x36,0xef,0x8d,0x39,0x6c,0x18,
    0xe0,0x5b,0xb0,0x08,0xd6,0xe5,0xb0,0x0a,0xac,0xc7,0x61,0x35,0xd8,0x6a,0x87,0x35,
    0xc0,0x6e,0x71,0x58,0x07,0x98,0x8f,0xdb,0x04,0xdb,0x94,0x72,0xab,0xaf,0xc5,0x50,
    0x9e,0xdb,0xed,0xdb,0x4f,0x4e,0x45,0xbe,0xc3,0xc9,0xe3,0xf8,0x37,0xe0,0x9b,0x58,
    0x51,0x87,0xf8,0x26,0xc8,0x4f,0xf6,0x93,0x2b,0xf8,0x26,0xe1,0x2b,0x7d,0x99,0xa6,
    0x2f,0x1b,0x6c,0xad,0xb1,0x2c,0xaa,0xa4,0xaf,0x93,0xbf,0xf6,0x2d,0xdb,0x35,0xc9,
    0x75,0xbd,0xd9,0x77,0xba,0xf8,0xeb,0xec,0x7f,0x0f,0xba,0x80,0xbe,0x45,0x9f,0x2a,
    0xe4,0x0d,0xc8,0x75,0xb2,0x6b,0x84,0x5b,0x89,0x2d,0x7c,0x1b,0x72,0x2f,0x98,0xf8,
    0xfa,0xe0,0x93,0xdc,0x17,0xba,0x53,0x6f,0x5a,0x69,0x9f,0x79,0x0a,0x7f,0x59,0xe2,
    0x94,0x7d,0xb7,0xad,0x8d,0x70,0x6e,0xa2,0x46,0x61,0x43,0x70,0xf6,0x93,0x93,0xec,
    0x07,0xd0,0xc9,0x7f,0xad,0xa1,0x9b,0xb1,0x93,0x3c,0x48,0x2d,0xc5,0x6f,0x88,0xdc,
    0x8b,0x7e,0x98,0xdc,0x8a,0xbe,0x8d,0xbd,0x78,0xb7,0xc2,0xdb,0x4a,0xf5,0x75,0x5b,
    0x2e,0xb9,0x57,0x55,0xf8,0xff,0x5f,0x74,0x3e,0xf7,0xb0,0xdf,0x46,0xee,0x92,0xb7,
    0xbb,0x7e,0xde,0x4f,0xed,0x95,0x8b,0x39,0x02,0x87,0xfc,0x77,0x10,0xb3,0x0f,0xfb,
    0x07,0xd9,0xd7,0xce,0x7e,0x17,0x79,0x48,0xbf,0x07,0x7d,0x03,0xbd,0xf0,0x27,0x52,
    0xb4,0xab,0x23,0xd2,0x3f,0x49,0x5f,0xbc,0xfe,0x19,0xd7,0x13,0xc9,0xcf,0x26,0x69,
    0xf4,0xbe,0x22,0x3f,0x97,0xe4,0x57,0x76,0x94,0x1e,0xbd,0x60,0x6b,0xd9,0xc5,0x7f,
    0x91,0x79,0x2a,0xf2,0x01,0xe6,0xa6,0xc8,0x87,0x98,0x99,0x22,0x8f,0xb9,0xf8,0x92,
    0x0f,0x33,0x47,0xaa,0xf7,0x35,0x6a,0x57,0x9c,0xdb,0xad,0xca,0x71,0xf6,0x7d,0xdc,
    0xfb,0x71,0xec,0xde,0xa0,0x67,0x13,0xf4,0x55,0xf2,0xa4,0xbb,0x03,0x6f,0xb2,0xef,
    0xa1,0x2f,0x6f,0xdb,0x77,0xb3,0xeb,0xb3,0xf0,0xe3,0xe4,0x3d,0x6c,0x55,0xea,0xbe,
    0x4e,0x83,0x1d,0xe7,0x1e,0x0c,0xdb,0x34,0x68,0x1e,0x6e,0x8e,0xb9,0x47,0x7e,0x15,
    0xdd,0x9a,0x98,0xfb,0xe5,0x97,0x74,0xea,0xf3,0xda,0x98,0x7b,0xe5,0xd7,0x5d,0x56,
    0x69,0x45,0xfd,0x81,0x73,0xbc,0x62,0x88,0xea,0xff,0xdb,0xa4,0x19,0xf0,0x7f,0x6c,
    0xaf,0xbb,0x7a,0x02,0xfd,0x89,0x74,0x6f,0xf2,0xbc,0x1d,0x61,0xa6,0x1e,0xb1,0x38,
    0xba,0x8b,0x47,0xc1,0x8e,0xb8,0xfb,0xf7,0x80,0x31,0xea,0xbe,0xbe,0xc5,0xac,0x0c,
    0xe1,0x2f,0xfb,0x63,0xe0,0xd3,0x66,0xa3,0xbe,0xbc,0x03,0xc7,0xb1,0xc4,0xd1,0x48,
    0x7d,0x7a,0x17,0x5c,0x39,0x4d,0xc1,0xbb,0x64,0x3a,0xe1,0xef,0xd9,0x9a,0x22,0x2f,
    0xed,0x17,0xed,0x3b,0x83,0x3c,0x45,0x6c,0xcd,0xe0,0x07,0xc4,0xee,0x27,0xb6,0x7a,
    0xfe,0x21,0xf8,0xfb,0x66,0xa3,0x38,0x1f,0x81,0x0d,0x12,0xeb,0x94,0x8b,0x25,0xdd,
    0xac,0xad,0x53,0x70,0xcf,0x26,0xee,0x66,0xe2,0xfe,0xd8,0xd5,0x35,0xec,0xf8,0x3f,
    0x41,0xf7,0x98,0xf1,0x4b,0x3e,0x49,0x5f,0xd4,0x93,0x57,0xc1,0x3e,0xc5,0xee,0xa4,
    0xc3,0x3e,0x03,0x17,0xd7,0xe3,0x16,0x43,0x7d,0xba,0x3e,0x66,0xfc,0x28,0xfe,0xaa,
    0xb3,0xe4,0xa2,0xef,0x02,0xfd,0x5f,0x17,0xb3,0xcd,0x14,0x3e,0xb3,0xae,0xff,0x5f,
    0x90,0x67,0xdb,0xf5,0xff,0x34,0xf8,0xa8,0xd9,0x48,0xfe,0x12,0x8e,0xd3,0xd8,0xe8,
    0xad,0xf8,0x8a,0x77,0xe2,0x20,0x6f,0xc4,0xd7,0xd8,0x89,0x57,0x6f,0xc2,0x37,0xf0,
    0x8e,0xe0,0xa3,0x39,0x3a,0x03,0xae,0xda,0x25,0x7f,0x8b,0x5f,0x70,0xd8,0x59,0x30,
    0xd5,0xf3,0xa8,0xd5,0xa9,0xf7,0xe4,0x1c,0xb6,0x67,0xe1,0x78,0x8a,0xbb,0x7d,0x9e,
    0x3c,0xce,0x31,0x37,0x6d,0x77,0xb6,0xdf,0x11,0x7f,0x97,0xeb,0xfd,0xf7,0xe0,0xe5,
    0x6c,0x2f,0x80,0x95,0xb3,0x9d,0x77,0x67,0x2b,0xdd,0x45,0x5b,0x73,0xf4,0x53,0xfb,
    0xd7,0xcd,0x4f,0x71,0x7f,0x20,0xb6,0xde,0xad,0xfd,0xbc,0x69,0x97,0xc0,0x0f,0xf2,
    0x86,0xfd,0x08,0xa6,0x33,0x99,0x87,0x63,0x2e,0xcd,0x7b,0x57,0xe2,0xf8,0xe9,0xda,
    0x3b,0x9e,0xb9,0x34,0xc3,0x9a,0xd5,0x12,0xe3,0x67,0x6c,0xf4,0xb6,0xed,0x83,0xf3,
    0x17,0x70,0xcf,0x39,0xcf,0x39,0x4b,0xdf,0x8a,0x39,0xee,0x45,0x6c,0xe7,0xd2,0x39,
    0x76,0x24,0xdd,0xaf,0xe8,0x35,0xf3,0xe5,0xee,0xfd,0x06,0x1e,0xdc,0x7d,0xfc,0x1d,
    0x2c,0xa6,0x3b,0x97,0xb1,0xcb,0xe0,0x7a,0x47,0x3f,0x07,0xfb,0x03,0xff,0xcb,0xce,
    0xf7,0x4f,0x7c,0x2b,0xe7,0xbb,0x00,0x7e,0xc0,0xf9,0xfe,0x85,0xff,0x82,0xf3,0xbd,
    0x82,0x6f,0xed,0x7c,0x17,0xc1,0x0f,0x39,0xdf,0x25,0xfc,0x17,0xdd,0x59,0xff,0xcb,
    0x59,0x8f,0xb9,0xb3,0xbe,0x0a,0x5e,0x6c,0x96,0xb1,0x39,0xec,0x6c,0x54,0xe4,0x32,
    0x36,0xe9,0x5d,0x8f,0xf9,0xdd,0xf2,0xf3,0x5a,0xc5,0x8c,0x8f,0x11,0xbf,0x8e,0xd9,
    0x4f,0xf8,0x28,0x58,0x23,0xe6,0x78,0xd2,0x15,0xae,0x0e,0xb8,0x06,0x1d,0x57,0x33,
    0x66,0xbc,0xf8,0x75,0xc6,0xec,0xdb,0x8c,0xf9,0xdd,0xd0,0x6f,0xc2,0xaa,0x98,0x7f,
    0x27,0xda,0xe8,0xef,0xb5,0x8e,0x08,0x5b,0x5a,0xf1,0x8e,0xcd,0xa4,0xfa,0x62,0xb8,
    0xdb,0xd6,0x7f,0x63,0x2f,0x8c,0x1c,0xd0,0x0a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)uniform texture3D src;
//
// layout(set = 0, binding = 1)buffer dst
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uvec2 srcOffset;
//     int srcDepth;
//
//     bool reverseRowOrder;
//
//     uvec2 size;
//
//     uint outputOffset;
//
//     uint outputPitch;
//
//     bool isDstSnorm;
// } params;
//
//       vec4 getSourceValue()
// {
//     uvec2 coord = gl_GlobalInvocationID . xy;
//     if(params . reverseRowOrder)
//     {
//         coord . y = params . size . y - coord . y - 1;
//     }
//     coord += params . srcOffset;
//
//           vec4 srcValue = texelFetch(src, ivec3(coord, params . srcDepth), 0);
//
//     return srcValue;
// }
//
// uint convertToDestValue(vec4 srcValue)
// {
//
//     uvec4 normalized;
//     if(params . isDstSnorm)
//     {
//         ivec4 scaled = ivec4(srcValue * 127.0);
//         normalized = uvec4(scaled);
//     }
//     else
//     {
//         normalized = uvec4(clamp(srcValue, 0.0, 1.0)* 255.0);
//     }
//
//     normalized &= 0xFF;
//
//     return normalized . r | normalized . g << 8 | normalized . b << 16 | normalized . a << 24;
//
// }
//
// void outputDestValue(uint destValue)
// {
//     uint offset = params . outputOffset + params . outputPitch * gl_GlobalInvocationID . y + gl_GlobalInvocationID . x;
//     destData[offset]= destValue;
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID . xy, params . size)))
//         return;
//
//           vec4 srcValue = getSourceValue();
//     uint destValue = convertToDestValue(srcValue);
//     outputDestValue(destValue);
// }
