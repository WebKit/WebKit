// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0xdb,0x4f,0x95,0x57,
    0x10,0xc5,0xf7,0xb9,0xd3,0x53,0x40,0xe4,0x5a,0xe2,0x0d,0x85,0x44,0x83,0x7a,0x30,
    0x56,0xac,0x50,0x69,0x5a,0x35,0x11,0x2d,0xde,0xd0,0xaa,0x31,0x46,0xa3,0xb5,0x17,
    0xac,0x28,0xa6,0xb5,0x15,0x1e,0x54,0xce,0x83,0x0a,0x0f,0x54,0xe1,0xc1,0x56,0x78,
    0xb0,0x15,0x1e,0xac,0x4a,0xa2,0x89,0x8a,0xaf,0xfa,0xe0,0x5f,0xa4,0x56,0x93,0x26,
    0x9d,0xd9,0xfe,0x86,0x4c,0xce,0x49,0x86,0xef,0x9b,0xb5,0x66,0xaf,0xb5,0x67,0xef,
    0xfd,0x6d,0x52,0xc9,0xe6,0x5c,0x08,0x89,0x90,0x0f,0x65,0xe1,0x65,0xf8,0xf0,0x5b,
    0x18,0x92,0x82,0x84,0xf0,0x71,0xc8,0xc6,0xe7,0xf6,0x9e,0xfd,0x3d,0x85,0x9f,0x7f,
    0x39,0x55,0xd8,0xd0,0xbe,0x4e,0xf9,0xca,0x90,0x8a,0x75,0xca,0x2d,0x90,0x2c,0x2d,
    0x4f,0x8d,0xfe,0x13,0x7d,0x67,0x15,0xaf,0x90,0x38,0x2f,0x31,0x24,0x51,0x94,0x18,
    0x95,0x98,0x90,0x98,0x92,0x98,0x91,0x98,0x95,0xa8,0x12,0x0d,0x1d,0x93,0x53,0x7d,
    0x79,0xab,0x88,0x7e,0xaa,0x17,0x42,0x77,0xc8,0x84,0x1a,0xe6,0xd2,0xcc,0xd3,0xb0,
    0x04,0x58,0x99,0xc3,0x92,0x60,0x55,0x0e,0x4b,0x81,0x7d,0xe2,0xb0,0x34,0xd8,0x62,
    0x87,0x65,0xc0,0x9a,0x1c,0x96,0x05,0x6b,0x71,0x58,0x0e,0x6c,0x95,0xc3,0xca,0xc0,
    0xd6,0x38,0xec,0x23,0xb0,0x75,0xb1,0xaf,0xd4,0xfc,0xfc,0xb4,0xc7,0x3d,0xf2,0x5c,
    0x41,0x3f,0x96,0x2f,0x77,0xb9,0xae,0xd9,0x52,0x97,0x0f,0x91,0x27,0xc8,0x8b,0xe4,
    0xa6,0x37,0x4a,0x9e,0x22,0x9f,0x20,0x4f,0x93,0x4f,0x91,0x67,0xc8,0x67,0xc8,0xb3,
    0xe4,0xb3,0xe4,0xda,0x5b,0x8d,0xa8,0x26,0xe3,0x7c,0x52,0x51,0x4f,0xdf,0xeb,0xa4,
    0x26,0xcb,0xda,0xe8,0x1c,0x1a,0x24,0xcf,0x31,0x5e,0xf9,0x7a,0xa9,0xcc,0xc3,0x2b,
    0xa7,0xfb,0x97,0xc7,0xbf,0x49,0xfe,0x96,0x33,0x4e,0xf1,0xcf,0xc9,0x2b,0x9c,0x56,
    0x25,0xf5,0xe6,0x55,0x8d,0x56,0x88,0xf3,0x2a,0x9f,0x5f,0xf7,0x4a,0x22,0x4b,0xe4,
    0x79,0x56,0xbb,0x50,0xbf,0x5a,0xd6,0xbf,0x06,0xbf,0xda,0xa8,0xfb,0x01,0x5b,0x4d,
    0x2f,0xf5,0xe8,0x6b,0x7d,0x03,0x5c,0xce,0xf1,0x8b,0xc9,0x95,0x5f,0x02,0xaf,0xfa,
    0xb5,0x32,0xcb,0x26,0xea,0xaa,0xdd,0xbe,0xd9,0xb8,0x56,0xce,0x83,0xe5,0xed,0x8c,
    0xd5,0x3e,0xbb,0xd0,0x48,0xc7,0xb3,0x92,0x8b,0xf9,0x97,0x68,0xf8,0xb0,0xb1,0xdd,
    0x6e,0x0d,0x77,0xa0,0xa3,0x78,0xa3,0xbc,0xed,0x42,0x2b,0x81,0x7f,0xc2,0x85,0xf5,
    0xb5,0x9b,0xf7,0x5d,0xac,0x83,0xe6,0x7b,0x4a,0xe6,0xdb,0xcb,0xb9,0xd1,0xf9,0x7d,
    0x83,0x7e,0xca,0xf1,0xc7,0xd0,0xb4,0xfc,0x24,0xe7,0x48,0xf5,0xbf,0x65,0x4e,0x79,
    0xc7,0xf7,0xa1,0xa1,0xfc,0x00,0x5a,0x5d,0xf8,0x0f,0x70,0x1f,0x78,0xfd,0x0b,0xec,
    0xbb,0xf1,0x43,0xf0,0x96,0x17,0x4b,0xf2,0xd1,0x92,0xf1,0x63,0x7c,0xef,0xc6,0x4f,
    0x94,0xf0,0xb7,0x38,0x4b,0xc6,0x4f,0x95,0xf0,0x77,0xd8,0x03,0xe3,0x67,0x4a,0xf8,
    0x7b,0x12,0x57,0x1c,0x3f,0x0b,0xbf,0x51,0x56,0x21,0xc9,0xfe,0x04,0xb0,0x7f,0x05,
    0xc9,0xc4,0x7e,0xd3,0xf3,0x77,0x58,0x45,0x5c,0xf3,0x5c,0x3c,0xb7,0x55,0x60,0x0b,
    0xdc,0x9e,0x9d,0xe5,0x5b,0x5a,0x08,0xff,0x95,0x28,0x34,0x70,0x5f,0xd5,0x71,0x4e,
    0xbb,0xa8,0x69,0x04,0x2f,0x4a,0x8d,0xe6,0x8b,0x18,0xd7,0xc8,0xb8,0x25,0x7c,0xc7,
    0x75,0x9c,0xdf,0x2e,0xce,0xe8,0x32,0xf0,0xfb,0x52,0xd3,0xc4,0xdd,0xb3,0x8c,0xb3,
    0xf6,0x56,0x66,0xde,0xc2,0x7c,0xde,0x4b,0xfd,0x0a,0x77,0xe7,0x69,0x3f,0xfa,0xbe,
    0x4f,0xc6,0xe9,0x5a,0xac,0xc4,0x53,0x7f,0x97,0x58,0x9f,0x55,0xe0,0xbd,0x92,0xe9,
    0x9c,0x1e,0x83,0x59,0xdd,0x3b,0xd1,0x30,0x2d,0x7d,0xbe,0x96,0x2a,0xad,0x7b,0x4a,
    0x4d,0x86,0x31,0xcd,0xae,0x87,0xd5,0xf4,0xd0,0xea,0x7a,0x58,0x03,0x6e,0x3d,0xac,
    0x05,0xb3,0x1e,0xda,0x5c,0x0f,0xca,0x15,0x24,0xda,0xf0,0x2d,0xb8,0x1e,0xd6,0xe3,
    0x9d,0x70,0x3d,0x7c,0x0a,0x6e,0x3d,0x3c,0x01,0xb3,0x3a,0xed,0xc1,0xb4,0xda,0x5c,
    0x0f,0xcf,0xa8,0x69,0x61,0x4c,0xc1,0xf5,0xb0,0x91,0x1e,0xda,0x5d,0x0f,0x9f,0x81,
    0x5b,0x0f,0x9b,0xc0,0xac,0x87,0x4e,0xd7,0x83,0x72,0x1d,0x12,0x9d,0xf8,0x76,0x70,
    0x8e,0xd4,0x77,0x33,0xde,0xcf,0xdc,0xf7,0xae,0x73,0xb4,0xda,0x4e,0x37,0xc7,0x17,
    0xd4,0xb5,0x31,0xae,0x83,0xda,0x2d,0xd4,0x6e,0xa1,0x56,0xbf,0xd1,0xe7,0x7c,0x0b,
    0x3a,0xfe,0xa8,0xc4,0x56,0x38,0x5d,0xa3,0x39,0xce,0xa2,0x72,0xc7,0xe1,0xb4,0x57,
    0xbd,0x97,0x76,0xd2,0x6b,0x37,0xbd,0x6a,0xfd,0xd7,0xe0,0x8f,0xe8,0xb5,0x07,0x0d,
    0xc5,0xdf,0x48,0xcd,0x36,0x34,0xac,0xdf,0x1e,0xf2,0x6d,0xcc,0x6b,0x2b,0x5a,0x7a,
    0x77,0xed,0xe5,0xde,0x32,0xbf,0xfd,0xf8,0xf5,0x3a,0xbf,0x03,0xe0,0xb6,0xcf,0x07,
    0xe9,0x3d,0x38,0xec,0x10,0x58,0x22,0x6a,0x66,0xe3,0x7d,0x77,0x98,0xda,0x43,0x68,
    0x1c,0x67,0x2d,0x8e,0xe0,0x7b,0x98,0x35,0x99,0x8b,0xf7,0x40,0x26,0x72,0x47,0x59,
    0xab,0x23,0x60,0x59,0xd6,0x64,0x8e,0xfb,0xd2,0xaf,0xaf,0xf6,0x33,0xc0,0x7d,0x70,
    0x82,0x71,0xda,0x87,0xde,0x9d,0xa7,0xe8,0xe3,0x24,0x7d,0xe8,0x3d,0xfa,0x1d,0xf8,
    0x98,0xd4,0xe8,0x98,0xef,0x19,0xa7,0x78,0xb9,0x38,0x29,0xf6,0x83,0xbb,0xeb,0x95,
    0xef,0xe7,0x7f,0xcb,0x8f,0x70,0xb6,0x4e,0xa7,0xd1,0xef,0x73,0xeb,0xf4,0x13,0xf8,
    0x2b,0xe6,0x7d,0x06,0xec,0x98,0x3b,0x97,0xfd,0xe0,0xf5,0x9c,0xcb,0x73,0x6e,0x9f,
    0xfa,0xe3,0x9d,0x15,0x22,0xa6,0xfd,0xe9,0xfb,0x17,0x52,0x73,0x1e,0x7f,0xed,0xdd,
    0xb8,0x73,0xce,0xe7,0x57,0x7c,0x2e,0x38,0x9f,0xdf,0xc0,0xcd,0x67,0xd0,0xf9,0x28,
    0x77,0x51,0x62,0x10,0xad,0x8b,0xf8,0x0c,0x39,0x1f,0xe3,0x06,0x9d,0xcf,0x25,0x7c,
    0xba,0x9d,0xcf,0x65,0x70,0xf3,0x19,0x76,0x3e,0x97,0xb9,0xdf,0x87,0xd1,0xba,0x82,
    0x4f,0xd1,0xf9,0x18,0x37,0xec,0x7c,0xae,0xe2,0xd3,0xea,0x7c,0xae,0x81,0x9b,0xcf,
    0x88,0xf3,0x51,0xee,0xba,0xc4,0x08,0x5a,0xd7,0xf1,0x19,0x75,0x3e,0xc6,0x8d,0x38,
    0x9f,0xdf,0xf1,0x19,0x73,0x3e,0x37,0xc0,0xcd,0x67,0xdc,0xf9,0x28,0x77,0x53,0x62,
    0x1c,0xad,0x9b,0xf8,0x4c,0x38,0x1f,0xe3,0xc6,0x9d,0xcf,0x1f,0xf8,0xdc,0x72,0x3e,
    0x7f,0x82,0x9b,0xcf,0xa4,0xf3,0x51,0xee,0xb6,0xc4,0x24,0x5a,0xb7,0xf1,0x99,0x72,
    0x3e,0xc6,0x4d,0x3a,0x9f,0xbf,0xf0,0xb9,0xe3,0x7c,0xfe,0x06,0x37,0x9f,0x69,0xe7,
    0xa3,0xdc,0x5d,0x89,0x69,0xb4,0xee,0xe2,0x33,0xe3,0x7c,0x8c,0x9b,0x76,0x3e,0xff,
    0xe0,0x73,0xcf,0xf9,0xdc,0x07,0x37,0x9f,0x87,0xce,0x47,0xb9,0x07,0x12,0x0f,0xd1,
    0x7a,0x80,0xcf,0xac,0xf3,0x31,0x4e,0x9f,0xff,0xc9,0xd7,0xb7,0x49,0xe2,0x7f,0x6b,
    0x4e,0x8c,0x9f,0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMSArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
