// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x6c,0x55,0x55,
    0x14,0x86,0xf7,0xbe,0xb7,0x3d,0x2d,0xdc,0x56,0x0b,0x5e,0x68,0x1b,0x0a,0x2d,0x14,
    0xf0,0x45,0x08,0x49,0xd5,0x98,0x18,0x89,0x8e,0x14,0x43,0xa3,0x96,0x01,0x93,0x26,
    0xd6,0xc4,0x0e,0x1c,0x94,0x48,0x34,0x1d,0x30,0xb0,0x44,0x26,0x1d,0x10,0x93,0x4e,
    0x0c,0x30,0x50,0x10,0x83,0x8f,0x12,0xa2,0x46,0x14,0x64,0x86,0x8a,0x0f,0x08,0xa6,
    0x6a,0xa3,0xa9,0xda,0xd8,0xc4,0x07,0x69,0xa2,0xa4,0x89,0xc5,0xfa,0x68,0xea,0xfa,
    0xcf,0xf9,0x36,0xac,0xdc,0x26,0xab,0xfb,0xac,0xff,0x5f,0x7b,0xfd,0x7b,0xad,0xfd,
    0xb8,0xe5,0x52,0x77,0x43,0x08,0x31,0x2c,0x0f,0x8d,0xe1,0xd6,0x18,0xf2,0xbf,0x15,
    0xa1,0x14,0xf4,0x59,0x09,0x59,0x3e,0x3e,0xb4,0x73,0xd7,0xce,0xad,0xcf,0x3e,0xf7,
    0xd4,0xd6,0xbb,0xee,0xde,0x26,0xfe,0xa6,0x50,0xce,0xe3,0xc4,0xdd,0x6c,0x5e,0x9d,
    0x8d,0xb2,0xa1,0x27,0x9f,0xde,0x23,0xbc,0xd5,0x6c,0x97,0x59,0xbf,0xd9,0xa0,0x70,
    0xb3,0x61,0xb3,0x11,0xb3,0x51,0xb3,0x31,0xb3,0x16,0xcb,0xa1,0x39,0x0d,0xca,0x6f,
    0x5f,0xad,0xb9,0x9e,0xf2,0x85,0xf0,0x70,0xa8,0x0f,0x1d,0xc5,0x52,0x42,0x37,0x63,
    0xc2,0x22,0x58,0xa3,0xc3,0x4a,0x60,0x2d,0x0e,0x2b,0x83,0xb5,0x39,0xac,0x0e,0xac,
    0xc3,0x61,0xf5,0x60,0x5d,0x0e,0xcb,0xc0,0x36,0x3a,0xac,0x01,0xec,0x36,0x87,0x35,
    0x82,0x6d,0x71,0xd8,0x32,0xb0,0x6d,0x79,0x5d,0xe5,0xeb,0xeb,0x53,0x8d,0xea,0xc9,
    0x3a,0xea,0x91,0xdf,0x8f,0x1f,0xf1,0x07,0xf1,0x53,0xfc,0x10,0x7e,0x19,0x7f,0x18,
    0xbf,0x0e,0x7f,0x04,0xbf,0x1e,0x7f,0x14,0x3f,0xc3,0x1f,0xc3,0x4f,0x3d,0x3e,0x6e,
    0xe3,0x06,0xa7,0x2f,0x7f,0x3d,0xfe,0x2d,0xa6,0x5a,0xca,0xfd,0x72,0xae,0xa7,0xef,
    0x55,0x16,0x93,0xd1,0x9b,0x98,0xef,0x6b,0x5d,0x9e,0x2b,0x73,0x7c,0x05,0x3e,0xc0,
    0x37,0xb1,0x8f,0x5a,0xe3,0x6a,0xcb,0x54,0x85,0x17,0xb7,0xca,0xc6,0x2a,0x5c,0x97,
    0xfd,0x5f,0x4d,0x5e,0xe1,0xf7,0xe1,0xb7,0x3a,0xad,0x36,0xe2,0x4b,0x79,0x1d,0x4d,
    0xd7,0xf7,0xa1,0x0d,0xcb,0xb0,0x2a,0x63,0xc5,0x99,0xf2,0xaf,0x65,0x3f,0x3a,0xc8,
    0xbf,0x96,0x7e,0x08,0xbb,0x93,0xda,0x3a,0x59,0xbb,0xe2,0xbb,0xe0,0x1a,0x1c,0xbf,
    0x09,0x5f,0xfc,0x66,0xf8,0x4a,0xae,0x59,0x0a,0xb7,0x13,0x27,0xff,0x0e,0xf2,0xa4,
    0x79,0x3d,0x9c,0x8f,0xe4,0x6f,0xaf,0xd1,0xdd,0xc1,0x9a,0x95,0xf7,0x11,0xb8,0xcc,
    0xf1,0xbd,0xf4,0x41,0x7c,0x1f,0x67,0xa0,0x89,0x3a,0xfa,0xb8,0x5f,0x65,0x17,0xbf,
    0x9b,0x3e,0x25,0xbe,0xbf,0x86,0x1f,0xa0,0xef,0x89,0x1f,0x84,0x4f,0xfe,0x50,0x4d,
    0xfc,0x5e,0xee,0x53,0xe2,0x87,0x6b,0xf8,0x7d,0xec,0x6b,0xe2,0x47,0x6a,0xf8,0x03,
    0x66,0x0f,0x38,0x7e,0xb4,0x86,0x3f,0x68,0xb6,0xdf,0xf1,0x63,0xf0,0x5b,0xac,0xdb,
    0xaa,0xf3,0x25,0x7a,0xea,0xad,0xdd,0xba,0x74,0x8c,0xfe,0xf3,0x54,0xe5,0x63,0x74,
    0xbe,0xfa,0xf5,0x2a,0xdf,0xc7,0xc8,0x2f,0xff,0x78,0xcd,0xfe,0x9c,0x40,0x4f,0xe7,
    0xec,0x4d,0x7a,0xef,0xd7,0x77,0x9a,0x7b,0xa5,0x7c,0xef,0xb3,0x3f,0x3a,0x67,0xf7,
    0x18,0x5a,0xa2,0x97,0x81,0x39,0x0b,0x86,0x28,0xf6,0x7e,0xce,0xf8,0x79,0xce,0xf1,
    0xa3,0x56,0x8b,0xce,0xe9,0x47,0x60,0xe7,0xdd,0x9a,0xf7,0x70,0x97,0x3e,0x86,0x7f,
    0xd0,0x32,0xa8,0x9f,0x9f,0x70,0x46,0x3b,0xc9,0xa7,0x98,0x0b,0xe0,0x2f,0x58,0x8c,
    0xfc,0xcf,0x98,0x77,0x81,0x79,0x3a,0x97,0x9f,0x33,0x6f,0x13,0xf3,0xd4,0xa3,0x2f,
    0xc0,0xc7,0x2d,0x46,0x67,0xf5,0x22,0x98,0x7a,0xf9,0x97,0xad,0x7c,0x82,0xf5,0xfc,
    0x63,0xf1,0xe2,0x2e,0x99,0x4d,0x50,0x8f,0xbe,0x1f,0xb7,0x79,0xea,0xc5,0x65,0x34,
    0xf5,0xf7,0x3c,0xfd,0xf9,0x12,0xbc,0xcf,0x3c,0xad,0x69,0x5d,0x2c,0xb0,0x14,0xf7,
    0xb7,0xe5,0x48,0xb9,0x34,0xce,0x5b,0x94,0xe2,0x36,0xc4,0x22,0xa6,0x9e,0x39,0x97,
    0x5c,0x0d,0x5f,0x51,0x43,0x8f,0xab,0xe1,0x6b,0xf0,0x54,0xc3,0x37,0x60,0xa9,0x86,
    0x29,0x57,0x83,0xb8,0x49,0xb3,0x29,0x74,0x27,0x5d,0x0d,0xdf,0xa2,0x1d,0x5d,0x0d,
    0xdf,0x81,0xa7,0x1a,0xd6,0xc7,0x02,0x4b,0x71,0xaa,0x21,0xe5,0x9a,0x72,0x35,0x74,
    0xc7,0x22,0x66,0x82,0x39,0x93,0xae,0x86,0xef,0xa9,0x61,0xbb,0xab,0xe1,0x07,0xf0,
    0x54,0xc3,0x8f,0x60,0xa9,0x86,0x19,0x57,0x83,0xb8,0x69,0xb3,0x19,0x74,0xa7,0x39,
    0x47,0xd2,0xfd,0x09,0xed,0xee,0x78,0xe3,0xbc,0x6b,0x8d,0x29,0x76,0xc6,0xad,0x71,
    0x23,0x71,0x53,0xcc,0x9b,0x26,0xf6,0x10,0xb1,0x87,0x88,0xd5,0x5d,0xdb,0x1c,0x8b,
    0xfb,0xa6,0xf9,0x6f,0x9b,0x1d,0x86,0xcb,0xdf,0xbf,0x58,0x9c,0x45,0x71,0xef,0xc2,
    0xa9,0x56,0xbd,0x59,0x2f,0x53,0xeb,0x00,0xb5,0x2a,0xfe,0x15,0xf0,0x77,0xa8,0xf5,
    0x28,0x39,0x84,0x5f,0xb3,0x98,0x23,0xe4,0x48,0xf5,0x1e,0xc5,0x3f,0xc2,0xba,0x0e,
    0x93,0x4b,0x77,0xf7,0x35,0xee,0x6d,0xd2,0x7b,0x1d,0xbd,0x13,0x4e,0xef,0x0d,0xf0,
    0xb4,0xcf,0x6f,0x51,0x7b,0x70,0xd8,0x38,0x98,0xe0,0xc7,0x0c,0xd1,0x7d,0x3f,0x49,
    0xec,0x38,0x39,0x9e,0xa0,0x17,0xa7,0xd0,0x3d,0xc9,0xfb,0xa5,0xb5,0xef,0xb7,0x3c,
    0x4d,0xf4,0x46,0xbd,0x3a,0x15,0x0a,0x2c,0xa3,0x27,0x8a,0xe9,0xad,0xe9,0xaf,0xea,
    0x79,0x86,0xf7,0xe0,0x3d,0xe6,0xa9,0x0e,0xbd,0x25,0x1f,0x50,0xc7,0x69,0xea,0xd0,
    0xbb,0x72,0x06,0xfc,0x45,0x8b,0xd1,0x9c,0xb3,0xcc,0x3b,0x93,0xbf,0xfb,0x59,0x8e,
    0x7d,0xe8,0xde,0xba,0xb3,0xf9,0x9b,0x5d,0xfc,0xde,0x9e,0x83,0x4b,0x7d,0xfa,0x99,
    0xfc,0x3b,0x5c,0x9f,0x7e,0x01,0xff,0x94,0x75,0xff,0x0a,0xd6,0xeb,0xce,0xe5,0x6f,
    0xe0,0x9d,0x9c,0xcb,0x59,0xb7,0x4f,0xe2,0xae,0x98,0xcd,0x52,0xdf,0x95,0xfc,0x8c,
    0x97,0xf3,0xdf,0xa1,0x73,0xd4,0x9e,0xb8,0x59,0xa7,0xf3,0x3b,0x3a,0xbb,0x9d,0xce,
    0x1f,0xe0,0x49,0x67,0xce,0xe9,0x88,0xbb,0x6a,0x36,0x47,0xae,0xab,0xe8,0xf4,0x3b,
    0x9d,0xc4,0xcd,0x39,0x9d,0x3f,0xd1,0x19,0x70,0x3a,0xf3,0xe0,0x49,0x67,0xc1,0xe9,
    0xcc,0xe7,0xe7,0x31,0xe4,0x98,0x72,0x5d,0x43,0x67,0xd0,0xe9,0x24,0x6e,0xc1,0xe9,
    0xfc,0x8b,0x4e,0x8f,0xd3,0xf9,0x0f,0x3c,0xe9,0x2c,0x39,0x1d,0x71,0x8b,0x66,0x4b,
    0xe4,0x5a,0x44,0x67,0xc8,0xe9,0x24,0x6e,0xc9,0xe9,0x94,0x62,0xa1,0xb3,0xd7,0xe9,
    0x94,0x63,0x81,0x27,0x9d,0x2c,0xde,0xd0,0x11,0x57,0x67,0x26,0x4c,0xb9,0xf4,0x2d,
    0x9d,0x61,0xa7,0x93,0x38,0x8d,0x49,0x67,0x19,0x3a,0xfb,0x9c,0xce,0xf2,0x58,0xe0,
    0x49,0xa7,0xd9,0xe9,0x88,0xab,0x98,0x35,0x93,0xab,0x82,0xce,0x88,0xd3,0x49,0x5c,
    0xb3,0xd3,0x69,0x41,0xe7,0x80,0xd3,0x59,0x11,0x0b,0x3c,0xe9,0x54,0x9d,0x8e,0xb8,
    0x95,0x66,0x55,0x72,0xad,0x44,0x67,0xd4,0xe9,0x24,0xae,0xea,0x74,0x5a,0xd1,0x39,
    0xe8,0x74,0xda,0x62,0x81,0x27,0x9d,0x35,0x4e,0x47,0x5c,0xbb,0xd9,0x1a,0x72,0xb5,
    0xa3,0x33,0xe6,0x74,0x12,0xa7,0x71,0xd1,0x6e,0xdf,0xbd,0x66,0xff,0x03,0xae,0xea,
    0x9c,0x7a,0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMSArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
