// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x95,0x5f,0x68,0xd6,0x65,
    0x14,0xc7,0x9f,0xdf,0xfb,0x77,0xeb,0x5d,0xeb,0x15,0xdd,0x56,0xf6,0xee,0x5f,0xca,
    0x10,0x26,0xba,0x0b,0x8b,0x46,0x14,0x05,0x42,0x5d,0x08,0xfe,0x09,0xda,0x2e,0x76,
    0xf3,0x42,0x5e,0x34,0x28,0x61,0x89,0x37,0xbb,0x30,0x68,0x81,0x37,0xbb,0xd8,0xcd,
    0x6e,0xd6,0xb2,0x59,0x64,0xf6,0x4f,0xbb,0x8b,0x52,0x29,0x49,0x1d,0xc5,0xac,0x51,
    0x2c,0x1d,0x0d,0xfa,0xc7,0x40,0x65,0xa0,0x32,0x71,0x2a,0x6a,0xe7,0x3c,0xbf,0xcf,
    0xd1,0xc3,0xab,0x70,0x7c,0x7e,0xe7,0xfb,0x3d,0xe7,0x7c,0x9f,0xf3,0x3c,0xe7,0x79,
    0x97,0xcd,0xac,0x2b,0x86,0x90,0x84,0x47,0x42,0x5d,0xe8,0x4c,0x42,0xfc,0xb7,0x2a,
    0x64,0x82,0x7e,0x96,0x42,0x21,0xae,0x2f,0x6f,0x7b,0x75,0xdb,0xa6,0xb7,0xf7,0xbe,
    0xbe,0x69,0xcb,0xd3,0x3d,0xca,0x37,0x86,0x6c,0x8c,0x53,0xee,0x31,0xf1,0x72,0xb2,
    0xaa,0xbd,0x59,0x7d,0xe3,0x2d,0xc5,0x9b,0xc5,0xfa,0xc5,0xaa,0x62,0x83,0x62,0x43,
    0x62,0xc3,0x62,0x23,0x62,0xa3,0x62,0xe3,0x62,0x65,0xa9,0xa1,0x39,0x45,0xad,0x2f,
    0x5f,0xcd,0x51,0x4f,0xeb,0x85,0xf0,0x4a,0xc8,0x87,0xd6,0x74,0x2b,0x61,0x1d,0xab,
    0x61,0x09,0x58,0x9d,0xc3,0x32,0x60,0x65,0x87,0x65,0xc1,0x1e,0x77,0x58,0x0e,0xac,
    0xe2,0xb0,0x3c,0x58,0x87,0xc3,0x0a,0x60,0xeb,0x1d,0x56,0x04,0xdb,0xe0,0xb0,0x3a,
    0xb0,0x8d,0x0e,0xab,0x07,0xeb,0x89,0x7d,0x65,0xef,0xef,0x4f,0x7b,0xd4,0x33,0x69,
    0xa3,0x1f,0xf5,0xab,0xf8,0x09,0xfe,0x20,0xbe,0xc5,0x0f,0xe1,0x67,0xf1,0x87,0xf1,
    0x73,0xf8,0x23,0xf8,0x79,0xfc,0x51,0xfc,0x02,0xfe,0x38,0xbe,0x9d,0xf1,0xa4,0xac,
    0x4f,0x39,0x7d,0xf5,0x3b,0x9d,0x3f,0x55,0xc3,0x4f,0xc1,0xeb,0x7e,0x56,0xcb,0xff,
    0x99,0xe8,0x67,0xe3,0x7e,0x32,0xf1,0x9e,0xb3,0x51,0x4b,0xcf,0xae,0x45,0xe2,0x8b,
    0x68,0x2b,0xd7,0x24,0x7e,0x09,0x2e,0xc0,0x37,0x70,0xc7,0x39,0xfc,0x35,0xc4,0xe7,
    0x62,0x5c,0x4e,0x72,0xd2,0xb3,0x50,0xfc,0x39,0xfc,0x66,0x30,0xad,0x57,0xa1,0x5e,
    0x12,0xfb,0x6a,0xb8,0x7f,0x2f,0x66,0x15,0xac,0xc0,0x5a,0x72,0xa6,0xf5,0xdb,0xb8,
    0x9f,0x56,0xea,0xab,0xdf,0x0e,0xd6,0x5d,0x53,0x5f,0xe3,0x3b,0xe1,0x8a,0x8e,0xef,
    0xa2,0x1f,0xf3,0xbb,0xe1,0x35,0x7e,0x23,0xf1,0xa5,0xd8,0x43,0x26,0x6c,0x26,0xae,
    0xc4,0x3c,0xf8,0xbc,0x5e,0xe6,0xc7,0xfc,0xad,0x35,0xfb,0xd8,0x4e,0x1f,0x5a,0x77,
    0x07,0x5c,0x05,0xbf,0x8f,0x99,0x68,0xa0,0x8f,0x3e,0xde,0x5b,0xd6,0xe5,0x0f,0x70,
    0x0f,0xc6,0x57,0x6b,0xf8,0xdd,0x9c,0xbb,0xf1,0x83,0xf0,0xe6,0x0f,0xd5,0xc4,0xef,
    0xe3,0x7d,0x19,0x3f,0x5c,0xc3,0xef,0xe7,0xec,0x8c,0x1f,0xa9,0xe1,0x0f,0x88,0xbd,
    0xe8,0xf8,0xd1,0x1a,0x7e,0x4c,0xec,0x1d,0xc7,0x8f,0xc3,0x3f,0x21,0x9d,0x4f,0x70,
    0xa6,0xfc,0x3c,0x3d,0xb4,0xea,0x99,0xbc,0xcf,0xf7,0x04,0x35,0xd4,0x9f,0x04,0x5b,
    0x2b,0x27,0x71,0x90,0xb8,0x0f,0xc1,0x0e,0x12,0xa7,0xfe,0x14,0xd8,0x93,0xa2,0xf8,
    0x11,0x35,0x6c,0x5f,0x47,0xd8,0x87,0xce,0xeb,0x97,0xdc,0x89,0xfa,0xcf,0xc8,0xab,
    0xcb,0x70,0x86,0x01,0x6c,0x45,0x10,0x7d,0x8b,0xcf,0x33,0xdb,0xdf,0x30,0xbf,0x3b,
    0x05,0xd5,0xbc,0x6f,0xc1,0x82,0xc3,0xbe,0x03,0xd3,0x5e,0x76,0x08,0xa6,0xb3,0x74,
    0x9c,0x58,0xe5,0x5e,0x12,0x4c,0xe7,0xf0,0x04,0xb3,0xda,0x41,0x7d,0x8d,0x3b,0x09,
    0xfe,0x1e,0x79,0xdf,0x93,0x7b,0xd2,0xe5,0xfd,0x40,0x5e,0x97,0xcb,0x3b,0x05,0xfe,
    0x2e,0x79,0x3f,0x92,0x7b,0x8a,0x3c,0x9d,0xe3,0xd3,0xe4,0x75,0x93,0xa7,0xe7,0x7f,
    0x06,0xfc,0x73,0x89,0xd1,0xd9,0x3e,0x0b,0xa6,0xb3,0x7d,0x43,0x4e,0x60,0x86,0xde,
    0x6e,0x49,0xbc,0x72,0xd3,0x62,0x33,0x9c,0xcb,0xb4,0xeb,0xf9,0x27,0x34,0x43,0x9c,
    0x9b,0x5c,0xc4,0x7e,0x06,0xdf,0x25,0x9e,0xee,0x69,0x6d,0x92,0x62,0x16,0x77,0x53,
    0x6a,0x58,0x2d,0x5d,0xaf,0x4b,0x94,0xc6,0xb5,0x25,0x69,0x4c,0x9e,0x9c,0x69,0xd7,
    0xc3,0x39,0x7a,0xe8,0x75,0x3d,0xfc,0x02,0x6e,0x3d,0xfc,0x0a,0x66,0x3d,0xcc,0xb9,
    0x1e,0x94,0x9b,0x15,0x9b,0x43,0x77,0xd6,0xf5,0xf0,0x1b,0xda,0x89,0xeb,0xe1,0x77,
    0x70,0xeb,0xa1,0x35,0x49,0x31,0x8b,0xd3,0x1e,0xac,0xd6,0x9c,0xeb,0xa1,0x3d,0x49,
    0x63,0x66,0xc8,0x99,0x75,0x3d,0xfc,0x41,0x0f,0x5b,0x5d,0x0f,0xe7,0xc1,0xad,0x87,
    0x0b,0x60,0xd6,0xc3,0x82,0xeb,0x41,0xb9,0x79,0xb1,0x05,0x74,0xe7,0xe3,0x6f,0x4b,
    0xaa,0xfb,0x27,0xda,0xed,0xc9,0x83,0xb7,0xa4,0x7b,0xb4,0xd8,0x05,0xb7,0xc7,0x0e,
    0xe2,0xe6,0xc8,0x9b,0x67,0x3f,0xfa,0x56,0x3e,0xe0,0xad,0xa9,0xaf,0xef,0xea,0x10,
    0x6f,0xea,0x35,0xd9,0x9f,0xbe,0xa7,0x8f,0x89,0x39,0xe4,0xe6,0xf2,0x13,0xfa,0x1a,
    0x70,0x73,0x79,0x18,0xdc,0xe6,0xf9,0x53,0x74,0x0f,0x93,0xa7,0xbf,0x83,0x9f,0x91,
    0x77,0x84,0xbc,0x4a,0x3c,0x87,0x14,0xdf,0xc3,0x3d,0x7c,0x01,0x66,0x77,0xf5,0x15,
    0xb5,0xfc,0xbb,0x3b,0x0a,0x96,0xbe,0xbb,0x42,0x7c,0xdb,0xc7,0x88,0x3d,0x4a,0x8d,
    0x3e,0x89,0xd5,0xdf,0xd8,0xaf,0xe9,0xe1,0x98,0xdb,0xc7,0x5f,0xec,0x63,0xbb,0xdb,
    0xc7,0xdf,0xe0,0x67,0x25,0x46,0xfd,0x7f,0xc0,0x3a,0xdc,0x5d,0xfd,0x0b,0xde,0xc5,
    0x5d,0x2d,0xba,0xbb,0x52,0xee,0x3f,0xb1,0x45,0xce,0x5f,0xbf,0x5f,0x90,0x98,0x7e,
    0xf6,0xa0,0x77,0x63,0xdc,0xa2,0xd3,0xb9,0x88,0xce,0x80,0xd3,0xb9,0x04,0x6e,0x3a,
    0x4b,0x4e,0x47,0xb9,0xcb,0x62,0x4b,0xd4,0xba,0x8c,0x4e,0xd5,0xe9,0x18,0xb7,0xe4,
    0x74,0xae,0xa0,0xb3,0xdb,0xe9,0x5c,0x05,0x37,0x9d,0x65,0xa7,0xa3,0xdc,0x35,0xb1,
    0x65,0x6a,0x5d,0x43,0x67,0xd0,0xe9,0x18,0xb7,0xec,0x74,0x6e,0xa0,0xd3,0xeb,0x74,
    0x56,0xc0,0x4d,0xe7,0xb6,0xd3,0x59,0x89,0xb5,0x42,0xc4,0xb4,0xd6,0x4d,0x74,0x86,
    0x9c,0x8e,0x71,0xb7,0x9d,0xce,0x5d,0x74,0xf6,0x39,0x9d,0x7b,0xe0,0xa6,0x93,0x49,
    0x1e,0xe8,0xdc,0xe3,0x8f,0x8e,0x62,0x5a,0x4b,0xbf,0x55,0x67,0xd8,0xe9,0x18,0xa7,
    0xab,0xe9,0xe4,0x93,0x54,0x67,0xbf,0xd3,0x29,0x24,0x29,0x6e,0x3a,0xf5,0x4e,0x47,
    0xb9,0xa2,0x58,0x3d,0xb5,0x8a,0xe8,0x8c,0x38,0x1d,0xe3,0xea,0x9d,0x4e,0x03,0x3a,
    0x07,0x9c,0xce,0xa3,0x49,0x8a,0x9b,0x4e,0xd9,0xe9,0x28,0xd7,0x28,0x56,0xa6,0x56,
    0x23,0x3a,0xa3,0x4e,0xc7,0xb8,0xb2,0xd3,0x59,0x8d,0xce,0x98,0xd3,0x59,0x93,0xa4,
    0xb8,0xe9,0xb4,0x38,0x1d,0xe5,0x9a,0xc4,0x5a,0xa8,0xd5,0x84,0xce,0xb8,0xd3,0x31,
    0x4e,0xd7,0x3b,0x72,0xb0,0xcf,0x8a,0xfd,0x0f,0x66,0x63,0x86,0x6f,0x9c,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = texture(usampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     broadcastColor(colorValue);
//
// }
