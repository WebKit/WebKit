// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x57,0x45,
    0x10,0xc7,0xdf,0x25,0x21,0xc4,0x24,0x94,0x50,0x12,0xba,0xc1,0x80,0x04,0x12,0x42,
    0x84,0x50,0x44,0x44,0x1c,0x44,0x2c,0xd8,0x45,0x81,0x11,0x1b,0x68,0x6c,0x68,0x14,
    0x6c,0x08,0x2a,0x2a,0x4d,0x2c,0x28,0x2a,0x45,0xec,0x15,0xc5,0x82,0xa2,0x28,0x16,
    0x44,0x41,0x50,0x64,0x86,0x19,0x2c,0x28,0xf6,0xae,0x30,0x03,0x62,0x05,0x15,0xbc,
    0x7d,0xf7,0x59,0xb3,0x9c,0xf9,0xcb,0xcc,0xbc,0xf9,0xbd,0xfd,0xee,0xee,0xf7,0xf6,
    0x76,0xf7,0x4a,0x5e,0x66,0x46,0x49,0xfd,0x24,0x71,0x49,0x6e,0x92,0x93,0xf4,0x71,
    0x49,0xfa,0x57,0x90,0x64,0x24,0xf2,0x9a,0x97,0x64,0xa7,0xbf,0x83,0x87,0x1c,0x37,
    0xa4,0x62,0xec,0xb8,0xd1,0x15,0x55,0x3d,0x2b,0x45,0xdf,0x30,0xc9,0x4c,0xed,0x44,
    0xd7,0xc8,0xdb,0xd4,0xf3,0xbf,0x59,0xfe,0x19,0x73,0xda,0xd9,0xe7,0x0b,0xfe,0xab,
    0x7f,0x1a,0x7b,0x3c,0x2b,0xe5,0x4a,0x92,0x01,0xd8,0xca,0x73,0x88,0xb7,0xee,0x18,
    0x86,0x49,0x4a,0xf8,0x55,0xcc,0x81,0x65,0x19,0x2c,0x03,0x2c,0xc7,0x60,0x99,0x60,
    0xf9,0x06,0xcb,0x02,0x6b,0x6c,0xb0,0x7a,0x60,0xcd,0x0c,0x96,0x0d,0xd6,0xc2,0x60,
    0xf5,0xc1,0xda,0x18,0x2c,0x07,0xac,0xd8,0x60,0x7b,0x80,0x75,0x30,0x58,0x2e,0x58,
    0xa9,0xc1,0xf2,0xc0,0xca,0x0d,0x96,0x0f,0x56,0x69,0xb0,0x06,0x60,0x55,0x06,0x6b,
    0x08,0xd6,0x47,0xf2,0xee,0x67,0xaa,0x39,0x18,0xec,0x67,0x38,0x8a,0xf8,0x35,0x3f,
    0xa3,0xa3,0x3c,0x8a,0xfd,0x68,0xf2,0x23,0xf6,0x67,0xfa,0xdf,0xbd,0xfe,0xd5,0x05,
    0xb9,0x3d,0x79,0x16,0x79,0x4b,0xc4,0xb7,0xb5,0x0e,0xbe,0xad,0x86,0x6f,0x5b,0xc4,
    0xb7,0x0d,0x3e,0x95,0x7f,0x65,0xee,0x6d,0x90,0x7b,0xbb,0x20,0xb7,0xf4,0x4f,0x53,
    0x3f,0x8b,0x8c,0xd4,0x3e,0x33,0xe5,0x93,0xf7,0xe6,0xde,0x26,0x9b,0x1c,0x27,0xe9,
    0x6f,0x56,0x5a,0x8b,0xfa,0xc4,0xd5,0xde,0xc7,0x94,0xc3,0xbb,0xe2,0x85,0xde,0xbb,
    0x00,0x9f,0xf6,0xde,0xbe,0x09,0x3d,0x56,0x1f,0xff,0x42,0xde,0x0b,0xd0,0x17,0xf1,
    0x5e,0x08,0x5f,0x6b,0xc3,0x57,0x88,0x4d,0x31,0xf1,0x08,0xd6,0xce,0x5b,0x6b,0x9f,
    0xfc,0xdf,0x47,0xe2,0xd8,0x9b,0x7e,0x11,0xae,0xfd,0x90,0x3b,0x81,0xc9,0xbc,0x4b,
    0x99,0x83,0xd4,0xa2,0x0c,0xb9,0xb3,0xf1,0xef,0x82,0x6d,0xb6,0xd1,0x77,0xa3,0xa7,
    0x55,0xae,0x22,0xee,0x32,0xf2,0xd8,0x8f,0x5a,0xaa,0xdc,0x9f,0x3e,0x56,0xfb,0x41,
    0x91,0x7c,0x14,0xf6,0xcd,0x3c,0xcb,0xb1,0xc6,0x6f,0x28,0x35,0x17,0x59,0x72,0x37,
    0x82,0xfa,0xb4,0xf5,0xa8,0xf6,0x60,0x3b,0x7a,0x6d,0x14,0xf1,0x9e,0x41,0x2c,0xa3,
    0x99,0xaf,0xc8,0x67,0x9a,0xf8,0x64,0xbc,0x6a,0x53,0xe7,0x73,0xd0,0xd9,0xf9,0x8d,
    0x61,0x4d,0x68,0x1c,0x35,0xd8,0xab,0xfe,0x52,0xd6,0x9b,0xca,0x13,0x4d,0x9c,0x22,
    0x5f,0xe9,0x9f,0x5d,0x99,0xb5,0xf2,0x24,0xd6,0x93,0xf2,0x4d,0x33,0xfe,0x22,0xcf,
    0x8a,0xf2,0xf7,0x20,0x35,0x91,0xf8,0x1e,0xa6,0x1f,0x4a,0x0d,0xff,0x63,0xc2,0xef,
    0xff,0x54,0x5e,0x18,0xd5,0xef,0x65,0xd6,0xb9,0xca,0xeb,0xa9,0xa1,0xf2,0x6f,0x8c,
    0xec,0x3f,0x65,0xbf,0x2a,0xf2,0xf2,0x57,0xf4,0x69,0x06,0x79,0xde,0x62,0xf2,0x2c,
    0x6b,0x70,0x0b,0x71,0xfd,0x84,0xcd,0x56,0xf2,0x2c,0xf2,0x36,0x30,0xe1,0xf9,0x19,
    0xbf,0x4c,0xec,0x7f,0x61,0xcc,0x9f,0xb1,0xff,0x85,0xfd,0xd9,0xa1,0xff,0x8d,0x77,
    0x5b,0x87,0x46,0xac,0x5b,0x8d,0xbb,0x97,0x0b,0x7b,0x78,0xb9,0x97,0x84,0x47,0xd6,
    0xb5,0x60,0x1b,0x99,0x53,0x2f,0xdf,0x95,0x19,0xf4,0x52,0xc2,0xd8,0x7f,0x78,0xa4,
    0x1e,0x63,0xa6,0x6b,0xd7,0x85,0x7c,0xaa,0x9c,0x13,0xc9,0x4d,0x8d,0x2c,0xeb,0x72,
    0xaf,0x48,0x5f,0x12,0xe9,0xf7,0x8e,0xe4,0x4e,0x91,0x7d,0x97,0x48,0x5f,0x1e,0xe9,
    0x7b,0x20,0x1f,0xe8,0xa3,0x94,0x1c,0xec,0x22,0x2f,0xd2,0x73,0xfb,0x33,0x6f,0x49,
    0xcc,0x2e,0x6c,0x64,0x3d,0x3a,0x17,0xd6,0x70,0xb5,0xb1,0xc9,0x70,0x01,0x7f,0xd2,
    0xdb,0xc8,0x1a,0xca,0xe4,0xa0,0x13,0xfc,0x77,0x9f,0x89,0x7a,0x9c,0xa9,0x3b,0xbc,
    0xbd,0xe8,0xb2,0xfc,0x23,0x98,0xe4,0x47,0xde,0xff,0xf6,0xc6,0x69,0xae,0x9c,0xac,
    0xd7,0xcc,0x34,0x4f,0x35,0x49,0x78,0xcf,0xe1,0x7d,0xbb,0xd7,0xef,0x81,0x8f,0xfc,
    0xfe,0xe6,0xb9,0xf2,0xfc,0x6f,0x3e,0xdc,0xa2,0x6f,0x80,0x5e,0x7e,0x35,0xb6,0x86,
    0x2e,0xe4,0x59,0xe3,0x6f,0x4c,0xfc,0x8d,0x8c,0x4d,0x81,0x0b,0xf8,0xd3,0xc4,0xdf,
    0xc4,0x05,0x3f,0xc1,0x25,0x66,0x91,0x73,0xa5,0x1f,0xe0,0xcf,0x75,0xb5,0x39,0x6b,
    0xe6,0xfe,0x9b,0xb3,0xe6,0x2e,0xe0,0x3a,0x66,0x61,0x1d,0x63,0x16,0xb9,0x80,0x5f,
    0xe7,0x6d,0x44,0x6e,0xe1,0x82,0x5f,0x91,0xb1,0x69,0x49,0xec,0x57,0x63,0xd3,0xca,
    0x05,0xbb,0x96,0xe4,0x49,0xfa,0xa5,0x95,0xb1,0x6f,0xed,0x42,0x0f,0xe9,0xb8,0x6d,
    0x18,0x77,0xa1,0x89,0xad,0xad,0x0b,0xb8,0xd6,0xaa,0x9d,0x0b,0x7e,0x6d,0xa9,0x55,
    0xb1,0xa9,0x95,0xe8,0xf6,0xf4,0x4f,0x31,0xf3,0x96,0x77,0xc9,0xb3,0xe6,0xa1,0xd8,
    0x8c,0xdd,0x81,0xb1,0x25,0x2e,0xe9,0x53,0x91,0xf7,0xf5,0x63,0xc8,0x7a,0xee,0xe8,
    0xc2,0xfd,0xa3,0x04,0xbd,0xf4,0x75,0x47,0x7c,0x45,0x5f,0xea,0x42,0xaf,0x8b,0x4e,
    0x7a,0xb8,0xd4,0xf8,0x76,0x76,0xe1,0xec,0xec,0x84,0x5e,0x7a,0xbe,0xb3,0x19,0xb7,
    0xcc,0x8c,0x2b,0xfd,0x5e,0x66,0x78,0xbb,0xba,0xb0,0x46,0x44,0x27,0xbd,0xdf,0x35,
    0xe5,0xcd,0x4e,0xfd,0x2a,0x9c,0xec,0x2b,0x61,0x8d,0x94,0x1b,0xbe,0x6e,0x2e,0xac,
    0xd3,0x95,0xe4,0xbc,0xd2,0x05,0xac,0xc2,0xf4,0x66,0x25,0x79,0xc8,0x27,0x0f,0xf9,
    0xc6,0x7f,0x9f,0xa8,0x66,0xdd,0x5d,0xc0,0x16,0x9a,0x7e,0xee,0xee,0x76,0xef,0xe7,
    0x3c,0xe3,0x5f,0xc5,0xf8,0x62,0x2b,0xeb,0xb3,0x8a,0x5c,0xc8,0xde,0xd2,0xd3,0x85,
    0xbb,0x47,0x0f,0xd6,0x4c,0x1f,0xff,0xf4,0x62,0x9c,0x3c,0xf6,0x1d,0x39,0xdb,0x7a,
    0x4b,0x9c,0xec,0xbb,0xfa,0x9e,0xcb,0x7e,0x94,0x6f,0x7a,0xa1,0x03,0x36,0xda,0x2f,
    0x65,0x9c,0xcf,0x9d,0x8d,0x4d,0x39,0xb8,0xf6,0x69,0x57,0xfc,0xca,0x8d,0x4d,0x05,
    0xfc,0xca,0x53,0x09,0x4f,0x37,0x63,0xb3,0x0f,0xb8,0xf2,0x74,0xc7,0x4f,0x70,0xcd,
    0x55,0x0f,0xf8,0xbb,0x1b,0xae,0x9e,0x70,0x55,0x19,0xae,0x5e,0xe0,0xea,0xd7,0x1b,
    0x5f,0xc1,0x77,0xfa,0x39,0xf6,0x4e,0xef,0x8e,0xb5,0xb9,0x69,0x54,0x47,0x6e,0x1a,
    0x98,0xf7,0x86,0xe4,0xa6,0xb1,0xd9,0x1b,0xfb,0x72,0xf6,0xe9,0x98,0xfb,0xe1,0x33,
    0x1d,0xce,0xfd,0xc1,0xfa,0x99,0x39,0x1d,0x00,0xde,0x9f,0x5a,0xf7,0xfd,0x17,0x0b,
    0x1c,0x03,0xe0,0x95,0x18,0x07,0x98,0x18,0x0b,0xb8,0x9f,0xcb,0x5f,0x13,0x13,0x57,
    0x53,0xe2,0x6a,0x6e,0xe2,0x1a,0x98,0xec,0xbe,0x87,0x1f,0x1a,0xc9,0x27,0x45,0xf2,
    0xc8,0x48,0x3e,0x25,0x92,0x4f,0x8f,0xe4,0x71,0x91,0x3c,0x3e,0x92,0xa7,0x46,0xf2,
    0x4d,0x91,0x3c,0x2f,0x92,0xe7,0x1b,0x59,0xee,0x13,0x8f,0x44,0xfa,0x97,0x92,0xdd,
    0xcf,0xa8,0x95,0x91,0xbc,0x3a,0xaa,0xc3,0x41,0xe4,0x45,0xfb,0xe3,0x60,0xfa,0x63,
    0x90,0xb1,0x19,0x0c,0x3e,0x85,0xba,0x1c,0x82,0xdf,0x60,0xea,0x32,0x10,0x4c,0xed,
    0x0f,0x8b,0x38,0x0f,0xaf,0x83,0x73,0x08,0xb8,0xd6,0xff,0x08,0xfc,0x86,0xc0,0x79,
    0x28,0x98,0xda,0x1f,0x49,0x6d,0x94,0xf3,0x68,0x38,0x8f,0x32,0x36,0xc7,0x80,0xeb,
    0x5e,0x7c,0x1c,0x7e,0xc7,0x18,0x9b,0xe3,0xe1,0xd1,0xb3,0xe9,0x04,0xb0,0xa1,0x69,
    0x2e,0x03,0x76,0x22,0xbe,0xa2,0x93,0x3d,0x7c,0x78,0x52,0xbb,0x87,0x8b,0x6e,0x98,
    0x7f,0x86,0xd3,0x4b,0xc3,0xe8,0xbf,0x11,0xc8,0xc3,0xcd,0x58,0x27,0xd3,0x5f,0x32,
    0x9f,0x91,0xc8,0xaa,0x3b,0x95,0x38,0x44,0x77,0x0a,0xb2,0xee,0xa5,0xa7,0xb1,0xff,
    0x8c,0xa4,0xbf,0xc4,0xe6,0x24,0x70,0xf5,0x3f,0x8b,0xde,0xd4,0x9a,0x9c,0x0d,0xd6,
    0x2f,0xcd,0x51,0x76,0x7a,0x17,0x3e,0x97,0xfb,0x72,0x35,0x7a,0xf5,0x3d,0x0f,0x9d,
    0xf0,0x9e,0x8e,0xac,0x79,0x3d,0x9f,0xbc,0x8e,0x31,0xf6,0x17,0x80,0x3f,0x4e,0x7e,
    0x2e,0x04,0xab,0x21,0x3f,0x63,0x4d,0x7e,0x44,0x77,0x91,0x7f,0xe6,0x92,0x8f,0x8b,
    0x0c,0xcf,0xc5,0xcc,0xf9,0x31,0x78,0x2e,0x01,0x93,0xdc,0x2f,0xf0,0x16,0x72,0x4f,
    0xbc,0x0c,0xbc,0x8a,0xbb,0xf9,0x04,0x7c,0x2f,0x47,0x27,0x31,0x8f,0x43,0x56,0xde,
    0x2b,0x22,0xde,0x09,0x60,0x96,0xf7,0x2a,0xf0,0x89,0xdc,0xe9,0x95,0xf7,0x6a,0x74,
    0xc2,0x3b,0x1e,0x59,0x73,0x71,0x0d,0xb9,0x98,0x64,0xc6,0xba,0x16,0x5c,0x73,0x71,
    0x1d,0x98,0xe6,0x62,0x8a,0xc9,0x85,0xe8,0x26,0xfb,0x67,0x06,0xb9,0x98,0x6c,0x78,
    0xa6,0x13,0xb3,0xee,0x75,0xd7,0xf3,0xbf,0xc4,0x74,0x62,0x99,0x0a,0x26,0xe7,0xda,
    0x14,0xfc,0x67,0x18,0xff,0x1b,0xa2,0x39,0xdf,0x08,0x36,0x94,0x38,0x66,0x9a,0x38,
    0x44,0x77,0xb3,0x7f,0x6e,0x81,0xe7,0x66,0xc6,0xb8,0x29,0xa9,0xbd,0x0b,0xce,0x44,
    0x77,0x8b,0x19,0xe3,0x56,0xf6,0x2f,0x95,0x6f,0x63,0xcc,0x6b,0x88,0xf9,0x76,0xfe,
    0xdf,0xb9,0xcd,0xcc,0xe3,0x0e,0xfc,0x6e,0x37,0xe7,0xc9,0x6c,0xf0,0x59,0x66,0xdc,
    0xd9,0xd1,0xb8,0x33,0xcd,0x38,0x73,0xd8,0x07,0x35,0x0f,0x73,0xa2,0x3c,0x4c,0x41,
    0x1e,0x8b,0x3c,0xd7,0xf8,0xde,0xc9,0xba,0x10,0xdf,0x79,0xc8,0x5a,0xcf,0xbb,0xea,
    0x38,0x47,0xef,0x06,0x17,0xfb,0xf9,0xc8,0xba,0x0e,0xef,0xe1,0xac,0x9b,0xc7,0xbe,
    0xab,0xf1,0xdc,0x63,0x38,0xef,0xad,0x83,0xf3,0x3e,0x70,0xcd,0xc9,0xfd,0x60,0xfd,
    0x4d,0xff,0xde,0x6f,0xec,0x1f,0x20,0xcf,0x5a,0xcb,0x87,0xc0,0x1e,0xa4,0x96,0x0b,
    0x4c,0x2d,0x45,0xf7,0x68,0xda,0x7f,0x61,0xee,0x8f,0xc2,0xf9,0x08,0xff,0x4b,0x4a,
    0x5e,0x16,0xa0,0x7b,0xdc,0x8c,0xf1,0x04,0x63,0xac,0xf0,0x63,0x94,0xa6,0x7b,0x64,
    0xb8,0x43,0x3d,0x41,0x3d,0x05,0x7b,0xca,0xe0,0xca,0xf9,0x54,0xc4,0xb9,0x00,0xce,
    0xd2,0x74,0x0f,0x0d,0xe7,0x8f,0xae,0xa5,0x45,0x60,0xba,0x96,0x16,0x45,0x75,0x1a,
    0x6b,0xe2,0x79,0x26,0xda,0xcf,0x9f,0xad,0x63,0x3f,0x5f,0x0c,0xae,0xfb,0xf9,0x73,
    0xf8,0x2d,0x36,0x36,0xcf,0x47,0xeb,0x60,0x09,0x98,0xdd,0xcf,0x5f,0xc0,0x77,0x09,
    0xf9,0x5c,0x6a,0xf2,0x29,0xba,0x17,0xfd,0xb3,0x8c,0x18,0x5f,0x34,0x31,0xbd,0x42,
    0x4c,0x2f,0x9b,0xf1,0x5e,0x05,0x97,0x39,0xbe,0x84,0x2c,0x73,0x5c,0x8a,0xff,0x32,
    0x63,0xfb,0x1a,0xf7,0x01,0x95,0x97,0x73,0xde,0xbf,0x4e,0x5f,0xbc,0x8e,0xcd,0x72,
    0x63,0xf3,0x06,0x77,0x84,0x55,0xd8,0xac,0xc0,0xee,0x0d,0x33,0xe6,0x8a,0x68,0xcc,
    0xa5,0xc6,0xff,0x4d,0xfc,0x6b,0xb8,0xb3,0xaf,0x02,0x13,0xdf,0x95,0xc8,0x6a,0xfb,
    0x16,0xf7,0x05,0xb5,0x7d,0x1b,0x4c,0xef,0xfb,0x6b,0xb8,0x3f,0x4c,0xe3,0x4e,0xf5,
    0x0e,0x36,0x6b,0xe0,0x5b,0x0d,0xa6,0xf6,0x6b,0xb9,0x5f,0xc8,0x79,0xb8,0x36,0xba,
    0x8f,0xb5,0x24,0xe7,0x45,0xdc,0xc7,0x0a,0xf9,0x5e,0x2a,0xf1,0xb7,0x32,0x1c,0xeb,
    0xc0,0x85,0x63,0x5d,0x74,0xef,0x6c,0x07,0x47,0x6b,0x73,0xa7,0x6b,0x63,0xf8,0xda,
    0xc2,0xb7,0xa7,0xb9,0x0f,0x7d,0x18,0xdd,0x8f,0xbe,0x48,0x6a,0xff,0x47,0x97,0x1a,
    0xbf,0x4b,0x8d,0xd7,0x9b,0xbc,0xbc,0x07,0xae,0x3d,0xf5,0x3e,0xd8,0x2c,0xfa,0x67,
    0x83,0xe9,0x1f,0xd1,0x7d,0xe0,0x9f,0xef,0x19,0xfb,0x03,0xc3,0xf3,0x11,0xf1,0x69,
    0x2d,0x3f,0x06,0xdb,0x68,0xb8,0x3f,0x01,0xaf,0x31,0x67,0xd5,0x67,0xe0,0xd5,0x7c,
    0xcf,0xd1,0xf5,0xf5,0x39,0x3a,0xc9,0xfd,0x87,0xc8,0x9a,0xb7,0x2f,0x99,0xff,0xd1,
    0x9e,0x57,0xbe,0xfb,0x7c,0x0d,0x36,0x22,0xfd,0x7e,0x14,0xf6,0xb3,0x6f,0xf8,0x2e,
    0xd3,0x17,0xbd,0xc6,0xf9,0x2d,0x79,0x5a,0x41,0x9c,0xdf,0x61,0xfb,0x2d,0x63,0x7d,
    0x01,0x26,0x3d,0xb7,0x81,0x79,0x7e,0x6f,0xc6,0xfe,0x81,0xb1,0x27,0xb0,0x2f,0xfc,
    0x08,0xa6,0x71,0x6f,0x02,0x53,0xae,0x4d,0x11,0xd7,0x06,0x13,0xcb,0x66,0x6a,0x24,
    0xf5,0xdf,0x6c,0xea,0x9f,0x61,0xbe,0x13,0x17,0x9b,0xfa,0xb7,0x87,0xa3,0xc4,0x7c,
    0x77,0xf9,0xbd,0x8e,0xef,0x2e,0x7f,0x80,0x6b,0xdd,0xb7,0x53,0xf7,0x89,0xc6,0x66,
    0x07,0xb8,0xde,0xa9,0xfe,0x04,0xeb,0x67,0xce,0xb2,0xbf,0xe0,0xfa,0xd3,0xf8,0xfd,
    0x4d,0x1c,0x7a,0xef,0xda,0xc9,0xf7,0xb3,0x6a,0xec,0x65,0xde,0x3b,0xb1,0xd3,0xff,
    0x33,0xff,0x01,0x35,0x79,0xaa,0xd4,0x24,0x19,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float positiveMax = valueMask;
//
//           float value = valueAsUint / positiveMax;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
