// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x56,0x5f,0x68,0x96,0x75,
    0x14,0x7e,0xcf,0xf7,0x6d,0x73,0xba,0xa5,0x5b,0x59,0x59,0x6c,0x73,0x65,0x7f,0x34,
    0x45,0x45,0x96,0xad,0xb2,0x51,0x17,0x62,0x17,0x82,0x51,0x84,0x64,0x17,0x43,0xf7,
    0xe7,0x5b,0xc1,0x6c,0x65,0x25,0x94,0xd3,0x1c,0x19,0x2e,0xc7,0xbc,0x10,0x24,0x23,
    0x47,0x03,0xc1,0x36,0xa5,0x72,0x48,0xc4,0x10,0xb2,0xda,0xd2,0x6e,0xf2,0xc2,0x9b,
    0x6a,0x64,0x92,0x24,0xe9,0xcd,0xfe,0xb8,0x4d,0x6d,0xc4,0x3a,0xcf,0x77,0x9e,0xd3,
    0x0e,0x1f,0x5e,0xf5,0xc1,0x8f,0xf7,0x3b,0xcf,0xf9,0xf7,0x9c,0xf3,0x3b,0xef,0xef,
    0xfd,0xa5,0x53,0x8b,0x66,0x25,0x89,0x24,0x73,0x92,0xc2,0x24,0x3f,0x95,0x64,0x7f,
    0xa5,0x49,0x4a,0x91,0x24,0x29,0x4a,0x0a,0xb2,0xcf,0x75,0xeb,0x5f,0x58,0xbf,0x7c,
    0xdb,0x9b,0xf5,0xcb,0xab,0x1e,0x5d,0x09,0xfd,0xdc,0x24,0x9d,0xb5,0x83,0x6e,0x9e,
    0xda,0xe4,0xeb,0x33,0x4f,0x57,0xf3,0xe6,0x57,0xb6,0x02,0x9f,0xd0,0x55,0xa2,0x78,
    0x5e,0x36,0x56,0x92,0x3c,0x4d,0x5b,0xac,0x67,0xd5,0xfa,0x41,0x4b,0x93,0x2c,0xe2,
    0xd3,0x31,0x21,0x96,0x17,0xb0,0x14,0xb1,0xc2,0x80,0xa5,0x89,0x15,0x07,0x2c,0x8f,
    0x58,0x49,0xc0,0xf2,0x89,0xcd,0x0f,0x58,0x01,0xb1,0x05,0x01,0x9b,0x45,0xac,0x2c,
    0x60,0x85,0xc4,0x2a,0x03,0x36,0x9b,0xd8,0x03,0x01,0x9b,0x43,0x6c,0x71,0xc0,0x8a,
    0x88,0x2d,0x0b,0x58,0x31,0xb1,0x95,0x01,0xbb,0x8d,0x58,0x55,0xc0,0xe6,0x12,0xab,
    0x46,0xdf,0xb5,0x52,0xef,0xc1,0x3a,0xad,0xb0,0x8e,0xfc,0xbd,0x3f,0xf5,0x39,0x7d,
    0x84,0x7d,0x3d,0xfb,0x03,0xfb,0x46,0x7d,0xde,0xff,0x9f,0xce,0xe4,0xfb,0xd8,0x67,
    0xc8,0xc3,0x39,0xf1,0x46,0x6e,0x11,0x6f,0x24,0xc4,0x1b,0xcb,0x89,0x37,0xc6,0x78,
    0x2e,0x4f,0xb0,0xf6,0x32,0xca,0x8f,0x89,0xc9,0xf7,0xe8,0xba,0x43,0xab,0x48,0x65,
    0xed,0xd3,0xd9,0x78,0xf8,0x7f,0xa7,0xda,0x14,0xb0,0xc7,0xf8,0xdd,0xa5,0x9a,0x52,
    0xca,0x15,0xfa,0xcf,0xf7,0xeb,0xff,0xae,0x4a,0x8d,0xff,0x10,0xf7,0x0d,0xb1,0x9e,
    0xa4,0xfc,0x30,0x31,0xe4,0x5f,0xcc,0x7c,0xe8,0xc9,0x52,0xca,0x4b,0x82,0xff,0x23,
    0xb4,0x2d,0x08,0xfa,0x15,0x9c,0x2d,0x97,0xab,0x58,0xcf,0x52,0xd6,0xb3,0x86,0x3d,
    0x75,0xb9,0x86,0xf3,0xe4,0xf6,0x6b,0x73,0xe4,0x0d,0xb4,0x9f,0xaf,0x51,0x9e,0x0f,
    0x7e,0x2f,0xb2,0xf7,0x90,0xd1,0x97,0x4d,0xec,0x53,0xb9,0xa2,0x3e,0x0b,0x15,0xdc,
    0xf3,0x3a,0xf2,0x6d,0x20,0x97,0x7a,0xd6,0x0b,0xb9,0x31,0xf0,0x43,0xbe,0x0c,0xe3,
    0xc0,0xfe,0x55,0xea,0x62,0x7d,0xcd,0x9c,0x4d,0xe7,0xd1,0x42,0x7b,0xd7,0x6f,0xe7,
    0xdc,0xbb,0xdc,0x1a,0x78,0x42,0xde,0xa9,0x6b,0x3a,0x3d,0x23,0xef,0xe6,0x5c,0x7b,
    0xbc,0xbd,0xc1,0x1f,0xf2,0x81,0x9c,0xfe,0x1d,0xe1,0x9e,0xb8,0x7f,0x2f,0xe2,0xe9,
    0xcf,0xe5,0xe3,0x39,0xfb,0x75,0x8a,0xef,0x97,0xcb,0xe7,0xb9,0x67,0x1e,0x6f,0x28,
    0xc7,0xfe,0x02,0xcf,0x89,0xbb,0x55,0xbe,0xc4,0x33,0x2a,0xc5,0xbe,0x0e,0x87,0xbe,
    0x62,0xf6,0x87,0xd9,0xa7,0x51,0xda,0x8c,0xb0,0xaf,0x90,0xc7,0x88,0x21,0xce,0x35,
    0xfa,0xa5,0x69,0x3f,0xce,0x9c,0xd7,0x68,0x3f,0xce,0x73,0x51,0xa8,0x9f,0xe4,0xff,
    0xd8,0xf7,0x79,0x7c,0x5f,0x9c,0xf7,0x6a,0xb1,0xb3,0x73,0x99,0x4a,0x88,0x83,0xf7,
    0x09,0xd8,0x10,0x6b,0x5a,0xad,0x53,0x98,0xe2,0xec,0x24,0xcc,0x7d,0x43,0x11,0xcc,
    0xe6,0x75,0x95,0xaa,0xc5,0xf0,0x29,0xfd,0x8f,0x3d,0x7c,0x5c,0x4c,0x8f,0xe7,0x33,
    0x6a,0x05,0x0e,0xd3,0xe4,0x05,0xfd,0x53,0xcc,0x0b,0x62,0xc0,0x61,0x83,0xf9,0x17,
    0xb1,0x77,0x26,0x13,0x6c,0x52,0x62,0xf8,0xe7,0x6a,0x83,0x99,0x4d,0xf3,0x80,0x07,
    0x8e,0xdc,0xf9,0xcc,0xfd,0xb7,0xda,0x43,0x97,0xa7,0x2b,0x9f,0xf9,0xf1,0xff,0xa6,
    0x3e,0xab,0x29,0xe7,0x53,0x9e,0x4d,0x19,0xcf,0x09,0x3d,0x95,0xb3,0x67,0x53,0xca,
    0xb8,0xc1,0x66,0xa5,0xae,0xe2,0xa0,0x9b,0x90,0x19,0xdd,0x2a,0xea,0x9c,0x73,0x09,
    0x39,0xa3,0xa7,0xce,0xb9,0x54,0x0c,0xff,0x92,0x9c,0x6f,0x17,0x8b,0x01,0x7c,0x52,
    0x6d,0x8a,0x18,0xc3,0x79,0x43,0x3f,0x07,0x7b,0x42,0x5e,0xf8,0xff,0xbe,0xfa,0x22,
    0xd6,0x02,0xd6,0x0b,0xdf,0xf7,0x88,0xdd,0x2b,0x86,0x4f,0x04,0x1e,0x65,0xe4,0x71,
    0x3c,0xf4,0xae,0x5c,0x0c,0xf7,0xde,0x55,0x88,0xf9,0x96,0xb3,0x77,0x95,0x81,0x03,
    0x74,0x0b,0x75,0x55,0x92,0xc3,0x42,0xf6,0xca,0x39,0x55,0xd2,0xa7,0x3f,0x67,0xaf,
    0x37,0x52,0xbf,0x31,0x70,0x79,0x89,0x5c,0xd6,0x06,0x2e,0x9b,0xc4,0xf0,0x0f,0x58,
    0xc3,0xcb,0xe4,0x02,0xbc,0x9d,0x58,0x6d,0xc0,0x3c,0xd6,0x66,0xc6,0xda,0x10,0x62,
    0x6d,0x11,0xc3,0xbd,0xae,0x3a,0x31,0xdf,0x2d,0xa1,0xe7,0x0d,0xc4,0x70,0xb6,0x1d,
    0x25,0xd6,0x28,0x66,0xdb,0xc0,0x5a,0x9a,0x42,0xfd,0xd0,0x65,0x74,0x35,0xb1,0x9e,
    0x0c,0xeb,0xef,0xa7,0xdc,0x14,0x38,0x7d,0x43,0x4e,0x4b,0x02,0xa7,0xd3,0x62,0xb8,
    0xef,0xdb,0xb7,0x62,0x35,0x9e,0x0e,0x7e,0xdf,0xd3,0x6f,0x45,0xf0,0x1b,0x10,0xc3,
    0xdd,0x6f,0x90,0xbc,0x07,0xc2,0x7e,0xff,0x20,0x16,0x6f,0x30,0xc4,0x3a,0xc3,0x58,
    0x55,0x21,0xd6,0x59,0x31,0xdc,0xfd,0x7e,0x14,0xf3,0x3d,0x1b,0xfa,0xde,0x2c,0x86,
    0xaf,0xc9,0xbe,0x77,0x05,0xd9,0x73,0x79,0xab,0xd8,0xd9,0x9d,0xa1,0xde,0xe3,0xbd,
    0x26,0xa6,0xf3,0x9c,0x2d,0xcc,0xd9,0x1c,0x72,0xbe,0x2e,0x86,0x1f,0x63,0x8f,0xdf,
    0x10,0x62,0x3c,0x1b,0xba,0x43,0x8f,0xa1,0xdb,0xa6,0x6b,0x3f,0x7b,0x8a,0xff,0xbd,
    0xf4,0x7b,0x2b,0xec,0x57,0x8f,0x46,0xc6,0x39,0xf5,0xb6,0x18,0x5e,0xc5,0x6f,0xc1,
    0x0e,0xe6,0xdc,0x2e,0xa6,0x73,0xbb,0x77,0x68,0xd7,0xca,0x6f,0x82,0xdb,0xbd,0x2b,
    0xa6,0x73,0xfe,0x3b,0xc8,0x7f,0x77,0xe0,0xdf,0x2a,0x86,0x3b,0xff,0x9d,0x62,0x98,
    0xf3,0xef,0x0c,0xfc,0xa1,0xdb,0xa5,0xab,0x8d,0xfc,0x77,0x85,0x7d,0xdb,0x2d,0xf6,
    0xbd,0xa9,0xe5,0xdc,0x74,0xd2,0xa6,0x8d,0xb3,0xd6,0x11,0xe2,0x80,0xeb,0x1e,0xec,
    0x09,0x6d,0xf6,0xd0,0xa7,0x83,0x32,0xf0,0x36,0xc6,0x6d,0x17,0xfb,0x6e,0xd5,0x86,
    0x5c,0x1f,0x8a,0xf5,0xa0,0x3d,0xec,0xf5,0x3e,0x31,0x1c,0xb6,0x31,0x56,0x47,0x38,
    0xc7,0xae,0xb3,0x2e,0xe4,0xdb,0xc7,0xfc,0x91,0x6b,0x67,0xb0,0xbd,0x29,0x56,0x13,
    0x6a,0x84,0x5f,0x07,0x6d,0xbb,0x69,0xbb,0x3f,0xbc,0xb7,0x3f,0x85,0x99,0x72,0x8e,
    0xe7,0xc4,0xf0,0x9a,0x80,0x1d,0xe4,0x5c,0xd7,0x24,0x33,0xfb,0xfe,0x91,0x18,0x7e,
    0x84,0xfd,0xee,0x0a,0x7d,0x82,0xee,0x90,0xae,0x8f,0x99,0xf3,0x10,0x39,0x74,0x51,
    0x06,0x3e,0xa0,0x71,0x30,0x03,0x9f,0x88,0x9d,0x7d,0x07,0xd9,0x3b,0x60,0x87,0x65,
    0x06,0x8f,0x7e,0x5d,0xac,0x13,0x36,0x93,0x62,0xdf,0x7d,0xc4,0x3e,0xcc,0x5c,0x3e,
    0x3f,0x9f,0x8a,0xe9,0x63,0xdd,0xdd,0xa1,0x47,0x53,0x62,0x33,0x86,0xbe,0xc1,0xb6,
    0x2b,0xe8,0x6e,0x88,0xf5,0x10,0xba,0x73,0xd4,0x79,0xcd,0x47,0x6f,0x71,0x36,0x7d,
    0xc6,0xb3,0xe9,0x28,0xe7,0xa5,0x2f,0xf4,0x01,0xba,0x1e,0xd4,0x41,0x0e,0x3d,0x61,
    0xa6,0x7b,0x39,0xd3,0xa7,0xc2,0x4c,0x1f,0x13,0xc3,0xc1,0xbb,0x8f,0x3e,0xf0,0xfd,
    0x8e,0xfb,0xf0,0x85,0xd8,0xbb,0x0d,0x8e,0x67,0x88,0x9d,0x10,0xc3,0xa7,0x72,0xfc,
    0xfa,0x42,0x4d,0xd3,0x62,0xb1,0x91,0xff,0x04,0xf9,0xb4,0xf0,0xce,0x78,0x92,0xbe,
    0x2e,0x7f,0x25,0x66,0xbf,0x57,0xe3,0x43,0xfe,0x5a,0x0c,0x3b,0x99,0x73,0xae,0xf6,
    0x33,0x3e,0x6c,0x70,0xc9,0xc0,0xdd,0x13,0x67,0x2f,0xec,0xfb,0x42,0x9d,0x3f,0xb3,
    0xce,0xf3,0xa1,0xce,0x5f,0xc4,0x70,0xef,0xeb,0xaf,0x62,0xd8,0x01,0xce,0xd2,0xd5,
    0xd0,0x43,0xe8,0x86,0x74,0x5d,0x66,0xde,0xa1,0x50,0xfb,0x6f,0xfc,0xee,0x0c,0x85,
    0xb9,0xbc,0x20,0x86,0xb7,0x84,0xf3,0xe8,0x77,0x31,0x3c,0xc3,0xbb,0x9d,0xcf,0xc9,
    0x45,0x31,0xdd,0x73,0xea,0x8b,0x7b,0xde,0x1f,0x32,0x53,0x4b,0xb1,0x5a,0xc0,0xe6,
    0x92,0xd8,0x3d,0xec,0x09,0xea,0x07,0x98,0xfb,0x4f,0x31,0xdd,0x45,0xf6,0xe5,0x2a,
    0xf9,0x5d,0xe6,0x1c,0x22,0xef,0x5f,0x8c,0xe7,0xf9,0xae,0x88,0x61,0xd1,0xfe,0x6a,
    0xd8,0x27,0x49,0x59,0x5c,0xd4,0x78,0x85,0x35,0x0f,0x32,0x1f,0xee,0x36,0xb8,0xeb,
    0xc0,0x06,0xfe,0xc5,0xf4,0x2f,0x0e,0x67,0xc9,0x2a,0xde,0x2d,0xfc,0xbd,0xf1,0xfb,
    0x52,0x51,0xd8,0x8f,0x61,0xee,0x47,0x6b,0xd8,0x8f,0x11,0x31,0xdc,0xbf,0x35,0xa3,
    0x62,0x18,0xce,0x05,0x8f,0x3d,0xc6,0xfb,0xcc,0xa8,0xcc,0x7c,0x7f,0xc6,0xc5,0xee,
    0xb8,0x19,0xea,0x6b,0x74,0xef,0xc6,0xc9,0x33,0xde,0xdf,0xf0,0xfc,0x47,0x9d,0xab,
    0x75,0xfd,0x0b,0xca,0xb9,0xb8,0x55,0x50,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float positiveMax = valueMask;
//
//           float value = valueAsUint / positiveMax;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
