// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x5d,0x65,
    0x10,0x86,0xbf,0x73,0xff,0xf5,0xa6,0xa6,0xfe,0x34,0x69,0x35,0xad,0xa9,0x2d,0x41,
    0x48,0xa9,0x5d,0xa8,0x18,0x44,0x51,0x28,0xe8,0xa2,0xd0,0xaa,0x60,0xba,0xc8,0xe6,
    0x82,0x5d,0x18,0x68,0x17,0x51,0xba,0xc9,0xa2,0x82,0x11,0xba,0xc9,0xa2,0x9b,0x6c,
    0x6a,0xad,0xa9,0xa2,0x15,0x37,0xe2,0x4f,0xd1,0xe2,0x4f,0x50,0x62,0x0d,0x4a,0xd4,
    0x60,0x40,0x5b,0x09,0x68,0x09,0xd8,0x12,0xd0,0x12,0x34,0x35,0x50,0xeb,0xbc,0xe7,
    0x3c,0x93,0x0e,0xf7,0xc2,0xdc,0xef,0xcc,0xfb,0xce,0xcc,0xfb,0xcd,0x9c,0xef,0x3b,
    0xe5,0xd2,0xb6,0x7a,0x4a,0x59,0xba,0x39,0x35,0xd2,0xa6,0x2c,0xe5,0xbf,0x5b,0x53,
    0x29,0xe9,0xb1,0x99,0x6a,0xf9,0xfa,0xc4,0x9e,0x67,0xf6,0xec,0x7c,0xe1,0xc5,0xe7,
    0x76,0xde,0xff,0xc0,0x2e,0xf1,0xb7,0xa4,0x72,0x1e,0x27,0xae,0xd3,0xbc,0x8a,0xad,
    0xb2,0x83,0xad,0xe7,0x0f,0x09,0xef,0x32,0xdb,0x6f,0xd6,0x32,0x1b,0x36,0x1b,0x31,
    0x1b,0x35,0x1b,0x33,0x1b,0x37,0x9b,0x30,0x5b,0x6f,0x35,0x94,0x53,0x57,0x7d,0x7b,
    0xea,0xca,0xf5,0x54,0x2f,0xa5,0x27,0x53,0x35,0x6d,0x2e,0xb6,0x92,0xb6,0xb1,0x3a,
    0x96,0x81,0x35,0x02,0x56,0x02,0x5b,0x1f,0xb0,0x32,0xd8,0xc6,0x80,0x55,0xc0,0x7a,
    0x02,0x56,0x05,0xeb,0x0d,0x58,0x0d,0x6c,0x7b,0xc0,0xea,0x60,0xf7,0x06,0xac,0x01,
    0xb6,0x23,0x60,0x37,0x81,0xed,0xca,0xfb,0x2a,0xaf,0xed,0x4f,0x3d,0x6a,0x26,0x5b,
    0xe8,0x47,0x7e,0x0b,0x3f,0xc3,0x1f,0xc6,0xf7,0xf8,0x11,0xfc,0x32,0xfe,0x28,0x7e,
    0x05,0x7f,0x0c,0xbf,0x8a,0x3f,0x8e,0x5f,0xc3,0x9f,0xc0,0xf7,0x19,0x9f,0xb0,0xf5,
    0x9e,0xa0,0x2f,0x7f,0x6b,0xf0,0x27,0xdb,0xf8,0x49,0x78,0xed,0xe7,0x76,0xfb,0x2f,
    0xe5,0x7e,0x39,0xdf,0x4f,0x29,0x7f,0xcf,0xe5,0x5c,0x4b,0xb3,0xeb,0xb6,0xf8,0x3a,
    0xda,0xe2,0x36,0x98,0xdf,0x84,0x4b,0xf0,0x1d,0xbc,0xe3,0x0a,0xfe,0x1d,0xc4,0x57,
    0xf2,0xb8,0x8a,0xe5,0x14,0xb3,0x10,0xfe,0x30,0x7e,0x17,0x98,0xea,0xf5,0x50,0x2f,
    0xcb,0xfb,0xea,0x58,0x7b,0x2f,0x6e,0x3d,0x58,0x8d,0xb5,0x19,0x4c,0xf5,0xb7,0xf0,
    0x7e,0x36,0x53,0x5f,0xfe,0xdd,0x60,0xfd,0x6d,0xf5,0x15,0xbf,0x15,0xae,0x1e,0xf8,
    0x3e,0xfa,0x71,0xbf,0x1f,0x5e,0xf1,0x3b,0x88,0x6f,0xe6,0x3d,0x94,0xd2,0x7d,0xc4,
    0x35,0x39,0x0f,0x31,0x6f,0x80,0xf3,0xe3,0xfe,0xee,0xb6,0x7d,0xec,0xa5,0x0f,0xd5,
    0xdd,0x07,0xd7,0x83,0x3f,0xc8,0x99,0xe8,0xa0,0x8f,0x41,0xee,0x5b,0x39,0xe4,0x0f,
    0xf1,0x1e,0x9c,0x6f,0xb5,0xf1,0x07,0x98,0xbb,0xf3,0xc3,0xf0,0xee,0x8f,0xb4,0xc5,
    0x1f,0xe6,0x7e,0x39,0x3f,0xda,0xc6,0x1f,0x61,0x76,0xce,0x8f,0xb5,0xf1,0x47,0xcd,
    0x1e,0x0b,0xfc,0x78,0x1b,0x7f,0xcc,0xec,0xa5,0xc0,0x4f,0xc0,0x6f,0xb2,0xce,0x8f,
    0x33,0x53,0x3e,0x4f,0x6b,0x3f,0xf7,0x35,0x93,0x57,0x79,0x3e,0x4e,0x0d,0xf9,0x27,
    0xc0,0xee,0xb4,0x49,0x9c,0x24,0xee,0x75,0xb0,0x93,0xc4,0xc9,0x9f,0x04,0xbb,0xcb,
    0x14,0xdf,0xa0,0xc6,0x83,0x76,0xab,0x4a,0xcc,0x28,0xb1,0x97,0xab,0x86,0xe8,0xae,
    0x3d,0xc2,0xd9,0x7d,0x8f,0xf3,0xf9,0x94,0xa1,0x7a,0x57,0xef,0x83,0xa5,0x80,0x7d,
    0x00,0xa6,0xbd,0xee,0x33,0x4c,0x67,0xe5,0x43,0x62,0xc5,0x3d,0x6e,0x98,0xce,0xd9,
    0x47,0x9c,0xc5,0x5e,0xea,0x2b,0xee,0x0c,0xf8,0x2b,0xe4,0x7d,0x4c,0xee,0x99,0x90,
    0xf7,0x09,0x79,0x7d,0x21,0xef,0x2c,0xf8,0xcb,0xe4,0x7d,0x4a,0xee,0x59,0xf2,0x74,
    0x4e,0x3f,0x23,0xaf,0x9f,0x3c,0xcd,0xf7,0x73,0xf0,0x77,0x2d,0x46,0x67,0xf7,0x0b,
    0x30,0x9d,0xdd,0x15,0x9b,0xc0,0x34,0xbd,0xad,0x5a,0xbc,0xb8,0x29,0xb3,0x69,0xe6,
    0x32,0x15,0x7a,0xfe,0x12,0xcd,0x94,0x9f,0x8b,0x4a,0x8e,0x7d,0x05,0xfe,0xb4,0x79,
    0xda,0xd3,0x6d,0x59,0x81,0x79,0xdc,0xbf,0x56,0xc3,0x6b,0x69,0xfd,0xdb,0xa2,0x14,
    0xd7,0x95,0x15,0x31,0x55,0x72,0xa6,0x42,0x0f,0x5f,0xd3,0xc3,0x40,0xe8,0xe1,0x1c,
    0xb8,0xf7,0xf0,0x0d,0x98,0xf7,0x30,0x1b,0x7a,0x10,0x37,0x63,0x36,0x8b,0xee,0x4c,
    0xe8,0xe1,0x5b,0xb4,0xb3,0xd0,0xc3,0x77,0xe0,0xde,0xc3,0x86,0xac,0xc0,0x3c,0x4e,
    0x3d,0x78,0xad,0xd9,0xd0,0x43,0x77,0x56,0xc4,0x4c,0x93,0x33,0x13,0x7a,0xf8,0x9e,
    0x1e,0x76,0x87,0x1e,0x7e,0x00,0xf7,0x1e,0x7e,0x04,0xf3,0x1e,0xe6,0x43,0x0f,0xe2,
    0xe6,0xcc,0xe6,0xd1,0x9d,0xcb,0xbf,0x1d,0x85,0xee,0x4f,0x68,0x77,0x67,0x37,0xee,
    0x8a,0xf6,0xe8,0xb1,0xf3,0x61,0x8f,0x1b,0x89,0x9b,0x25,0x6f,0x8e,0xfd,0xe8,0x2e,
    0xbc,0xc6,0x5d,0x92,0xaf,0x7b,0x73,0x8a,0x3b,0xf3,0xac,0xed,0x4f,0xf7,0xe5,0x4d,
    0x62,0x4e,0x85,0x73,0xf9,0x16,0x7d,0x0d,0x85,0x73,0xf9,0x36,0xb8,0x9f,0xe7,0xd3,
    0xe8,0x0a,0x1f,0x34,0x4c,0xdf,0xb3,0x77,0xa8,0x77,0x9a,0x5a,0xfa,0xf6,0xfd,0x4c,
    0xad,0xbd,0xd4,0xd2,0xf7,0xe2,0x17,0xf0,0x73,0x16,0x23,0xff,0x3c,0x58,0x6f,0x98,
    0xdb,0x05,0xf0,0x3e,0xe6,0xb6,0x10,0xe6,0x26,0xee,0x57,0xb3,0x05,0x66,0xa1,0xe7,
    0x47,0x2d,0x66,0x3f,0x7b,0xd0,0x9c,0x9c,0x5b,0x08,0x3a,0xbf,0xa1,0x33,0x14,0x74,
    0x7e,0x07,0x77,0x9d,0xc5,0xa0,0x23,0xee,0xa2,0xd9,0x22,0xb5,0x2e,0xa2,0xd3,0x0a,
    0x3a,0xce,0x2d,0x06,0x9d,0x3f,0xd0,0x39,0x10,0x74,0x2e,0x81,0xbb,0xce,0x52,0xd0,
    0x11,0x77,0xd9,0x6c,0x89,0x5a,0x97,0xd1,0x19,0x0e,0x3a,0xce,0x2d,0x05,0x9d,0x3f,
    0xd1,0x19,0x08,0x3a,0x7f,0x81,0xbb,0xce,0x72,0xd0,0x11,0x77,0xc5,0x6c,0x99,0x5a,
    0x57,0xd0,0x19,0x09,0x3a,0xce,0x2d,0x07,0x9d,0x7f,0xd0,0x39,0x1c,0x74,0x56,0xc0,
    0x5d,0x67,0x35,0xe8,0xac,0xe4,0x35,0x52,0x8e,0xa9,0xd6,0x55,0x74,0x46,0x83,0x8e,
    0x73,0xab,0x41,0xe7,0x1a,0x3a,0x47,0x82,0xce,0x7f,0xe0,0xae,0x93,0x65,0x37,0x74,
    0xc4,0x5d,0xd7,0xf7,0x39,0x2b,0x6a,0x5d,0x47,0x67,0x2c,0xe8,0x38,0xa7,0xd5,0x75,
    0x2a,0x59,0xa1,0x73,0x34,0xe8,0x54,0xb3,0x02,0x77,0x9d,0x46,0xd0,0x11,0x57,0x33,
    0x6b,0x50,0x4b,0xcf,0xd2,0x19,0x0f,0x3a,0xce,0x35,0x82,0x4e,0x13,0x9d,0x63,0x41,
    0xa7,0x23,0x2b,0x70,0xd7,0xe9,0x0c,0x3a,0xe2,0xd6,0x99,0x75,0x52,0x6b,0x1d,0x3a,
    0x13,0x41,0xc7,0x39,0xad,0xd7,0xec,0xcb,0xf0,0x90,0xd9,0xff,0x0b,0x92,0x24,0xe7,
    0x08,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform utexture2D color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = texture(usampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     broadcastColor(colorValue);
//
// }
