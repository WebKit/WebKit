// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x96,0x59,0x4f,0x54,0x41,
    0x10,0x85,0x7b,0x16,0x66,0x50,0x51,0x11,0x44,0x70,0xc1,0x0d,0x37,0x50,0xc9,0xa8,
    0x8c,0xd1,0x20,0x8a,0x9a,0x08,0xea,0xb8,0xe0,0x82,0x2b,0x1a,0xa3,0x42,0x8c,0x0b,
    0x24,0x2e,0xf0,0xe0,0x02,0x31,0xa8,0xf0,0xe0,0x02,0x0f,0x6e,0x3c,0x98,0x28,0xfa,
    0xe0,0x0f,0xf1,0x17,0x19,0x97,0xc4,0xc4,0xaa,0x9e,0xaf,0x4c,0x39,0x93,0x54,0xee,
    0x3d,0xe7,0x54,0xd7,0xe9,0xea,0xee,0xdb,0x99,0x54,0xb2,0x21,0x1b,0x42,0x22,0xcc,
    0x0c,0xe5,0xe1,0x4b,0x28,0xfe,0xe6,0x85,0xa4,0x30,0x21,0xcc,0x0a,0x99,0xf8,0xec,
    0x28,0x1c,0x2f,0x34,0xdf,0xbe,0x73,0xa5,0xb9,0x25,0x9f,0x53,0x7d,0x4e,0x48,0xc5,
    0x3c,0xd5,0xe6,0x0a,0x4a,0xcb,0x53,0xe3,0xe6,0xa5,0x6b,0xb7,0x94,0xaf,0x90,0xb8,
    0x28,0xd1,0x27,0x31,0x20,0x31,0x24,0x31,0x22,0x31,0x2e,0x31,0x29,0x31,0x25,0x51,
    0x29,0x35,0x74,0x4c,0x56,0xeb,0xcb,0x5b,0x45,0xf4,0xd3,0x7a,0x21,0x74,0x86,0xb2,
    0x30,0x9f,0xb9,0x34,0xf0,0x34,0x2e,0x01,0x57,0xee,0xb8,0x24,0x5c,0xa5,0xe3,0x52,
    0x70,0x75,0x8e,0x4b,0xc3,0x2d,0x71,0x5c,0x19,0xdc,0x72,0xc7,0x65,0xe0,0x56,0x39,
    0x2e,0x0b,0xb7,0xce,0x71,0xe5,0x70,0x1b,0x1c,0x37,0x03,0x2e,0x17,0xfb,0x4a,0xfd,
    0x9b,0x9f,0xf6,0xd8,0x29,0xcf,0x95,0xf4,0x63,0x78,0x85,0xc3,0x85,0x12,0xbd,0x80,
    0x6e,0xe3,0x75,0x4d,0x97,0x3a,0xbd,0x0f,0x9c,0x00,0x0f,0x80,0x2d,0x7f,0x08,0x9c,
    0x02,0x8f,0x80,0xd3,0xe0,0x71,0x70,0x19,0x78,0x12,0x9c,0x01,0x4f,0x81,0xb5,0xf7,
    0x6a,0xa9,0x9a,0x8c,0xf3,0x49,0xc5,0x7a,0xfa,0xbe,0x40,0xde,0x32,0xac,0x5d,0xad,
    0xe4,0x67,0x19,0x9b,0x04,0xcf,0x04,0xa7,0x63,0x4e,0x3a,0xee,0xaf,0xce,0x55,0xf9,
    0x56,0x70,0x05,0x5c,0x8d,0xe0,0x2a,0x6a,0x19,0xae,0x06,0x87,0x38,0x8f,0x8a,0x7f,
    0xfb,0x60,0x51,0x45,0x64,0x78,0x56,0xbb,0x50,0xbf,0x1a,0xf6,0x63,0x3e,0x7e,0x35,
    0x71,0xce,0x45,0x6e,0x3d,0x7e,0xb5,0xf8,0x69,0x7e,0x1d,0x5a,0xd6,0xe9,0xf5,0xf8,
    0x1b,0x5e,0x89,0xae,0xf9,0x0d,0xe4,0x57,0x47,0x8f,0x64,0x58,0x43,0x9e,0xe2,0xb5,
    0x25,0xe3,0x72,0x9c,0x17,0xc3,0xad,0x8c,0xd5,0x75,0xda,0x4b,0x0d,0x5d,0xa7,0x85,
    0xc2,0xee,0x03,0x27,0xc2,0xff,0x3f,0xc3,0xea,0xdd,0xc1,0xfb,0x3e,0x7a,0xeb,0x88,
    0x67,0xb0,0xf8,0x5b,0x24,0x73,0x39,0x40,0xde,0x41,0xb8,0x03,0xe4,0x29,0x2e,0xc0,
    0x2d,0x96,0xfd,0x3b,0x4c,0x0d,0x9b,0x57,0x17,0xfb,0x67,0xb8,0x9b,0xf5,0xd5,0x5a,
    0xa7,0x98,0x73,0x15,0xf8,0x02,0x67,0x6b,0x2f,0xb5,0x2f,0xf0,0xdd,0xa7,0x1c,0xee,
    0x03,0x5b,0xbd,0xeb,0xf4,0x69,0xfa,0x40,0x49,0xfe,0x50,0x49,0xfe,0x7d,0xbe,0x6b,
    0xd3,0x47,0x4a,0xf4,0x51,0xce,0x88,0xe9,0xe3,0x25,0xfa,0x73,0x89,0x76,0xa7,0x4f,
    0x96,0xe8,0xaf,0x25,0x86,0x9d,0x3e,0x85,0xbe,0x55,0xbe,0x8a,0x24,0x73,0x0d,0x70,
    0x3f,0x85,0xd1,0x6f,0xa5,0x8d,0xb3,0x3d,0x9b,0xf3,0xdb,0x25,0x6c,0x86,0xbb,0x6b,
    0x36,0xf9,0xc6,0x55,0xc2,0xe9,0xde,0x1d,0x15,0x2e,0x1b,0xef,0xd7,0x62,0xae,0x6a,
    0xbb,0x85,0xab,0x8b,0xfb,0x5e,0x3c,0x9b,0xb5,0xd4,0xcf,0xc6,0x7d,0x2c,0xf2,0xa3,
    0x8c,0x5b,0xc2,0xd8,0x45,0x6e,0xdc,0x52,0xc6,0xd5,0xbb,0x71,0xcb,0xe0,0x1f,0x33,
    0x6e,0x05,0x63,0x97,0x31,0xce,0xee,0xb6,0x05,0x9c,0xe7,0x36,0xce,0xec,0x6a,0xf8,
    0xaf,0x92,0xb3,0x86,0xbb,0x6e,0x35,0x67,0xf9,0x87,0xac,0x40,0x13,0xbd,0xfd,0x96,
    0x7c,0xd5,0x1a,0x25,0x9a,0x58,0x97,0x46,0xd7,0xf3,0x46,0x77,0xaf,0x3d,0x92,0x5c,
    0xe5,0x9a,0xe1,0x8f,0x09,0xd2,0x39,0x7d,0x80,0xb3,0xbc,0x5f,0x52,0xc3,0x6a,0xe9,
    0xf3,0xbb,0x64,0x69,0xde,0x27,0x72,0xca,0x18,0xd3,0xe8,0x7a,0xd8,0x44,0x0f,0x39,
    0xd7,0xc3,0x66,0x78,0xeb,0x61,0x0b,0x9c,0xf5,0x90,0x77,0x3d,0xa8,0xd6,0x22,0x91,
    0xc7,0xb7,0xc5,0xf5,0xb0,0x0d,0xef,0x84,0xeb,0x61,0x3b,0xbc,0xf5,0xf0,0x11,0xce,
    0xf2,0xb4,0x07,0xab,0x95,0x77,0x3d,0x4c,0x93,0xd3,0xc4,0x98,0x16,0xd7,0xc3,0x0e,
    0x7a,0x68,0x75,0x3d,0xb4,0xc1,0x5b,0x0f,0x3b,0xe1,0xac,0x87,0x76,0xd7,0x83,0x6a,
    0xbb,0x38,0xe3,0xea,0xab,0xef,0x47,0xf0,0xdd,0x83,0xf7,0xb4,0xbb,0x3b,0x74,0x8e,
    0x96,0xdb,0xee,0xe6,0xf8,0x99,0xbc,0x3c,0xe3,0x76,0x31,0x1f,0xbd,0x1b,0xf6,0x73,
    0xb7,0x28,0xd6,0x7b,0xe4,0x10,0x77,0x48,0xb7,0xcc,0xef,0x70,0xf4,0x2b,0xe6,0x1c,
    0x72,0xe7,0xf2,0x18,0x7d,0x75,0xb9,0x73,0x79,0x1c,0xde,0xce,0xf3,0x09,0x7c,0x95,
    0x3f,0x25,0x9c,0xde,0x23,0x27,0xa9,0x77,0x82,0x5a,0x7a,0xe7,0x9c,0xa6,0x56,0x37,
    0xb5,0xf4,0xbb,0x3d,0x03,0xff,0x4d,0x72,0x14,0x9f,0x85,0xab,0x75,0xeb,0x76,0x0e,
    0xbe,0x9e,0x75,0xeb,0x71,0xeb,0xa6,0xda,0x79,0x89,0x1e,0xd6,0xe2,0x7c,0x5c,0xe7,
    0x54,0xbc,0xbf,0x4e,0xb2,0x4e,0xa6,0xf5,0x38,0x9f,0xcb,0xf8,0x74,0x39,0x9f,0x2b,
    0xf0,0xe6,0xd3,0xeb,0x7c,0x54,0xbb,0x2a,0xd1,0x4b,0xad,0xab,0xf8,0xf4,0x39,0x1f,
    0xd3,0x7a,0x9d,0xcf,0x0d,0x7c,0xae,0x3b,0x9f,0x9b,0xf0,0xe6,0xd3,0xef,0x7c,0x54,
    0xd3,0x3f,0x5f,0xfd,0xd4,0xba,0x85,0xcf,0x80,0xf3,0x31,0xad,0xdf,0xf9,0xdc,0xc1,
    0x27,0xe7,0x7c,0xee,0xc2,0x9b,0xcf,0xa0,0xf3,0x51,0xed,0x9e,0xc4,0x20,0xb5,0xee,
    0xe1,0x33,0xe4,0x7c,0x4c,0x1b,0x74,0x3e,0x0f,0xf0,0xb9,0xef,0x7c,0x1e,0xc2,0x9b,
    0xcf,0xb0,0xf3,0x79,0x18,0xbf,0xbb,0xe2,0xdd,0xac,0xb5,0x1e,0xe1,0x33,0xe2,0x7c,
    0x4c,0x1b,0x76,0x3e,0x4f,0xf0,0x19,0x75,0x3e,0x4f,0xe1,0xcd,0x67,0xcc,0xf9,0xa8,
    0xf6,0x4c,0x62,0x8c,0x5a,0xcf,0xf0,0x19,0x77,0x3e,0xa6,0x8d,0x39,0x9f,0x17,0xf8,
    0x3c,0x77,0x3e,0x2f,0xe1,0xcd,0x67,0xc2,0xf9,0xa8,0xf6,0x4a,0x62,0x82,0x5a,0xaf,
    0xf0,0x99,0x74,0x3e,0xa6,0x4d,0x38,0x9f,0x37,0xf8,0xbc,0x76,0x3e,0x6f,0xe1,0xcd,
    0xe7,0xbd,0xf3,0x51,0xed,0x9d,0xc4,0x7b,0x6a,0xbd,0xc3,0x67,0xca,0xf9,0x98,0xa6,
    0xcf,0x3f,0x72,0x33,0x6c,0x93,0xf8,0x0b,0x22,0xf3,0x08,0x49,0x08,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2D color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = texture(usampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
