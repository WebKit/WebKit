// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000C.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000C[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x6f,0x52,0x41,
    0x10,0xc6,0x97,0x73,0x80,0x83,0x95,0x2a,0x2d,0xa5,0x60,0xed,0xc5,0x16,0x5b,0x05,
    0x95,0xa0,0x82,0xa9,0x41,0x2c,0xda,0x52,0xac,0xa0,0xb6,0xc5,0x5b,0xa2,0xd5,0x98,
    0xf8,0xe2,0x83,0xbe,0xe8,0xbb,0x0f,0xc6,0xbf,0xc6,0xbf,0xcf,0x78,0x49,0x4c,0x9c,
    0x59,0x7e,0x6b,0xc6,0x9e,0x64,0x39,0x67,0xbe,0xf9,0xe6,0xf2,0xed,0xec,0x12,0x47,
    0xd5,0xc4,0xb9,0x94,0x9b,0x72,0x39,0xf7,0xda,0x4d,0x9e,0x19,0x17,0x09,0xe2,0xdc,
    0x49,0x97,0xf5,0xef,0xc1,0x68,0x3c,0x6a,0x7c,0xfc,0xf4,0xb6,0xd1,0x6a,0x37,0xd5,
    0x7f,0xca,0xc5,0x9e,0xa7,0xbe,0xd3,0x2e,0x71,0x69,0x79,0xeb,0x7a,0xff,0xe6,0xdd,
    0x07,0xc5,0xf3,0xb2,0x76,0x64,0x15,0x84,0xa7,0x78,0x62,0xbe,0xd5,0x37,0x90,0xaf,
    0xbc,0xcf,0xaf,0xf1,0xce,0xdd,0x73,0x19,0x37,0x47,0xed,0x2a,0xef,0x80,0xa5,0xc0,
    0x72,0x06,0x8b,0xc0,0x0a,0x06,0x8b,0xc1,0x2a,0x06,0x4b,0x83,0x2d,0x1a,0x2c,0x03,
    0x76,0xce,0x60,0x59,0xb0,0xf3,0x06,0x4b,0xc0,0x2e,0x1a,0x2c,0x07,0x76,0xd9,0x60,
    0x27,0xc0,0x9a,0x5e,0x57,0xfc,0xaf,0x3f,0xd5,0xb8,0x83,0xc6,0x79,0xec,0x81,0xbc,
    0xd7,0xd0,0x17,0xec,0x55,0x63,0x0f,0x8f,0xf9,0x87,0xf8,0x35,0x5f,0x51,0x7e,0x23,
    0x6f,0xc7,0x5e,0x6b,0xe4,0xf3,0xc6,0xbe,0x77,0xd5,0x52,0x16,0x7e,0x82,0x96,0x08,
    0x7b,0x0a,0x3b,0xed,0x39,0x69,0xdf,0x8b,0xee,0xa7,0xe2,0x1d,0xec,0x3c,0x58,0x49,
    0xec,0x59,0x72,0x05,0xbb,0x88,0xad,0xcf,0xb2,0x30,0xc3,0xbe,0x84,0x35,0xcb,0xca,
    0xf2,0x2e,0x9a,0xa5,0xf5,0x4a,0xec,0xcf,0x1c,0xf5,0x4a,0xec,0x85,0x62,0x97,0xa8,
    0x57,0xa6,0x9e,0xf2,0x2b,0xf8,0x12,0xe3,0x5f,0xa2,0x7e,0xb0,0xd7,0xf0,0x2b,0xbf,
    0x0a,0xbf,0xe8,0x6b,0x44,0x6e,0x03,0x9e,0xda,0x17,0x8e,0xc5,0x35,0x99,0x5f,0xb0,
    0x3b,0xc4,0x6a,0x9e,0x6d,0xce,0x4f,0x96,0x3e,0xb7,0x39,0xbf,0x8a,0x9d,0x11,0x56,
    0x1f,0x5f,0xca,0xfd,0xff,0x04,0x5b,0x73,0xec,0xf2,0xdd,0x27,0xc7,0xae,0x9f,0xe1,
    0xe4,0x59,0x90,0xde,0xf6,0xe0,0xdd,0x07,0xdb,0x83,0xa7,0xf6,0x10,0xec,0xac,0x54,
    0x7c,0x40,0x8e,0xd0,0xe7,0x3e,0xf3,0xbc,0x21,0xe7,0x2d,0x62,0x96,0x8e,0xde,0x7e,
    0x0a,0xa2,0xe7,0xb9,0xcb,0xac,0xa7,0x99,0xe7,0x81,0xa0,0x59,0xee,0xd6,0x34,0xfc,
    0x80,0x15,0xc0,0x52,0x3e,0x77,0xc6,0xef,0xe5,0x0c,0x5c,0xf5,0xdd,0x11,0xac,0xe2,
    0x75,0x4f,0x66,0x55,0x26,0x7f,0xe2,0x75,0x4c,0xf0,0xaf,0xc4,0x2d,0x12,0xbb,0x60,
    0xe2,0x96,0x89,0x5b,0x32,0x71,0x2b,0xe0,0x5f,0x88,0x5b,0x25,0x76,0x85,0xb8,0x70,
    0xf7,0xe6,0x99,0x6f,0x97,0x19,0xae,0x83,0x7f,0x13,0xce,0x06,0x77,0x71,0x9d,0xd9,
    0xfe,0x90,0x1d,0xa8,0xa3,0xed,0xb7,0xf0,0xd5,0x57,0x93,0x55,0x67,0x5f,0x6a,0x46,
    0xf3,0x15,0x73,0xcf,0x3e,0x0b,0x57,0xb1,0x06,0xf8,0xa1,0x58,0xda,0xd3,0x73,0xb0,
    0xc0,0xfb,0x25,0x39,0x42,0x2e,0x7d,0x7f,0x17,0x96,0xf2,0x5e,0xc2,0xc9,0x10,0x53,
    0x33,0x1a,0xae,0xa2,0xa1,0x69,0x34,0x5c,0x03,0x0f,0x1a,0xae,0x83,0x05,0x0d,0x6d,
    0xa3,0x41,0x7d,0x2d,0x59,0x6d,0xea,0xb6,0x8c,0x86,0x4d,0x6a,0xa7,0x8c,0x86,0x9b,
    0xe0,0x41,0xc3,0x0b,0xb0,0xc0,0x53,0x0d,0x21,0x57,0xdb,0x68,0x38,0x82,0x53,0x27,
    0xa6,0x65,0x34,0xdc,0x42,0x43,0xc7,0x68,0xe8,0x82,0x07,0x0d,0xb7,0xc1,0x82,0x86,
    0x9e,0xd1,0xa0,0xbe,0x2d,0x59,0x3d,0xea,0xea,0xf7,0x23,0xea,0xde,0xa5,0xf6,0x91,
    0xb9,0x3b,0xda,0x63,0xe0,0xf6,0x4c,0x8f,0xaf,0xe0,0xb5,0x89,0xdb,0xa2,0x9f,0xbe,
    0xff,0xef,0x9d,0xdc,0x2d,0xb5,0xf5,0x1e,0x8d,0xb8,0x43,0x4f,0xa5,0x3f,0xbd,0x3f,
    0x0f,0xe1,0x8c,0xcc,0xb9,0x3c,0x40,0xd7,0xbe,0x39,0x97,0x87,0xe0,0xe1,0x3c,0x8f,
    0xa9,0xab,0xf8,0x33,0xc1,0xf4,0x4e,0x3d,0x26,0xdf,0xd8,0xcc,0xe2,0x09,0xb8,0xf3,
    0x7b,0x11,0xfb,0xff,0x0a,0xc5,0xfe,0x88,0xaa,0x4d,0x59,0x7f,0x01,0x7c,0x68,0x82,
    0xee,0x54,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
// }
