// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x93,0xdd,0x6e,0x92,0x41,
    0x10,0x86,0x17,0x28,0x7c,0x14,0x05,0x5a,0xa0,0x45,0x22,0xb5,0x58,0x48,0x6c,0xda,
    0x0a,0x8d,0x4a,0x2d,0x28,0xb4,0x18,0xdb,0x1a,0x53,0xa5,0xb5,0xc6,0x78,0x46,0x1a,
    0x4b,0x62,0x13,0x45,0x53,0x38,0xf0,0xc0,0x78,0xe0,0x3d,0xe8,0x4d,0x78,0x7d,0xc6,
    0x9f,0xc4,0xc4,0x99,0x8f,0x67,0x75,0xbe,0x64,0xd9,0x9d,0x77,0xde,0xf9,0x79,0x77,
    0x87,0x58,0xb4,0x1a,0x38,0x17,0x71,0x29,0x97,0x74,0xc7,0x6e,0xfa,0xcd,0xbb,0xa8,
    0x20,0xd3,0xfd,0x4b,0xde,0x89,0x6f,0xd6,0x9d,0x1c,0xbd,0x18,0xec,0xbd,0x7c,0x3e,
    0x18,0xbf,0x3e,0x3d,0x1b,0x5e,0x0c,0xc6,0x93,0xe1,0xe8,0xd5,0xf9,0x9b,0xc1,0xf0,
    0xc3,0xfb,0x77,0x17,0x13,0xe1,0x5e,0x72,0x89,0x30,0xe6,0xe0,0xf0,0xe4,0xb0,0x3e,
    0x9e,0x9c,0xd5,0xef,0x34,0x37,0x35,0x57,0xc6,0xc5,0xc2,0x9c,0xea,0xcb,0xba,0xc0,
    0xcd,0xc8,0xae,0xeb,0xed,0xe9,0xf9,0x48,0xf1,0xb4,0xac,0xae,0xac,0x39,0xe1,0x29,
    0x1e,0x68,0x0e,0x39,0xa5,0xc3,0x9c,0x1a,0xe3,0xdc,0x23,0x17,0x77,0x79,0x7a,0xab,
    0xb2,0x7b,0x2c,0x02,0x96,0x34,0x58,0x14,0x6c,0xce,0x60,0x31,0xb0,0x2b,0x06,0x9b,
    0x01,0x2b,0x1b,0x2c,0x0e,0x56,0x31,0x58,0x02,0xac,0x66,0xb0,0x00,0x6c,0xd5,0x60,
    0x49,0xb0,0x0d,0x83,0xcd,0x82,0x6d,0x86,0xba,0x62,0xff,0xfa,0x53,0x8d,0x5d,0x34,
    0x7e,0xcd,0x4f,0xed,0x9e,0x9c,0x57,0xd0,0xe7,0xed,0xeb,0x68,0xcc,0x4b,0x54,0x34,
    0xb4,0x63,0xa1,0x16,0x3d,0x2f,0x08,0x27,0x41,0xaf,0xca,0x29,0x8a,0x1d,0xd0,0xaf,
    0xfa,0x17,0x85,0x99,0xc2,0xaf,0x3e,0xad,0x95,0x42,0x77,0x45,0x7e,0x2f,0x13,0xa7,
    0xf8,0x3d,0xec,0xb4,0xc9,0x95,0x81,0xef,0x6b,0xe5,0xc8,0xa5,0xdf,0x35,0x61,0xfb,
    0x7b,0xc8,0xb0,0x12,0xac,0x14,0x7b,0xce,0x2c,0xad,0x57,0xe0,0x3e,0xf2,0xd4,0x2b,
    0x84,0x79,0xa7,0xd8,0x3a,0x5a,0x16,0xc9,0xaf,0xfc,0x22,0xbe,0xc0,0xf8,0xcb,0xd8,
    0xea,0x5f,0xc2,0xaf,0xf9,0x0b,0xd2,0x65,0x05,0x5e,0x8e,0x7b,0x73,0x26,0x6e,0x8d,
    0xf7,0xf1,0x76,0x93,0x58,0xcd,0xd3,0x61,0x3e,0x12,0xf4,0xd5,0x61,0x26,0x15,0x2b,
    0x09,0x6b,0x87,0x1a,0x11,0xf7,0xff,0x8b,0x18,0x5b,0x73,0xec,0x72,0xde,0x21,0x87,
    0xda,0x3d,0x30,0xbd,0xcb,0x87,0xe4,0xd0,0xbb,0xdf,0x92,0xd9,0x88,0x72,0x76,0xd4,
    0xf9,0x29,0x88,0xce,0x5e,0x87,0x77,0xca,0xf2,0x16,0x7d,0x51,0x9b,0x61,0x96,0xb3,
    0x2c,0x5f,0x7f,0xc4,0x7b,0xcf,0xe3,0xef,0x49,0x86,0x22,0x33,0xbe,0xc0,0x5d,0x76,
    0xe0,0x94,0xc0,0x3f,0x0b,0x47,0xed,0xab,0xc4,0x95,0x88,0x5b,0x0a,0xdf,0x74,0x1a,
    0x57,0x26,0x4e,0xfb,0x5d,0x06,0xff,0x26,0x9c,0x0a,0xf3,0xb9,0xcc,0xfd,0xfe,0x90,
    0xce,0x6b,0xf4,0xf3,0x5b,0xf8,0x2b,0xe6,0x7f,0xa2,0x7a,0xf4,0x7c,0x2c,0x71,0x7a,
    0xaf,0x37,0xa8,0xa9,0xdf,0x27,0xde,0x60,0x15,0xfc,0x99,0x58,0xda,0xd3,0x63,0x30,
    0xcf,0xfb,0x25,0x39,0x7c,0x2e,0xdd,0xbf,0x0b,0x4b,0x79,0x4f,0xe1,0xc4,0x89,0xa9,
    0x1a,0x0d,0xeb,0x68,0x58,0x33,0x1a,0x36,0xc0,0xbd,0x86,0x9b,0x60,0x5e,0x43,0xc3,
    0x68,0x50,0x5f,0x5d,0x56,0x83,0xba,0x75,0xa3,0xe1,0x16,0xb5,0x23,0x46,0xc3,0x6d,
    0x70,0xaf,0xe1,0x09,0x98,0xe7,0xa9,0x06,0x9f,0xab,0x61,0x34,0xf4,0xe1,0xd4,0x88,
    0xa9,0x1b,0x0d,0x5b,0x68,0x68,0x1a,0x0d,0x77,0xc1,0xbd,0x86,0x6d,0x30,0xaf,0xa1,
    0x6d,0x34,0xa8,0xaf,0x25,0xab,0x4d,0xdd,0x16,0x73,0xa4,0x75,0xef,0x53,0xbb,0x6f,
    0xe6,0x57,0x7b,0xf4,0xdc,0xb6,0xe9,0xf1,0x08,0x5e,0x83,0xb8,0x16,0xfd,0xe8,0x8c,
    0x3f,0x60,0xbe,0x07,0xc2,0xd4,0xd9,0xde,0x03,0xd3,0x98,0x5d,0x66,0x4f,0xef,0x4d,
    0x7b,0xdf,0xc7,0xaf,0xdf,0x47,0xee,0xed,0x00,0xbc,0x2b,0xbd,0x77,0xb1,0xff,0x48,
    0x47,0xdb,0xb2,0xfe,0x02,0x8b,0x26,0x6a,0x3a,0x94,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
