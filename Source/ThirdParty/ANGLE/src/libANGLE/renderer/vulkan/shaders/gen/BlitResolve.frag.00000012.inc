// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x52,0xdb,0x6e,0x12,0x51,
    0x14,0xdd,0xcc,0x14,0x06,0x54,0x5a,0x08,0x02,0xd6,0x18,0x8b,0xe2,0x83,0x89,0xb6,
    0xe9,0x83,0x1a,0x12,0xa3,0xd1,0x07,0xb0,0x35,0x68,0x55,0x7a,0xf1,0xd6,0x8c,0xa5,
    0x40,0x4a,0x68,0x41,0x81,0x18,0xb5,0xea,0x83,0xff,0xa0,0x3f,0xe1,0xf7,0x19,0x2f,
    0x89,0x89,0x7b,0xcd,0xac,0x83,0x7b,0x92,0x33,0xe7,0xec,0xb5,0xd7,0xbe,0xac,0x7d,
    0x8e,0xef,0x55,0x03,0x91,0x84,0x9c,0x90,0xb4,0x7c,0x92,0xf8,0xcb,0x8b,0xa7,0x48,
    0xbc,0x7f,0x2d,0x88,0xfa,0x32,0xd2,0x7a,0xb4,0x1d,0xd6,0x9f,0x6e,0x86,0x93,0x83,
    0xbd,0x4e,0x77,0x1c,0x4e,0xa6,0xdd,0xe1,0x7e,0xff,0x30,0xec,0xbe,0x7b,0x3d,0x1a,
    0x4f,0x95,0x7b,0x52,0x52,0x51,0xcc,0xbd,0x66,0xab,0xb9,0x32,0x99,0x76,0x56,0xae,
    0x5d,0x5f,0x45,0xae,0x79,0xf1,0xa3,0x9c,0xf0,0x2d,0x48,0x20,0x73,0xba,0x63,0x1d,
    0xed,0xf5,0x87,0xc0,0x73,0xba,0x1a,0xd1,0xee,0x47,0x78,0x80,0x1c,0x7a,0xca,0x45,
    0x39,0x11,0x23,0xb2,0x26,0x49,0x29,0xb1,0xb7,0x2a,0x77,0x87,0x25,0x88,0xa5,0x0d,
    0xe6,0x11,0xcb,0x19,0xcc,0x27,0x76,0xc6,0x60,0x73,0xc4,0xce,0x19,0x2c,0x49,0xac,
    0x62,0xb0,0x14,0xb1,0x4b,0x06,0x0b,0x88,0x5d,0x36,0x58,0x9a,0xd8,0x55,0x83,0x65,
    0x88,0xad,0x46,0xba,0xfc,0x59,0x7f,0xd0,0xd8,0xa0,0xc6,0x6f,0x85,0xd8,0x5e,0xd7,
    0xf3,0x45,0xea,0x73,0xf6,0x05,0x6a,0x2c,0x68,0x94,0x17,0xd9,0x7e,0xa4,0x05,0xe7,
    0xa2,0x72,0x52,0xec,0x15,0x9c,0xb2,0xda,0x01,0xfb,0x85,0xbf,0xa4,0xcc,0x2c,0xfd,
    0xf0,0xcd,0xeb,0x9e,0xa5,0xee,0x8a,0xfe,0x17,0x18,0x07,0xfc,0x26,0xed,0x9c,0xc9,
    0x95,0x27,0xdf,0xd5,0x2a,0x32,0x17,0xbe,0xf3,0x72,0x6a,0x36,0x87,0x3c,0x57,0x8a,
    0x2b,0xcb,0xbd,0x68,0x16,0xea,0x95,0x39,0x8f,0x12,0xeb,0x95,0x79,0x1f,0xc0,0xae,
    0x50,0xcb,0x22,0xf3,0x83,0x7f,0x96,0xbe,0xc0,0xf8,0x97,0x68,0xc3,0x5f,0xa1,0x1f,
    0xf9,0x4f,0x6b,0x97,0x55,0xf2,0x8a,0xbc,0x2b,0x31,0x71,0xcb,0xbc,0x1f,0x67,0xd7,
    0x18,0x8b,0x3c,0x75,0xbe,0x8f,0x14,0xfb,0xaa,0xf3,0x4d,0xfa,0x51,0x3f,0x19,0xbd,
    0x8b,0xb8,0x46,0x42,0xfe,0x7f,0x09,0x63,0x23,0xc7,0xda,0xec,0xde,0xe2,0x1c,0xb0,
    0xd7,0x89,0x61,0x96,0x4d,0xe6,0xc0,0xec,0x6f,0xe8,0xdb,0xf0,0x78,0x16,0xd6,0xf9,
    0xa5,0x08,0xde,0xde,0x2d,0xde,0x53,0x8b,0x77,0xb1,0xa1,0x6a,0x31,0xdb,0x4d,0x62,
    0x2d,0x53,0x7f,0xc8,0xfb,0xde,0xa2,0xff,0xae,0x66,0xc0,0xcc,0xb6,0x39,0xd7,0x45,
    0xe6,0x03,0x67,0x87,0xf8,0x17,0xe5,0xc0,0x7e,0xc6,0xb8,0x1d,0xc6,0x61,0x96,0xcf,
    0x19,0xb7,0xc4,0x38,0xf4,0xfb,0x82,0xf8,0x77,0xe5,0x60,0xbe,0x2f,0x89,0x61,0xbe,
    0x3f,0xb5,0xf3,0x36,0xfb,0xf9,0xa3,0x7c,0xf8,0x76,0x75,0xb5,0xa9,0x07,0xe7,0xc7,
    0x1a,0x87,0xb9,0x86,0xac,0x89,0xef,0x33,0xef,0xe0,0x15,0xf1,0x27,0x6a,0xa1,0xa7,
    0xb7,0xc4,0x1c,0xef,0xb7,0xe6,0x70,0xb9,0xb0,0xff,0x50,0x16,0x78,0x1f,0xc8,0x49,
    0x32,0x66,0xd7,0x68,0xd8,0xa7,0x86,0x65,0xa3,0xa1,0x43,0xdc,0x69,0xe8,0x12,0x73,
    0x1a,0x06,0x46,0x03,0x7c,0x3d,0x5d,0x03,0xd6,0xed,0x19,0x0d,0x07,0xac,0x9d,0x30,
    0x1a,0xfa,0xc4,0x9d,0x86,0xf7,0xc4,0x1c,0x0f,0x1a,0x5c,0xae,0x81,0xd1,0x70,0x4c,
    0x4e,0x9b,0x31,0x3d,0xa3,0xe1,0x90,0x1a,0x6a,0x46,0xc3,0x11,0x71,0xa7,0x61,0x48,
    0xcc,0x69,0x18,0x1b,0x0d,0xf0,0x8d,0x74,0x8d,0x59,0x77,0xc4,0x77,0x84,0xba,0x6f,
    0x58,0xfb,0xd8,0xbc,0x5f,0xf4,0xe8,0xb8,0x63,0xd3,0xe3,0x47,0xf2,0x06,0x8c,0x1b,
    0xb1,0x1f,0xbc,0xf1,0xfb,0x7c,0xdf,0xa1,0x32,0xf1,0xb6,0x1f,0x10,0x43,0xcc,0x1d,
    0xbe,0x3d,0xcc,0x0d,0xbd,0x3f,0xa4,0x5f,0x22,0x7f,0x3c,0xb7,0x0d,0xe2,0xb7,0xb5,
    0xf7,0x06,0xed,0xbf,0xda,0x51,0x4d,0xd7,0x3f,0x2c,0xe3,0xe1,0x28,0x94,0x06,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
