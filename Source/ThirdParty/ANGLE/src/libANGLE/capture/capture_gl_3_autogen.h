// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gl_3_autogen.h:
//   Capture functions for the OpenGL ES Desktop GL 3.x entry points.

#ifndef LIBANGLE_CAPTURE_GL_3_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GL_3_AUTOGEN_H_

#include "common/PackedEnums.h"
#include "libANGLE/capture/FrameCapture.h"

namespace gl
{

// Method Captures

// GL 3.0
angle::CallCapture CaptureBeginConditionalRender(const State &glState,
                                                 bool isCallValid,
                                                 GLuint id,
                                                 GLenum mode);
angle::CallCapture CaptureBindFragDataLocation(const State &glState,
                                               bool isCallValid,
                                               ShaderProgramID programPacked,
                                               GLuint color,
                                               const GLchar *name);
angle::CallCapture CaptureClampColor(const State &glState,
                                     bool isCallValid,
                                     GLenum target,
                                     GLenum clamp);
angle::CallCapture CaptureEndConditionalRender(const State &glState, bool isCallValid);
angle::CallCapture CaptureFramebufferTexture1D(const State &glState,
                                               bool isCallValid,
                                               GLenum target,
                                               GLenum attachment,
                                               TextureTarget textargetPacked,
                                               TextureID texturePacked,
                                               GLint level);
angle::CallCapture CaptureFramebufferTexture3D(const State &glState,
                                               bool isCallValid,
                                               GLenum target,
                                               GLenum attachment,
                                               TextureTarget textargetPacked,
                                               TextureID texturePacked,
                                               GLint level,
                                               GLint zoffset);
angle::CallCapture CaptureVertexAttribI1i(const State &glState,
                                          bool isCallValid,
                                          GLuint index,
                                          GLint x);
angle::CallCapture CaptureVertexAttribI1iv(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           const GLint *v);
angle::CallCapture CaptureVertexAttribI1ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLuint x);
angle::CallCapture CaptureVertexAttribI1uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            const GLuint *v);
angle::CallCapture CaptureVertexAttribI2i(const State &glState,
                                          bool isCallValid,
                                          GLuint index,
                                          GLint x,
                                          GLint y);
angle::CallCapture CaptureVertexAttribI2iv(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           const GLint *v);
angle::CallCapture CaptureVertexAttribI2ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLuint x,
                                           GLuint y);
angle::CallCapture CaptureVertexAttribI2uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            const GLuint *v);
angle::CallCapture CaptureVertexAttribI3i(const State &glState,
                                          bool isCallValid,
                                          GLuint index,
                                          GLint x,
                                          GLint y,
                                          GLint z);
angle::CallCapture CaptureVertexAttribI3iv(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           const GLint *v);
angle::CallCapture CaptureVertexAttribI3ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLuint x,
                                           GLuint y,
                                           GLuint z);
angle::CallCapture CaptureVertexAttribI3uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            const GLuint *v);
angle::CallCapture CaptureVertexAttribI4bv(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           const GLbyte *v);
angle::CallCapture CaptureVertexAttribI4sv(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           const GLshort *v);
angle::CallCapture CaptureVertexAttribI4ubv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            const GLubyte *v);
angle::CallCapture CaptureVertexAttribI4usv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            const GLushort *v);

// GL 3.1
angle::CallCapture CaptureGetActiveUniformName(const State &glState,
                                               bool isCallValid,
                                               ShaderProgramID programPacked,
                                               GLuint uniformIndex,
                                               GLsizei bufSize,
                                               GLsizei *length,
                                               GLchar *uniformName);
angle::CallCapture CapturePrimitiveRestartIndex(const State &glState,
                                                bool isCallValid,
                                                GLuint index);

// GL 3.2
angle::CallCapture CaptureMultiDrawElementsBaseVertex(const State &glState,
                                                      bool isCallValid,
                                                      PrimitiveMode modePacked,
                                                      const GLsizei *count,
                                                      DrawElementsType typePacked,
                                                      const void *const *indices,
                                                      GLsizei drawcount,
                                                      const GLint *basevertex);
angle::CallCapture CaptureProvokingVertex(const State &glState,
                                          bool isCallValid,
                                          ProvokingVertexConvention modePacked);
angle::CallCapture CaptureTexImage2DMultisample(const State &glState,
                                                bool isCallValid,
                                                GLenum target,
                                                GLsizei samples,
                                                GLenum internalformat,
                                                GLsizei width,
                                                GLsizei height,
                                                GLboolean fixedsamplelocations);
angle::CallCapture CaptureTexImage3DMultisample(const State &glState,
                                                bool isCallValid,
                                                GLenum target,
                                                GLsizei samples,
                                                GLenum internalformat,
                                                GLsizei width,
                                                GLsizei height,
                                                GLsizei depth,
                                                GLboolean fixedsamplelocations);

// GL 3.3
angle::CallCapture CaptureBindFragDataLocationIndexed(const State &glState,
                                                      bool isCallValid,
                                                      ShaderProgramID programPacked,
                                                      GLuint colorNumber,
                                                      GLuint index,
                                                      const GLchar *name);
angle::CallCapture CaptureColorP3ui(const State &glState,
                                    bool isCallValid,
                                    GLenum type,
                                    GLuint color);
angle::CallCapture CaptureColorP3uiv(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     const GLuint *color);
angle::CallCapture CaptureColorP4ui(const State &glState,
                                    bool isCallValid,
                                    GLenum type,
                                    GLuint color);
angle::CallCapture CaptureColorP4uiv(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     const GLuint *color);
angle::CallCapture CaptureGetFragDataIndex(const State &glState,
                                           bool isCallValid,
                                           ShaderProgramID programPacked,
                                           const GLchar *name,
                                           GLint returnValue);
angle::CallCapture CaptureGetQueryObjecti64v(const State &glState,
                                             bool isCallValid,
                                             QueryID idPacked,
                                             GLenum pname,
                                             GLint64 *params);
angle::CallCapture CaptureGetQueryObjectui64v(const State &glState,
                                              bool isCallValid,
                                              QueryID idPacked,
                                              GLenum pname,
                                              GLuint64 *params);
angle::CallCapture CaptureMultiTexCoordP1ui(const State &glState,
                                            bool isCallValid,
                                            GLenum texture,
                                            GLenum type,
                                            GLuint coords);
angle::CallCapture CaptureMultiTexCoordP1uiv(const State &glState,
                                             bool isCallValid,
                                             GLenum texture,
                                             GLenum type,
                                             const GLuint *coords);
angle::CallCapture CaptureMultiTexCoordP2ui(const State &glState,
                                            bool isCallValid,
                                            GLenum texture,
                                            GLenum type,
                                            GLuint coords);
angle::CallCapture CaptureMultiTexCoordP2uiv(const State &glState,
                                             bool isCallValid,
                                             GLenum texture,
                                             GLenum type,
                                             const GLuint *coords);
angle::CallCapture CaptureMultiTexCoordP3ui(const State &glState,
                                            bool isCallValid,
                                            GLenum texture,
                                            GLenum type,
                                            GLuint coords);
angle::CallCapture CaptureMultiTexCoordP3uiv(const State &glState,
                                             bool isCallValid,
                                             GLenum texture,
                                             GLenum type,
                                             const GLuint *coords);
angle::CallCapture CaptureMultiTexCoordP4ui(const State &glState,
                                            bool isCallValid,
                                            GLenum texture,
                                            GLenum type,
                                            GLuint coords);
angle::CallCapture CaptureMultiTexCoordP4uiv(const State &glState,
                                             bool isCallValid,
                                             GLenum texture,
                                             GLenum type,
                                             const GLuint *coords);
angle::CallCapture CaptureNormalP3ui(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     GLuint coords);
angle::CallCapture CaptureNormalP3uiv(const State &glState,
                                      bool isCallValid,
                                      GLenum type,
                                      const GLuint *coords);
angle::CallCapture CaptureQueryCounter(const State &glState,
                                       bool isCallValid,
                                       QueryID idPacked,
                                       QueryType targetPacked);
angle::CallCapture CaptureSecondaryColorP3ui(const State &glState,
                                             bool isCallValid,
                                             GLenum type,
                                             GLuint color);
angle::CallCapture CaptureSecondaryColorP3uiv(const State &glState,
                                              bool isCallValid,
                                              GLenum type,
                                              const GLuint *color);
angle::CallCapture CaptureTexCoordP1ui(const State &glState,
                                       bool isCallValid,
                                       GLenum type,
                                       GLuint coords);
angle::CallCapture CaptureTexCoordP1uiv(const State &glState,
                                        bool isCallValid,
                                        GLenum type,
                                        const GLuint *coords);
angle::CallCapture CaptureTexCoordP2ui(const State &glState,
                                       bool isCallValid,
                                       GLenum type,
                                       GLuint coords);
angle::CallCapture CaptureTexCoordP2uiv(const State &glState,
                                        bool isCallValid,
                                        GLenum type,
                                        const GLuint *coords);
angle::CallCapture CaptureTexCoordP3ui(const State &glState,
                                       bool isCallValid,
                                       GLenum type,
                                       GLuint coords);
angle::CallCapture CaptureTexCoordP3uiv(const State &glState,
                                        bool isCallValid,
                                        GLenum type,
                                        const GLuint *coords);
angle::CallCapture CaptureTexCoordP4ui(const State &glState,
                                       bool isCallValid,
                                       GLenum type,
                                       GLuint coords);
angle::CallCapture CaptureTexCoordP4uiv(const State &glState,
                                        bool isCallValid,
                                        GLenum type,
                                        const GLuint *coords);
angle::CallCapture CaptureVertexAttribP1ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLenum type,
                                           GLboolean normalized,
                                           GLuint value);
angle::CallCapture CaptureVertexAttribP1uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum type,
                                            GLboolean normalized,
                                            const GLuint *value);
angle::CallCapture CaptureVertexAttribP2ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLenum type,
                                           GLboolean normalized,
                                           GLuint value);
angle::CallCapture CaptureVertexAttribP2uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum type,
                                            GLboolean normalized,
                                            const GLuint *value);
angle::CallCapture CaptureVertexAttribP3ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLenum type,
                                           GLboolean normalized,
                                           GLuint value);
angle::CallCapture CaptureVertexAttribP3uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum type,
                                            GLboolean normalized,
                                            const GLuint *value);
angle::CallCapture CaptureVertexAttribP4ui(const State &glState,
                                           bool isCallValid,
                                           GLuint index,
                                           GLenum type,
                                           GLboolean normalized,
                                           GLuint value);
angle::CallCapture CaptureVertexAttribP4uiv(const State &glState,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum type,
                                            GLboolean normalized,
                                            const GLuint *value);
angle::CallCapture CaptureVertexP2ui(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     GLuint value);
angle::CallCapture CaptureVertexP2uiv(const State &glState,
                                      bool isCallValid,
                                      GLenum type,
                                      const GLuint *value);
angle::CallCapture CaptureVertexP3ui(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     GLuint value);
angle::CallCapture CaptureVertexP3uiv(const State &glState,
                                      bool isCallValid,
                                      GLenum type,
                                      const GLuint *value);
angle::CallCapture CaptureVertexP4ui(const State &glState,
                                     bool isCallValid,
                                     GLenum type,
                                     GLuint value);
angle::CallCapture CaptureVertexP4uiv(const State &glState,
                                      bool isCallValid,
                                      GLenum type,
                                      const GLuint *value);

// Parameter Captures

// GL 3.0
void CaptureBindFragDataLocation_name(const State &glState,
                                      bool isCallValid,
                                      ShaderProgramID programPacked,
                                      GLuint color,
                                      const GLchar *name,
                                      angle::ParamCapture *paramCapture);
void CaptureVertexAttribI1iv_v(const State &glState,
                               bool isCallValid,
                               GLuint index,
                               const GLint *v,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI1uiv_v(const State &glState,
                                bool isCallValid,
                                GLuint index,
                                const GLuint *v,
                                angle::ParamCapture *paramCapture);
void CaptureVertexAttribI2iv_v(const State &glState,
                               bool isCallValid,
                               GLuint index,
                               const GLint *v,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI2uiv_v(const State &glState,
                                bool isCallValid,
                                GLuint index,
                                const GLuint *v,
                                angle::ParamCapture *paramCapture);
void CaptureVertexAttribI3iv_v(const State &glState,
                               bool isCallValid,
                               GLuint index,
                               const GLint *v,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI3uiv_v(const State &glState,
                                bool isCallValid,
                                GLuint index,
                                const GLuint *v,
                                angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4bv_v(const State &glState,
                               bool isCallValid,
                               GLuint index,
                               const GLbyte *v,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4sv_v(const State &glState,
                               bool isCallValid,
                               GLuint index,
                               const GLshort *v,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4ubv_v(const State &glState,
                                bool isCallValid,
                                GLuint index,
                                const GLubyte *v,
                                angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4usv_v(const State &glState,
                                bool isCallValid,
                                GLuint index,
                                const GLushort *v,
                                angle::ParamCapture *paramCapture);

// GL 3.1
void CaptureGetActiveUniformName_length(const State &glState,
                                        bool isCallValid,
                                        ShaderProgramID programPacked,
                                        GLuint uniformIndex,
                                        GLsizei bufSize,
                                        GLsizei *length,
                                        GLchar *uniformName,
                                        angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformName_uniformName(const State &glState,
                                             bool isCallValid,
                                             ShaderProgramID programPacked,
                                             GLuint uniformIndex,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLchar *uniformName,
                                             angle::ParamCapture *paramCapture);

// GL 3.2
void CaptureMultiDrawElementsBaseVertex_count(const State &glState,
                                              bool isCallValid,
                                              PrimitiveMode modePacked,
                                              const GLsizei *count,
                                              DrawElementsType typePacked,
                                              const void *const *indices,
                                              GLsizei drawcount,
                                              const GLint *basevertex,
                                              angle::ParamCapture *paramCapture);
void CaptureMultiDrawElementsBaseVertex_indices(const State &glState,
                                                bool isCallValid,
                                                PrimitiveMode modePacked,
                                                const GLsizei *count,
                                                DrawElementsType typePacked,
                                                const void *const *indices,
                                                GLsizei drawcount,
                                                const GLint *basevertex,
                                                angle::ParamCapture *paramCapture);
void CaptureMultiDrawElementsBaseVertex_basevertex(const State &glState,
                                                   bool isCallValid,
                                                   PrimitiveMode modePacked,
                                                   const GLsizei *count,
                                                   DrawElementsType typePacked,
                                                   const void *const *indices,
                                                   GLsizei drawcount,
                                                   const GLint *basevertex,
                                                   angle::ParamCapture *paramCapture);

// GL 3.3
void CaptureBindFragDataLocationIndexed_name(const State &glState,
                                             bool isCallValid,
                                             ShaderProgramID programPacked,
                                             GLuint colorNumber,
                                             GLuint index,
                                             const GLchar *name,
                                             angle::ParamCapture *paramCapture);
void CaptureColorP3uiv_color(const State &glState,
                             bool isCallValid,
                             GLenum type,
                             const GLuint *color,
                             angle::ParamCapture *paramCapture);
void CaptureColorP4uiv_color(const State &glState,
                             bool isCallValid,
                             GLenum type,
                             const GLuint *color,
                             angle::ParamCapture *paramCapture);
void CaptureGetFragDataIndex_name(const State &glState,
                                  bool isCallValid,
                                  ShaderProgramID programPacked,
                                  const GLchar *name,
                                  angle::ParamCapture *paramCapture);
void CaptureGetQueryObjecti64v_params(const State &glState,
                                      bool isCallValid,
                                      QueryID idPacked,
                                      GLenum pname,
                                      GLint64 *params,
                                      angle::ParamCapture *paramCapture);
void CaptureGetQueryObjectui64v_params(const State &glState,
                                       bool isCallValid,
                                       QueryID idPacked,
                                       GLenum pname,
                                       GLuint64 *params,
                                       angle::ParamCapture *paramCapture);
void CaptureMultiTexCoordP1uiv_coords(const State &glState,
                                      bool isCallValid,
                                      GLenum texture,
                                      GLenum type,
                                      const GLuint *coords,
                                      angle::ParamCapture *paramCapture);
void CaptureMultiTexCoordP2uiv_coords(const State &glState,
                                      bool isCallValid,
                                      GLenum texture,
                                      GLenum type,
                                      const GLuint *coords,
                                      angle::ParamCapture *paramCapture);
void CaptureMultiTexCoordP3uiv_coords(const State &glState,
                                      bool isCallValid,
                                      GLenum texture,
                                      GLenum type,
                                      const GLuint *coords,
                                      angle::ParamCapture *paramCapture);
void CaptureMultiTexCoordP4uiv_coords(const State &glState,
                                      bool isCallValid,
                                      GLenum texture,
                                      GLenum type,
                                      const GLuint *coords,
                                      angle::ParamCapture *paramCapture);
void CaptureNormalP3uiv_coords(const State &glState,
                               bool isCallValid,
                               GLenum type,
                               const GLuint *coords,
                               angle::ParamCapture *paramCapture);
void CaptureSecondaryColorP3uiv_color(const State &glState,
                                      bool isCallValid,
                                      GLenum type,
                                      const GLuint *color,
                                      angle::ParamCapture *paramCapture);
void CaptureTexCoordP1uiv_coords(const State &glState,
                                 bool isCallValid,
                                 GLenum type,
                                 const GLuint *coords,
                                 angle::ParamCapture *paramCapture);
void CaptureTexCoordP2uiv_coords(const State &glState,
                                 bool isCallValid,
                                 GLenum type,
                                 const GLuint *coords,
                                 angle::ParamCapture *paramCapture);
void CaptureTexCoordP3uiv_coords(const State &glState,
                                 bool isCallValid,
                                 GLenum type,
                                 const GLuint *coords,
                                 angle::ParamCapture *paramCapture);
void CaptureTexCoordP4uiv_coords(const State &glState,
                                 bool isCallValid,
                                 GLenum type,
                                 const GLuint *coords,
                                 angle::ParamCapture *paramCapture);
void CaptureVertexAttribP1uiv_value(const State &glState,
                                    bool isCallValid,
                                    GLuint index,
                                    GLenum type,
                                    GLboolean normalized,
                                    const GLuint *value,
                                    angle::ParamCapture *paramCapture);
void CaptureVertexAttribP2uiv_value(const State &glState,
                                    bool isCallValid,
                                    GLuint index,
                                    GLenum type,
                                    GLboolean normalized,
                                    const GLuint *value,
                                    angle::ParamCapture *paramCapture);
void CaptureVertexAttribP3uiv_value(const State &glState,
                                    bool isCallValid,
                                    GLuint index,
                                    GLenum type,
                                    GLboolean normalized,
                                    const GLuint *value,
                                    angle::ParamCapture *paramCapture);
void CaptureVertexAttribP4uiv_value(const State &glState,
                                    bool isCallValid,
                                    GLuint index,
                                    GLenum type,
                                    GLboolean normalized,
                                    const GLuint *value,
                                    angle::ParamCapture *paramCapture);
void CaptureVertexP2uiv_value(const State &glState,
                              bool isCallValid,
                              GLenum type,
                              const GLuint *value,
                              angle::ParamCapture *paramCapture);
void CaptureVertexP3uiv_value(const State &glState,
                              bool isCallValid,
                              GLenum type,
                              const GLuint *value,
                              angle::ParamCapture *paramCapture);
void CaptureVertexP4uiv_value(const State &glState,
                              bool isCallValid,
                              GLenum type,
                              const GLuint *value,
                              angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GL_3_AUTOGEN_H_
