// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gl_3_autogen.h:
//   Defines the Desktop GL 3.x entry points.

#ifndef LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_
#define LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_

#include <export.h>
#include "angle_gl.h"

extern "C" {

// GL 3.0
ANGLE_EXPORT void GL_APIENTRY GL_BeginConditionalRender(GLuint id, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY GL_BeginTransformFeedback(GLenum primitiveMode);
ANGLE_EXPORT void GL_APIENTRY GL_BindBufferBase(GLenum target, GLuint index, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY
GL_BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY GL_BindFragDataLocation(GLuint program,
                                                      GLuint color,
                                                      const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_BindFramebuffer(GLenum target, GLuint framebuffer);
ANGLE_EXPORT void GL_APIENTRY GL_BindRenderbuffer(GLenum target, GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY GL_BindVertexArray(GLuint array);
ANGLE_EXPORT void GL_APIENTRY GL_BlitFramebuffer(GLint srcX0,
                                                 GLint srcY0,
                                                 GLint srcX1,
                                                 GLint srcY1,
                                                 GLint dstX0,
                                                 GLint dstY0,
                                                 GLint dstX1,
                                                 GLint dstY1,
                                                 GLbitfield mask,
                                                 GLenum filter);
ANGLE_EXPORT GLenum GL_APIENTRY GL_CheckFramebufferStatus(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_ClampColor(GLenum target, GLenum clamp);
ANGLE_EXPORT void GL_APIENTRY GL_ClearBufferfi(GLenum buffer,
                                               GLint drawbuffer,
                                               GLfloat depth,
                                               GLint stencil);
ANGLE_EXPORT void GL_APIENTRY GL_ClearBufferfv(GLenum buffer,
                                               GLint drawbuffer,
                                               const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY GL_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY GL_ClearBufferuiv(GLenum buffer,
                                                GLint drawbuffer,
                                                const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
GL_ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteVertexArrays(GLsizei n, const GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY GL_Disablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_Enablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_EndConditionalRender();
ANGLE_EXPORT void GL_APIENTRY GL_EndTransformFeedback();
ANGLE_EXPORT void GL_APIENTRY GL_FlushMappedBufferRange(GLenum target,
                                                        GLintptr offset,
                                                        GLsizeiptr length);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferRenderbuffer(GLenum target,
                                                         GLenum attachment,
                                                         GLenum renderbuffertarget,
                                                         GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture1D(GLenum target,
                                                      GLenum attachment,
                                                      GLenum textarget,
                                                      GLuint texture,
                                                      GLint level);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture2D(GLenum target,
                                                      GLenum attachment,
                                                      GLenum textarget,
                                                      GLuint texture,
                                                      GLint level);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture3D(GLenum target,
                                                      GLenum attachment,
                                                      GLenum textarget,
                                                      GLuint texture,
                                                      GLint level,
                                                      GLint zoffset);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTextureLayer(GLenum target,
                                                         GLenum attachment,
                                                         GLuint texture,
                                                         GLint level,
                                                         GLint layer);
ANGLE_EXPORT void GL_APIENTRY GL_GenFramebuffers(GLsizei n, GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY GL_GenRenderbuffers(GLsizei n, GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY GL_GenVertexArrays(GLsizei n, GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY GL_GenerateMipmap(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_GetBooleani_v(GLenum target, GLuint index, GLboolean *data);
ANGLE_EXPORT GLint GL_APIENTRY GL_GetFragDataLocation(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_GetFramebufferAttachmentParameteriv(GLenum target,
                                                                     GLenum attachment,
                                                                     GLenum pname,
                                                                     GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetIntegeri_v(GLenum target, GLuint index, GLint *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetRenderbufferParameteriv(GLenum target,
                                                            GLenum pname,
                                                            GLint *params);
ANGLE_EXPORT const GLubyte *GL_APIENTRY GL_GetStringi(GLenum name, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetTransformFeedbackVarying(GLuint program,
                                                             GLuint index,
                                                             GLsizei bufSize,
                                                             GLsizei *length,
                                                             GLsizei *size,
                                                             GLenum *type,
                                                             GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_GetUniformuiv(GLuint program, GLint location, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsEnabledi(GLenum target, GLuint index);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsFramebuffer(GLuint framebuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsRenderbuffer(GLuint renderbuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsVertexArray(GLuint array);
ANGLE_EXPORT void *GL_APIENTRY GL_MapBufferRange(GLenum target,
                                                 GLintptr offset,
                                                 GLsizeiptr length,
                                                 GLbitfield access);
ANGLE_EXPORT void GL_APIENTRY GL_RenderbufferStorage(GLenum target,
                                                     GLenum internalformat,
                                                     GLsizei width,
                                                     GLsizei height);
ANGLE_EXPORT void GL_APIENTRY GL_RenderbufferStorageMultisample(GLenum target,
                                                                GLsizei samples,
                                                                GLenum internalformat,
                                                                GLsizei width,
                                                                GLsizei height);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TexParameterIuiv(GLenum target,
                                                  GLenum pname,
                                                  const GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_TransformFeedbackVaryings(GLuint program,
                                                           GLsizei count,
                                                           const GLchar *const *varyings,
                                                           GLenum bufferMode);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform1ui(GLint location, GLuint v0);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform1uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform2ui(GLint location, GLuint v0, GLuint v1);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform2uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform3uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
GL_Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
ANGLE_EXPORT void GL_APIENTRY GL_Uniform4uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI1i(GLuint index, GLint x);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI1iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI1ui(GLuint index, GLuint x);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI1uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI2i(GLuint index, GLint x, GLint y);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI2iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI2ui(GLuint index, GLuint x, GLuint y);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI2uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI3iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI3uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4bv(GLuint index, const GLbyte *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4sv(GLuint index, const GLshort *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4ubv(GLuint index, const GLubyte *v);
ANGLE_EXPORT void GL_APIENTRY
GL_VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribI4usv(GLuint index, const GLushort *v);
ANGLE_EXPORT void GL_APIENTRY
GL_VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);

// GL 3.1
ANGLE_EXPORT void GL_APIENTRY GL_CopyBufferSubData(GLenum readTarget,
                                                   GLenum writeTarget,
                                                   GLintptr readOffset,
                                                   GLintptr writeOffset,
                                                   GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY GL_DrawArraysInstanced(GLenum mode,
                                                     GLint first,
                                                     GLsizei count,
                                                     GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstanced(GLenum mode,
                                                       GLsizei count,
                                                       GLenum type,
                                                       const void *indices,
                                                       GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY GL_GetActiveUniformBlockName(GLuint program,
                                                           GLuint uniformBlockIndex,
                                                           GLsizei bufSize,
                                                           GLsizei *length,
                                                           GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY GL_GetActiveUniformBlockiv(GLuint program,
                                                         GLuint uniformBlockIndex,
                                                         GLenum pname,
                                                         GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetActiveUniformName(GLuint program,
                                                      GLuint uniformIndex,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLchar *uniformName);
ANGLE_EXPORT void GL_APIENTRY GL_GetActiveUniformsiv(GLuint program,
                                                     GLsizei uniformCount,
                                                     const GLuint *uniformIndices,
                                                     GLenum pname,
                                                     GLint *params);
ANGLE_EXPORT GLuint GL_APIENTRY GL_GetUniformBlockIndex(GLuint program,
                                                        const GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY GL_GetUniformIndices(GLuint program,
                                                   GLsizei uniformCount,
                                                   const GLchar *const *uniformNames,
                                                   GLuint *uniformIndices);
ANGLE_EXPORT void GL_APIENTRY GL_PrimitiveRestartIndex(GLuint index);
ANGLE_EXPORT void GL_APIENTRY GL_TexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY GL_UniformBlockBinding(GLuint program,
                                                     GLuint uniformBlockIndex,
                                                     GLuint uniformBlockBinding);

// GL 3.2
ANGLE_EXPORT GLenum GL_APIENTRY GL_ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteSync(GLsync sync);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsBaseVertex(GLenum mode,
                                                        GLsizei count,
                                                        GLenum type,
                                                        const void *indices,
                                                        GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawElementsInstancedBaseVertex(GLenum mode,
                                                                 GLsizei count,
                                                                 GLenum type,
                                                                 const void *indices,
                                                                 GLsizei instancecount,
                                                                 GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_DrawRangeElementsBaseVertex(GLenum mode,
                                                             GLuint start,
                                                             GLuint end,
                                                             GLsizei count,
                                                             GLenum type,
                                                             const void *indices,
                                                             GLint basevertex);
ANGLE_EXPORT GLsync GL_APIENTRY GL_FenceSync(GLenum condition, GLbitfield flags);
ANGLE_EXPORT void GL_APIENTRY GL_FramebufferTexture(GLenum target,
                                                    GLenum attachment,
                                                    GLuint texture,
                                                    GLint level);
ANGLE_EXPORT void GL_APIENTRY GL_GetBufferParameteri64v(GLenum target,
                                                        GLenum pname,
                                                        GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetInteger64v(GLenum pname, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GL_GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
ANGLE_EXPORT void GL_APIENTRY
GL_GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsSync(GLsync sync);
ANGLE_EXPORT void GL_APIENTRY GL_MultiDrawElementsBaseVertex(GLenum mode,
                                                             const GLsizei *count,
                                                             GLenum type,
                                                             const void *const *indices,
                                                             GLsizei drawcount,
                                                             const GLint *basevertex);
ANGLE_EXPORT void GL_APIENTRY GL_ProvokingVertex(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY GL_SampleMaski(GLuint maskNumber, GLbitfield mask);
ANGLE_EXPORT void GL_APIENTRY GL_TexImage2DMultisample(GLenum target,
                                                       GLsizei samples,
                                                       GLenum internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLboolean fixedsamplelocations);
ANGLE_EXPORT void GL_APIENTRY GL_TexImage3DMultisample(GLenum target,
                                                       GLsizei samples,
                                                       GLenum internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       GLboolean fixedsamplelocations);
ANGLE_EXPORT void GL_APIENTRY GL_WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);

// GL 3.3
ANGLE_EXPORT void GL_APIENTRY GL_BindFragDataLocationIndexed(GLuint program,
                                                             GLuint colorNumber,
                                                             GLuint index,
                                                             const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_BindSampler(GLuint unit, GLuint sampler);
ANGLE_EXPORT void GL_APIENTRY GL_ColorP3ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY GL_ColorP3uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY GL_ColorP4ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY GL_ColorP4uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY GL_DeleteSamplers(GLsizei count, const GLuint *samplers);
ANGLE_EXPORT void GL_APIENTRY GL_GenSamplers(GLsizei count, GLuint *samplers);
ANGLE_EXPORT GLint GL_APIENTRY GL_GetFragDataIndex(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIiv(GLuint sampler,
                                                        GLenum pname,
                                                        GLint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterIuiv(GLuint sampler,
                                                         GLenum pname,
                                                         GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameterfv(GLuint sampler,
                                                       GLenum pname,
                                                       GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GL_GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY GL_IsSampler(GLuint sampler);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP1uiv(GLenum texture,
                                                    GLenum type,
                                                    const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP2uiv(GLenum texture,
                                                    GLenum type,
                                                    const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP3uiv(GLenum texture,
                                                    GLenum type,
                                                    const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_MultiTexCoordP4uiv(GLenum texture,
                                                    GLenum type,
                                                    const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_NormalP3ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_NormalP3uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_QueryCounter(GLuint id, GLenum target);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIiv(GLuint sampler,
                                                     GLenum pname,
                                                     const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterIuiv(GLuint sampler,
                                                      GLenum pname,
                                                      const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameterfv(GLuint sampler,
                                                    GLenum pname,
                                                    const GLfloat *param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY GL_SamplerParameteriv(GLuint sampler,
                                                    GLenum pname,
                                                    const GLint *param);
ANGLE_EXPORT void GL_APIENTRY GL_SecondaryColorP3ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY GL_SecondaryColorP3uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP1ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP1uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP2ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP2uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP3ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP3uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP4ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY GL_TexCoordP4uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribDivisor(GLuint index, GLuint divisor);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP1ui(GLuint index,
                                                  GLenum type,
                                                  GLboolean normalized,
                                                  GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP1uiv(GLuint index,
                                                   GLenum type,
                                                   GLboolean normalized,
                                                   const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP2ui(GLuint index,
                                                  GLenum type,
                                                  GLboolean normalized,
                                                  GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP2uiv(GLuint index,
                                                   GLenum type,
                                                   GLboolean normalized,
                                                   const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP3ui(GLuint index,
                                                  GLenum type,
                                                  GLboolean normalized,
                                                  GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP3uiv(GLuint index,
                                                   GLenum type,
                                                   GLboolean normalized,
                                                   const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP4ui(GLuint index,
                                                  GLenum type,
                                                  GLboolean normalized,
                                                  GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexAttribP4uiv(GLuint index,
                                                   GLenum type,
                                                   GLboolean normalized,
                                                   const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP2ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP2uiv(GLenum type, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP3ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP3uiv(GLenum type, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP4ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY GL_VertexP4uiv(GLenum type, const GLuint *value);
}  // extern "C"

#endif  // LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_
