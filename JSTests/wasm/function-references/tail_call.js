//@ runWebAssemblySuite("--useWebAssemblyTypedFunctionReferences=true", "--useWebAssemblyTailCalls=true", "--useWasmLLInt=true", "--forceAllFunctionsToUseSIMD=false")
//
// FIXME: The extra LLInt flag is needed because tail calls aren't supported in BBQ yet.
// We also disable the forceAllFunctionsToUseSIMD flag as it isn't compatible with tail calls either.

import * as assert from '../assert.js';
import { instantiate } from "../wabt-wrapper.js";

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

async function returnCallRef() {
  /*
  (module
    (elem declare funcref (ref.func 0))
    (func (export "g") (result i32) (i32.const 42))
    (func (export "f") (param (ref 0)) (result i32)
      (return_call_ref 0 (local.get 0))
      (i32.const 5))
  )
  */
  {
    let m = new WebAssembly.Instance(module(
      "\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x64\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x89\x80\x80\x80\x00\x02\x01\x67\x00\x00\x01\x66\x00\x01\x09\x87\x80\x80\x80\x00\x01\x07\x70\x01\xd2\x00\x0b\x0a\x97\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x2a\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x15\x00\x41\x05\x0b"
    ));
    assert.eq(m.exports.f(m.exports.g), 42);
  }

  // FIXME: blocked on https://bugs.webkit.org/show_bug.cgi?id=265262
  /*
  (module
    (func (result i32) (i32.const 42))
    (func (param) (result i32)
      (return_call 0)
      (i32.const 5))
    (func (export "main") (result i32)
      (call 1))
  )
  */
  //{
  //  let m = new WebAssembly.Instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x84\x80\x80\x80\x00\x03\x00\x00\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6d\x61\x69\x6e\x00\x02\x0a\x9e\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x41\x2a\x0b\x86\x80\x80\x80\x00\x00\x12\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x10\x01\x0b"));
  //  assert.eq(m.exports.main(), 42);
  //}

  // FIXME: blocked on https://bugs.webkit.org/show_bug.cgi?id=265262
  /*
  (module
    (elem declare funcref (ref.func 0))
    (func (result i32) (i32.const 42))
    (func (param (ref 0)) (result i32)
      (return_call_ref 0 (local.get 0))
      (i32.const 5))
    (func (export "main") (result i32)
      (call 1 (ref.func 0)))
  )
  */
  //{
  //  let m = new WebAssembly.Instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x64\x00\x01\x7f\x03\x84\x80\x80\x80\x00\x03\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6d\x61\x69\x6e\x00\x02\x09\x87\x80\x80\x80\x00\x01\x07\x70\x01\xd2\x00\x0b\x0a\xa2\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x41\x2a\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x15\x00\x41\x05\x0b\x86\x80\x80\x80\x00\x00\xd2\x00\x10\x01\x0b"));
  //  assert.eq(m.exports.main(), 42);
  //}

  // Ensure subtype checks are done for argument and result.
  /*
  (module
    (elem declare funcref (ref.func 0))
    (elem declare funcref (ref.func 1))
    (func)
    (func (param funcref) (result (ref null 0)) (ref.null 0))
    (func (param (ref 1)) (result funcref)
      (return_call_ref 1 (ref.null 0) (local.get 0)))
    (func (export "main") (result funcref)
      (call 2 (ref.func 1)))
  )
  */
  module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x70\x01\x63\x00\x60\x01\x64\x01\x01\x70\x60\x00\x01\x70\x03\x85\x80\x80\x80\x00\x04\x00\x01\x02\x03\x07\x88\x80\x80\x80\x00\x01\x04\x6d\x61\x69\x6e\x00\x03\x09\x8d\x80\x80\x80\x00\x02\x07\x70\x01\xd2\x00\x0b\x07\x70\x01\xd2\x01\x0b\x0a\xa9\x80\x80\x80\x00\x04\x82\x80\x80\x80\x00\x00\x0b\x84\x80\x80\x80\x00\x00\xd0\x00\x0b\x88\x80\x80\x80\x00\x00\xd0\x00\x20\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x10\x02\x0b");

  // Return count mismatch.
  /*
  (module
    (elem declare funcref (ref.func 0))
    (func (result i32) (i32.const 42))
    (func (param (ref 0)) (result i32 i32)
      (return_call_ref 0 (local.get 0)))
  )
  */
  assert.throws(
    () => module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x64\x00\x02\x7f\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x09\x87\x80\x80\x80\x00\x01\x07\x70\x01\xd2\x00\x0b\x0a\x95\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x2a\x0b\x86\x80\x80\x80\x00\x00\x20\x00\x15\x00\x0b"),
    WebAssembly.CompileError,
    "WebAssembly.Module doesn't parse at byte 5: tail call function index 0 with return count 1, but the caller's signature has 2 return values, in function at index 1"
  );

  // Return type mismatch.
  /*
  (module
    (elem declare funcref (ref.func 0))
    (func (result i32) (i32.const 42))
    (func (param (ref 0)) (result f32)
      (return_call_ref 0 (local.get 0))
      (f32.const 5))
    (func (export "main") (result f32)
      (call 1 (ref.func 0)))
  )
  */
  assert.throws(
    () => module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x64\x00\x01\x7d\x60\x00\x01\x7d\x03\x84\x80\x80\x80\x00\x03\x00\x01\x02\x07\x88\x80\x80\x80\x00\x01\x04\x6d\x61\x69\x6e\x00\x02\x09\x87\x80\x80\x80\x00\x01\x07\x70\x01\xd2\x00\x0b\x0a\xa5\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x41\x2a\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x15\x00\x43\x00\x00\xa0\x40\x0b\x86\x80\x80\x80\x00\x00\xd2\x00\x10\x01\x0b"),
    WebAssembly.CompileError,
    "WebAssembly.Module doesn't validate: tail call function index 0 return type mismatch: expected F32, got I32, in function at index 1"
  );
}

assert.asyncTest(returnCallRef());
