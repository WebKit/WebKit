//@ skip unless $isSIMDPlatform
//@ runWebAssemblySuite("--useWebAssemblyTypedFunctionReferences=true", "--useWebAssemblyGC=true")

import * as assert from "../assert.js";

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

// (module
//   (type $0
//     (sub (struct (field f64) (field (ref null func)) (field i64) (field i64)))
//   )
//   (type $1 (sub (func (param i32 i32 i32) (result i32))))
//   (type $2 (func))
//   (type $3
//     (sub
//       (func
//         (param (ref 1))
//         (result
//           (ref 0)
//           (ref 0)
//           f32
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           i64
//         )
//       )
//     )
//   )
//   (type $4
//     (sub
//       (func
//         (param
//           (ref 0)
//           (ref 0)
//           f32
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           (ref 0)
//           i64
//         )
//         (result i32)
//       )
//     )
//   )
//   (table $0 1 8 funcref (ref.null func))
//   (memory $0 16 32)
//   (func $0
//     (type 1)
//     (ref.func 0)
//     (i32.const 84)
//     (i8x16.splat)
//     (i32.const 98)
//     (i8x16.shr_u)
//     (i32x4.extadd_pairwise_i16x8_s)
//     (i32x4.extadd_pairwise_i16x8_s)
//     (i32x4.extadd_pairwise_i16x8_s)
//     (i32x4.extadd_pairwise_i16x8_s)
//     (i64x2.all_true)
//     (if
//       (type 3)
//       (then
//         (drop)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f32.const 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (block
//           (result (ref 0))
//           (f64.const 0)
//           (ref.null func)
//           (i64.const 0)
//           (i64.const 0)
//           (struct.new 0)
//         )
//         (i32.const 1_650_614_882)
//         (i8x16.splat)
//         (i32x4.extadd_pairwise_i16x8_s)
//         (i32.const 6_447_714)
//         (i8x16.splat)
//         (i64x2.all_true)
//         (i8x16.shr_u)
//         (i64x2.extract_lane 0)
//       )
//       (else
//         (drop)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f32.const 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (f64.const 0)
//         (ref.null func)
//         (i64.const 0)
//         (i64.const 0)
//         (struct.new 0)
//         (i64.const 0)
//       )
//     )
//     (block
//       (type 4)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (drop)
//       (i32.const 0)
//     )
//   )
//   (export "main" (func 0))
//   (elem $0 (i32.const 0) funcref (ref.func 0))
// )
const m = new WebAssembly.Instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xde\x80\x80\x80\x00\x05\x50\x00\x5f\x04\x7c\x00\x70\x00\x7e\x00\x7e\x00\x50\x00\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x00\x00\x50\x00\x60\x01\x64\x01\x0f\x64\x00\x64\x00\x7d\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x7e\x50\x00\x60\x0f\x64\x00\x64\x00\x7d\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x7e\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x08\x05\x84\x80\x80\x80\x00\x01\x01\x10\x20\x0d\x83\x80\x80\x80\x00\x01\x00\x02\x07\x88\x80\x80\x80\x00\x01\x04\x6d\x61\x69\x6e\x00\x00\x09\x8b\x80\x80\x80\x00\x01\x06\x00\x41\x00\x0b\x70\x01\xd2\x00\x0b\x0a\xb3\x84\x80\x80\x00\x01\xb0\x04\x00\xd2\x00\x41\xd4\x00\xfd\x0f\x41\xe2\x00\xfd\x6d\xfd\x7e\xfd\x7e\xfd\x7e\xfd\x7e\xfd\xc3\x01\x04\x03\x1a\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x43\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x02\x64\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x0b\x41\xe2\xc4\x89\x93\x06\xfd\x0f\xfd\x7e\x41\xe2\xc4\x89\x03\xfd\x0f\xfd\xc3\x01\xfd\x6d\xfd\x1d\x00\x05\x1a\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x43\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x70\x42\x00\x42\x00\xfb\x00\x00\x42\x00\x0b\x02\x04\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x41\x00\x0b\x0b"));
m.exports.main();
