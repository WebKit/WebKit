import { instantiate } from "../wabt-wrapper.js"
import * as assert from "../assert.js"

let wat = `
(module
    (func (export "clz") (param i64) (result i64)
        (local.get 0)
        (i64.clz)
        (return)
    )
    (func (export "ctz") (param i64) (result i64)
        (local.get 0)
        (i64.ctz)
        (return)
    )
    (func (export "popcnt") (param i64) (result i64)
        (local.get 0)
        (i64.popcnt)
        (return)
    )
    (func (export "add") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.add)
        (return)
    )
    (func (export "sub") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.sub)
        (return)
    )
    (func (export "mul") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.mul)
        (return)
    )
    (func (export "divs") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.div_s)
        (return)
    )
    (func (export "divu") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.div_u)
        (return)
    )
    (func (export "rems") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.rem_s)
        (return)
    )
    (func (export "remu") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.rem_u)
        (return)
    )
    (func (export "and") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.and)
        (return)
    )
    (func (export "or") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.or)
        (return)
    )
    (func (export "xor") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.xor)
        (return)
    )
    (func (export "shl") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.shl)
        (return)
    )
    (func (export "shr_s") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.shr_s)
        (return)
    )
    (func (export "shr_u") (param i64 i64) (result i64)
        (local.get 0)
        (local.get 1)
        (i64.shr_u)
        (return)
    )
)
`

async function test() {
    const instance = await instantiate(wat, {});
    const { clz, ctz, popcnt, add, sub, mul, divs, divu, rems, remu, and, or, xor, shl, shr_s, shr_u } = instance.exports
    assert.eq(clz(1n), 63n)
    assert.eq(clz(8n), 60n)
    assert.eq(ctz(1n), 0n)
    assert.eq(ctz(8n), 3n)
    assert.eq(popcnt(5n), 2n)
    assert.eq(popcnt(15n), 4n)
    assert.eq(add(1n, 2n), 3n)
    assert.eq(add(3n, 4n), 7n)
    assert.eq(sub(3n, 2n), 1n)
    assert.eq(sub(1n, 5n), -4n)
    assert.eq(mul(3n, 2n), 6n)
    assert.eq(mul(1n, 5n), 5n)
    assert.eq(divs(3n, 2n), 1n)
    assert.eq(divs(-10n, 5n), -2n)
    assert.eq(divu(3n, 2n), 1n)
    assert.eq(divu(1n, 5n), 0n)
    assert.eq(rems(5n, 2n), 1n)
    assert.eq(rems(-5n, 3n), -2n)
    assert.eq(remu(5n, 2n), 1n)
    assert.eq(remu(5n, 3n), 2n)
    assert.eq(and(3n, 2n), 2n)
    assert.eq(and(3n, 5n), 1n)
    assert.eq(or(3n, 2n), 3n)
    assert.eq(or(3n, 5n), 7n)
    assert.eq(xor(3n, 2n), 1n)
    assert.eq(xor(3n, 5n), 6n)
    assert.eq(shl(3n, 2n), 12n)
    assert.eq(shl(5n, 1n), 10n)
    assert.eq(shr_s(3n, 1n), 1n)
    assert.eq(shr_s(-4n, 1n), -2n)
    assert.eq(shr_u(8n, 2n), 2n)
    assert.eq(shr_u(5n, 1n), 2n)
}

await assert.asyncTest(test())
