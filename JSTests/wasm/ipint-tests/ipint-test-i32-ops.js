import { instantiate } from "../wabt-wrapper.js"
import * as assert from "../assert.js"

let wat = `
(module
    (func (export "clz") (param i32) (result i32)
        (local.get 0)
        (i32.clz)
        (return)
    )
    (func (export "ctz") (param i32) (result i32)
        (local.get 0)
        (i32.ctz)
        (return)
    )
    (func (export "popcnt") (param i32) (result i32)
        (local.get 0)
        (i32.popcnt)
        (return)
    )
    (func (export "add") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.add)
        (return)
    )
    (func (export "sub") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.sub)
        (return)
    )
    (func (export "mul") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.mul)
        (return)
    )
    (func (export "divs") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.div_s)
        (return)
    )
    (func (export "divu") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.div_u)
        (return)
    )
    (func (export "rems") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.rem_s)
        (return)
    )
    (func (export "remu") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.rem_u)
        (return)
    )
    (func (export "and") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.and)
        (return)
    )
    (func (export "or") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.or)
        (return)
    )
    (func (export "xor") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.xor)
        (return)
    )
    (func (export "shl") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.shl)
        (return)
    )
    (func (export "shr_s") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.shr_s)
        (return)
    )
    (func (export "shr_u") (param i32 i32) (result i32)
        (local.get 0)
        (local.get 1)
        (i32.shr_u)
        (return)
    )
)
`

async function test() {
    const instance = await instantiate(wat, {});
    const { clz, ctz, popcnt, add, sub, mul, divs, divu, rems, remu, and, or, xor, shl, shr_s, shr_u } = instance.exports
    assert.eq(clz(1), 31)
    assert.eq(clz(8), 28)
    assert.eq(ctz(1), 0)
    assert.eq(ctz(8), 3)
    assert.eq(popcnt(5), 2)
    assert.eq(popcnt(15), 4)
    assert.eq(add(1, 2), 3)
    assert.eq(add(3, 4), 7)
    assert.eq(sub(3, 2), 1)
    assert.eq(sub(1, 5), -4)
    assert.eq(mul(3, 2), 6)
    assert.eq(mul(1, 5), 5)
    assert.eq(divs(3, 2), 1)
    assert.eq(divs(-10, 5), -2)
    assert.eq(divu(3, 2), 1)
    assert.eq(divu(1, 5), 0)
    assert.eq(rems(5, 2), 1)
    assert.eq(rems(-5, 3), -2)
    assert.eq(remu(5, 2), 1)
    assert.eq(remu(5, 3), 2)
    assert.eq(and(3, 2), 2)
    assert.eq(and(3, 5), 1)
    assert.eq(or(3, 2), 3)
    assert.eq(or(3, 5), 7)
    assert.eq(xor(3, 2), 1)
    assert.eq(xor(3, 5), 6)
    assert.eq(shl(3, 2), 12)
    assert.eq(shl(5, 1), 10)
    assert.eq(shr_s(3, 1), 1)
    assert.eq(shr_s(-4, 1), -2)
    assert.eq(shr_u(8, 2), 2)
    assert.eq(shr_u(5, 1), 2)
}

await assert.asyncTest(test())
