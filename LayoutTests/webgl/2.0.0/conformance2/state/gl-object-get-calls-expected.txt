This test runs the WebGL Test listed below in an iframe and reports PASS or FAIL.

Test: ../../resources/webgl_test_files/conformance2/state/gl-object-get-calls.html

[ 1: PASS ] gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE) is 16
[ 2: PASS ] gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 3: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 4: PASS ] gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE) is 16
[ 5: PASS ] gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 6: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 7: PASS ] gl.getBufferParameter(gl.COPY_READ_BUFFER, gl.BUFFER_SIZE) is 16
[ 8: PASS ] gl.getBufferParameter(gl.COPY_READ_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 9: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 10: PASS ] gl.getBufferParameter(gl.COPY_WRITE_BUFFER, gl.BUFFER_SIZE) is 16
[ 11: PASS ] gl.getBufferParameter(gl.COPY_WRITE_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 12: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 13: PASS ] gl.getBufferParameter(gl.PIXEL_PACK_BUFFER, gl.BUFFER_SIZE) is 16
[ 14: PASS ] gl.getBufferParameter(gl.PIXEL_PACK_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 15: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 16: PASS ] gl.getBufferParameter(gl.PIXEL_UNPACK_BUFFER, gl.BUFFER_SIZE) is 16
[ 17: PASS ] gl.getBufferParameter(gl.PIXEL_UNPACK_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 18: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 19: PASS ] gl.getBufferParameter(gl.TRANSFORM_FEEDBACK_BUFFER, gl.BUFFER_SIZE) is 16
[ 20: PASS ] gl.getBufferParameter(gl.TRANSFORM_FEEDBACK_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 21: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 22: PASS ] gl.getBufferParameter(gl.UNIFORM_BUFFER, gl.BUFFER_SIZE) is 16
[ 23: PASS ] gl.getBufferParameter(gl.UNIFORM_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 24: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 25: PASS ] getBufferParameter correctly handled invalid target enums
[ 26: PASS ] getError was expected value: NO_ERROR :
[ 27: PASS ] getError was expected value: NO_ERROR :
[ 28: PASS ] getError was expected value: NO_ERROR :
[ 29: PASS ] getError was expected value: NO_ERROR :
[ 30: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 31: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 32: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is texture
[ 33: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 34: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 35: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 36: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 37: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 38: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 39: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 40: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 41: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER) is 0
[ 42: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 43: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is anotherTexture
[ 44: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 45: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 46: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 47: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 48: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 49: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 50: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 51: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 52: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER) is 0
[ 53: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 54: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 55: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 56: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 57: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 58: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 59: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) is non-zero.
[ 60: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE) is non-zero.
[ 61: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 62: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 63: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 64: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 65: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
[ 66: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 67: PASS ] getFramebufferAttachmentParameter correctly handled invalid parameter enums
[ 68: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 69: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 70: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 71: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.FRAMEBUFFER_DEFAULT
[ 72: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.FRAMEBUFFER_DEFAULT
[ 73: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.FRAMEBUFFER_DEFAULT
[ 74: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 75: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 76: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 77: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 78: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) should be non-zero. Was 0
[ 79: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 80: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 81: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) should be non-zero. Was 0
[ 82: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) should be non-zero. Was 0
[ 83: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE) should be non-zero. Was 0
[ 84: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) should be non-zero. Was 0
[ 85: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) should be non-zero. Was 0
[ 86: FAIL ] getError expected: NO_ERROR. Was INVALID_OPERATION :
[ 87: FAIL ] getFramebufferAttachmentParameter returned 0 instead of null for invalid parameter enum: NO_ERROR
[ 88: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 89: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 90: PASS ] getError was expected value: NO_ERROR :
[ 91: PASS ] getError was expected value: NO_ERROR :
[ 92: PASS ] getError was expected value: NO_ERROR :
[ 93: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 94: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 95: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is texture
[ 96: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 97: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 98: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 99: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 100: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 101: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 102: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 103: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 104: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER) is 0
[ 105: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 106: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is anotherTexture
[ 107: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 108: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 109: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 110: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 111: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 112: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 113: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 114: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 115: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 3, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER) is 0
[ 116: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 117: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 118: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 119: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 120: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 121: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 122: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) is non-zero.
[ 123: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE) is non-zero.
[ 124: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 125: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 126: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 127: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 128: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
[ 129: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 130: PASS ] getFramebufferAttachmentParameter correctly handled invalid parameter enums
[ 131: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 132: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 133: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 134: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.FRAMEBUFFER_DEFAULT
[ 135: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.FRAMEBUFFER_DEFAULT
[ 136: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.NONE
[ 137: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 138: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE) is non-zero.
[ 139: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 140: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE) is non-zero.
[ 141: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) should be non-zero. Was 0
[ 142: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) is non-zero.
[ 143: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) is non-zero.
[ 144: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE) should be non-zero. Was 0
[ 145: FAIL ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) should be non-zero. Was 0
[ 146: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)
[ 147: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
[ 148: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)
[ 149: FAIL ] getFramebufferAttachmentParameter returned 0 instead of null for invalid parameter enum: NO_ERROR
[ 150: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 151: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 152: PASS ] getError was expected value: NO_ERROR :
[ 153: PASS ] shaders.length is 2
[ 154: PASS ] shaders[0] == standardVert && shaders[1] == standardFrag || shaders[1] == standardVert && shaders[0] == standardFrag is true
[ 155: PASS ] getError was expected value: NO_ERROR :
[ 156: PASS ] gl.getAttachedShaders(null) threw exception TypeError: Argument 1 ('program') to WebGL2RenderingContext.getAttachedShaders must be an instance of WebGLProgram.
[ 157: PASS ] getError was expected value: NO_ERROR :
[ 158: PASS ] gl.getAttachedShaders(standardVert) threw exception TypeError: Argument 1 ('program') to WebGL2RenderingContext.getAttachedShaders must be an instance of WebGLProgram.
[ 159: PASS ] getError was expected value: NO_ERROR :
[ 160: PASS ] gl.getProgramParameter(standardProgram, gl.DELETE_STATUS) is false
[ 161: PASS ] gl.getProgramParameter(standardProgram, gl.LINK_STATUS) is true
[ 162: PASS ] typeof gl.getProgramParameter(standardProgram, gl.VALIDATE_STATUS) is "boolean"
[ 163: PASS ] gl.getProgramParameter(standardProgram, gl.ATTACHED_SHADERS) is 2
[ 164: PASS ] gl.getProgramParameter(standardProgram, gl.ACTIVE_ATTRIBUTES) is 2
[ 165: PASS ] gl.getProgramParameter(standardProgram, gl.ACTIVE_UNIFORMS) is 1
[ 166: PASS ] gl.getProgramParameter(uniformBlockProgram, gl.LINK_STATUS) is true
[ 167: PASS ] gl.getError() is gl.NO_ERROR
[ 168: PASS ] gl.getProgramParameter(uniformBlockProgram, gl.ACTIVE_UNIFORM_BLOCKS) is 1
[ 169: PASS ] gl.getProgramParameter(uniformBlockProgram, gl.TRANSFORM_FEEDBACK_VARYINGS) is 2
[ 170: PASS ] gl.getProgramParameter(uniformBlockProgram, gl.TRANSFORM_FEEDBACK_BUFFER_MODE) is gl.INTERLEAVED_ATTRIBS
[ 171: PASS ] getProgramParameter correctly handled invalid parameter enums
[ 172: PASS ] getError was expected value: NO_ERROR :
[ 173: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH) is 2
[ 174: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_HEIGHT) is 2
[ 175: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_INTERNAL_FORMAT) is non-zero.
[ 176: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_DEPTH_SIZE) is non-zero.
[ 177: PASS ] getError was expected value: NO_ERROR :
[ 178: PASS ] getError was expected value: NO_ERROR :
[ 179: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_RED_SIZE) is non-zero.
[ 180: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_GREEN_SIZE) is non-zero.
[ 181: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_BLUE_SIZE) is non-zero.
[ 182: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_ALPHA_SIZE) is non-zero.
[ 183: FAIL ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_SAMPLES) should be 4. Was 0.
[ 184: PASS ] getRenderbufferParameter correctly handled invalid parameter enums
[ 185: PASS ] getRenderbufferParameter correctly handled invalid target enums
[ 186: PASS ] getError was expected value: NO_ERROR :
[ 187: PASS ] gl.getShaderParameter(standardVert, gl.SHADER_TYPE) is gl.VERTEX_SHADER
[ 188: PASS ] gl.getShaderParameter(standardVert, gl.DELETE_STATUS) is false
[ 189: PASS ] gl.getShaderParameter(standardVert, gl.COMPILE_STATUS) is true
[ 190: PASS ] getShaderParameter correctly handled invalid parameter enums
[ 191: PASS ] getError was expected value: NO_ERROR :
[ 192: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER) is gl.NEAREST
[ 193: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER) is gl.NEAREST
[ 194: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S) is gl.CLAMP_TO_EDGE
[ 195: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T) is gl.CLAMP_TO_EDGE
[ 196: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL) is 0
[ 197: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC) is gl.LEQUAL
[ 198: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE) is gl.COMPARE_REF_TO_TEXTURE
[ 199: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL) is 10
[ 200: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAX_LOD) is 10
[ 201: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_LOD) is 0
[ 202: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_R) is gl.CLAMP_TO_EDGE
[ 203: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_FORMAT) is false
[ 204: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_LEVELS) is 0
[ 205: PASS ] getTexParameter correctly handled invalid parameter enums
[ 206: PASS ] getTexParameter correctly handled invalid target enums
[ 207: PASS ] getError was expected value: NO_ERROR :
[ 208: PASS ] gl.getProgramParameter(boolProgram, gl.LINK_STATUS) is true
[ 209: PASS ] getError was expected value: NO_ERROR :
[ 210: PASS ] gl.getUniform(boolProgram, bvalLoc) is true
[ 211: PASS ] gl.getUniform(boolProgram, bval2Loc) is [true, false]
[ 212: PASS ] gl.getUniform(boolProgram, bval3Loc) is [true, false, true]
[ 213: PASS ] gl.getUniform(boolProgram, bval4Loc) is [true, false, true, false]
[ 214: PASS ] getError was expected value: NO_ERROR :
[ 215: PASS ] gl.getProgramParameter(intProgram, gl.LINK_STATUS) is true
[ 216: PASS ] getError was expected value: NO_ERROR :
[ 217: PASS ] gl.getUniform(intProgram, ivalLoc) is 1
[ 218: PASS ] gl.getUniform(intProgram, ival2Loc) is [2, 3]
[ 219: PASS ] gl.getUniform(intProgram, ival3Loc) is [4, 5, 6]
[ 220: PASS ] gl.getUniform(intProgram, ival4Loc) is [7, 8, 9, 10]
[ 221: PASS ] getError was expected value: NO_ERROR :
[ 222: PASS ] gl.getProgramParameter(floatProgram, gl.LINK_STATUS) is true
[ 223: PASS ] getError was expected value: NO_ERROR :
[ 224: PASS ] gl.getUniform(floatProgram, fvalLoc) is 11
[ 225: PASS ] gl.getUniform(floatProgram, fval2Loc) is [12, 13]
[ 226: PASS ] gl.getUniform(floatProgram, fval3Loc) is [14, 15, 16]
[ 227: PASS ] gl.getUniform(floatProgram, fval4Loc) is [17, 18, 19, 20]
[ 228: PASS ] getError was expected value: NO_ERROR :
[ 229: PASS ] gl.getProgramParameter(samplerProgram, gl.LINK_STATUS) is true
[ 230: PASS ] getError was expected value: NO_ERROR :
[ 231: PASS ] gl.getUniform(samplerProgram, s2DValLoc) is 0
[ 232: PASS ] gl.getUniform(samplerProgram, sCubeValLoc) is 1
[ 233: PASS ] getError was expected value: NO_ERROR :
[ 234: PASS ] gl.getProgramParameter(matProgram, gl.LINK_STATUS) is true
[ 235: PASS ] getError was expected value: NO_ERROR :
[ 236: PASS ] gl.getUniform(matProgram, mval2Loc) is [1, 2, 3, 4]
[ 237: PASS ] gl.getUniform(matProgram, mval3Loc) is [5, 6, 7, 8, 9, 10, 11, 12, 13]
[ 238: PASS ] gl.getUniform(matProgram, mval4Loc) is [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
[ 239: PASS ] getError was expected value: NO_ERROR :
[ 240: PASS ] gl.getProgramParameter(uintProgram, gl.LINK_STATUS) is true
[ 241: PASS ] getError was expected value: NO_ERROR :
[ 242: PASS ] gl.getUniform(uintProgram, uvalLoc) is 1
[ 243: PASS ] gl.getUniform(uintProgram, uval2Loc) is [2, 3]
[ 244: PASS ] gl.getUniform(uintProgram, uval3Loc) is [4, 5, 6]
[ 245: PASS ] gl.getUniform(uintProgram, uval4Loc) is [7, 8, 9, 10]
[ 246: PASS ] getError was expected value: NO_ERROR :
[ 247: PASS ] getError was expected value: NO_ERROR :
[ 248: PASS ] gl.getProgramParameter(matForWebGL2Program, gl.LINK_STATUS) is true
[ 249: PASS ] getError was expected value: NO_ERROR :
[ 250: PASS ] gl.getUniform(matForWebGL2Program, mval2x3Loc) is [1, 2, 3, 4, 5, 6]
[ 251: PASS ] gl.getUniform(matForWebGL2Program, mval2x4Loc) is [7, 8, 9, 10, 11, 12, 13, 14]
[ 252: PASS ] gl.getUniform(matForWebGL2Program, mval3x2Loc) is [15, 16, 17, 18, 19, 20]
[ 253: PASS ] gl.getUniform(matForWebGL2Program, mval3x4Loc) is [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
[ 254: PASS ] gl.getUniform(matForWebGL2Program, mval4x2Loc) is [33, 34, 35, 36, 37, 38, 39, 40]
[ 255: PASS ] gl.getUniform(matForWebGL2Program, mval4x3Loc) is [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]
[ 256: PASS ] getError was expected value: NO_ERROR :
[ 257: PASS ] gl.getProgramParameter(samplerForWebGL2Program, gl.LINK_STATUS) is true
[ 258: PASS ] getError was expected value: NO_ERROR :
[ 259: PASS ] gl.getUniform(samplerForWebGL2Program, s3DValLoc) is 0
[ 260: PASS ] gl.getUniform(samplerForWebGL2Program, s2DArrayValLoc) is 1
[ 261: PASS ] getError was expected value: NO_ERROR :
[ 262: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING) is buffer
[ 263: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED) is true
[ 264: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_SIZE) is 4
[ 265: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE) is 0
[ 266: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_TYPE) is gl.FLOAT
[ 267: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED) is false
[ 268: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_DIVISOR) is 0
[ 269: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_INTEGER) is false
[ 270: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_DIVISOR) is 2
[ 271: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE) is 36
[ 272: PASS ] gl.getVertexAttribOffset(1, gl.VERTEX_ATTRIB_ARRAY_POINTER) is 12
[ 273: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED) is false
[ 274: PASS ] gl.getVertexAttrib(1, gl.CURRENT_VERTEX_ATTRIB) is [5, 6, 7, 8]
[ 275: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_TYPE) is gl.INT
[ 276: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_INTEGER) is true
[ 277: PASS ] getError was expected value: NO_ERROR :
[ 278: PASS ] getVertexAttrib correctly handled invalid parameter enums
[ 279: PASS ] getError was expected value: INVALID_VALUE : after evaluating: gl.getVertexAttrib(16, gl.CURRENT_VERTEX_ATTRIB)
[ 280: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.NONE
[ 281: PASS ] getError was expected value: INVALID_OPERATION :
[ 282: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.NONE
[ 283: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING) is null
[ 284: PASS ] getError was expected value: NO_ERROR :
[ 285: PASS ] gl.getInternalformatParameter(gl.RENDERBUFFER, gl.R32I, gl.SAMPLES) is non-null.
[ 286: PASS ] getError was expected value: NO_ERROR :
[ 287: PASS ] getInternalformatParameter correctly handled invalid target enums
[ 288: PASS ] getInternalformatParameter correctly handled invalid pname enums
[ 289: FAIL ] getInternalformatParameter returned 8,4,2 instead of null for invalid internalformat enum: 0x6ac0
[ 290: PASS ] gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0) is buffer
[ 291: PASS ] gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0) is 8
[ 292: PASS ] gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0) is 4
[ 293: PASS ] gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1) is buffer1
[ 294: PASS ] gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1) is 8
[ 295: PASS ] gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1) is offsetUniform
[ 296: PASS ] gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1) is null
[ 297: PASS ] getIndexedParameter correctly handled invalid target enums
[ 298: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_COMPARE_FUNC) is gl.LEQUAL
[ 299: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_COMPARE_MODE) is gl.COMPARE_REF_TO_TEXTURE
[ 300: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_MAG_FILTER) is gl.NEAREST
[ 301: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_MAX_LOD) is 10
[ 302: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_MIN_FILTER) is gl.NEAREST
[ 303: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_MIN_LOD) is 0
[ 304: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_R) is gl.CLAMP_TO_EDGE
[ 305: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_S) is gl.CLAMP_TO_EDGE
[ 306: PASS ] gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_T) is gl.CLAMP_TO_EDGE
[ 307: PASS ] getSamplerParameter correctly handled invalid pname enums
[ 308: PASS ] gl.getSyncParameter(sync, gl.OBJECT_TYPE) is gl.SYNC_FENCE
[ 309: PASS ] gl.getSyncParameter(sync, gl.SYNC_CONDITION) is gl.UNSIGNALED
[ 310: PASS ] gl.getSyncParameter(sync, gl.SYNC_CONDITION) is gl.SYNC_GPU_COMMANDS_COMPLETE
[ 311: PASS ] gl.getSyncParameter(sync, gl.SYNC_FLAGS) is 0
[ 312: PASS ] getSyncParameter correctly handled invalid pname enums
[ 313: PASS ] gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE) is false
[ 314: PASS ] getQueryParameter correctly handled invalid pname enums
[ 315: PASS ] gl.getShaderParameter(vertShader, gl.COMPILE_STATUS) is true
[ 316: PASS ] gl.getShaderParameter(fragShader, gl.COMPILE_STATUS) is true
[ 317: PASS ] gl.getProgramParameter(program, gl.LINK_STATUS) is true
[ 318: PASS ] gl.getFragDataLocation(program, "vertexColor") is -1
[ 319: PASS ] gl.getFragDataLocation(program, "modelViewMatrix") is -1
[ 320: PASS ] gl.getFragDataLocation(program, "projectionMatrix") is -1
[ 321: PASS ] gl.getFragDataLocation(program, "position") is -1
[ 322: PASS ] gl.getFragDataLocation(program, "fragColor") is 0
[ 323: PASS ] gl.getProgramParameter(program, gl.LINK_STATUS) is true
[ 324: PASS ] gl.getError() is gl.NO_ERROR
[ 325: PASS ] typeof rowMajors[i] is "boolean"
[ 326: PASS ] typeof rowMajors[i] is "boolean"
[ 327: PASS ] typeof rowMajors[i] is "boolean"
[ 328: PASS ] getActiveUniforms correctly handled invalid pname enums
[ 329: PASS ] gl.getProgramParameter(program, gl.LINK_STATUS) is true
[ 330: PASS ] gl.getUniformBlockIndex(program, "Transform") is 0
[ 331: PASS ] gl.getUniformBlockIndex(program, "u_modelViewMatrix") is gl.INVALID_INDEX
[ 332: PASS ] gl.getUniformBlockIndex(program, "normal") is gl.INVALID_INDEX
[ 333: PASS ] gl.getUniformBlockIndex(program, "u_normal") is gl.INVALID_INDEX
[ 334: PASS ] gl.getProgramParameter(noUniformProgram, gl.LINK_STATUS) is true
[ 335: PASS ] gl.getUniformBlockIndex(noUniformProgram, "u_modelViewProjMatrix") is gl.INVALID_INDEX
[ 336: PASS ] gl.getUniformBlockIndex(noUniformProgram, "u_normal") is gl.INVALID_INDEX
[ 337: PASS ] gl.getProgramParameter(program, gl.LINK_STATUS) is true
[ 338: PASS ] gl.getActiveUniformBlockName(program, 0) is "Transform"
[ 339: PASS ] gl.getActiveUniformBlockName(program, -1) is null
[ 340: PASS ] getError was expected value: INVALID_VALUE :
[ 341: PASS ] gl.getActiveUniformBlockName(program, 1) is null
[ 342: PASS ] getError was expected value: INVALID_VALUE :
[ 343: PASS ] gl.getActiveUniformBlockName(program, gl.INVALID_INDEX) is null
[ 344: PASS ] getError was expected value: INVALID_VALUE :
[ 345: PASS ] gl.getProgramParameter(noLinkProgram, gl.LINK_STATUS) is false
[ 346: PASS ] getError was expected value: INVALID_OPERATION : after evaluating: gl.getActiveUniformBlockName(noLinkProgram, 0)
[ 347: PASS ] gl.getProgramParameter(noUniformProgram, gl.LINK_STATUS) is true
[ 348: PASS ] gl.getActiveUniformBlockName(noUniformProgram, -1) is null
[ 349: PASS ] getError was expected value: INVALID_VALUE :
[ 350: PASS ] gl.getActiveUniformBlockName(noUniformProgram, 0) is null
[ 351: PASS ] getError was expected value: INVALID_VALUE :
[ 352: PASS ] gl.getActiveUniformBlockName(noUniformProgram, gl.INVALID_INDEX) is null
[ 353: PASS ] getError was expected value: INVALID_VALUE :
[ 354: PASS ] gl.getProgramParameter(program, gl.LINK_STATUS) is true
[ 355: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_BINDING) is 0
[ 356: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_BINDING) is 1
[ 357: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_DATA_SIZE) >= 164 is true
[ 358: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS) is 3
[ 359: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER) is true
[ 360: PASS ] gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER) is false
[ 361: PASS ] getActiveUniformBlockParameter correctly handled invalid pname enums
[ 362: PASS ] getError was expected value: NO_ERROR :
[ 363: PASS ] successfullyParsed is true
[ FAIL ] 14 failures reported
