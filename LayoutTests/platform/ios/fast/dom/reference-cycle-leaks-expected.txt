Tests for leaks caused by reference cycles that pass through the DOM implementation

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS checkForNodeLeaks(emptyFunction) is "did not leak"
PASS checkForNodeLeaks(createNode) is "did not leak"
PASS checkForNodeLeaks(createEventListenerCycle) is "did not leak"
PASS checkForNodeLeaks(createTreeWalkerNodeCycle) is "did not leak"
PASS checkForNodeLeaks(createTreeWalkerFilterCycle) is "did not leak"
PASS checkForNodeLeaks(createRangeCycle) is "did not leak"
PASS checkForNodeLeaks(createStaticRangeCycle) is "did not leak"
PASS checkForNodeLeaks(createPromiseCycle) is "did not leak"
PASS checkForNodeLeaks(createCustomEventDetailsCycle) is "did not leak"
PASS checkForNodeLeaks(createErrorEventDataCycle) is "did not leak"
---- Did not test ExtendableMessageEvent because it is not enabled.
PASS checkForNodeLeaks(createMessageEventDataCycle) is "did not leak"
PASS checkForNodeLeaks(createPaymentMethodChangeEventMethodDetailsCycle) is "did not leak"
PASS checkForNodeLeaks(createPopStateEventStateCycle) is "did not leak"
FAIL checkForNodeLeaks(createPromiseRejectionEventPromiseCycle) should be did not leak. Was leaked.
PASS checkForNodeLeaks(createPromiseRejectionEventPromiseFunctionCycle) is "did not leak"
PASS checkForNodeLeaks(createPromiseRejectionEventReasonCycle) is "did not leak"
PASS successfullyParsed is true
Some tests failed.

TEST COMPLETE

