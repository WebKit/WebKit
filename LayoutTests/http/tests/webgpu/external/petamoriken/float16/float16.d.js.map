{"version":3,"file":"float16.d.js","names":[],"sources":["../../../../src/external/petamoriken/float16/float16.d.ts"],"sourcesContent":["/**\n * A typed array of 16-bit float values. The contents are initialized to 0. If the requested number\n * of bytes could not be allocated an exception is raised.\n */\nexport interface Float16Array {\n  /**\n   * The size in bytes of each element in the array.\n   */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /**\n   * The ArrayBuffer instance referenced by the array.\n   */\n  readonly buffer: ArrayBufferLike;\n\n  /**\n   * The length in bytes of the array.\n   */\n  readonly byteLength: number;\n\n  /**\n   * The offset in bytes of the array.\n   */\n  readonly byteOffset: number;\n\n  [Symbol.iterator](): IterableIterator<number>;\n\n  /**\n   * Returns an array of key, value pairs for every entry in the array\n   */\n  entries(): IterableIterator<[number, number]>;\n\n  /**\n   * Returns an list of keys in the array\n   */\n  keys(): IterableIterator<number>;\n\n  /**\n   * Returns an list of values in the array\n   */\n  values(): IterableIterator<number>;\n\n  /**\n   * Returns the item located at the specified index.\n   * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n   */\n  at(index: number): number | undefined;\n\n  /**\n   * Returns the this object after copying a section of the array identified by start and end\n   * to the same array starting at position target\n   * @param target If target is negative, it is treated as length+target where length is the\n   * length of the array.\n   * @param start If start is negative, it is treated as length+start. If end is negative, it\n   * is treated as length+end.\n   * @param end If not specified, length of the this object is used as its default value.\n   */\n  copyWithin(target: number, start: number, end?: number): this;\n\n  /**\n   * Determines whether all the members of an array satisfy the specified test.\n   * @param callbackfn A function that accepts up to three arguments. The every method calls\n   * the callbackfn function for each element in the array until the callbackfn returns a value\n   * which is coercible to the Boolean value false, or until the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  every(\n    callbackfn: (value: number, index: number, array: Float16Array) => unknown,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Returns the this object after filling the section identified by start and end with value\n   * @param value value to fill array section with\n   * @param start index to start filling the array at. If start is negative, it is treated as\n   * length+start where length is the length of the array.\n   * @param end index to stop filling the array at. If end is negative, it is treated as\n   * length+end.\n   */\n  fill(value: number, start?: number, end?: number): this;\n\n  /**\n   * Returns the elements of an array that meet the condition specified in a callback function.\n   * @param predicate A function that accepts up to three arguments. The filter method calls\n   * the predicate function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the predicate function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  filter(\n    predicate: (value: number, index: number, array: Float16Array) => any,\n    thisArg?: any,\n  ): Float16Array;\n\n  /**\n   * Returns the value of the first element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  find(\n    predicate: (value: number, index: number, obj: Float16Array) => boolean,\n    thisArg?: any,\n  ): number | undefined;\n\n  /**\n   * Returns the index of the first element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findIndex(\n    predicate: (value: number, index: number, obj: Float16Array) => boolean,\n    thisArg?: any,\n  ): number;\n\n  /**\n   * Returns the value of the last element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in descending\n   * order, until it finds one where predicate returns true. If such an element is found, findLast\n   * immediately returns that element value. Otherwise, findLast returns undefined.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLast(\n    predicate: (value: number, index: number, obj: Float16Array) => boolean,\n    thisArg?: any,\n  ): number | undefined;\n\n  /**\n   * Returns the index of the last element in the array where predicate is true, and -1\n   * otherwise.\n   * @param predicate find calls predicate once for each element of the array, in descending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n   * @param thisArg If provided, it will be used as the this value for each invocation of\n   * predicate. If it is not provided, undefined is used instead.\n   */\n  findLastIndex(\n    predicate: (value: number, index: number, obj: Float16Array) => boolean,\n    thisArg?: any,\n  ): number;\n\n  /**\n   * Performs the specified action for each element in an array.\n   * @param callbackfn A function that accepts up to three arguments. forEach calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  forEach(\n    callbackfn: (value: number, index: number, array: Float16Array) => void,\n    thisArg?: any,\n  ): void;\n\n  /**\n   * Determines whether an array includes a certain element, returning true or false as appropriate.\n   * @param searchElement The element to search for.\n   * @param fromIndex The position in this array at which to begin searching for searchElement.\n   */\n  includes(searchElement: number, fromIndex?: number): boolean;\n\n  /**\n   * Returns the index of the first occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  indexOf(searchElement: number, fromIndex?: number): number;\n\n  /**\n   * Adds all the elements of an array separated by the specified separator string.\n   * @param separator A string used to separate one element of an array from the next in the\n   * resulting String. If omitted, the array elements are separated with a comma.\n   */\n  join(separator?: string): string;\n\n  /**\n   * Returns the index of the last occurrence of a value in an array.\n   * @param searchElement The value to locate in the array.\n   * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n   * search starts at index 0.\n   */\n  lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n  /**\n   * The length of the array.\n   */\n  readonly length: number;\n\n  /**\n   * Calls a defined callback function on each element of an array, and returns an array that\n   * contains the results.\n   * @param callbackfn A function that accepts up to three arguments. The map method calls the\n   * callbackfn function one time for each element in the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  map(\n    callbackfn: (value: number, index: number, array: Float16Array) => number,\n    thisArg?: any,\n  ): Float16Array;\n\n  /**\n   * Calls the specified callback function for all the elements in an array. The return value of\n   * the callback function is the accumulated result, and is provided as an argument in the next\n   * call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n   * callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an argument\n   * instead of an array value.\n   */\n  reduce(\n    callbackfn: (\n      previousValue: number,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => number,\n  ): number;\n  reduce(\n    callbackfn: (\n      previousValue: number,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => number,\n    initialValue: number,\n  ): number;\n  reduce<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /**\n   * Calls the specified callback function for all the elements in an array, in descending order.\n   * The return value of the callback function is the accumulated result, and is provided as an\n   * argument in the next call to the callback function.\n   * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n   * the callbackfn function one time for each element in the array.\n   * @param initialValue If initialValue is specified, it is used as the initial value to start\n   * the accumulation. The first call to the callbackfn function provides this value as an\n   * argument instead of an array value.\n   */\n  reduceRight(\n    callbackfn: (\n      previousValue: number,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => number,\n  ): number;\n  reduceRight(\n    callbackfn: (\n      previousValue: number,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => number,\n    initialValue: number,\n  ): number;\n  reduceRight<U>(\n    callbackfn: (\n      previousValue: U,\n      currentValue: number,\n      currentIndex: number,\n      array: Float16Array,\n    ) => U,\n    initialValue: U,\n  ): U;\n\n  /**\n   * Reverses the elements in an Array.\n   */\n  reverse(): this;\n\n  /**\n   * Sets a value or an array of values.\n   * @param array A typed or untyped array of values to set.\n   * @param offset The index in the current array at which the values are to be written.\n   */\n  set(array: ArrayLike<number>, offset?: number): void;\n\n  /**\n   * Returns a section of an array.\n   * @param start The beginning of the specified portion of the array.\n   * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n   */\n  slice(start?: number, end?: number): Float16Array;\n\n  /**\n   * Determines whether the specified callback function returns true for any element of an array.\n   * @param callbackfn A function that accepts up to three arguments. The some method calls\n   * the callbackfn function for each element in the array until the callbackfn returns a value\n   * which is coercible to the Boolean value true, or until the end of the array.\n   * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n   * If thisArg is omitted, undefined is used as the this value.\n   */\n  some(\n    callbackfn: (value: number, index: number, array: Float16Array) => unknown,\n    thisArg?: any,\n  ): boolean;\n\n  /**\n   * Sorts an array.\n   * @param compareFn Function used to determine the order of the elements. It is expected to return\n   * a negative value if first argument is less than second argument, zero if they're equal and a positive\n   * value otherwise. If omitted, the elements are sorted in ascending.\n   */\n  sort(compareFn?: (a: number, b: number) => number): this;\n\n  /**\n   * Gets a new Float16Array view of the ArrayBuffer store for this array, referencing the elements\n   * at begin, inclusive, up to end, exclusive.\n   * @param begin The index of the beginning of the array.\n   * @param end The index of the end of the array.\n   */\n  subarray(begin?: number, end?: number): Float16Array;\n\n  /**\n   * Converts a number to a string by using the current locale.\n   */\n  toLocaleString(): string;\n\n  /**\n   * Returns a string representation of an array.\n   */\n  toString(): string;\n\n  /**\n   * Returns the primitive value of the specified object.\n   */\n  valueOf(): Float16Array;\n\n  readonly [Symbol.toStringTag]: \"Float16Array\";\n\n  [index: number]: number;\n}\n\nexport interface Float16ArrayConstructor {\n  readonly prototype: Float16Array;\n  new (): Float16Array;\n  new (length: number): Float16Array;\n  new (elements: Iterable<number>): Float16Array;\n  new (array: ArrayLike<number> | ArrayBufferLike): Float16Array;\n  new (\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    length?: number,\n  ): Float16Array;\n\n  /**\n   * The size in bytes of each element in the array.\n   */\n  readonly BYTES_PER_ELEMENT: number;\n\n  /**\n   * Returns a new array from a set of elements.\n   * @param items A set of elements to include in the new array object.\n   */\n  of(...items: number[]): Float16Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param elements An iterable object to convert to an array.\n   */\n  from(elements: Iterable<number>): Float16Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param elements An iterable object to convert to an array.\n   * @param mapfn A mapping function to call on every element of the array.\n   * @param thisArg Value of 'this' used to invoke the mapfn.\n   */\n  from<T>(\n    elements: Iterable<T>,\n    mapfn: (v: T, k: number) => number,\n    thisArg?: any,\n  ): Float16Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param arrayLike An array-like object to convert to an array.\n   */\n  from(arrayLike: ArrayLike<number>): Float16Array;\n\n  /**\n   * Creates an array from an array-like or iterable object.\n   * @param arrayLike An array-like object to convert to an array.\n   * @param mapfn A mapping function to call on every element of the array.\n   * @param thisArg Value of 'this' used to invoke the mapfn.\n   */\n  from<T>(\n    arrayLike: ArrayLike<T>,\n    mapfn: (v: T, k: number) => number,\n    thisArg?: any,\n  ): Float16Array;\n}\nexport declare const Float16Array: Float16ArrayConstructor;\n\n/**\n * Returns `true` if the value is a Float16Array instance.\n * @since v3.4.0\n */\nexport declare function isFloat16Array(value: unknown): value is Float16Array;\n\n/**\n * Returns `true` if the value is a type of TypedArray instance that contains  Float16Array.\n * @since v3.6.0\n */\nexport declare function isTypedArray(\n  value: unknown,\n): value is\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float16Array\n  | Float32Array\n  | Float64Array\n  | BigUint64Array\n  | BigInt64Array;\n\n/**\n * Gets the Float16 value at the specified byte offset from the start of the view. There is\n * no alignment constraint; multi-byte values may be fetched from any offset.\n * @param byteOffset The place in the buffer at which the value should be retrieved.\n * @param littleEndian If false or undefined, a big-endian value should be read,\n * otherwise a little-endian value should be read.\n */\nexport declare function getFloat16(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian?: boolean,\n): number;\n\n/**\n * Stores an Float16 value at the specified byte offset from the start of the view.\n * @param byteOffset The place in the buffer at which the value should be set.\n * @param value The value to set.\n * @param littleEndian If false or undefined, a big-endian value should be written,\n * otherwise a little-endian value should be written.\n */\nexport declare function setFloat16(\n  dataView: DataView,\n  byteOffset: number,\n  value: number,\n  littleEndian?: boolean,\n): void;\n\n/**\n * Returns the nearest half-precision float representation of a number.\n * @param x A numeric expression.\n */\nexport declare function hfround(x: number): number;\n"],"mappings":";AAAA;AAAA,G"}