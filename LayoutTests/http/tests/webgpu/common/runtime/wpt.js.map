{"version":3,"file":"wpt.js","names":["globalTestConfig","DefaultTestFileLoader","prettyPrintLog","Logger","parseQuery","parseExpectationsForTestQuery","relativeQueryString","assert","optionEnabled","TestWorker","setup","explicit_done","workerEnabled","worker","undefined","unrollConstEvalLoops","failOnWarnings","shouldWebGPUCTSFailOnWarnings","loader","qs","URLSearchParams","window","location","search","getAll","length","filterQuery","testcases","loadCases","expectations","loadWebGPUExpectations","URL","href","log","testcase","name","query","toString","shortName","wpt_fn","rec","res","record","run","status","logs","map","assert_unreached","join","promise_test","done"],"sources":["../../../src/common/runtime/wpt.ts"],"sourcesContent":["// Implements the wpt-embedded test runner (see also: wpt/cts.https.html).\n\nimport { globalTestConfig } from '../framework/test_config.js';\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { prettyPrintLog } from '../internal/logging/log_message.js';\nimport { Logger } from '../internal/logging/logger.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { parseExpectationsForTestQuery, relativeQueryString } from '../internal/query/query.js';\nimport { assert } from '../util/util.js';\n\nimport { optionEnabled } from './helper/options.js';\nimport { TestWorker } from './helper/test_worker.js';\n\n// testharness.js API (https://web-platform-tests.org/writing-tests/testharness-api.html)\ndeclare interface WptTestObject {\n  step(f: () => void): void;\n  done(): void;\n}\ndeclare function setup(properties: { explicit_done?: boolean }): void;\ndeclare function promise_test(f: (t: WptTestObject) => Promise<void>, name: string): void;\ndeclare function done(): void;\ndeclare function assert_unreached(description: string): void;\n\ndeclare const loadWebGPUExpectations: Promise<unknown> | undefined;\ndeclare const shouldWebGPUCTSFailOnWarnings: Promise<boolean> | undefined;\n\nsetup({\n  // It's convenient for us to asynchronously add tests to the page. Prevent done() from being\n  // called implicitly when the page is finished loading.\n  explicit_done: true,\n});\n\nvoid (async () => {\n  const workerEnabled = optionEnabled('worker');\n  const worker = workerEnabled ? new TestWorker(false) : undefined;\n\n  globalTestConfig.unrollConstEvalLoops = optionEnabled('unroll_const_eval_loops');\n\n  const failOnWarnings =\n    typeof shouldWebGPUCTSFailOnWarnings !== 'undefined' && (await shouldWebGPUCTSFailOnWarnings);\n\n  const loader = new DefaultTestFileLoader();\n  const qs = new URLSearchParams(window.location.search).getAll('q');\n  assert(qs.length === 1, 'currently, there must be exactly one ?q=');\n  const filterQuery = parseQuery(qs[0]);\n  const testcases = await loader.loadCases(filterQuery);\n\n  const expectations =\n    typeof loadWebGPUExpectations !== 'undefined'\n      ? parseExpectationsForTestQuery(\n          await loadWebGPUExpectations,\n          filterQuery,\n          new URL(window.location.href)\n        )\n      : [];\n\n  const log = new Logger();\n\n  for (const testcase of testcases) {\n    const name = testcase.query.toString();\n    // For brevity, display the case name \"relative\" to the ?q= path.\n    const shortName = relativeQueryString(filterQuery, testcase.query) || '(case)';\n\n    const wpt_fn = async () => {\n      const [rec, res] = log.record(name);\n      if (worker) {\n        await worker.run(rec, name, expectations);\n      } else {\n        await testcase.run(rec, expectations);\n      }\n\n      // Unfortunately, it seems not possible to surface any logs for warn/skip.\n      if (res.status === 'fail' || (res.status === 'warn' && failOnWarnings)) {\n        const logs = (res.logs ?? []).map(prettyPrintLog);\n        assert_unreached('\\n' + logs.join('\\n') + '\\n');\n      }\n    };\n\n    promise_test(wpt_fn, shortName);\n  }\n\n  done();\n})();\n"],"mappings":";AAAA;AAAA,G,CAAA;AAEA,SAASA,gBAAgB,QAAQ,6BAA6B,CAC9D,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,MAAM,QAAQ,+BAA+B;AACtD,SAASC,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,6BAA6B,EAAEC,mBAAmB,QAAQ,4BAA4B;AAC/F,SAASC,MAAM,QAAQ,iBAAiB;;AAExC,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,UAAU,QAAQ,yBAAyB;;AAEpD;;;;;;;;;;;;;AAaAC,KAAK,CAAC;EACJ;EACA;EACAC,aAAa,EAAE;AACjB,CAAC,CAAC;;AAEF,KAAK,CAAC,YAAY;EAChB,MAAMC,aAAa,GAAGJ,aAAa,CAAC,QAAQ,CAAC;EAC7C,MAAMK,MAAM,GAAGD,aAAa,GAAG,IAAIH,UAAU,CAAC,KAAK,CAAC,GAAGK,SAAS;;EAEhEd,gBAAgB,CAACe,oBAAoB,GAAGP,aAAa,CAAC,yBAAyB,CAAC;;EAEhF,MAAMQ,cAAc;EAClB,OAAOC,6BAA6B,KAAK,WAAW,KAAK,MAAMA,6BAA6B,CAAC;;EAE/F,MAAMC,MAAM,GAAG,IAAIjB,qBAAqB,EAAE;EAC1C,MAAMkB,EAAE,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAACC,MAAM,CAAC,GAAG,CAAC;EAClEjB,MAAM,CAACY,EAAE,CAACM,MAAM,KAAK,CAAC,EAAE,0CAA0C,CAAC;EACnE,MAAMC,WAAW,GAAGtB,UAAU,CAACe,EAAE,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMQ,SAAS,GAAG,MAAMT,MAAM,CAACU,SAAS,CAACF,WAAW,CAAC;;EAErD,MAAMG,YAAY;EAChB,OAAOC,sBAAsB,KAAK,WAAW;EACzCzB,6BAA6B;EAC3B,MAAMyB,sBAAsB;EAC5BJ,WAAW;EACX,IAAIK,GAAG,CAACV,MAAM,CAACC,QAAQ,CAACU,IAAI,CAAC,CAC9B;;EACD,EAAE;;EAER,MAAMC,GAAG,GAAG,IAAI9B,MAAM,EAAE;;EAExB,KAAK,MAAM+B,QAAQ,IAAIP,SAAS,EAAE;IAChC,MAAMQ,IAAI,GAAGD,QAAQ,CAACE,KAAK,CAACC,QAAQ,EAAE;IACtC;IACA,MAAMC,SAAS,GAAGhC,mBAAmB,CAACoB,WAAW,EAAEQ,QAAQ,CAACE,KAAK,CAAC,IAAI,QAAQ;;IAE9E,MAAMG,MAAM,GAAG,YAAY;MACzB,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGR,GAAG,CAACS,MAAM,CAACP,IAAI,CAAC;MACnC,IAAItB,MAAM,EAAE;QACV,MAAMA,MAAM,CAAC8B,GAAG,CAACH,GAAG,EAAEL,IAAI,EAAEN,YAAY,CAAC;MAC3C,CAAC,MAAM;QACL,MAAMK,QAAQ,CAACS,GAAG,CAACH,GAAG,EAAEX,YAAY,CAAC;MACvC;;MAEA;MACA,IAAIY,GAAG,CAACG,MAAM,KAAK,MAAM,IAAKH,GAAG,CAACG,MAAM,KAAK,MAAM,IAAI5B,cAAe,EAAE;QACtE,MAAM6B,IAAI,GAAG,CAACJ,GAAG,CAACI,IAAI,IAAI,EAAE,EAAEC,GAAG,CAAC5C,cAAc,CAAC;QACjD6C,gBAAgB,CAAC,IAAI,GAAGF,IAAI,CAACG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MACjD;IACF,CAAC;;IAEDC,YAAY,CAACV,MAAM,EAAED,SAAS,CAAC;EACjC;;EAEAY,IAAI,EAAE;AACR,CAAC,GAAG"}