{"version":3,"file":"resources.js","names":["baseResourcePath","crossOriginHost","getAbsoluteBaseResourcePath","path","relparts","window","location","pathname","split","pop","pathparts","i","length","push","join","runningOnLocalHost","hostname","getCrossOriginResourcePath","pathRelativeToResourcesDir","onlineUrl","crossOriginHostName","port","getResourcePath","setBaseResourcePath","setCrossOriginHost","host"],"sources":["../../../src/common/framework/resources.ts"],"sourcesContent":["/**\n * Base path for resources. The default value is correct for non-worker WPT, but standalone and\n * workers must access resources using a different base path, so this is overridden in\n * `test_worker-worker.ts` and `standalone.ts`.\n */\nlet baseResourcePath = './resources';\nlet crossOriginHost = '';\n\nfunction getAbsoluteBaseResourcePath(path: string) {\n  // Path is already an absolute one.\n  if (path[0] === '/') {\n    return path;\n  }\n\n  // Path is relative\n  const relparts = window.location.pathname.split('/');\n  relparts.pop();\n  const pathparts = path.split('/');\n\n  let i;\n  for (i = 0; i < pathparts.length; ++i) {\n    switch (pathparts[i]) {\n      case '':\n        break;\n      case '.':\n        break;\n      case '..':\n        relparts.pop();\n        break;\n      default:\n        relparts.push(pathparts[i]);\n        break;\n    }\n  }\n\n  return relparts.join('/');\n}\n\nfunction runningOnLocalHost(): boolean {\n  const hostname = window.location.hostname;\n  return hostname === 'localhost' || hostname === '127.0.0.1' || hostname === '::1';\n}\n\n/**\n * Get a path to a resource in the `resources` directory relative to the current execution context\n * (html file or worker .js file), for `fetch()`, `<img>`, `<video>`, etc but from cross origin host.\n * Provide onlineUrl if the case running online.\n * @internal MAINTENANCE_TODO: Cases may run in the LAN environment (not localhost but no internet\n * access). We temporarily use `crossOriginHost` to configure the cross origin host name in that situation.\n * But opening to  auto-detect mechanism or other solutions.\n */\nexport function getCrossOriginResourcePath(pathRelativeToResourcesDir: string, onlineUrl = '') {\n  // A cross origin host has been configured. Use this to load resource.\n  if (crossOriginHost !== '') {\n    return (\n      crossOriginHost +\n      getAbsoluteBaseResourcePath(baseResourcePath) +\n      '/' +\n      pathRelativeToResourcesDir\n    );\n  }\n\n  // Using 'localhost' and '127.0.0.1' trick to load cross origin resource. Set cross origin host name\n  // to 'localhost' if case is not running in 'localhost' domain. Otherwise, use '127.0.0.1'.\n  // host name to locahost unless the server running in\n  if (runningOnLocalHost()) {\n    let crossOriginHostName = '';\n    if (location.hostname === 'localhost') {\n      crossOriginHostName = 'http://127.0.0.1';\n    } else {\n      crossOriginHostName = 'http://localhost';\n    }\n\n    return (\n      crossOriginHostName +\n      ':' +\n      location.port +\n      getAbsoluteBaseResourcePath(baseResourcePath) +\n      '/' +\n      pathRelativeToResourcesDir\n    );\n  }\n\n  return onlineUrl;\n}\n\n/**\n * Get a path to a resource in the `resources` directory, relative to the current execution context\n * (html file or worker .js file), for `fetch()`, `<img>`, `<video>`, etc. Pass the cross origin host\n * name if wants to load resoruce from cross origin host.\n */\nexport function getResourcePath(pathRelativeToResourcesDir: string) {\n  return baseResourcePath + '/' + pathRelativeToResourcesDir;\n}\n\n/**\n * Set the base resource path (path to the `resources` directory relative to the current\n * execution context).\n */\nexport function setBaseResourcePath(path: string) {\n  baseResourcePath = path;\n}\n\n/**\n * Set the cross origin host and cases related to cross origin\n * will load resource from the given host.\n */\nexport function setCrossOriginHost(host: string) {\n  crossOriginHost = host;\n}\n"],"mappings":";AAAA;AAAA,G,CAAA;AACA;AACA;AACA;AACA,GACA,IAAIA,gBAAgB,GAAG,aAAa,CACpC,IAAIC,eAAe,GAAG,EAAE;;AAExB,SAASC,2BAA2B,CAACC,IAAY,EAAE;EACjD;EACA,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACnB,OAAOA,IAAI;EACb;;EAEA;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACpDJ,QAAQ,CAACK,GAAG,EAAE;EACd,MAAMC,SAAS,GAAGP,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC;;EAEjC,IAAIG,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;IACrC,QAAQD,SAAS,CAACC,CAAC,CAAC;MAClB,KAAK,EAAE;QACL;MACF,KAAK,GAAG;QACN;MACF,KAAK,IAAI;QACPP,QAAQ,CAACK,GAAG,EAAE;QACd;MACF;QACEL,QAAQ,CAACS,IAAI,CAACH,SAAS,CAACC,CAAC,CAAC,CAAC;QAC3B,MAAM;;EAEZ;;EAEA,OAAOP,QAAQ,CAACU,IAAI,CAAC,GAAG,CAAC;AAC3B;;AAEA,SAASC,kBAAkB,GAAY;EACrC,MAAMC,QAAQ,GAAGX,MAAM,CAACC,QAAQ,CAACU,QAAQ;EACzC,OAAOA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,KAAK;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,0BAA0B,CAACC,0BAAkC,EAAEC,SAAS,GAAG,EAAE,EAAE;EAC7F;EACA,IAAIlB,eAAe,KAAK,EAAE,EAAE;IAC1B;MACEA,eAAe;MACfC,2BAA2B,CAACF,gBAAgB,CAAC;MAC7C,GAAG;MACHkB,0BAA0B;;EAE9B;;EAEA;EACA;EACA;EACA,IAAIH,kBAAkB,EAAE,EAAE;IACxB,IAAIK,mBAAmB,GAAG,EAAE;IAC5B,IAAId,QAAQ,CAACU,QAAQ,KAAK,WAAW,EAAE;MACrCI,mBAAmB,GAAG,kBAAkB;IAC1C,CAAC,MAAM;MACLA,mBAAmB,GAAG,kBAAkB;IAC1C;;IAEA;MACEA,mBAAmB;MACnB,GAAG;MACHd,QAAQ,CAACe,IAAI;MACbnB,2BAA2B,CAACF,gBAAgB,CAAC;MAC7C,GAAG;MACHkB,0BAA0B;;EAE9B;;EAEA,OAAOC,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAe,CAACJ,0BAAkC,EAAE;EAClE,OAAOlB,gBAAgB,GAAG,GAAG,GAAGkB,0BAA0B;AAC5D;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,mBAAmB,CAACpB,IAAY,EAAE;EAChDH,gBAAgB,GAAGG,IAAI;AACzB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASqB,kBAAkB,CAACC,IAAY,EAAE;EAC/CxB,eAAe,GAAGwB,IAAI;AACxB"}