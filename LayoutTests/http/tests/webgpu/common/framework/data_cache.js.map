{"version":3,"file":"data_cache.js","names":["DataCache","setStore","dataStore","setDebugLogger","logger","debugLogger","fetch","cacheable","data","cache","get","path","undefined","log","Promise","resolve","unavailableFiles","has","serialized","load","err","add","deserialize","set","build","msg","Map","Set","dataCache","isBuildingDataCache","getIsBuildingDataCache","setIsBuildingDataCache","value"],"sources":["../../../src/common/framework/data_cache.ts"],"sourcesContent":["/**\n * Utilities to improve the performance of the CTS, by caching data that is\n * expensive to build using a two-level cache (in-memory, pre-computed file).\n */\n\ninterface DataStore {\n  load(path: string): Promise<string>;\n}\n\n/** Logger is a basic debug logger function */\nexport type Logger = (s: string) => void;\n\n/** DataCache is an interface to a data store used to hold cached data */\nexport class DataCache {\n  /** setDataStore() sets the backing data store used by the data cache */\n  public setStore(dataStore: DataStore) {\n    this.dataStore = dataStore;\n  }\n\n  /** setDebugLogger() sets the verbose logger */\n  public setDebugLogger(logger: Logger) {\n    this.debugLogger = logger;\n  }\n\n  /**\n   * fetch() retrieves cacheable data from the data cache, first checking the\n   * in-memory cache, then the data store (if specified), then resorting to\n   * building the data and storing it in the cache.\n   */\n  public async fetch<Data>(cacheable: Cacheable<Data>): Promise<Data> {\n    // First check the in-memory cache\n    let data = this.cache.get(cacheable.path);\n    if (data !== undefined) {\n      this.log('in-memory cache hit');\n      return Promise.resolve(data as Data);\n    }\n    this.log('in-memory cache miss');\n    // In in-memory cache miss.\n    // Next, try the data store.\n    if (this.dataStore !== null && !this.unavailableFiles.has(cacheable.path)) {\n      let serialized: string | undefined;\n      try {\n        serialized = await this.dataStore.load(cacheable.path);\n        this.log('loaded serialized');\n      } catch (err) {\n        // not found in data store\n        this.log(`failed to load (${cacheable.path}): ${err}`);\n        this.unavailableFiles.add(cacheable.path);\n      }\n      if (serialized !== undefined) {\n        this.log(`deserializing`);\n        data = cacheable.deserialize(serialized);\n        this.cache.set(cacheable.path, data);\n        return data as Data;\n      }\n    }\n    // Not found anywhere. Build the data, and cache for future lookup.\n    this.log(`cache: building (${cacheable.path})`);\n    data = await cacheable.build();\n    this.cache.set(cacheable.path, data);\n    return data as Data;\n  }\n\n  private log(msg: string) {\n    if (this.debugLogger !== null) {\n      this.debugLogger(`DataCache: ${msg}`);\n    }\n  }\n\n  private cache = new Map<string, unknown>();\n  private unavailableFiles = new Set<string>();\n  private dataStore: DataStore | null = null;\n  private debugLogger: Logger | null = null;\n}\n\n/** The data cache */\nexport const dataCache = new DataCache();\n\n/** true if the current process is building the cache */\nlet isBuildingDataCache = false;\n\n/** @returns true if the data cache is currently being built */\nexport function getIsBuildingDataCache() {\n  return isBuildingDataCache;\n}\n\n/** Sets whether the data cache is currently being built */\nexport function setIsBuildingDataCache(value = true) {\n  isBuildingDataCache = value;\n}\n\n/**\n * Cacheable is the interface to something that can be stored into the\n * DataCache.\n * The 'npm run gen_cache' tool will look for module-scope variables of this\n * interface, with the name `d`.\n */\nexport interface Cacheable<Data> {\n  /** the globally unique path for the cacheable data */\n  readonly path: string;\n\n  /**\n   * build() builds the cacheable data.\n   * This is assumed to be an expensive operation and will only happen if the\n   * cache does not already contain the built data.\n   */\n  build(): Promise<Data>;\n\n  /**\n   * serialize() transforms `data` to a string (usually JSON encoded) so that it\n   * can be stored in a text cache file.\n   */\n  serialize(data: Data): string;\n\n  /**\n   * deserialize() is the inverse of serialize(), transforming the string back\n   * to the Data object.\n   */\n  deserialize(serialized: string): Data;\n}\n"],"mappings":";AAAA;AAAA;;;;;;;;;;AAYA;AACA,OAAO,MAAMA,SAAS,CAAC;EACrB;EACOC,QAAQ,CAACC,SAAoB,EAAE;IACpC,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;;EAEA;EACOC,cAAc,CAACC,MAAc,EAAE;IACpC,IAAI,CAACC,WAAW,GAAGD,MAAM;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAaE,KAAK,CAAOC,SAA0B,EAAiB;IAClE;IACA,IAAIC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,GAAG,CAACH,SAAS,CAACI,IAAI,CAAC;IACzC,IAAIH,IAAI,KAAKI,SAAS,EAAE;MACtB,IAAI,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAC/B,OAAOC,OAAO,CAACC,OAAO,CAACP,IAAI,CAAS;IACtC;IACA,IAAI,CAACK,GAAG,CAAC,sBAAsB,CAAC;IAChC;IACA;IACA,IAAI,IAAI,CAACX,SAAS,KAAK,IAAI,IAAI,CAAC,IAAI,CAACc,gBAAgB,CAACC,GAAG,CAACV,SAAS,CAACI,IAAI,CAAC,EAAE;MACzE,IAAIO,UAA8B;MAClC,IAAI;QACFA,UAAU,GAAG,MAAM,IAAI,CAAChB,SAAS,CAACiB,IAAI,CAACZ,SAAS,CAACI,IAAI,CAAC;QACtD,IAAI,CAACE,GAAG,CAAC,mBAAmB,CAAC;MAC/B,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZ;QACA,IAAI,CAACP,GAAG,CAAE,mBAAkBN,SAAS,CAACI,IAAK,MAAKS,GAAI,EAAC,CAAC;QACtD,IAAI,CAACJ,gBAAgB,CAACK,GAAG,CAACd,SAAS,CAACI,IAAI,CAAC;MAC3C;MACA,IAAIO,UAAU,KAAKN,SAAS,EAAE;QAC5B,IAAI,CAACC,GAAG,CAAE,eAAc,CAAC;QACzBL,IAAI,GAAGD,SAAS,CAACe,WAAW,CAACJ,UAAU,CAAC;QACxC,IAAI,CAACT,KAAK,CAACc,GAAG,CAAChB,SAAS,CAACI,IAAI,EAAEH,IAAI,CAAC;QACpC,OAAOA,IAAI;MACb;IACF;IACA;IACA,IAAI,CAACK,GAAG,CAAE,oBAAmBN,SAAS,CAACI,IAAK,GAAE,CAAC;IAC/CH,IAAI,GAAG,MAAMD,SAAS,CAACiB,KAAK,EAAE;IAC9B,IAAI,CAACf,KAAK,CAACc,GAAG,CAAChB,SAAS,CAACI,IAAI,EAAEH,IAAI,CAAC;IACpC,OAAOA,IAAI;EACb;;EAEQK,GAAG,CAACY,GAAW,EAAE;IACvB,IAAI,IAAI,CAACpB,WAAW,KAAK,IAAI,EAAE;MAC7B,IAAI,CAACA,WAAW,CAAE,cAAaoB,GAAI,EAAC,CAAC;IACvC;EACF;;EAEQhB,KAAK,GAAG,IAAIiB,GAAG,EAAmB;EAClCV,gBAAgB,GAAG,IAAIW,GAAG,EAAU;EACpCzB,SAAS,GAAqB,IAAI;EAClCG,WAAW,GAAkB,IAAI;AAC3C;;AAEA;AACA,OAAO,MAAMuB,SAAS,GAAG,IAAI5B,SAAS,EAAE;;AAExC;AACA,IAAI6B,mBAAmB,GAAG,KAAK;;AAE/B;AACA,OAAO,SAASC,sBAAsB,GAAG;EACvC,OAAOD,mBAAmB;AAC5B;;AAEA;AACA,OAAO,SAASE,sBAAsB,CAACC,KAAK,GAAG,IAAI,EAAE;EACnDH,mBAAmB,GAAGG,KAAK;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA"}