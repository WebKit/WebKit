{"version":3,"sources":["../../../src/common/util/util.ts"],"names":["Logger","timeout","ErrorWithExtra","Error","constructor","baseOrMessage","newExtra","message","oldExtras","extra","globalDebugMode","omitted","assert","condition","msg","assertOK","value","assertReject","p","unreachable","ex","perf","performance","require","now","resolveOnTimeout","ms","Promise","resolve","PromiseTimeoutError","rejectOnTimeout","_resolve","reject","raceWithRejectOnTimeout","timeoutPromise","handle","finally","clearTimeout","race","sortObjectByKey","v","sortedObject","k","Object","keys","sort","objectEquals","x","y","Function","RegExp","valueOf","Array","isArray","length","Date","x1","y1","every","i","indexOf","range","n","fn","map","_","iterRange","subarrayAsU8","buf","start","ArrayBuffer","Uint8Array","sub","subarray","undefined","buffer","byteOffset","byteLength","memcpy","src","dst","set"],"mappings":"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","sourcesContent":["import { Logger } from '../internal/logging/logger.js';\n\nimport { timeout } from './timeout.js';\n\n/**\n * Error with arbitrary `extra` data attached, for debugging.\n * The extra data is omitted if not running the test in debug mode (`?debug=1`).\n */\nexport class ErrorWithExtra extends Error {\n  readonly extra: { [k: string]: unknown };\n\n  /**\n   * `extra` function is only called if in debug mode.\n   * If an `ErrorWithExtra` is passed, its message is used and its extras are passed through.\n   */\n  constructor(message: string, extra: () => {});\n  constructor(base: ErrorWithExtra, newExtra: () => {});\n  constructor(baseOrMessage: string | ErrorWithExtra, newExtra: () => {}) {\n    const message = typeof baseOrMessage === 'string' ? baseOrMessage : baseOrMessage.message;\n    super(message);\n\n    const oldExtras = baseOrMessage instanceof ErrorWithExtra ? baseOrMessage.extra : {};\n    this.extra = Logger.globalDebugMode\n      ? { ...oldExtras, ...newExtra() }\n      : { omitted: 'pass ?debug=1' };\n  }\n}\n\n/**\n * Asserts `condition` is true. Otherwise, throws an `Error` with the provided message.\n */\nexport function assert(condition: boolean, msg?: string | (() => string)): asserts condition {\n  if (!condition) {\n    throw new Error(msg && (typeof msg === 'string' ? msg : msg()));\n  }\n}\n\n/** If the argument is an Error, throw it. Otherwise, pass it back. */\nexport function assertOK<T>(value: Error | T): T {\n  if (value instanceof Error) {\n    throw value;\n  }\n  return value;\n}\n\n/**\n * Resolves if the provided promise rejects; rejects if it does not.\n */\nexport async function assertReject(p: Promise<unknown>, msg?: string): Promise<void> {\n  try {\n    await p;\n    unreachable(msg);\n  } catch (ex) {\n    // Assertion OK\n  }\n}\n\n/**\n * Assert this code is unreachable. Unconditionally throws an `Error`.\n */\nexport function unreachable(msg?: string): never {\n  throw new Error(msg);\n}\n\n/**\n * The `performance` interface.\n * It is available in all browsers, but it is not in scope by default in Node.\n */\nconst perf = typeof performance !== 'undefined' ? performance : require('perf_hooks').performance;\n\n/**\n * Calls the appropriate `performance.now()` depending on whether running in a browser or Node.\n */\nexport function now(): number {\n  return perf.now();\n}\n\n/**\n * Returns a promise which resolves after the specified time.\n */\nexport function resolveOnTimeout(ms: number): Promise<void> {\n  return new Promise(resolve => {\n    timeout(() => {\n      resolve();\n    }, ms);\n  });\n}\n\nexport class PromiseTimeoutError extends Error {}\n\n/**\n * Returns a promise which rejects after the specified time.\n */\nexport function rejectOnTimeout(ms: number, msg: string): Promise<never> {\n  return new Promise((_resolve, reject) => {\n    timeout(() => {\n      reject(new PromiseTimeoutError(msg));\n    }, ms);\n  });\n}\n\n/**\n * Takes a promise `p`, and returns a new one which rejects if `p` takes too long,\n * and otherwise passes the result through.\n */\nexport function raceWithRejectOnTimeout<T>(p: Promise<T>, ms: number, msg: string): Promise<T> {\n  // Setup a promise that will reject after `ms` milliseconds. We cancel this timeout when\n  // `p` is finalized, so the JavaScript VM doesn't hang around waiting for the timer to\n  // complete, once the test runner has finished executing the tests.\n  const timeoutPromise = new Promise((_resolve, reject) => {\n    const handle = timeout(() => {\n      reject(new PromiseTimeoutError(msg));\n    }, ms);\n    p = p.finally(() => clearTimeout(handle));\n  });\n  return Promise.race([p, timeoutPromise]) as Promise<T>;\n}\n\n/**\n * Makes a copy of a JS `object`, with the keys reordered into sorted order.\n */\nexport function sortObjectByKey(v: { [k: string]: unknown }): { [k: string]: unknown } {\n  const sortedObject: { [k: string]: unknown } = {};\n  for (const k of Object.keys(v).sort()) {\n    sortedObject[k] = v[k];\n  }\n  return sortedObject;\n}\n\n/**\n * Determines whether two JS values are equal, recursing into objects and arrays.\n */\nexport function objectEquals(x: unknown, y: unknown): boolean {\n  if (typeof x !== 'object' || typeof y !== 'object') return x === y;\n  if (x === null || y === null) return x === y;\n  if (x.constructor !== y.constructor) return false;\n  if (x instanceof Function) return x === y;\n  if (x instanceof RegExp) return x === y;\n  if (x === y || x.valueOf() === y.valueOf()) return true;\n  if (Array.isArray(x) && Array.isArray(y) && x.length !== y.length) return false;\n  if (x instanceof Date) return false;\n  if (!(x instanceof Object)) return false;\n  if (!(y instanceof Object)) return false;\n\n  const x1 = x as { [k: string]: unknown };\n  const y1 = y as { [k: string]: unknown };\n  const p = Object.keys(x);\n  return Object.keys(y).every(i => p.indexOf(i) !== -1) && p.every(i => objectEquals(x1[i], y1[i]));\n}\n\n/**\n * Generates a range of values `fn(0)..fn(n-1)`.\n */\nexport function range<T>(n: number, fn: (i: number) => T): T[] {\n  return [...new Array(n)].map((_, i) => fn(i));\n}\n\n/**\n * Generates a range of values `fn(0)..fn(n-1)`.\n */\nexport function* iterRange<T>(n: number, fn: (i: number) => T): Iterable<T> {\n  for (let i = 0; i < n; ++i) {\n    yield fn(i);\n  }\n}\n\nexport type TypedArrayBufferView =\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\nexport type TypedArrayBufferViewConstructor<\n  A extends TypedArrayBufferView = TypedArrayBufferView\n> = {\n  // Interface copied from Uint8Array, and made generic.\n  readonly prototype: A;\n  readonly BYTES_PER_ELEMENT: number;\n\n  new (): A;\n  new (elements: Iterable<number>): A;\n  new (array: ArrayLike<number> | ArrayBufferLike): A;\n  new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): A;\n  new (length: number): A;\n\n  from(arrayLike: ArrayLike<number>): A;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): A;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): A;\n  of(...items: number[]): A;\n};\n\nfunction subarrayAsU8(\n  buf: ArrayBuffer | TypedArrayBufferView,\n  { start = 0, length }: { start?: number; length?: number }\n): Uint8Array {\n  if (buf instanceof ArrayBuffer) {\n    return new Uint8Array(buf, start, length);\n  } else {\n    const sub = buf.subarray(start, length !== undefined ? start + length : undefined);\n    return new Uint8Array(sub.buffer, sub.byteOffset, sub.byteLength);\n  }\n}\n\n/**\n * Copy a range of bytes from one ArrayBuffer or TypedArray to another.\n *\n * `start`/`length` are in elements (or in bytes, if ArrayBuffer).\n */\nexport function memcpy(\n  src: { src: ArrayBuffer | TypedArrayBufferView; start?: number; length?: number },\n  dst: { dst: ArrayBuffer | TypedArrayBufferView; start?: number }\n): void {\n  subarrayAsU8(dst.dst, dst).set(subarrayAsU8(src.src, src));\n}\n"],"file":"util.js"}