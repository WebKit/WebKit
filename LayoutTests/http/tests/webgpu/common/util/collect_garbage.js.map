{"version":3,"sources":["../../../src/common/util/collect_garbage.ts"],"names":["resolveOnTimeout","attemptGarbageCollection","w","self","GCController","collect","opera","QueryInterface","Components","interfaces","nsIInterfaceRequestor","getInterface","nsIDOMWindowUtils","garbageCollect","e","gc","CollectGarbage","i","gcRec","n","temp"],"mappings":";AAAA;AACA,GADA,SAASA,gBAAT,QAAiC,WAAjC;;;AAKA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,wBAAf,GAAyD;;AAE9D,QAAMC,CAAM,GAAGC,IAAf;AACA,MAAID,CAAC,CAACE,YAAN,EAAoB;AAClBF,IAAAA,CAAC,CAACE,YAAF,CAAeC,OAAf;AACA;AACD;;AAED,MAAIH,CAAC,CAACI,KAAF,IAAWJ,CAAC,CAACI,KAAF,CAAQD,OAAvB,EAAgC;AAC9BH,IAAAA,CAAC,CAACI,KAAF,CAAQD,OAAR;AACA;AACD;;AAED,MAAI;AACFH,IAAAA,CAAC,CAACK,cAAF,CAAiBC,UAAU,CAACC,UAAX,CAAsBC,qBAAvC;AACGC,IAAAA,YADH,CACgBH,UAAU,CAACC,UAAX,CAAsBG,iBADtC;AAEGC,IAAAA,cAFH;AAGA;AACD,GALD,CAKE,OAAOC,CAAP,EAAU;AACV;AACD;;AAED,MAAIZ,CAAC,CAACa,EAAN,EAAU;AACRb,IAAAA,CAAC,CAACa,EAAF;AACA;AACD;;AAED,MAAIb,CAAC,CAACc,cAAN,EAAsB;AACpBd,IAAAA,CAAC,CAACc,cAAF;AACA;AACD;;AAED,MAAIC,CAAJ;AACA,WAASC,KAAT,CAAeC,CAAf,EAAgC;AAC9B,QAAIA,CAAC,GAAG,CAAR,EAAW;AACX,QAAIC,IAAqB,GAAG,EAAEH,CAAC,EAAE,OAAOA,CAAP,GAAWA,CAAC,GAAG,MAApB,EAA5B;AACAG,IAAAA,IAAI,GAAGA,IAAI,GAAG,KAAd;AACAA,IAAAA,IAAI,CAJ0B,CAIxB;AACNF,IAAAA,KAAK,CAACC,CAAC,GAAG,CAAL,CAAL;AACD;AACD,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,IAAhB,EAAsBA,CAAC,EAAvB,EAA2B;AACzBC,IAAAA,KAAK,CAAC,EAAD,CAAL;AACD;;AAED,SAAOlB,gBAAgB,CAAC,EAAD,CAAvB,CA5C8D,CA4CjC;AAC9B","sourcesContent":["import { resolveOnTimeout } from './util.js';\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ndeclare const Components: any;\n\n/**\n * Attempts to trigger JavaScript garbage collection, either using explicit methods if exposed\n * (may be available in testing environments with special browser runtime flags set), or using\n * some weird tricks to incur GC pressure. Adopted from the WebGL CTS.\n */\nexport async function attemptGarbageCollection(): Promise<void> {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const w: any = self;\n  if (w.GCController) {\n    w.GCController.collect();\n    return;\n  }\n\n  if (w.opera && w.opera.collect) {\n    w.opera.collect();\n    return;\n  }\n\n  try {\n    w.QueryInterface(Components.interfaces.nsIInterfaceRequestor)\n      .getInterface(Components.interfaces.nsIDOMWindowUtils)\n      .garbageCollect();\n    return;\n  } catch (e) {\n    // ignore any failure\n  }\n\n  if (w.gc) {\n    w.gc();\n    return;\n  }\n\n  if (w.CollectGarbage) {\n    w.CollectGarbage();\n    return;\n  }\n\n  let i: number;\n  function gcRec(n: number): void {\n    if (n < 1) return;\n    let temp: object | string = { i: 'ab' + i + i / 100000 };\n    temp = temp + 'foo';\n    temp; // dummy use of unused variable\n    gcRec(n - 1);\n  }\n  for (i = 0; i < 1000; i++) {\n    gcRec(10);\n  }\n\n  return resolveOnTimeout(35); // Let the event loop run a few frames in case it helps.\n}\n"],"file":"collect_garbage.js"}