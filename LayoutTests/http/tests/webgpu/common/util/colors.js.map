{"version":3,"file":"colors.js","names":["Colors","require","passthrough","s","enabled","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","black","red","green","yellow","blue","magenta","cyan","white","gray","grey","blackBright","redBright","greenBright","yellowBright","blueBright","magentaBright","cyanBright","whiteBright","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bgBlackBright","bgRedBright","bgGreenBright","bgYellowBright","bgBlueBright","bgMagentaBright","bgCyanBright","bgWhiteBright"],"sources":["../../../src/common/util/colors.ts"],"sourcesContent":["/**\n * The interface used for formatting strings to contain color metadata.\n *\n * Use the interface properties to construct a style, then use the\n * `(s: string): string` function to format the provided string with the given\n * style.\n */\nexport interface Colors {\n  // Are colors enabled?\n  enabled: boolean;\n\n  // Returns the string formatted to contain the specified color or style.\n  (s: string): string;\n\n  // modifiers\n  reset: Colors;\n  bold: Colors;\n  dim: Colors;\n  italic: Colors;\n  underline: Colors;\n  inverse: Colors;\n  hidden: Colors;\n  strikethrough: Colors;\n\n  // colors\n  black: Colors;\n  red: Colors;\n  green: Colors;\n  yellow: Colors;\n  blue: Colors;\n  magenta: Colors;\n  cyan: Colors;\n  white: Colors;\n  gray: Colors;\n  grey: Colors;\n\n  // bright colors\n  blackBright: Colors;\n  redBright: Colors;\n  greenBright: Colors;\n  yellowBright: Colors;\n  blueBright: Colors;\n  magentaBright: Colors;\n  cyanBright: Colors;\n  whiteBright: Colors;\n\n  // background colors\n  bgBlack: Colors;\n  bgRed: Colors;\n  bgGreen: Colors;\n  bgYellow: Colors;\n  bgBlue: Colors;\n  bgMagenta: Colors;\n  bgCyan: Colors;\n  bgWhite: Colors;\n\n  // bright background colors\n  bgBlackBright: Colors;\n  bgRedBright: Colors;\n  bgGreenBright: Colors;\n  bgYellowBright: Colors;\n  bgBlueBright: Colors;\n  bgMagentaBright: Colors;\n  bgCyanBright: Colors;\n  bgWhiteBright: Colors;\n}\n\n/**\n * The interface used for formatting strings with color metadata.\n *\n * Currently Colors will use the 'ansi-colors' module if it can be loaded.\n * If it cannot be loaded, then the Colors implementation is a straight pass-through.\n *\n * Colors may also be a no-op if the current environment does not support colors.\n */\nexport let Colors: Colors;\n\ntry {\n  /* eslint-disable-next-line node/no-unpublished-require */\n  Colors = require('ansi-colors') as Colors;\n} catch {\n  const passthrough = ((s: string) => s) as Colors;\n  passthrough.enabled = false;\n  passthrough.reset = passthrough;\n  passthrough.bold = passthrough;\n  passthrough.dim = passthrough;\n  passthrough.italic = passthrough;\n  passthrough.underline = passthrough;\n  passthrough.inverse = passthrough;\n  passthrough.hidden = passthrough;\n  passthrough.strikethrough = passthrough;\n  passthrough.black = passthrough;\n  passthrough.red = passthrough;\n  passthrough.green = passthrough;\n  passthrough.yellow = passthrough;\n  passthrough.blue = passthrough;\n  passthrough.magenta = passthrough;\n  passthrough.cyan = passthrough;\n  passthrough.white = passthrough;\n  passthrough.gray = passthrough;\n  passthrough.grey = passthrough;\n  passthrough.blackBright = passthrough;\n  passthrough.redBright = passthrough;\n  passthrough.greenBright = passthrough;\n  passthrough.yellowBright = passthrough;\n  passthrough.blueBright = passthrough;\n  passthrough.magentaBright = passthrough;\n  passthrough.cyanBright = passthrough;\n  passthrough.whiteBright = passthrough;\n  passthrough.bgBlack = passthrough;\n  passthrough.bgRed = passthrough;\n  passthrough.bgGreen = passthrough;\n  passthrough.bgYellow = passthrough;\n  passthrough.bgBlue = passthrough;\n  passthrough.bgMagenta = passthrough;\n  passthrough.bgCyan = passthrough;\n  passthrough.bgWhite = passthrough;\n  passthrough.bgBlackBright = passthrough;\n  passthrough.bgRedBright = passthrough;\n  passthrough.bgGreenBright = passthrough;\n  passthrough.bgYellowBright = passthrough;\n  passthrough.bgBlueBright = passthrough;\n  passthrough.bgMagentaBright = passthrough;\n  passthrough.bgCyanBright = passthrough;\n  passthrough.bgWhiteBright = passthrough;\n  Colors = passthrough;\n}\n"],"mappings":";AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,MAAc;;AAEzB,IAAI;;EAEFA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAW;AAC3C,CAAC,CAAC,MAAM;EACN,MAAMC,WAAW,GAAI,CAACC,CAAS,KAAKA,CAAY;EAChDD,WAAW,CAACE,OAAO,GAAG,KAAK;EAC3BF,WAAW,CAACG,KAAK,GAAGH,WAAW;EAC/BA,WAAW,CAACI,IAAI,GAAGJ,WAAW;EAC9BA,WAAW,CAACK,GAAG,GAAGL,WAAW;EAC7BA,WAAW,CAACM,MAAM,GAAGN,WAAW;EAChCA,WAAW,CAACO,SAAS,GAAGP,WAAW;EACnCA,WAAW,CAACQ,OAAO,GAAGR,WAAW;EACjCA,WAAW,CAACS,MAAM,GAAGT,WAAW;EAChCA,WAAW,CAACU,aAAa,GAAGV,WAAW;EACvCA,WAAW,CAACW,KAAK,GAAGX,WAAW;EAC/BA,WAAW,CAACY,GAAG,GAAGZ,WAAW;EAC7BA,WAAW,CAACa,KAAK,GAAGb,WAAW;EAC/BA,WAAW,CAACc,MAAM,GAAGd,WAAW;EAChCA,WAAW,CAACe,IAAI,GAAGf,WAAW;EAC9BA,WAAW,CAACgB,OAAO,GAAGhB,WAAW;EACjCA,WAAW,CAACiB,IAAI,GAAGjB,WAAW;EAC9BA,WAAW,CAACkB,KAAK,GAAGlB,WAAW;EAC/BA,WAAW,CAACmB,IAAI,GAAGnB,WAAW;EAC9BA,WAAW,CAACoB,IAAI,GAAGpB,WAAW;EAC9BA,WAAW,CAACqB,WAAW,GAAGrB,WAAW;EACrCA,WAAW,CAACsB,SAAS,GAAGtB,WAAW;EACnCA,WAAW,CAACuB,WAAW,GAAGvB,WAAW;EACrCA,WAAW,CAACwB,YAAY,GAAGxB,WAAW;EACtCA,WAAW,CAACyB,UAAU,GAAGzB,WAAW;EACpCA,WAAW,CAAC0B,aAAa,GAAG1B,WAAW;EACvCA,WAAW,CAAC2B,UAAU,GAAG3B,WAAW;EACpCA,WAAW,CAAC4B,WAAW,GAAG5B,WAAW;EACrCA,WAAW,CAAC6B,OAAO,GAAG7B,WAAW;EACjCA,WAAW,CAAC8B,KAAK,GAAG9B,WAAW;EAC/BA,WAAW,CAAC+B,OAAO,GAAG/B,WAAW;EACjCA,WAAW,CAACgC,QAAQ,GAAGhC,WAAW;EAClCA,WAAW,CAACiC,MAAM,GAAGjC,WAAW;EAChCA,WAAW,CAACkC,SAAS,GAAGlC,WAAW;EACnCA,WAAW,CAACmC,MAAM,GAAGnC,WAAW;EAChCA,WAAW,CAACoC,OAAO,GAAGpC,WAAW;EACjCA,WAAW,CAACqC,aAAa,GAAGrC,WAAW;EACvCA,WAAW,CAACsC,WAAW,GAAGtC,WAAW;EACrCA,WAAW,CAACuC,aAAa,GAAGvC,WAAW;EACvCA,WAAW,CAACwC,cAAc,GAAGxC,WAAW;EACxCA,WAAW,CAACyC,YAAY,GAAGzC,WAAW;EACtCA,WAAW,CAAC0C,eAAe,GAAG1C,WAAW;EACzCA,WAAW,CAAC2C,YAAY,GAAG3C,WAAW;EACtCA,WAAW,CAAC4C,aAAa,GAAG5C,WAAW;EACvCF,MAAM,GAAGE,WAAW;AACtB"}