{"version":3,"sources":["../../../src/common/util/preprocessor.ts"],"names":["assert","State","Directive","constructor","depth","checkDepth","stack","length","If","predicate","applyTo","parentState","state","push","allowsFollowingElse","Passing","Skipping","Seeking","ElseIf","siblingState","pop","Else","EndIf","pp","strings","values","result","stateStack","i","passing","value","_if","_elif","_else","_endif","__if","__elif","__else","__endif","___if","___elif","___else","___endif"],"mappings":"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","sourcesContent":["import { assert } from './util.js';\n\n// The state of the preprocessor is a stack of States.\ntype StateStack = { allowsFollowingElse: boolean; state: State }[];\nconst enum State {\n  Seeking, // Still looking for a passing condition\n  Passing, // Currently inside a passing condition (the root is always in this state)\n  Skipping, // Have already seen a passing condition; now skipping the rest\n}\n\n// The transitions in the state space are the following preprocessor directives:\n// - Sibling elif\n// - Sibling else\n// - Sibling endif\n// - Child if\nabstract class Directive {\n  private readonly depth: number;\n\n  constructor(depth: number) {\n    this.depth = depth;\n  }\n\n  protected checkDepth(stack: StateStack): void {\n    assert(\n      stack.length === this.depth,\n      `Number of \"$\"s must match nesting depth, currently ${stack.length} (e.g. $if $$if $$endif $endif)`\n    );\n  }\n\n  abstract applyTo(stack: StateStack): void;\n}\n\nclass If extends Directive {\n  private readonly predicate: boolean;\n\n  constructor(depth: number, predicate: boolean) {\n    super(depth);\n    this.predicate = predicate;\n  }\n\n  applyTo(stack: StateStack) {\n    this.checkDepth(stack);\n    const parentState = stack[stack.length - 1].state;\n    stack.push({\n      allowsFollowingElse: true,\n      state:\n        parentState !== State.Passing\n          ? State.Skipping\n          : this.predicate\n          ? State.Passing\n          : State.Seeking,\n    });\n  }\n}\n\nclass ElseIf extends If {\n  applyTo(stack: StateStack) {\n    assert(stack.length >= 1);\n    const { allowsFollowingElse, state: siblingState } = stack.pop()!;\n    this.checkDepth(stack);\n    assert(allowsFollowingElse, 'pp.elif after pp.else');\n    if (siblingState !== State.Seeking) {\n      stack.push({ allowsFollowingElse: true, state: State.Skipping });\n    } else {\n      super.applyTo(stack);\n    }\n  }\n}\n\nclass Else extends Directive {\n  applyTo(stack: StateStack) {\n    assert(stack.length >= 1);\n    const { allowsFollowingElse, state: siblingState } = stack.pop()!;\n    this.checkDepth(stack);\n    assert(allowsFollowingElse, 'pp.else after pp.else');\n    stack.push({\n      allowsFollowingElse: false,\n      state: siblingState === State.Seeking ? State.Passing : State.Skipping,\n    });\n  }\n}\n\nclass EndIf extends Directive {\n  applyTo(stack: StateStack) {\n    stack.pop();\n    this.checkDepth(stack);\n  }\n}\n\n/**\n * A simple template-based, non-line-based preprocessor implementing if/elif/else/endif.\n *\n * @example\n * ```\n *     const shader = pp`\n * ${pp._if(expr)}\n *   const x: ${type} = ${value};\n * ${pp._elif(expr)}\n * ${pp.__if(expr)}\n * ...\n * ${pp.__else}\n * ...\n * ${pp.__endif}\n * ${pp._endif}`;\n * ```\n *\n * @param strings - The array of constant string chunks of the template string.\n * @param ...values - The array of interpolated ${} values within the template string.\n */\nexport function pp(\n  strings: TemplateStringsArray,\n  ...values: ReadonlyArray<Directive | string | number>\n): string {\n  let result = '';\n  const stateStack: StateStack = [{ allowsFollowingElse: false, state: State.Passing }];\n\n  for (let i = 0; i < values.length; ++i) {\n    const passing = stateStack[stateStack.length - 1].state === State.Passing;\n    if (passing) {\n      result += strings[i];\n    }\n\n    const value = values[i];\n    if (value instanceof Directive) {\n      value.applyTo(stateStack);\n    } else {\n      if (passing) {\n        result += value;\n      }\n    }\n  }\n  assert(stateStack.length === 1, 'Unterminated preprocessor condition at end of file');\n  result += strings[values.length];\n\n  return result;\n}\npp._if = (predicate: boolean) => new If(1, predicate);\npp._elif = (predicate: boolean) => new ElseIf(1, predicate);\npp._else = new Else(1);\npp._endif = new EndIf(1);\npp.__if = (predicate: boolean) => new If(2, predicate);\npp.__elif = (predicate: boolean) => new ElseIf(2, predicate);\npp.__else = new Else(2);\npp.__endif = new EndIf(2);\npp.___if = (predicate: boolean) => new If(3, predicate);\npp.___elif = (predicate: boolean) => new ElseIf(3, predicate);\npp.___else = new Else(3);\npp.___endif = new EndIf(3);\n// Add more if needed.\n"],"file":"preprocessor.js"}