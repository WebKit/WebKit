{"version":3,"sources":["../../../src/common/util/data_tables.ts"],"names":["keysOf","obj","Object","keys","numericKeysOf","map","n","Number","makeTable","members","defaults","table","result","k","v","entries","item","i","length"],"mappings":";AAAA;AACA;;AAGA,OAAO,SAASA,MAAT,CAAkCC,GAAlC,EAA4E;AACjF,SAAQC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAR;AACD;;AAED,OAAO,SAASG,aAAT,CAA0BH,GAA1B,EAAqD;AAC1D,SAAQC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBI,GAAjB,CAAqB,CAAAC,CAAC,KAAIC,MAAM,CAACD,CAAD,CAAhC,CAAR;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,SAAT;;;;;AAKLC,OALK;AAMLC,QANK;AAOLC,KAPK;;;AAUL;AACA,QAAMC,MAAiD,GAAG,EAA1D;AACA,OAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBZ,MAAM,CAACa,OAAP,CAAmCJ,KAAnC,CAArB,EAAgE;AAC9D,UAAMK,IAA8B,GAAG,EAAvC;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvCD,MAAAA,IAAI,CAACP,OAAO,CAACQ,CAAD,CAAR,CAAJ,GAAmBH,CAAC,CAACG,CAAD,CAAD,IAAQP,QAAQ,CAACO,CAAD,CAAnC;AACD;AACDL,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYG,IAAZ;AACD;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["import { ResolveType, ZipKeysWithValues } from './types.js';\n\nexport type valueof<K> = K[keyof K];\n\nexport function keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nexport function numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table. See below for examples.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n */\nexport function makeTable<\n  Members extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] }\n>(\n  members: Members,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n"],"file":"data_tables.js"}