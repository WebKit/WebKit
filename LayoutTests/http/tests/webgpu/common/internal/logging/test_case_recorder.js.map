{"version":3,"file":"test_case_recorder.js","names":["SkipTestCase","UnexpectedPassError","globalTestConfig","now","assert","LogMessageWithStack","LogSeverity","kMaxLogStacks","kMinSeverityForStack","Warn","TestCaseRecorder","inSubCase","subCaseStatus","Pass","finalCaseStatus","hideStacksBelowSeverity","startTime","logs","logLinesAtCurrentSeverity","debugging","messagesForPreviouslySeenStacks","Map","constructor","result","start","finish","timeMilliseconds","timems","Math","ceil","status","Skip","beginSubCase","endSubCase","expectedStatus","injectResult","injectedResult","Object","assign","debug","ex","logImpl","info","skipped","warn","expectationFailed","ExpectFailed","validationFailed","ValidationFailed","threw","ThrewException","level","name","baseException","Error","testHeartbeatCallback","logMessage","log","setStackHidden","push"],"sources":["../../../../src/common/internal/logging/test_case_recorder.ts"],"sourcesContent":["import { SkipTestCase, UnexpectedPassError } from '../../framework/fixture.js';\nimport { globalTestConfig } from '../../framework/test_config.js';\nimport { now, assert } from '../../util/util.js';\n\nimport { LogMessageWithStack } from './log_message.js';\nimport { Expectation, LiveTestCaseResult } from './result.js';\n\nenum LogSeverity {\n  Pass = 0,\n  Skip = 1,\n  Warn = 2,\n  ExpectFailed = 3,\n  ValidationFailed = 4,\n  ThrewException = 5,\n}\n\nconst kMaxLogStacks = 2;\nconst kMinSeverityForStack = LogSeverity.Warn;\n\n/** Holds onto a LiveTestCaseResult owned by the Logger, and writes the results into it. */\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private inSubCase: boolean = false;\n  private subCaseStatus = LogSeverity.Pass;\n  private finalCaseStatus = LogSeverity.Pass;\n  private hideStacksBelowSeverity = kMinSeverityForStack;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private logLinesAtCurrentSeverity = 0;\n  private debugging = false;\n  /** Used to dedup log messages which have identical stacks. */\n  private messagesForPreviouslySeenStacks = new Map<string, LogMessageWithStack>();\n\n  constructor(result: LiveTestCaseResult, debugging: boolean) {\n    this.result = result;\n    this.debugging = debugging;\n  }\n\n  start(): void {\n    assert(this.startTime < 0, 'TestCaseRecorder cannot be reused');\n    this.startTime = now();\n  }\n\n  finish(): void {\n    assert(this.startTime >= 0, 'finish() before start()');\n\n    const timeMilliseconds = now() - this.startTime;\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil(timeMilliseconds * 1000) / 1000;\n\n    // Convert numeric enum back to string (but expose 'exception' as 'fail')\n    this.result.status =\n      this.finalCaseStatus === LogSeverity.Pass\n        ? 'pass'\n        : this.finalCaseStatus === LogSeverity.Skip\n        ? 'skip'\n        : this.finalCaseStatus === LogSeverity.Warn\n        ? 'warn'\n        : 'fail'; // Everything else is an error\n\n    this.result.logs = this.logs;\n  }\n\n  beginSubCase() {\n    this.subCaseStatus = LogSeverity.Pass;\n    this.inSubCase = true;\n  }\n\n  endSubCase(expectedStatus: Expectation) {\n    try {\n      if (expectedStatus === 'fail') {\n        if (this.subCaseStatus <= LogSeverity.Warn) {\n          throw new UnexpectedPassError();\n        } else {\n          this.subCaseStatus = LogSeverity.Pass;\n        }\n      }\n    } finally {\n      this.inSubCase = false;\n      if (this.subCaseStatus > this.finalCaseStatus) {\n        this.finalCaseStatus = this.subCaseStatus;\n      }\n    }\n  }\n\n  injectResult(injectedResult: LiveTestCaseResult): void {\n    Object.assign(this.result, injectedResult);\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) return;\n    this.logImpl(LogSeverity.Pass, 'DEBUG', ex);\n  }\n\n  info(ex: Error): void {\n    this.logImpl(LogSeverity.Pass, 'INFO', ex);\n  }\n\n  skipped(ex: SkipTestCase): void {\n    this.logImpl(LogSeverity.Skip, 'SKIP', ex);\n  }\n\n  warn(ex: Error): void {\n    this.logImpl(LogSeverity.Warn, 'WARN', ex);\n  }\n\n  expectationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ExpectFailed, 'EXPECTATION FAILED', ex);\n  }\n\n  validationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ValidationFailed, 'VALIDATION FAILED', ex);\n  }\n\n  threw(ex: unknown): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n    this.logImpl(LogSeverity.ThrewException, 'EXCEPTION', ex);\n  }\n\n  private logImpl(level: LogSeverity, name: string, baseException: unknown): void {\n    assert(baseException instanceof Error, 'test threw a non-Error object');\n    globalTestConfig.testHeartbeatCallback();\n    const logMessage = new LogMessageWithStack(name, baseException);\n\n    // Final case status should be the \"worst\" of all log entries.\n    if (this.inSubCase) {\n      if (level > this.subCaseStatus) this.subCaseStatus = level;\n    } else {\n      if (level > this.finalCaseStatus) this.finalCaseStatus = level;\n    }\n\n    // setFirstLineOnly for all logs except `kMaxLogStacks` stacks at the highest severity\n    if (level > this.hideStacksBelowSeverity) {\n      this.logLinesAtCurrentSeverity = 0;\n      this.hideStacksBelowSeverity = level;\n\n      // Go back and setFirstLineOnly for everything of a lower log level\n      for (const log of this.logs) {\n        log.setStackHidden('below max severity');\n      }\n    }\n    if (level === this.hideStacksBelowSeverity) {\n      this.logLinesAtCurrentSeverity++;\n    } else if (level < kMinSeverityForStack) {\n      logMessage.setStackHidden('');\n    } else if (level < this.hideStacksBelowSeverity) {\n      logMessage.setStackHidden('below max severity');\n    }\n    if (this.logLinesAtCurrentSeverity > kMaxLogStacks) {\n      logMessage.setStackHidden(`only ${kMaxLogStacks} shown`);\n    }\n\n    this.logs.push(logMessage);\n  }\n}\n"],"mappings":"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"}