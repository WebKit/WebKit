{"version":3,"sources":["../../../src/common/internal/tree.ts"],"names":["assert","compareQueries","Ordering","TestQueryMultiCase","TestQuerySingleCase","TestQueryMultiFile","TestQueryMultiTest","kBigSeparator","kWildcard","kPathSeparator","kParamSeparator","stringifySingleParam","StacklessError","TestTree","constructor","forQuery","root","propagateCounts","query","level","depthInLevel","iterateCollapsedNodes","includeIntermediateNodes","includeEmptySubtrees","alwaysExpandThroughLevel","expandThroughLevel","Math","max","iterateSubtreeNodes","iterateLeaves","iterateSubtreeLeaves","dissolveSingleChildTrees","newRoot","toString","subtreeToString","subtree","opts","child","children","collapsible","size","subtreeCounts","tests","nodesWithTODO","counts","countsToString","tree","name","indent","s","JSON","stringify","description","undefined","loadTreeForQuery","loader","queryToLoad","subqueriesToExpand","suite","specs","listing","subqueriesToExpandEntries","Array","from","entries","seenSubqueriesToExpand","length","fill","isCollapsible","subquery","every","i","toExpand","ordering","Equal","StrictSubset","foundCase","subtreeL0","makeTreeForSuite","entry","file","setSubtreeDescriptionAndCountTODOs","readme","queryL1","orderingL1","Unordered","readmeSubtree","addSubtreeForDirPath","spec","importSpecFile","subtreeL1","addSubtreeForFilePath","groupHasTests","t","g","iterate","queryL2","testPath","orderingL2","subtreeL2","addSubtreeForTestPath","testCreationStack","c","queryL3","id","test","params","orderingL3","StrictSuperset","addLeafForCase","sq","subquerySeen","trim","indexOf","readableRelativeName","Map","subqueryFile","part","push","getOrInsertSubtree","filePathParts","subqueryTest","checkCollapsible","subqueryParams","k","v","Object","testPathParts","insertLeaf","key","parent","createSubtree","get","set","leaf","readableNameForCase","run","rec","expectations","has","shouldDissolveThisTree","newChild","paramsKeys","keys","lastKey"],"mappings":"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","sourcesContent":["import { RunCase, RunFn } from '../internal/test_group.js';\nimport { assert } from '../util/util.js';\n\nimport { TestFileLoader } from './file_loader.js';\nimport { TestParamsRW } from './params_utils.js';\nimport { compareQueries, Ordering } from './query/compare.js';\nimport {\n  TestQuery,\n  TestQueryMultiCase,\n  TestQuerySingleCase,\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n} from './query/query.js';\nimport { kBigSeparator, kWildcard, kPathSeparator, kParamSeparator } from './query/separators.js';\nimport { stringifySingleParam } from './query/stringify_params.js';\nimport { StacklessError } from './util.js';\n\n// `loadTreeForQuery()` loads a TestTree for a given queryToLoad.\n// The resulting tree is a linked-list all the way from `suite:*` to queryToLoad,\n// and under queryToLoad is a tree containing every case matched by queryToLoad.\n//\n// `subqueriesToExpand` influences the `collapsible` flag on nodes in the resulting tree.\n// A node is considered \"collapsible\" if none of the subqueriesToExpand is a StrictSubset\n// of that node.\n//\n// In WebKit/Blink-style web_tests, an expectation file marks individual cts.https.html \"variants\n// as \"Failure\", \"Crash\", etc. By passing in the list of expectations as the subqueriesToExpand,\n// we can programmatically subdivide the cts.https.html \"variants\" list to be able to implement\n// arbitrarily-fine suppressions (instead of having to suppress entire test files, which would\n// lose a lot of coverage).\n//\n// `iterateCollapsedNodes()` produces the list of queries for the variants list.\n//\n// Though somewhat complicated, this system has important benefits:\n//   - Avoids having to suppress entire test files, which would cause large test coverage loss.\n//   - Minimizes the number of page loads needed for fine-grained suppressions.\n//     (In the naive case, we could do one page load per test case - but the test suite would\n//     take impossibly long to run.)\n//   - Enables developers to put any number of tests in one file as appropriate, without worrying\n//     about expectation granularity.\n\ninterface TestTreeNodeBase<T extends TestQuery> {\n  readonly query: T;\n  /**\n   * Readable \"relative\" name for display in standalone runner.\n   * Not always the exact relative name, because sometimes there isn't\n   * one (e.g. s:f:* relative to s:f,*), but something that is readable.\n   */\n  readonly readableRelativeName: string;\n  subtreeCounts?: { tests: number; nodesWithTODO: number };\n}\n\nexport interface TestSubtree<T extends TestQuery = TestQuery> extends TestTreeNodeBase<T> {\n  readonly children: Map<string, TestTreeNode>;\n  readonly collapsible: boolean;\n  description?: string;\n  readonly testCreationStack?: Error;\n}\n\nexport interface TestTreeLeaf extends TestTreeNodeBase<TestQuerySingleCase> {\n  readonly run: RunFn;\n  subtreeCounts?: undefined;\n}\n\nexport type TestTreeNode = TestSubtree | TestTreeLeaf;\n\n/**\n * When iterating through \"collapsed\" tree nodes, indicates how many \"query levels\" to traverse\n * through before starting to collapse nodes.\n *\n * Corresponds with TestQueryLevel, but excludes 4 (SingleCase):\n * - 1 = MultiFile. Expands so every file is in the collapsed tree.\n * - 2 = MultiTest. Expands so every test is in the collapsed tree.\n * - 3 = MultiCase. Expands so every case is in the collapsed tree (i.e. collapsing disabled).\n */\nexport type ExpandThroughLevel = 1 | 2 | 3;\n\nexport class TestTree {\n  /**\n   * The `queryToLoad` that this test tree was created for.\n   * Test trees are always rooted at `suite:*`, but they only contain nodes that fit\n   * within `forQuery`.\n   *\n   * This is used for `iterateCollapsedNodes` which only starts collapsing at the next\n   * `TestQueryLevel` after `forQuery`.\n   */\n  readonly forQuery: TestQuery;\n  readonly root: TestSubtree;\n\n  constructor(forQuery: TestQuery, root: TestSubtree) {\n    this.forQuery = forQuery;\n    TestTree.propagateCounts(root);\n    this.root = root;\n    assert(\n      root.query.level === 1 && root.query.depthInLevel === 0,\n      'TestTree root must be the root (suite:*)'\n    );\n  }\n\n  /**\n   * Iterate through the leaves of a version of the tree which has been pruned to exclude\n   * subtrees which:\n   * - are at a deeper `TestQueryLevel` than `this.forQuery`, and\n   * - were not a `Ordering.StrictSubset` of any of the `subqueriesToExpand` during tree creation.\n   */\n  iterateCollapsedNodes({\n    includeIntermediateNodes = false,\n    includeEmptySubtrees = false,\n    alwaysExpandThroughLevel,\n  }: {\n    /** Whether to include intermediate tree nodes or only collapsed-leaves. */\n    includeIntermediateNodes?: boolean;\n    /** Whether to include collapsed-leaves with no children. */\n    includeEmptySubtrees?: boolean;\n    /** Never collapse nodes up through this level. */\n    alwaysExpandThroughLevel: ExpandThroughLevel;\n  }): IterableIterator<Readonly<TestTreeNode>> {\n    const expandThroughLevel = Math.max(this.forQuery.level, alwaysExpandThroughLevel);\n    return TestTree.iterateSubtreeNodes(this.root, {\n      includeIntermediateNodes,\n      includeEmptySubtrees,\n      expandThroughLevel,\n    });\n  }\n\n  iterateLeaves(): IterableIterator<Readonly<TestTreeLeaf>> {\n    return TestTree.iterateSubtreeLeaves(this.root);\n  }\n\n  /**\n   * Dissolve nodes which have only one child, e.g.:\n   *   a,* { a,b,* { a,b:* { ... } } }\n   * collapses down into:\n   *   a,* { a,b:* { ... } }\n   * which is less needlessly verbose when displaying the tree in the standalone runner.\n   */\n  dissolveSingleChildTrees(): void {\n    const newRoot = dissolveSingleChildTrees(this.root);\n    assert(newRoot === this.root);\n  }\n\n  toString(): string {\n    return TestTree.subtreeToString('(root)', this.root, '');\n  }\n\n  static *iterateSubtreeNodes(\n    subtree: TestSubtree,\n    opts: {\n      includeIntermediateNodes: boolean;\n      includeEmptySubtrees: boolean;\n      expandThroughLevel: number;\n    }\n  ): IterableIterator<TestTreeNode> {\n    if (opts.includeIntermediateNodes) {\n      yield subtree;\n    }\n\n    for (const [, child] of subtree.children) {\n      if ('children' in child) {\n        // Is a subtree\n        const collapsible = child.collapsible && child.query.level > opts.expandThroughLevel;\n        if (child.children.size > 0 && !collapsible) {\n          yield* TestTree.iterateSubtreeNodes(child, opts);\n        } else if (child.children.size > 0 || opts.includeEmptySubtrees) {\n          // Don't yield empty subtrees (e.g. files with no tests) unless includeEmptySubtrees\n          yield child;\n        }\n      } else {\n        // Is a leaf\n        yield child;\n      }\n    }\n  }\n\n  static *iterateSubtreeLeaves(subtree: TestSubtree): IterableIterator<TestTreeLeaf> {\n    for (const [, child] of subtree.children) {\n      if ('children' in child) {\n        yield* TestTree.iterateSubtreeLeaves(child);\n      } else {\n        yield child;\n      }\n    }\n  }\n\n  /** Propagate the subtreeTODOs/subtreeTests state upward from leaves to parent nodes. */\n  static propagateCounts(subtree: TestSubtree): { tests: number; nodesWithTODO: number } {\n    subtree.subtreeCounts ??= { tests: 0, nodesWithTODO: 0 };\n    for (const [, child] of subtree.children) {\n      if ('children' in child) {\n        const counts = TestTree.propagateCounts(child);\n        subtree.subtreeCounts.tests += counts.tests;\n        subtree.subtreeCounts.nodesWithTODO += counts.nodesWithTODO;\n      }\n    }\n    return subtree.subtreeCounts;\n  }\n\n  /** Displays counts in the format `(Nodes with TODOs) / (Total test count)`. */\n  static countsToString(tree: TestTreeNode): string {\n    if (tree.subtreeCounts) {\n      return `${tree.subtreeCounts.nodesWithTODO} / ${tree.subtreeCounts.tests}`;\n    } else {\n      return '';\n    }\n  }\n\n  static subtreeToString(name: string, tree: TestTreeNode, indent: string): string {\n    const collapsible = 'run' in tree ? '>' : tree.collapsible ? '+' : '-';\n    let s =\n      indent +\n      `${collapsible} ${TestTree.countsToString(tree)} ${JSON.stringify(name)} => ${tree.query}`;\n    if ('children' in tree) {\n      if (tree.description !== undefined) {\n        s += `\\n${indent}  | ${JSON.stringify(tree.description)}`;\n      }\n\n      for (const [name, child] of tree.children) {\n        s += '\\n' + TestTree.subtreeToString(name, child, indent + '  ');\n      }\n    }\n    return s;\n  }\n}\n\n// MAINTENANCE_TODO: Consider having subqueriesToExpand actually impact the depth-order of params\n// in the tree.\nexport async function loadTreeForQuery(\n  loader: TestFileLoader,\n  queryToLoad: TestQuery,\n  subqueriesToExpand: TestQuery[]\n): Promise<TestTree> {\n  const suite = queryToLoad.suite;\n  const specs = await loader.listing(suite);\n\n  const subqueriesToExpandEntries = Array.from(subqueriesToExpand.entries());\n  const seenSubqueriesToExpand: boolean[] = new Array(subqueriesToExpand.length);\n  seenSubqueriesToExpand.fill(false);\n\n  const isCollapsible = (subquery: TestQuery) =>\n    subqueriesToExpandEntries.every(([i, toExpand]) => {\n      const ordering = compareQueries(toExpand, subquery);\n\n      // If toExpand == subquery, no expansion is needed (but it's still \"seen\").\n      if (ordering === Ordering.Equal) seenSubqueriesToExpand[i] = true;\n      return ordering !== Ordering.StrictSubset;\n    });\n\n  // L0 = suite-level, e.g. suite:*\n  // L1 =  file-level, e.g. suite:a,b:*\n  // L2 =  test-level, e.g. suite:a,b:c,d:*\n  // L3 =  case-level, e.g. suite:a,b:c,d:\n  let foundCase = false;\n  // L0 is suite:*\n  const subtreeL0 = makeTreeForSuite(suite, isCollapsible);\n  for (const entry of specs) {\n    if (entry.file.length === 0 && 'readme' in entry) {\n      // Suite-level readme.\n      setSubtreeDescriptionAndCountTODOs(subtreeL0, entry.readme);\n      continue;\n    }\n\n    {\n      const queryL1 = new TestQueryMultiFile(suite, entry.file);\n      const orderingL1 = compareQueries(queryL1, queryToLoad);\n      if (orderingL1 === Ordering.Unordered) {\n        // File path is not matched by this query.\n        continue;\n      }\n    }\n\n    if ('readme' in entry) {\n      // Entry is a README that is an ancestor or descendant of the query.\n      // (It's included for display in the standalone runner.)\n\n      // readmeSubtree is suite:a,b,*\n      // (This is always going to dedup with a file path, if there are any test spec files under\n      // the directory that has the README).\n      const readmeSubtree: TestSubtree<TestQueryMultiFile> = addSubtreeForDirPath(\n        subtreeL0,\n        entry.file,\n        isCollapsible\n      );\n      setSubtreeDescriptionAndCountTODOs(readmeSubtree, entry.readme);\n      continue;\n    }\n    // Entry is a spec file.\n\n    const spec = await loader.importSpecFile(queryToLoad.suite, entry.file);\n    // subtreeL1 is suite:a,b:*\n    const subtreeL1: TestSubtree<TestQueryMultiTest> = addSubtreeForFilePath(\n      subtreeL0,\n      entry.file,\n      isCollapsible\n    );\n    setSubtreeDescriptionAndCountTODOs(subtreeL1, spec.description);\n\n    let groupHasTests = false;\n    for (const t of spec.g.iterate()) {\n      groupHasTests = true;\n      {\n        const queryL2 = new TestQueryMultiCase(suite, entry.file, t.testPath, {});\n        const orderingL2 = compareQueries(queryL2, queryToLoad);\n        if (orderingL2 === Ordering.Unordered) {\n          // Test path is not matched by this query.\n          continue;\n        }\n      }\n\n      // subtreeL2 is suite:a,b:c,d:*\n      const subtreeL2: TestSubtree<TestQueryMultiCase> = addSubtreeForTestPath(\n        subtreeL1,\n        t.testPath,\n        t.testCreationStack,\n        isCollapsible\n      );\n      // This is 1 test. Set tests=1 then count TODOs.\n      subtreeL2.subtreeCounts ??= { tests: 1, nodesWithTODO: 0 };\n      if (t.description) setSubtreeDescriptionAndCountTODOs(subtreeL2, t.description);\n\n      // MAINTENANCE_TODO: If tree generation gets too slow, avoid actually iterating the cases in a\n      // file if there's no need to (based on the subqueriesToExpand).\n      for (const c of t.iterate()) {\n        {\n          const queryL3 = new TestQuerySingleCase(suite, entry.file, c.id.test, c.id.params);\n          const orderingL3 = compareQueries(queryL3, queryToLoad);\n          if (orderingL3 === Ordering.Unordered || orderingL3 === Ordering.StrictSuperset) {\n            // Case is not matched by this query.\n            continue;\n          }\n        }\n\n        // Leaf for case is suite:a,b:c,d:x=1;y=2\n        addLeafForCase(subtreeL2, c, isCollapsible);\n\n        foundCase = true;\n      }\n    }\n    if (!groupHasTests && !subtreeL1.subtreeCounts) {\n      throw new StacklessError(\n        `${subtreeL1.query} has no tests - it must have \"TODO\" in its description`\n      );\n    }\n  }\n\n  for (const [i, sq] of subqueriesToExpandEntries) {\n    const subquerySeen = seenSubqueriesToExpand[i];\n    if (!subquerySeen) {\n      throw new StacklessError(\n        `subqueriesToExpand entry did not match anything \\\n(could be wrong, or could be redundant with a previous subquery):\\n  ${sq.toString()}`\n      );\n    }\n  }\n  assert(foundCase, `Query \\`${queryToLoad.toString()}\\` does not match any cases`);\n\n  return new TestTree(queryToLoad, subtreeL0);\n}\n\nfunction setSubtreeDescriptionAndCountTODOs(\n  subtree: TestSubtree<TestQueryMultiFile>,\n  description: string\n) {\n  assert(subtree.description === undefined);\n  subtree.description = description.trim();\n  subtree.subtreeCounts ??= { tests: 0, nodesWithTODO: 0 };\n  if (subtree.description.indexOf('TODO') !== -1) {\n    subtree.subtreeCounts.nodesWithTODO++;\n  }\n}\n\nfunction makeTreeForSuite(\n  suite: string,\n  isCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiFile> {\n  const query = new TestQueryMultiFile(suite, []);\n  return {\n    readableRelativeName: suite + kBigSeparator,\n    query,\n    children: new Map(),\n    collapsible: isCollapsible(query),\n  };\n}\n\nfunction addSubtreeForDirPath(\n  tree: TestSubtree<TestQueryMultiFile>,\n  file: string[],\n  isCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiFile> {\n  const subqueryFile: string[] = [];\n  // To start, tree is suite:*\n  // This loop goes from that -> suite:a,* -> suite:a,b,*\n  for (const part of file) {\n    subqueryFile.push(part);\n    tree = getOrInsertSubtree(part, tree, () => {\n      const query = new TestQueryMultiFile(tree.query.suite, subqueryFile);\n      return {\n        readableRelativeName: part + kPathSeparator + kWildcard,\n        query,\n        collapsible: isCollapsible(query),\n      };\n    });\n  }\n  return tree;\n}\n\nfunction addSubtreeForFilePath(\n  tree: TestSubtree<TestQueryMultiFile>,\n  file: string[],\n  isCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiTest> {\n  // To start, tree is suite:*\n  // This goes from that -> suite:a,* -> suite:a,b,*\n  tree = addSubtreeForDirPath(tree, file, isCollapsible);\n  // This goes from that -> suite:a,b:*\n  const subtree = getOrInsertSubtree('', tree, () => {\n    const query = new TestQueryMultiTest(tree.query.suite, tree.query.filePathParts, []);\n    assert(file.length > 0, 'file path is empty');\n    return {\n      readableRelativeName: file[file.length - 1] + kBigSeparator + kWildcard,\n      query,\n      collapsible: isCollapsible(query),\n    };\n  });\n  return subtree;\n}\n\nfunction addSubtreeForTestPath(\n  tree: TestSubtree<TestQueryMultiTest>,\n  test: readonly string[],\n  testCreationStack: Error,\n  isCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiCase> {\n  const subqueryTest: string[] = [];\n  // To start, tree is suite:a,b:*\n  // This loop goes from that -> suite:a,b:c,* -> suite:a,b:c,d,*\n  for (const part of test) {\n    subqueryTest.push(part);\n    tree = getOrInsertSubtree(part, tree, () => {\n      const query = new TestQueryMultiTest(\n        tree.query.suite,\n        tree.query.filePathParts,\n        subqueryTest\n      );\n      return {\n        readableRelativeName: part + kPathSeparator + kWildcard,\n        query,\n        collapsible: isCollapsible(query),\n      };\n    });\n  }\n  // This goes from that -> suite:a,b:c,d:*\n  return getOrInsertSubtree('', tree, () => {\n    const query = new TestQueryMultiCase(\n      tree.query.suite,\n      tree.query.filePathParts,\n      subqueryTest,\n      {}\n    );\n    assert(subqueryTest.length > 0, 'subqueryTest is empty');\n    return {\n      readableRelativeName: subqueryTest[subqueryTest.length - 1] + kBigSeparator + kWildcard,\n      kWildcard,\n      query,\n      testCreationStack,\n      collapsible: isCollapsible(query),\n    };\n  });\n}\n\nfunction addLeafForCase(\n  tree: TestSubtree<TestQueryMultiTest>,\n  t: RunCase,\n  checkCollapsible: (sq: TestQuery) => boolean\n): void {\n  const query = tree.query;\n  let name: string = '';\n  const subqueryParams: TestParamsRW = {};\n\n  // To start, tree is suite:a,b:c,d:*\n  // This loop goes from that -> suite:a,b:c,d:x=1;* -> suite:a,b:c,d:x=1;y=2;*\n  for (const [k, v] of Object.entries(t.id.params)) {\n    name = stringifySingleParam(k, v);\n    subqueryParams[k] = v;\n\n    tree = getOrInsertSubtree(name, tree, () => {\n      const subquery = new TestQueryMultiCase(\n        query.suite,\n        query.filePathParts,\n        query.testPathParts,\n        subqueryParams\n      );\n      return {\n        readableRelativeName: name + kParamSeparator + kWildcard,\n        query: subquery,\n        collapsible: checkCollapsible(subquery),\n      };\n    });\n  }\n\n  // This goes from that -> suite:a,b:c,d:x=1;y=2\n  const subquery = new TestQuerySingleCase(\n    query.suite,\n    query.filePathParts,\n    query.testPathParts,\n    subqueryParams\n  );\n  checkCollapsible(subquery); // mark seenSubqueriesToExpand\n  insertLeaf(tree, subquery, t);\n}\n\nfunction getOrInsertSubtree<T extends TestQuery>(\n  key: string,\n  parent: TestSubtree,\n  createSubtree: () => Omit<TestSubtree<T>, 'children'>\n): TestSubtree<T> {\n  let v: TestSubtree<T>;\n  const child = parent.children.get(key);\n  if (child !== undefined) {\n    assert('children' in child); // Make sure cached subtree is not actually a leaf\n    v = child as TestSubtree<T>;\n  } else {\n    v = { ...createSubtree(), children: new Map() };\n    parent.children.set(key, v);\n  }\n  return v;\n}\n\nfunction insertLeaf(parent: TestSubtree, query: TestQuerySingleCase, t: RunCase) {\n  const key = '';\n  const leaf: TestTreeLeaf = {\n    readableRelativeName: readableNameForCase(query),\n    query,\n    run: (rec, expectations) => t.run(rec, query, expectations || []),\n  };\n  assert(!parent.children.has(key));\n  parent.children.set(key, leaf);\n}\n\nfunction dissolveSingleChildTrees(tree: TestTreeNode): TestTreeNode {\n  if ('children' in tree) {\n    const shouldDissolveThisTree =\n      tree.children.size === 1 && tree.query.depthInLevel !== 0 && tree.description === undefined;\n    if (shouldDissolveThisTree) {\n      // Loops exactly once\n      for (const [, child] of tree.children) {\n        // Recurse on child\n        return dissolveSingleChildTrees(child);\n      }\n    }\n\n    for (const [k, child] of tree.children) {\n      // Recurse on each child\n      const newChild = dissolveSingleChildTrees(child);\n      if (newChild !== child) {\n        tree.children.set(k, newChild);\n      }\n    }\n  }\n  return tree;\n}\n\n/** Generate a readable relative name for a case (used in standalone). */\nfunction readableNameForCase(query: TestQuerySingleCase): string {\n  const paramsKeys = Object.keys(query.params);\n  if (paramsKeys.length === 0) {\n    return query.testPathParts[query.testPathParts.length - 1] + kBigSeparator;\n  } else {\n    const lastKey = paramsKeys[paramsKeys.length - 1];\n    return stringifySingleParam(lastKey, query.params[lastKey]);\n  }\n}\n"],"file":"tree.js"}