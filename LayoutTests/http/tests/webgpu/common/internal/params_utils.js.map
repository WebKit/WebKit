{"version":3,"sources":["../../../src/common/internal/params_utils.ts"],"names":["assert","comparePublicParamsPaths","Ordering","kWildcard","kParamSeparator","kParamKVSeparator","paramKeyIsPublic","key","startsWith","extractPublicParams","params","publicParams","k","Object","keys","badParamValueChars","RegExp","publicParamsEquals","x","y","Equal","typeAssert","mergeParams","a","b"],"mappings":";AAAA;AACA,GACA,SAASA,MAAT,QAAuB,iBAAvB;;AAEA,SAASC,wBAAT,EAAmCC,QAAnC,QAAmD,oBAAnD;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,iBAArC,QAA8D,uBAA9D;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAAgD;AACrD,SAAO,CAACA,GAAG,CAACC,UAAJ,CAAe,GAAf,CAAR;AACD;;AAED,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAA6D;AAClE,QAAMC,YAA0B,GAAG,EAAnC;AACA,OAAK,MAAMC,CAAX,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB,EAAqC;AACnC,QAAIJ,gBAAgB,CAACM,CAAD,CAApB,EAAyB;AACvBD,MAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBF,MAAM,CAACE,CAAD,CAAxB;AACD;AACF;AACD,SAAOD,YAAP;AACD;;AAED,OAAO,MAAMI,kBAAkB,GAAG,IAAIC,MAAJ;AAChC,MAAMX,iBAAN,GAA0BD,eAA1B,GAA4CD,SAA5C,GAAwD,GADxB,CAA3B;;;AAIP,OAAO,SAASc,kBAAT,CAA4BC,CAA5B,EAA2CC,CAA3C,EAAmE;AACxE,SAAOlB,wBAAwB,CAACiB,CAAD,EAAIC,CAAJ,CAAxB,KAAmCjB,QAAQ,CAACkB,KAAnD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD,SAASC,UAAT,GAAwC,CAAE;AAC1C;;;;;;;;;;;;;;;;;;;;;;;AAuBwB;AACpBA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;;AAEVA,IAAAA,UAAU;;AAEVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACVA,IAAAA,UAAU;;AAEV;AACAA,IAAAA,UAAU;AACVA,IAAAA,UAAU;AACX;AACF;;;;;;;AAOD,OAAO,SAASC,WAAT,CAAiDC,CAAjD,EAAuDC,CAAvD,EAA2E;AAChF,OAAK,MAAMjB,GAAX,IAAkBM,MAAM,CAACC,IAAP,CAAYS,CAAZ,CAAlB,EAAkC;AAChCvB,IAAAA,MAAM,CAAC,EAAEO,GAAG,IAAIiB,CAAT,CAAD,EAAc,oBAAoBjB,GAAlC,CAAN;AACD;AACD,SAAO,EAAE,GAAGgB,CAAL,EAAQ,GAAGC,CAAX,EAAP;AACD","sourcesContent":["import { TestParams } from '../framework/fixture.js';\nimport { ResolveType, UnionToIntersection } from '../util/types.js';\nimport { assert } from '../util/util.js';\n\nimport { comparePublicParamsPaths, Ordering } from './query/compare.js';\nimport { kWildcard, kParamSeparator, kParamKVSeparator } from './query/separators.js';\n\nexport type JSONWithUndefined =\n  | undefined\n  | null\n  | number\n  | string\n  | boolean\n  | readonly JSONWithUndefined[]\n  // Ideally this would recurse into JSONWithUndefined, but it breaks code.\n  | { readonly [k: string]: unknown };\nexport interface TestParamsRW {\n  [k: string]: JSONWithUndefined;\n}\nexport type TestParamsIterable = Iterable<TestParams>;\n\nexport function paramKeyIsPublic(key: string): boolean {\n  return !key.startsWith('_');\n}\n\nexport function extractPublicParams(params: TestParams): TestParams {\n  const publicParams: TestParamsRW = {};\n  for (const k of Object.keys(params)) {\n    if (paramKeyIsPublic(k)) {\n      publicParams[k] = params[k];\n    }\n  }\n  return publicParams;\n}\n\nexport const badParamValueChars = new RegExp(\n  '[' + kParamKVSeparator + kParamSeparator + kWildcard + ']'\n);\n\nexport function publicParamsEquals(x: TestParams, y: TestParams): boolean {\n  return comparePublicParamsPaths(x, y) === Ordering.Equal;\n}\n\nexport type KeyOfNeverable<T> = T extends never ? never : keyof T;\nexport type AllKeysFromUnion<T> = keyof T | KeyOfNeverable<UnionToIntersection<T>>;\nexport type KeyOfOr<T, K, Default> = K extends keyof T ? T[K] : Default;\n\n/**\n * Flatten a union of interfaces into a single interface encoding the same type.\n *\n * Flattens a union in such a way that:\n * `{ a: number, b?: undefined } | { b: string, a?: undefined }`\n * (which is the value type of `[{ a: 1 }, { b: 1 }]`)\n * becomes `{ a: number | undefined, b: string | undefined }`.\n *\n * And also works for `{ a: number } | { b: string }` which maps to the same.\n */\nexport type FlattenUnionOfInterfaces<T> = {\n  [K in AllKeysFromUnion<T>]: KeyOfOr<\n    T,\n    // If T always has K, just take T[K] (union of C[K] for each component C of T):\n    K,\n    // Otherwise, take the union of C[K] for each component C of T, PLUS undefined:\n    undefined | KeyOfOr<UnionToIntersection<T>, K, void>\n  >;\n};\n\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nfunction typeAssert<T extends 'pass'>() {}\n{\n  type Test<T, U> = [T] extends [U]\n    ? [U] extends [T]\n      ? 'pass'\n      : { actual: ResolveType<T>; expected: U }\n    : { actual: ResolveType<T>; expected: U };\n\n  type T01 = { a: number } | { b: string };\n  type T02 = { a: number } | { b?: string };\n  type T03 = { a: number } | { a?: number };\n  type T04 = { a: number } | { a: string };\n  type T05 = { a: number } | { a?: string };\n\n  type T11 = { a: number; b?: undefined } | { a?: undefined; b: string };\n\n  type T21 = { a: number; b?: undefined } | { b: string };\n  type T22 = { a: number; b?: undefined } | { b?: string };\n  type T23 = { a: number; b?: undefined } | { a?: number };\n  type T24 = { a: number; b?: undefined } | { a: string };\n  type T25 = { a: number; b?: undefined } | { a?: string };\n  type T26 = { a: number; b?: undefined } | { a: undefined };\n  type T27 = { a: number; b?: undefined } | { a: undefined; b: undefined };\n\n  /* prettier-ignore */ {\n    typeAssert<Test<FlattenUnionOfInterfaces<T01>, { a: number | undefined; b: string | undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T02>, { a: number | undefined; b: string | undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T03>, { a: number | undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T04>, { a: number | string }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T05>, { a: number | string | undefined }>>();\n\n    typeAssert<Test<FlattenUnionOfInterfaces<T11>, { a: number | undefined; b: string | undefined }>>();\n\n    typeAssert<Test<FlattenUnionOfInterfaces<T22>, { a: number | undefined; b: string | undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T23>, { a: number | undefined; b: undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T24>, { a: number | string; b: undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T25>, { a: number | string | undefined; b: undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T27>, { a: number | undefined; b: undefined }>>();\n\n    // Unexpected test results - hopefully okay to ignore these\n    typeAssert<Test<FlattenUnionOfInterfaces<T21>, { b: string | undefined }>>();\n    typeAssert<Test<FlattenUnionOfInterfaces<T26>, { a: number | undefined }>>();\n  }\n}\n\nexport type Merged<A, B> = ResolveType<MergedFromFlat<A, FlattenUnionOfInterfaces<B>>>;\nexport type MergedFromFlat<A, B> = {\n  [K in keyof A | keyof B]: K extends keyof B ? B[K] : K extends keyof A ? A[K] : never;\n};\n\nexport function mergeParams<A extends {}, B extends {}>(a: A, b: B): Merged<A, B> {\n  for (const key of Object.keys(a)) {\n    assert(!(key in b), 'Duplicate key: ' + key);\n  }\n  return { ...a, ...b } as Merged<A, B>;\n}\n"],"file":"params_utils.js"}