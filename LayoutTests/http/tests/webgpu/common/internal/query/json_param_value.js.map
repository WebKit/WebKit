{"version":3,"file":"json_param_value.js","names":["assert","sortObjectByKey","jsUndefinedMagicValue","jsNaNMagicValue","jsPositiveInfinityMagicValue","jsNegativeInfinityMagicValue","jsNegativeZeroMagicValue","toStringMagicValue","Map","undefined","NaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","fromStringMagicValue","stringifyFilter","k","v","has","Object","is","get","stringifyParamValue","value","JSON","stringify","stringifyParamValueUniquely","parseParamValueReviver","parseParamValue","s","parse"],"sources":["../../../../src/common/internal/query/json_param_value.ts"],"sourcesContent":["import { assert, sortObjectByKey } from '../../util/util.js';\nimport { JSONWithUndefined } from '../params_utils.js';\n\n// JSON can't represent various values and by default stores them as `null`.\n// Instead, storing them as a magic string values in JSON.\nconst jsUndefinedMagicValue = '_undef_';\nconst jsNaNMagicValue = '_nan_';\nconst jsPositiveInfinityMagicValue = '_posinfinity_';\nconst jsNegativeInfinityMagicValue = '_neginfinity_';\n\n// -0 needs to be handled separately, because -0 === +0 returns true. Not\n// special casing +0/0, since it behaves intuitively. Assuming that if -0 is\n// being used, the differentiation from +0 is desired.\nconst jsNegativeZeroMagicValue = '_negzero_';\n\nconst toStringMagicValue = new Map<unknown, string>([\n  [undefined, jsUndefinedMagicValue],\n  [NaN, jsNaNMagicValue],\n  [Number.POSITIVE_INFINITY, jsPositiveInfinityMagicValue],\n  [Number.NEGATIVE_INFINITY, jsNegativeInfinityMagicValue],\n  // No -0 handling because it is special cased.\n]);\n\nconst fromStringMagicValue = new Map<string, unknown>([\n  [jsUndefinedMagicValue, undefined],\n  [jsNaNMagicValue, NaN],\n  [jsPositiveInfinityMagicValue, Number.POSITIVE_INFINITY],\n  [jsNegativeInfinityMagicValue, Number.NEGATIVE_INFINITY],\n  // -0 is handled in this direction because there is no comparison issue.\n  [jsNegativeZeroMagicValue, -0],\n]);\n\nfunction stringifyFilter(k: string, v: unknown): unknown {\n  // Make sure no one actually uses a magic value as a parameter.\n  if (typeof v === 'string') {\n    assert(\n      !fromStringMagicValue.has(v),\n      `${v} is a magic value for stringification, so cannot be used`\n    );\n\n    assert(\n      v !== jsNegativeZeroMagicValue,\n      `${v} is a magic value for stringification, so cannot be used`\n    );\n  }\n\n  if (Object.is(v, -0)) {\n    return jsNegativeZeroMagicValue;\n  }\n\n  return toStringMagicValue.has(v) ? toStringMagicValue.get(v) : v;\n}\n\nexport function stringifyParamValue(value: JSONWithUndefined): string {\n  return JSON.stringify(value, stringifyFilter);\n}\n\n/**\n * Like stringifyParamValue but sorts dictionaries by key, for hashing.\n */\nexport function stringifyParamValueUniquely(value: JSONWithUndefined): string {\n  return JSON.stringify(value, (k, v) => {\n    if (typeof v === 'object' && v !== null) {\n      return sortObjectByKey(v);\n    }\n\n    return stringifyFilter(k, v);\n  });\n}\n\n// 'any' is part of the JSON.parse reviver interface, so cannot be avoided.\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction parseParamValueReviver(k: string, v: any): any {\n  if (fromStringMagicValue.has(v)) {\n    return fromStringMagicValue.get(v);\n  }\n\n  return v;\n}\n\nexport function parseParamValue(s: string): JSONWithUndefined {\n  return JSON.parse(s, parseParamValueReviver);\n}\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AAG5D;AACA;AACA,MAAMC,qBAAqB,GAAG,SAAS;AACvC,MAAMC,eAAe,GAAG,OAAO;AAC/B,MAAMC,4BAA4B,GAAG,eAAe;AACpD,MAAMC,4BAA4B,GAAG,eAAe;;AAEpD;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,WAAW;;AAE5C,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAkB;AAClD,CAACC,SAAS,EAAEP,qBAAqB,CAAC;AAClC,CAACQ,GAAG,EAAEP,eAAe,CAAC;AACtB,CAACQ,MAAM,CAACC,iBAAiB,EAAER,4BAA4B,CAAC;AACxD,CAACO,MAAM,CAACE,iBAAiB,EAAER,4BAA4B;AACvD;AAAA,CACD,CAAC;;AAEF,MAAMS,oBAAoB,GAAG,IAAIN,GAAG,CAAkB;AACpD,CAACN,qBAAqB,EAAEO,SAAS,CAAC;AAClC,CAACN,eAAe,EAAEO,GAAG,CAAC;AACtB,CAACN,4BAA4B,EAAEO,MAAM,CAACC,iBAAiB,CAAC;AACxD,CAACP,4BAA4B,EAAEM,MAAM,CAACE,iBAAiB,CAAC;AACxD;AACA,CAACP,wBAAwB,EAAE,CAAC,CAAC,CAAC,CAC/B,CAAC;;;AAEF,SAASS,eAAe,CAACC,CAAS,EAAEC,CAAU,EAAW;EACvD;EACA,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzBjB,MAAM;IACJ,CAACc,oBAAoB,CAACI,GAAG,CAACD,CAAC,CAAC;IAC3B,GAAEA,CAAE,0DAAyD,CAC/D;;;IAEDjB,MAAM;IACJiB,CAAC,KAAKX,wBAAwB;IAC7B,GAAEW,CAAE,0DAAyD,CAC/D;;EACH;;EAEA,IAAIE,MAAM,CAACC,EAAE,CAACH,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACpB,OAAOX,wBAAwB;EACjC;;EAEA,OAAOC,kBAAkB,CAACW,GAAG,CAACD,CAAC,CAAC,GAAGV,kBAAkB,CAACc,GAAG,CAACJ,CAAC,CAAC,GAAGA,CAAC;AAClE;;AAEA,OAAO,SAASK,mBAAmB,CAACC,KAAwB,EAAU;EACpE,OAAOC,IAAI,CAACC,SAAS,CAACF,KAAK,EAAER,eAAe,CAAC;AAC/C;;AAEA;AACA;AACA;AACA,OAAO,SAASW,2BAA2B,CAACH,KAAwB,EAAU;EAC5E,OAAOC,IAAI,CAACC,SAAS,CAACF,KAAK,EAAE,CAACP,CAAC,EAAEC,CAAC,KAAK;IACrC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI,EAAE;MACvC,OAAOhB,eAAe,CAACgB,CAAC,CAAC;IAC3B;;IAEA,OAAOF,eAAe,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACJ;;AAEA;;AAEA,SAASU,sBAAsB,CAACX,CAAS,EAAEC,CAAM,EAAO;EACtD,IAAIH,oBAAoB,CAACI,GAAG,CAACD,CAAC,CAAC,EAAE;IAC/B,OAAOH,oBAAoB,CAACO,GAAG,CAACJ,CAAC,CAAC;EACpC;;EAEA,OAAOA,CAAC;AACV;;AAEA,OAAO,SAASW,eAAe,CAACC,CAAS,EAAqB;EAC5D,OAAOL,IAAI,CAACM,KAAK,CAACD,CAAC,EAAEF,sBAAsB,CAAC;AAC9C"}