{"version":3,"sources":["../../../../src/common/internal/query/compare.ts"],"names":["assert","objectEquals","paramKeyIsPublic","Ordering","compareQueries","a","b","suite","Unordered","filePathOrdering","comparePaths","filePathParts","Equal","isMultiFile","compareOneLevel","testPathOrdering","testPathParts","isMultiTest","paramsPathOrdering","comparePublicParamsPaths","params","isMultiCase","ordering","aIsBig","bIsBig","StrictSubset","StrictSuperset","shorter","Math","min","length","i","aKeys","Object","keys","filter","k","commonKeys","Set","bKeys","aRemainingKeys","size","bRemainingKeys"],"mappings":"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","sourcesContent":["import { TestParams } from '../../framework/fixture.js';\nimport { assert, objectEquals } from '../../util/util.js';\nimport { paramKeyIsPublic } from '../params_utils.js';\n\nimport { TestQuery } from './query.js';\n\nexport const enum Ordering {\n  Unordered,\n  StrictSuperset,\n  Equal,\n  StrictSubset,\n}\n\n/**\n * Compares two queries for their ordering (which is used to build the tree).\n *\n * See src/unittests/query_compare.spec.ts for examples.\n */\nexport function compareQueries(a: TestQuery, b: TestQuery): Ordering {\n  if (a.suite !== b.suite) {\n    return Ordering.Unordered;\n  }\n\n  const filePathOrdering = comparePaths(a.filePathParts, b.filePathParts);\n  if (filePathOrdering !== Ordering.Equal || a.isMultiFile || b.isMultiFile) {\n    return compareOneLevel(filePathOrdering, a.isMultiFile, b.isMultiFile);\n  }\n  assert('testPathParts' in a && 'testPathParts' in b);\n\n  const testPathOrdering = comparePaths(a.testPathParts, b.testPathParts);\n  if (testPathOrdering !== Ordering.Equal || a.isMultiTest || b.isMultiTest) {\n    return compareOneLevel(testPathOrdering, a.isMultiTest, b.isMultiTest);\n  }\n  assert('params' in a && 'params' in b);\n\n  const paramsPathOrdering = comparePublicParamsPaths(a.params, b.params);\n  if (paramsPathOrdering !== Ordering.Equal || a.isMultiCase || b.isMultiCase) {\n    return compareOneLevel(paramsPathOrdering, a.isMultiCase, b.isMultiCase);\n  }\n  return Ordering.Equal;\n}\n\n/**\n * Compares a single level of a query.\n *\n * \"IsBig\" means the query is big relative to the level, e.g. for test-level:\n *   - Anything >= `suite:a,*` is big\n *   - Anything <= `suite:a:*` is small\n */\nfunction compareOneLevel(ordering: Ordering, aIsBig: boolean, bIsBig: boolean): Ordering {\n  assert(ordering !== Ordering.Equal || aIsBig || bIsBig);\n  if (ordering === Ordering.Unordered) return Ordering.Unordered;\n  if (aIsBig && bIsBig) return ordering;\n  if (!aIsBig && !bIsBig) return Ordering.Unordered; // Equal case is already handled\n  // Exactly one of (a, b) is big.\n  if (aIsBig && ordering !== Ordering.StrictSubset) return Ordering.StrictSuperset;\n  if (bIsBig && ordering !== Ordering.StrictSuperset) return Ordering.StrictSubset;\n  return Ordering.Unordered;\n}\n\nfunction comparePaths(a: readonly string[], b: readonly string[]): Ordering {\n  const shorter = Math.min(a.length, b.length);\n\n  for (let i = 0; i < shorter; ++i) {\n    if (a[i] !== b[i]) {\n      return Ordering.Unordered;\n    }\n  }\n  if (a.length === b.length) {\n    return Ordering.Equal;\n  } else if (a.length < b.length) {\n    return Ordering.StrictSuperset;\n  } else {\n    return Ordering.StrictSubset;\n  }\n}\n\nexport function comparePublicParamsPaths(a: TestParams, b: TestParams): Ordering {\n  const aKeys = Object.keys(a).filter(k => paramKeyIsPublic(k));\n  const commonKeys = new Set(aKeys.filter(k => k in b));\n\n  for (const k of commonKeys) {\n    if (!objectEquals(a[k], b[k])) {\n      return Ordering.Unordered;\n    }\n  }\n  const bKeys = Object.keys(b).filter(k => paramKeyIsPublic(k));\n  const aRemainingKeys = aKeys.length - commonKeys.size;\n  const bRemainingKeys = bKeys.length - commonKeys.size;\n  if (aRemainingKeys === 0 && bRemainingKeys === 0) return Ordering.Equal;\n  if (aRemainingKeys === 0) return Ordering.StrictSuperset;\n  if (bRemainingKeys === 0) return Ordering.StrictSubset;\n  return Ordering.Unordered;\n}\n"],"file":"compare.js"}