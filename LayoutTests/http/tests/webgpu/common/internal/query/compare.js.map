{"version":3,"file":"compare.js","names":["assert","objectEquals","paramKeyIsPublic","Ordering","compareQueries","a","b","suite","Unordered","filePathOrdering","comparePaths","filePathParts","Equal","isMultiFile","compareOneLevel","testPathOrdering","testPathParts","isMultiTest","paramsPathOrdering","comparePublicParamsPaths","params","isMultiCase","ordering","aIsBig","bIsBig","StrictSubset","StrictSuperset","shorter","Math","min","length","i","aKeys","Object","keys","filter","k","commonKeys","Set","bKeys","aRemainingKeys","size","bRemainingKeys"],"sources":["../../../../src/common/internal/query/compare.ts"],"sourcesContent":["import { TestParams } from '../../framework/fixture.js';\nimport { assert, objectEquals } from '../../util/util.js';\nimport { paramKeyIsPublic } from '../params_utils.js';\n\nimport { TestQuery } from './query.js';\n\nexport const enum Ordering {\n  Unordered,\n  StrictSuperset,\n  Equal,\n  StrictSubset,\n}\n\n/**\n * Compares two queries for their ordering (which is used to build the tree).\n *\n * See src/unittests/query_compare.spec.ts for examples.\n */\nexport function compareQueries(a: TestQuery, b: TestQuery): Ordering {\n  if (a.suite !== b.suite) {\n    return Ordering.Unordered;\n  }\n\n  const filePathOrdering = comparePaths(a.filePathParts, b.filePathParts);\n  if (filePathOrdering !== Ordering.Equal || a.isMultiFile || b.isMultiFile) {\n    return compareOneLevel(filePathOrdering, a.isMultiFile, b.isMultiFile);\n  }\n  assert('testPathParts' in a && 'testPathParts' in b);\n\n  const testPathOrdering = comparePaths(a.testPathParts, b.testPathParts);\n  if (testPathOrdering !== Ordering.Equal || a.isMultiTest || b.isMultiTest) {\n    return compareOneLevel(testPathOrdering, a.isMultiTest, b.isMultiTest);\n  }\n  assert('params' in a && 'params' in b);\n\n  const paramsPathOrdering = comparePublicParamsPaths(a.params, b.params);\n  if (paramsPathOrdering !== Ordering.Equal || a.isMultiCase || b.isMultiCase) {\n    return compareOneLevel(paramsPathOrdering, a.isMultiCase, b.isMultiCase);\n  }\n  return Ordering.Equal;\n}\n\n/**\n * Compares a single level of a query.\n *\n * \"IsBig\" means the query is big relative to the level, e.g. for test-level:\n *   - Anything >= `suite:a,*` is big\n *   - Anything <= `suite:a:*` is small\n */\nfunction compareOneLevel(ordering: Ordering, aIsBig: boolean, bIsBig: boolean): Ordering {\n  assert(ordering !== Ordering.Equal || aIsBig || bIsBig);\n  if (ordering === Ordering.Unordered) return Ordering.Unordered;\n  if (aIsBig && bIsBig) return ordering;\n  if (!aIsBig && !bIsBig) return Ordering.Unordered; // Equal case is already handled\n  // Exactly one of (a, b) is big.\n  if (aIsBig && ordering !== Ordering.StrictSubset) return Ordering.StrictSuperset;\n  if (bIsBig && ordering !== Ordering.StrictSuperset) return Ordering.StrictSubset;\n  return Ordering.Unordered;\n}\n\nfunction comparePaths(a: readonly string[], b: readonly string[]): Ordering {\n  const shorter = Math.min(a.length, b.length);\n\n  for (let i = 0; i < shorter; ++i) {\n    if (a[i] !== b[i]) {\n      return Ordering.Unordered;\n    }\n  }\n  if (a.length === b.length) {\n    return Ordering.Equal;\n  } else if (a.length < b.length) {\n    return Ordering.StrictSuperset;\n  } else {\n    return Ordering.StrictSubset;\n  }\n}\n\nexport function comparePublicParamsPaths(a: TestParams, b: TestParams): Ordering {\n  const aKeys = Object.keys(a).filter(k => paramKeyIsPublic(k));\n  const commonKeys = new Set(aKeys.filter(k => k in b));\n\n  for (const k of commonKeys) {\n    if (!objectEquals(a[k], b[k])) {\n      return Ordering.Unordered;\n    }\n  }\n  const bKeys = Object.keys(b).filter(k => paramKeyIsPublic(k));\n  const aRemainingKeys = aKeys.length - commonKeys.size;\n  const bRemainingKeys = bKeys.length - commonKeys.size;\n  if (aRemainingKeys === 0 && bRemainingKeys === 0) return Ordering.Equal;\n  if (aRemainingKeys === 0) return Ordering.StrictSuperset;\n  if (bRemainingKeys === 0) return Ordering.StrictSubset;\n  return Ordering.Unordered;\n}\n"],"mappings":"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"}