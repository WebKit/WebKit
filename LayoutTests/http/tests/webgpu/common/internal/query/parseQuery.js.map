{"version":3,"file":"parseQuery.js","names":["assert","badParamValueChars","paramKeyIsPublic","parseParamValue","TestQueryMultiFile","TestQueryMultiTest","TestQueryMultiCase","TestQuerySingleCase","kBigSeparator","kWildcard","kPathSeparator","kParamSeparator","validQueryPart","parseQuery","s","parseQueryImpl","ex","Error","message","decodeURIComponent","suite","fileString","testString","paramsString","i1","indexOf","substring","i2","i3","parts","file","wildcard","filePathHasWildcard","parseBigPart","undefined","test","testPathHasWildcard","length","paramsParts","paramsHasWildcard","params","paramPart","k","v","parseSingleParam","kExampleQueries","separator","split","endsWithWildcard","i","part","entries","paramSubstring","parseSingleParamValue"],"sources":["../../../../src/common/internal/query/parseQuery.ts"],"sourcesContent":["import { assert } from '../../util/util.js';\nimport {\n  TestParamsRW,\n  JSONWithUndefined,\n  badParamValueChars,\n  paramKeyIsPublic,\n} from '../params_utils.js';\n\nimport { parseParamValue } from './json_param_value.js';\nimport {\n  TestQuery,\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n  TestQueryMultiCase,\n  TestQuerySingleCase,\n} from './query.js';\nimport { kBigSeparator, kWildcard, kPathSeparator, kParamSeparator } from './separators.js';\nimport { validQueryPart } from './validQueryPart.js';\n\nexport function parseQuery(s: string): TestQuery {\n  try {\n    return parseQueryImpl(s);\n  } catch (ex) {\n    if (ex instanceof Error) {\n      ex.message += '\\n  on: ' + s;\n    }\n    throw ex;\n  }\n}\n\nfunction parseQueryImpl(s: string): TestQuery {\n  // Undo encodeURIComponentSelectively\n  s = decodeURIComponent(s);\n\n  // bigParts are: suite, file, test, params (note kBigSeparator could appear in params)\n  let suite: string;\n  let fileString: string | undefined;\n  let testString: string | undefined;\n  let paramsString: string | undefined;\n  {\n    const i1 = s.indexOf(kBigSeparator);\n    assert(i1 !== -1, `query string must have at least one ${kBigSeparator}`);\n    suite = s.substring(0, i1);\n    const i2 = s.indexOf(kBigSeparator, i1 + 1);\n    if (i2 === -1) {\n      fileString = s.substring(i1 + 1);\n    } else {\n      fileString = s.substring(i1 + 1, i2);\n      const i3 = s.indexOf(kBigSeparator, i2 + 1);\n      if (i3 === -1) {\n        testString = s.substring(i2 + 1);\n      } else {\n        testString = s.substring(i2 + 1, i3);\n        paramsString = s.substring(i3 + 1);\n      }\n    }\n  }\n\n  const { parts: file, wildcard: filePathHasWildcard } = parseBigPart(fileString, kPathSeparator);\n\n  if (testString === undefined) {\n    // Query is file-level\n    assert(\n      filePathHasWildcard,\n      `File-level query without wildcard ${kWildcard}. Did you want a file-level query \\\n(append ${kPathSeparator}${kWildcard}) or test-level query (append ${kBigSeparator}${kWildcard})?`\n    );\n    return new TestQueryMultiFile(suite, file);\n  }\n  assert(!filePathHasWildcard, `Wildcard ${kWildcard} must be at the end of the query string`);\n\n  const { parts: test, wildcard: testPathHasWildcard } = parseBigPart(testString, kPathSeparator);\n\n  if (paramsString === undefined) {\n    // Query is test-level\n    assert(\n      testPathHasWildcard,\n      `Test-level query without wildcard ${kWildcard}; did you want a test-level query \\\n(append ${kPathSeparator}${kWildcard}) or case-level query (append ${kBigSeparator}${kWildcard})?`\n    );\n    assert(file.length > 0, 'File part of test-level query was empty (::)');\n    return new TestQueryMultiTest(suite, file, test);\n  }\n\n  // Query is case-level\n  assert(!testPathHasWildcard, `Wildcard ${kWildcard} must be at the end of the query string`);\n\n  const { parts: paramsParts, wildcard: paramsHasWildcard } = parseBigPart(\n    paramsString,\n    kParamSeparator\n  );\n\n  assert(test.length > 0, 'Test part of case-level query was empty (::)');\n\n  const params: TestParamsRW = {};\n  for (const paramPart of paramsParts) {\n    const [k, v] = parseSingleParam(paramPart);\n    assert(validQueryPart.test(k), `param key names must match ${validQueryPart}`);\n    params[k] = v;\n  }\n  if (paramsHasWildcard) {\n    return new TestQueryMultiCase(suite, file, test, params);\n  } else {\n    return new TestQuerySingleCase(suite, file, test, params);\n  }\n}\n\n// webgpu:a,b,* or webgpu:a,b,c:*\nconst kExampleQueries = `\\\nwebgpu${kBigSeparator}a${kPathSeparator}b${kPathSeparator}${kWildcard} or \\\nwebgpu${kBigSeparator}a${kPathSeparator}b${kPathSeparator}c${kBigSeparator}${kWildcard}`;\n\nfunction parseBigPart(\n  s: string,\n  separator: typeof kParamSeparator | typeof kPathSeparator\n): { parts: string[]; wildcard: boolean } {\n  if (s === '') {\n    return { parts: [], wildcard: false };\n  }\n  const parts = s.split(separator);\n\n  let endsWithWildcard = false;\n  for (const [i, part] of parts.entries()) {\n    if (i === parts.length - 1) {\n      endsWithWildcard = part === kWildcard;\n    }\n    assert(\n      part.indexOf(kWildcard) === -1 || endsWithWildcard,\n      `Wildcard ${kWildcard} must be complete last part of a path (e.g. ${kExampleQueries})`\n    );\n  }\n  if (endsWithWildcard) {\n    // Remove the last element of the array (which is just the wildcard).\n    parts.length = parts.length - 1;\n  }\n  return { parts, wildcard: endsWithWildcard };\n}\n\nfunction parseSingleParam(paramSubstring: string): [string, JSONWithUndefined] {\n  assert(paramSubstring !== '', 'Param in a query must not be blank (is there a trailing comma?)');\n  const i = paramSubstring.indexOf('=');\n  assert(i !== -1, 'Param in a query must be of form key=value');\n  const k = paramSubstring.substring(0, i);\n  assert(paramKeyIsPublic(k), 'Param in a query must not be private (start with _)');\n  const v = paramSubstring.substring(i + 1);\n  return [k, parseSingleParamValue(v)];\n}\n\nfunction parseSingleParamValue(s: string): JSONWithUndefined {\n  assert(\n    !badParamValueChars.test(s),\n    `param value must not match ${badParamValueChars} - was ${s}`\n  );\n  return parseParamValue(s);\n}\n"],"mappings":"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"}