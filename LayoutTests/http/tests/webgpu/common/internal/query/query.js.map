{"version":3,"sources":["../../../../src/common/internal/query/query.ts"],"names":["optionEnabled","assert","unreachable","compareQueries","Ordering","encodeURIComponentSelectively","parseQuery","kBigSeparator","kPathSeparator","kWildcard","stringifyPublicParams","TestQueryMultiFile","level","isMultiFile","constructor","suite","file","filePathParts","depthInLevel","length","toString","toStringHelper","join","TestQueryMultiTest","isMultiTest","test","testPathParts","TestQueryMultiCase","isMultiCase","params","Object","keys","TestQuerySingleCase","parseExpectationsForTestQuery","rawExpectations","query","wptURL","Array","isArray","expectations","entry","rawExpectation","undefined","expectation","expectationQuery","expectationURL","URL","origin","pathname","searchParams","qs","getAll","queryForFilter","Unordered","push","relativeQueryString","parent","child","ordering","Equal","StrictSuperset","parentString","endsWith","childString","startsWith","substring"],"mappings":"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","sourcesContent":["import { TestParams } from '../../framework/fixture.js';\nimport { optionEnabled } from '../../runtime/helper/options.js';\nimport { assert, unreachable } from '../../util/util.js';\nimport { Expectation } from '../logging/result.js';\n\nimport { compareQueries, Ordering } from './compare.js';\nimport { encodeURIComponentSelectively } from './encode_selectively.js';\nimport { parseQuery } from './parseQuery.js';\nimport { kBigSeparator, kPathSeparator, kWildcard } from './separators.js';\nimport { stringifyPublicParams } from './stringify_params.js';\n\n/**\n * Represents a test query of some level.\n *\n * TestQuery types are immutable.\n */\nexport type TestQuery =\n  | TestQuerySingleCase\n  | TestQueryMultiCase\n  | TestQueryMultiTest\n  | TestQueryMultiFile;\n\n/**\n * - 1 = MultiFile.\n * - 2 = MultiTest.\n * - 3 = MultiCase.\n * - 4 = SingleCase.\n */\nexport type TestQueryLevel = 1 | 2 | 3 | 4;\n\nexport interface TestQueryWithExpectation {\n  query: TestQuery;\n  expectation: Expectation;\n}\n\n/**\n * A multi-file test query, like `s:*` or `s:a,b,*`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQueryMultiFile {\n  readonly level: TestQueryLevel = 1;\n  readonly isMultiFile: boolean = true;\n  readonly suite: string;\n  readonly filePathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[]) {\n    this.suite = suite;\n    this.filePathParts = [...file];\n  }\n\n  get depthInLevel() {\n    return this.filePathParts.length;\n  }\n\n  toString(): string {\n    return encodeURIComponentSelectively(this.toStringHelper().join(kBigSeparator));\n  }\n\n  protected toStringHelper(): string[] {\n    return [this.suite, [...this.filePathParts, kWildcard].join(kPathSeparator)];\n  }\n}\n\n/**\n * A multi-test test query, like `s:f:*` or `s:f:a,b,*`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQueryMultiTest extends TestQueryMultiFile {\n  readonly level: TestQueryLevel = 2;\n  readonly isMultiFile: false = false;\n  readonly isMultiTest: boolean = true;\n  readonly testPathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[], test: readonly string[]) {\n    super(suite, file);\n    assert(file.length > 0, 'multi-test (or finer) query must have file-path');\n    this.testPathParts = [...test];\n  }\n\n  get depthInLevel() {\n    return this.testPathParts.length;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      [...this.testPathParts, kWildcard].join(kPathSeparator),\n    ];\n  }\n}\n\n/**\n * A multi-case test query, like `s:f:t:*` or `s:f:t:a,b,*`.\n *\n * Immutable (makes copies of constructor args), except for param values\n * (which aren't normally supposed to change; they're marked readonly in TestParams).\n */\nexport class TestQueryMultiCase extends TestQueryMultiTest {\n  readonly level: TestQueryLevel = 3;\n  readonly isMultiTest: false = false;\n  readonly isMultiCase: boolean = true;\n  readonly params: TestParams;\n\n  constructor(suite: string, file: readonly string[], test: readonly string[], params: TestParams) {\n    super(suite, file, test);\n    assert(test.length > 0, 'multi-case (or finer) query must have test-path');\n    this.params = { ...params };\n  }\n\n  get depthInLevel() {\n    return Object.keys(this.params).length;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      stringifyPublicParams(this.params, true),\n    ];\n  }\n}\n\n/**\n * A multi-case test query, like `s:f:t:` or `s:f:t:a=1,b=1`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQuerySingleCase extends TestQueryMultiCase {\n  readonly level: TestQueryLevel = 4;\n  readonly isMultiCase: false = false;\n\n  get depthInLevel() {\n    return 0;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      stringifyPublicParams(this.params),\n    ];\n  }\n}\n\n/**\n * Parse raw expectations input into TestQueryWithExpectation[], filtering so that only\n * expectations that are relevant for the provided query and wptURL.\n *\n * `rawExpectations` should be @type {{ query: string, expectation: Expectation }[]}\n *\n * The `rawExpectations` are parsed and validated that they are in the correct format.\n * If `wptURL` is passed, the query string should be of the full path format such\n * as `path/to/cts.https.html?worker=0&q=suite:test_path:test_name:foo=1;bar=2;*`.\n * If `wptURL` is `undefined`, the query string should be only the query\n * `suite:test_path:test_name:foo=1;bar=2;*`.\n */\nexport function parseExpectationsForTestQuery(\n  rawExpectations:\n    | unknown\n    | {\n        query: string;\n        expectation: Expectation;\n      }[],\n  query: TestQuery,\n  wptURL?: URL\n) {\n  if (!Array.isArray(rawExpectations)) {\n    unreachable('Expectations should be an array');\n  }\n  const expectations: TestQueryWithExpectation[] = [];\n  for (const entry of rawExpectations) {\n    assert(typeof entry === 'object');\n    const rawExpectation = entry as { query?: string; expectation?: string };\n    assert(rawExpectation.query !== undefined, 'Expectation missing query string');\n    assert(rawExpectation.expectation !== undefined, 'Expectation missing expectation string');\n\n    let expectationQuery: TestQuery;\n    if (wptURL !== undefined) {\n      const expectationURL = new URL(`${wptURL.origin}/${entry.query}`);\n      if (expectationURL.pathname !== wptURL.pathname) {\n        continue;\n      }\n      assert(\n        expectationURL.pathname === wptURL.pathname,\n        `Invalid expectation path ${expectationURL.pathname}\nExpectation should be of the form path/to/cts.https.html?worker=0&q=suite:test_path:test_name:foo=1;bar=2;...\n        `\n      );\n\n      const params = expectationURL.searchParams;\n      if (optionEnabled('worker', params) !== optionEnabled('worker', wptURL.searchParams)) {\n        continue;\n      }\n\n      const qs = params.getAll('q');\n      assert(qs.length === 1, 'currently, there must be exactly one ?q= in the expectation string');\n      expectationQuery = parseQuery(qs[0]);\n    } else {\n      expectationQuery = parseQuery(entry.query);\n    }\n\n    // Strip params from multicase expectations so that an expectation of foo=2;*\n    // is stored if the test query is bar=3;*\n    const queryForFilter =\n      expectationQuery instanceof TestQueryMultiCase\n        ? new TestQueryMultiCase(\n            expectationQuery.suite,\n            expectationQuery.filePathParts,\n            expectationQuery.testPathParts,\n            {}\n          )\n        : expectationQuery;\n\n    if (compareQueries(query, queryForFilter) === Ordering.Unordered) {\n      continue;\n    }\n\n    switch (entry.expectation) {\n      case 'pass':\n      case 'skip':\n      case 'fail':\n        break;\n      default:\n        unreachable(`Invalid expectation ${entry.expectation}`);\n    }\n\n    expectations.push({\n      query: expectationQuery,\n      expectation: entry.expectation,\n    });\n  }\n  return expectations;\n}\n\n/**\n * For display purposes only, produces a \"relative\" query string from parent to child.\n * Used in the wpt runtime to reduce the verbosity of logs.\n */\nexport function relativeQueryString(parent: TestQuery, child: TestQuery): string {\n  const ordering = compareQueries(parent, child);\n  if (ordering === Ordering.Equal) {\n    return '';\n  } else if (ordering === Ordering.StrictSuperset) {\n    const parentString = parent.toString();\n    assert(parentString.endsWith(kWildcard));\n    const childString = child.toString();\n    assert(\n      childString.startsWith(parentString.substring(0, parentString.length - 2)),\n      'impossible?: childString does not start with parentString[:-2]'\n    );\n    return childString.substring(parentString.length - 2);\n  } else {\n    unreachable(\n      `relativeQueryString arguments have invalid ordering ${ordering}:\\n${parent}\\n${child}`\n    );\n  }\n}\n"],"file":"query.js"}