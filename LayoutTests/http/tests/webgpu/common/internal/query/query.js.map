{"version":3,"file":"query.js","names":["optionEnabled","assert","unreachable","compareQueries","Ordering","encodeURIComponentSelectively","parseQuery","kBigSeparator","kPathSeparator","kWildcard","stringifyPublicParams","TestQueryMultiFile","level","isMultiFile","constructor","suite","file","filePathParts","depthInLevel","length","toString","toStringHelper","join","TestQueryMultiTest","isMultiTest","test","testPathParts","TestQueryMultiCase","isMultiCase","params","Object","keys","TestQuerySingleCase","parseExpectationsForTestQuery","rawExpectations","query","wptURL","Array","isArray","expectations","entry","rawExpectation","undefined","expectation","expectationQuery","expectationURL","URL","origin","pathname","searchParams","qs","getAll","queryForFilter","Unordered","push","relativeQueryString","parent","child","ordering","Equal","StrictSuperset","parentString","endsWith","childString","startsWith","substring"],"sources":["../../../../src/common/internal/query/query.ts"],"sourcesContent":["import { TestParams } from '../../framework/fixture.js';\nimport { optionEnabled } from '../../runtime/helper/options.js';\nimport { assert, unreachable } from '../../util/util.js';\nimport { Expectation } from '../logging/result.js';\n\nimport { compareQueries, Ordering } from './compare.js';\nimport { encodeURIComponentSelectively } from './encode_selectively.js';\nimport { parseQuery } from './parseQuery.js';\nimport { kBigSeparator, kPathSeparator, kWildcard } from './separators.js';\nimport { stringifyPublicParams } from './stringify_params.js';\n\n/**\n * Represents a test query of some level.\n *\n * TestQuery types are immutable.\n */\nexport type TestQuery =\n  | TestQuerySingleCase\n  | TestQueryMultiCase\n  | TestQueryMultiTest\n  | TestQueryMultiFile;\n\n/**\n * - 1 = MultiFile.\n * - 2 = MultiTest.\n * - 3 = MultiCase.\n * - 4 = SingleCase.\n */\nexport type TestQueryLevel = 1 | 2 | 3 | 4;\n\nexport interface TestQueryWithExpectation {\n  query: TestQuery;\n  expectation: Expectation;\n}\n\n/**\n * A multi-file test query, like `s:*` or `s:a,b,*`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQueryMultiFile {\n  readonly level: TestQueryLevel = 1;\n  readonly isMultiFile: boolean = true;\n  readonly suite: string;\n  readonly filePathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[]) {\n    this.suite = suite;\n    this.filePathParts = [...file];\n  }\n\n  get depthInLevel() {\n    return this.filePathParts.length;\n  }\n\n  toString(): string {\n    return encodeURIComponentSelectively(this.toStringHelper().join(kBigSeparator));\n  }\n\n  protected toStringHelper(): string[] {\n    return [this.suite, [...this.filePathParts, kWildcard].join(kPathSeparator)];\n  }\n}\n\n/**\n * A multi-test test query, like `s:f:*` or `s:f:a,b,*`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQueryMultiTest extends TestQueryMultiFile {\n  readonly level: TestQueryLevel = 2;\n  readonly isMultiFile: false = false;\n  readonly isMultiTest: boolean = true;\n  readonly testPathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[], test: readonly string[]) {\n    super(suite, file);\n    assert(file.length > 0, 'multi-test (or finer) query must have file-path');\n    this.testPathParts = [...test];\n  }\n\n  get depthInLevel() {\n    return this.testPathParts.length;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      [...this.testPathParts, kWildcard].join(kPathSeparator),\n    ];\n  }\n}\n\n/**\n * A multi-case test query, like `s:f:t:*` or `s:f:t:a,b,*`.\n *\n * Immutable (makes copies of constructor args), except for param values\n * (which aren't normally supposed to change; they're marked readonly in TestParams).\n */\nexport class TestQueryMultiCase extends TestQueryMultiTest {\n  readonly level: TestQueryLevel = 3;\n  readonly isMultiTest: false = false;\n  readonly isMultiCase: boolean = true;\n  readonly params: TestParams;\n\n  constructor(suite: string, file: readonly string[], test: readonly string[], params: TestParams) {\n    super(suite, file, test);\n    assert(test.length > 0, 'multi-case (or finer) query must have test-path');\n    this.params = { ...params };\n  }\n\n  get depthInLevel() {\n    return Object.keys(this.params).length;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      stringifyPublicParams(this.params, true),\n    ];\n  }\n}\n\n/**\n * A multi-case test query, like `s:f:t:` or `s:f:t:a=1,b=1`.\n *\n * Immutable (makes copies of constructor args).\n */\nexport class TestQuerySingleCase extends TestQueryMultiCase {\n  readonly level: TestQueryLevel = 4;\n  readonly isMultiCase: false = false;\n\n  get depthInLevel() {\n    return 0;\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      stringifyPublicParams(this.params),\n    ];\n  }\n}\n\n/**\n * Parse raw expectations input into TestQueryWithExpectation[], filtering so that only\n * expectations that are relevant for the provided query and wptURL.\n *\n * `rawExpectations` should be @type {{ query: string, expectation: Expectation }[]}\n *\n * The `rawExpectations` are parsed and validated that they are in the correct format.\n * If `wptURL` is passed, the query string should be of the full path format such\n * as `path/to/cts.https.html?worker=0&q=suite:test_path:test_name:foo=1;bar=2;*`.\n * If `wptURL` is `undefined`, the query string should be only the query\n * `suite:test_path:test_name:foo=1;bar=2;*`.\n */\nexport function parseExpectationsForTestQuery(\n  rawExpectations:\n    | unknown\n    | {\n        query: string;\n        expectation: Expectation;\n      }[],\n  query: TestQuery,\n  wptURL?: URL\n) {\n  if (!Array.isArray(rawExpectations)) {\n    unreachable('Expectations should be an array');\n  }\n  const expectations: TestQueryWithExpectation[] = [];\n  for (const entry of rawExpectations) {\n    assert(typeof entry === 'object');\n    const rawExpectation = entry as { query?: string; expectation?: string };\n    assert(rawExpectation.query !== undefined, 'Expectation missing query string');\n    assert(rawExpectation.expectation !== undefined, 'Expectation missing expectation string');\n\n    let expectationQuery: TestQuery;\n    if (wptURL !== undefined) {\n      const expectationURL = new URL(`${wptURL.origin}/${entry.query}`);\n      if (expectationURL.pathname !== wptURL.pathname) {\n        continue;\n      }\n      assert(\n        expectationURL.pathname === wptURL.pathname,\n        `Invalid expectation path ${expectationURL.pathname}\nExpectation should be of the form path/to/cts.https.html?worker=0&q=suite:test_path:test_name:foo=1;bar=2;...\n        `\n      );\n\n      const params = expectationURL.searchParams;\n      if (optionEnabled('worker', params) !== optionEnabled('worker', wptURL.searchParams)) {\n        continue;\n      }\n\n      const qs = params.getAll('q');\n      assert(qs.length === 1, 'currently, there must be exactly one ?q= in the expectation string');\n      expectationQuery = parseQuery(qs[0]);\n    } else {\n      expectationQuery = parseQuery(entry.query);\n    }\n\n    // Strip params from multicase expectations so that an expectation of foo=2;*\n    // is stored if the test query is bar=3;*\n    const queryForFilter =\n      expectationQuery instanceof TestQueryMultiCase\n        ? new TestQueryMultiCase(\n            expectationQuery.suite,\n            expectationQuery.filePathParts,\n            expectationQuery.testPathParts,\n            {}\n          )\n        : expectationQuery;\n\n    if (compareQueries(query, queryForFilter) === Ordering.Unordered) {\n      continue;\n    }\n\n    switch (entry.expectation) {\n      case 'pass':\n      case 'skip':\n      case 'fail':\n        break;\n      default:\n        unreachable(`Invalid expectation ${entry.expectation}`);\n    }\n\n    expectations.push({\n      query: expectationQuery,\n      expectation: entry.expectation,\n    });\n  }\n  return expectations;\n}\n\n/**\n * For display purposes only, produces a \"relative\" query string from parent to child.\n * Used in the wpt runtime to reduce the verbosity of logs.\n */\nexport function relativeQueryString(parent: TestQuery, child: TestQuery): string {\n  const ordering = compareQueries(parent, child);\n  if (ordering === Ordering.Equal) {\n    return '';\n  } else if (ordering === Ordering.StrictSuperset) {\n    const parentString = parent.toString();\n    assert(parentString.endsWith(kWildcard));\n    const childString = child.toString();\n    assert(\n      childString.startsWith(parentString.substring(0, parentString.length - 2)),\n      'impossible?: childString does not start with parentString[:-2]'\n    );\n    return childString.substring(parentString.length - 2);\n  } else {\n    unreachable(\n      `relativeQueryString arguments have invalid ordering ${ordering}:\\n${parent}\\n${child}`\n    );\n  }\n}\n"],"mappings":"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"}