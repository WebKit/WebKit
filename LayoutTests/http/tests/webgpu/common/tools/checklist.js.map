{"version":3,"sources":["../../../src/common/tools/checklist.ts"],"names":["fs","process","DefaultTestFileLoader","Ordering","compareQueries","parseQuery","TestQueryMultiFile","loadTreeForQuery","StacklessError","assert","usage","rc","console","error","exit","argv","length","loadQueryListFromTextFile","filename","lines","promises","readFile","split","allQueries","filter","l","map","doneStr","q","query","done","queriesBySuite","Map","suiteQueries","get","suite","undefined","set","push","checkForOverlappingQueries","queries","i1","i2","q1","q2","Unordered","log","checkForUnmatchedSubtreesAndDoneness","tree","matchQueries","subtreeCount","unmatchedSubtrees","overbroadMatches","donenessMismatches","alwaysExpandThroughLevel","subtree","iterateCollapsedNodes","includeIntermediateNodes","includeEmptySubtrees","subtreeDone","subtreeCounts","nodesWithTODO","subtreeMatched","comparison","StrictSubset","StrictSuperset","Equal","collapsedSubtree","join","Array","from","keys","loader","queriesInSuite","entries","suiteQuery","catch","ex","stack","toString"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as process from 'process';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { Ordering, compareQueries } from '../internal/query/compare.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQuery, TestQueryMultiFile } from '../internal/query/query.js';\nimport { loadTreeForQuery, TestTree } from '../internal/tree.js';\nimport { StacklessError } from '../internal/util.js';\nimport { assert } from '../util/util.js';\n\nfunction usage(rc: number): void {\n  console.error('Usage:');\n  console.error('  tools/checklist FILE');\n  console.error('  tools/checklist my/list.txt');\n  process.exit(rc);\n}\n\nif (process.argv.length === 2) usage(0);\nif (process.argv.length !== 3) usage(1);\n\ntype QueryInSuite = { readonly query: TestQuery; readonly done: boolean };\ntype QueriesInSuite = QueryInSuite[];\ntype QueriesBySuite = Map<string, QueriesInSuite>;\nasync function loadQueryListFromTextFile(filename: string): Promise<QueriesBySuite> {\n  const lines = (await fs.promises.readFile(filename, 'utf8')).split(/\\r?\\n/);\n  const allQueries = lines\n    .filter(l => l)\n    .map(l => {\n      const [doneStr, q] = l.split(/\\s+/);\n      assert(doneStr === 'DONE' || doneStr === 'TODO', 'first column must be DONE or TODO');\n      return { query: parseQuery(q), done: doneStr === 'DONE' } as const;\n    });\n\n  const queriesBySuite: QueriesBySuite = new Map();\n  for (const q of allQueries) {\n    let suiteQueries = queriesBySuite.get(q.query.suite);\n    if (suiteQueries === undefined) {\n      suiteQueries = [];\n      queriesBySuite.set(q.query.suite, suiteQueries);\n    }\n\n    suiteQueries.push(q);\n  }\n\n  return queriesBySuite;\n}\n\nfunction checkForOverlappingQueries(queries: QueriesInSuite): void {\n  for (let i1 = 0; i1 < queries.length; ++i1) {\n    for (let i2 = i1 + 1; i2 < queries.length; ++i2) {\n      const q1 = queries[i1].query;\n      const q2 = queries[i2].query;\n      if (compareQueries(q1, q2) !== Ordering.Unordered) {\n        console.log(`    FYI, the following checklist items overlap:\\n      ${q1}\\n      ${q2}`);\n      }\n    }\n  }\n}\n\nfunction checkForUnmatchedSubtreesAndDoneness(\n  tree: TestTree,\n  matchQueries: QueriesInSuite\n): number {\n  let subtreeCount = 0;\n  const unmatchedSubtrees: TestQuery[] = [];\n  const overbroadMatches: [TestQuery, TestQuery][] = [];\n  const donenessMismatches: QueryInSuite[] = [];\n  const alwaysExpandThroughLevel = 1; // expand to, at minimum, every file.\n  for (const subtree of tree.iterateCollapsedNodes({\n    includeIntermediateNodes: true,\n    includeEmptySubtrees: true,\n    alwaysExpandThroughLevel,\n  })) {\n    subtreeCount++;\n    const subtreeDone = !subtree.subtreeCounts?.nodesWithTODO;\n\n    let subtreeMatched = false;\n    for (const q of matchQueries) {\n      const comparison = compareQueries(q.query, subtree.query);\n      if (comparison !== Ordering.Unordered) subtreeMatched = true;\n      if (comparison === Ordering.StrictSubset) continue;\n      if (comparison === Ordering.StrictSuperset) overbroadMatches.push([q.query, subtree.query]);\n      if (comparison === Ordering.Equal && q.done !== subtreeDone) donenessMismatches.push(q);\n    }\n    if (!subtreeMatched) unmatchedSubtrees.push(subtree.query);\n  }\n\n  if (overbroadMatches.length) {\n    // (note, this doesn't show ALL multi-test queries - just ones that actually match any .spec.ts)\n    console.log(`  FYI, the following checklist items were broader than one file:`);\n    for (const [q, collapsedSubtree] of overbroadMatches) {\n      console.log(`    ${q}  >  ${collapsedSubtree}`);\n    }\n  }\n\n  if (unmatchedSubtrees.length) {\n    throw new StacklessError(`Found unmatched tests:\\n  ${unmatchedSubtrees.join('\\n  ')}`);\n  }\n\n  if (donenessMismatches.length) {\n    throw new StacklessError(\n      'Found done/todo mismatches:\\n  ' +\n        donenessMismatches\n          .map(q => `marked ${q.done ? 'DONE, but is TODO' : 'TODO, but is DONE'}: ${q.query}`)\n          .join('\\n  ')\n    );\n  }\n\n  return subtreeCount;\n}\n\n(async () => {\n  console.log('Loading queries...');\n  const queriesBySuite = await loadQueryListFromTextFile(process.argv[2]);\n  console.log('  Found suites: ' + Array.from(queriesBySuite.keys()).join(' '));\n\n  const loader = new DefaultTestFileLoader();\n  for (const [suite, queriesInSuite] of queriesBySuite.entries()) {\n    console.log(`Suite \"${suite}\":`);\n    console.log(`  Checking overlaps between ${queriesInSuite.length} checklist items...`);\n    checkForOverlappingQueries(queriesInSuite);\n    const suiteQuery = new TestQueryMultiFile(suite, []);\n    console.log(`  Loading tree ${suiteQuery}...`);\n    const tree = await loadTreeForQuery(\n      loader,\n      suiteQuery,\n      queriesInSuite.map(q => q.query)\n    );\n    console.log('  Found no invalid queries in the checklist. Checking for unmatched tests...');\n    const subtreeCount = checkForUnmatchedSubtreesAndDoneness(tree, queriesInSuite);\n    console.log(`  No unmatched tests or done/todo mismatches among ${subtreeCount} subtrees!`);\n  }\n  console.log(`Checklist looks good!`);\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  process.exit(1);\n});\n"],"file":"checklist.js"}