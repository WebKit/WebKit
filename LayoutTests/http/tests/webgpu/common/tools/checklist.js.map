{"version":3,"file":"checklist.js","names":["fs","process","DefaultTestFileLoader","Ordering","compareQueries","parseQuery","TestQueryMultiFile","loadTreeForQuery","StacklessError","assert","usage","rc","console","error","exit","argv","length","loadQueryListFromTextFile","filename","lines","promises","readFile","split","allQueries","filter","l","map","doneStr","q","query","done","queriesBySuite","Map","suiteQueries","get","suite","undefined","set","push","checkForOverlappingQueries","queries","i1","i2","q1","q2","Unordered","log","checkForUnmatchedSubtreesAndDoneness","tree","matchQueries","subtreeCount","unmatchedSubtrees","overbroadMatches","donenessMismatches","alwaysExpandThroughLevel","subtree","iterateCollapsedNodes","includeIntermediateNodes","includeEmptySubtrees","subtreeDone","subtreeCounts","nodesWithTODO","subtreeMatched","comparison","StrictSubset","StrictSuperset","Equal","collapsedSubtree","join","Array","from","keys","loader","queriesInSuite","entries","suiteQuery","catch","ex","stack","toString"],"sources":["../../../src/common/tools/checklist.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as process from 'process';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { Ordering, compareQueries } from '../internal/query/compare.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQuery, TestQueryMultiFile } from '../internal/query/query.js';\nimport { loadTreeForQuery, TestTree } from '../internal/tree.js';\nimport { StacklessError } from '../internal/util.js';\nimport { assert } from '../util/util.js';\n\nfunction usage(rc: number): void {\n  console.error('Usage:');\n  console.error('  tools/checklist FILE');\n  console.error('  tools/checklist my/list.txt');\n  process.exit(rc);\n}\n\nif (process.argv.length === 2) usage(0);\nif (process.argv.length !== 3) usage(1);\n\ntype QueryInSuite = { readonly query: TestQuery; readonly done: boolean };\ntype QueriesInSuite = QueryInSuite[];\ntype QueriesBySuite = Map<string, QueriesInSuite>;\nasync function loadQueryListFromTextFile(filename: string): Promise<QueriesBySuite> {\n  const lines = (await fs.promises.readFile(filename, 'utf8')).split(/\\r?\\n/);\n  const allQueries = lines\n    .filter(l => l)\n    .map(l => {\n      const [doneStr, q] = l.split(/\\s+/);\n      assert(doneStr === 'DONE' || doneStr === 'TODO', 'first column must be DONE or TODO');\n      return { query: parseQuery(q), done: doneStr === 'DONE' } as const;\n    });\n\n  const queriesBySuite: QueriesBySuite = new Map();\n  for (const q of allQueries) {\n    let suiteQueries = queriesBySuite.get(q.query.suite);\n    if (suiteQueries === undefined) {\n      suiteQueries = [];\n      queriesBySuite.set(q.query.suite, suiteQueries);\n    }\n\n    suiteQueries.push(q);\n  }\n\n  return queriesBySuite;\n}\n\nfunction checkForOverlappingQueries(queries: QueriesInSuite): void {\n  for (let i1 = 0; i1 < queries.length; ++i1) {\n    for (let i2 = i1 + 1; i2 < queries.length; ++i2) {\n      const q1 = queries[i1].query;\n      const q2 = queries[i2].query;\n      if (compareQueries(q1, q2) !== Ordering.Unordered) {\n        console.log(`    FYI, the following checklist items overlap:\\n      ${q1}\\n      ${q2}`);\n      }\n    }\n  }\n}\n\nfunction checkForUnmatchedSubtreesAndDoneness(\n  tree: TestTree,\n  matchQueries: QueriesInSuite\n): number {\n  let subtreeCount = 0;\n  const unmatchedSubtrees: TestQuery[] = [];\n  const overbroadMatches: [TestQuery, TestQuery][] = [];\n  const donenessMismatches: QueryInSuite[] = [];\n  const alwaysExpandThroughLevel = 1; // expand to, at minimum, every file.\n  for (const subtree of tree.iterateCollapsedNodes({\n    includeIntermediateNodes: true,\n    includeEmptySubtrees: true,\n    alwaysExpandThroughLevel,\n  })) {\n    subtreeCount++;\n    const subtreeDone = !subtree.subtreeCounts?.nodesWithTODO;\n\n    let subtreeMatched = false;\n    for (const q of matchQueries) {\n      const comparison = compareQueries(q.query, subtree.query);\n      if (comparison !== Ordering.Unordered) subtreeMatched = true;\n      if (comparison === Ordering.StrictSubset) continue;\n      if (comparison === Ordering.StrictSuperset) overbroadMatches.push([q.query, subtree.query]);\n      if (comparison === Ordering.Equal && q.done !== subtreeDone) donenessMismatches.push(q);\n    }\n    if (!subtreeMatched) unmatchedSubtrees.push(subtree.query);\n  }\n\n  if (overbroadMatches.length) {\n    // (note, this doesn't show ALL multi-test queries - just ones that actually match any .spec.ts)\n    console.log(`  FYI, the following checklist items were broader than one file:`);\n    for (const [q, collapsedSubtree] of overbroadMatches) {\n      console.log(`    ${q}  >  ${collapsedSubtree}`);\n    }\n  }\n\n  if (unmatchedSubtrees.length) {\n    throw new StacklessError(`Found unmatched tests:\\n  ${unmatchedSubtrees.join('\\n  ')}`);\n  }\n\n  if (donenessMismatches.length) {\n    throw new StacklessError(\n      'Found done/todo mismatches:\\n  ' +\n        donenessMismatches\n          .map(q => `marked ${q.done ? 'DONE, but is TODO' : 'TODO, but is DONE'}: ${q.query}`)\n          .join('\\n  ')\n    );\n  }\n\n  return subtreeCount;\n}\n\n(async () => {\n  console.log('Loading queries...');\n  const queriesBySuite = await loadQueryListFromTextFile(process.argv[2]);\n  console.log('  Found suites: ' + Array.from(queriesBySuite.keys()).join(' '));\n\n  const loader = new DefaultTestFileLoader();\n  for (const [suite, queriesInSuite] of queriesBySuite.entries()) {\n    console.log(`Suite \"${suite}\":`);\n    console.log(`  Checking overlaps between ${queriesInSuite.length} checklist items...`);\n    checkForOverlappingQueries(queriesInSuite);\n    const suiteQuery = new TestQueryMultiFile(suite, []);\n    console.log(`  Loading tree ${suiteQuery}...`);\n    const tree = await loadTreeForQuery(\n      loader,\n      suiteQuery,\n      queriesInSuite.map(q => q.query)\n    );\n    console.log('  Found no invalid queries in the checklist. Checking for unmatched tests...');\n    const subtreeCount = checkForUnmatchedSubtreesAndDoneness(tree, queriesInSuite);\n    console.log(`  No unmatched tests or done/todo mismatches among ${subtreeCount} subtrees!`);\n  }\n  console.log(`Checklist looks good!`);\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  process.exit(1);\n});\n"],"mappings":"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"}