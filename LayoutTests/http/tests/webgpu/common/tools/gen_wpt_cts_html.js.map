{"version":3,"sources":["../../../src/common/tools/gen_wpt_cts_html.ts"],"names":["promises","fs","DefaultTestFileLoader","TestQueryMultiFile","assert","printUsageAndExit","rc","console","error","process","exit","argv","length","outFile","templateFile","argsPrefixesFile","expectationsFile","expectationsPrefix","suite","argsPrefixes","expectationLines","Set","argsPrefixesFromFile","readFile","split","filter","a","sort","b","l","expectations","Map","prefix","set","expLoop","exp","argsPrefix","startsWith","get","push","substring","log","loader","lines","rootQuery","tree","loadTree","undefined","alwaysExpandThroughLevel","query","iterateCollapsedNodes","urlQueryString","toString","generateFile","catch","ex","stack","result","line","writeFile"],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { TestQueryMultiFile } from '../internal/query/query.js';\nimport { assert } from '../util/util.js';\n\nfunction printUsageAndExit(rc: number): void {\n  console.error(`\\\nUsage:\n  tools/gen_wpt_cts_html OUTPUT_FILE TEMPLATE_FILE [ARGUMENTS_PREFIXES_FILE EXPECTATIONS_FILE EXPECTATIONS_PREFIX [SUITE]]\n  tools/gen_wpt_cts_html out-wpt/cts.https.html templates/cts.https.html\n  tools/gen_wpt_cts_html my/path/to/cts.https.html templates/cts.https.html arguments.txt myexpectations.txt 'path/to/cts.https.html' cts\n\nwhere arguments.txt is a file containing a list of arguments prefixes to both generate and expect\nin the expectations. The entire variant list generation runs *once per prefix*, so this\nmultiplies the size of the variant list.\n\n  ?worker=0&q=\n  ?worker=1&q=\n\nand myexpectations.txt is a file containing a list of WPT paths to suppress, e.g.:\n\n  path/to/cts.https.html?worker=0&q=webgpu:a/foo:bar={\"x\":1}\n  path/to/cts.https.html?worker=1&q=webgpu:a/foo:bar={\"x\":1}\n\n  path/to/cts.https.html?worker=1&q=webgpu:a/foo:bar={\"x\":3}\n`);\n  process.exit(rc);\n}\n\nif (process.argv.length !== 4 && process.argv.length !== 7 && process.argv.length !== 8) {\n  printUsageAndExit(0);\n}\n\nconst [\n  ,\n  ,\n  outFile,\n  templateFile,\n  argsPrefixesFile,\n  expectationsFile,\n  expectationsPrefix,\n  suite = 'webgpu',\n] = process.argv;\n\n(async () => {\n  let argsPrefixes = [''];\n  let expectationLines = new Set<string>();\n\n  if (process.argv.length >= 7) {\n    // Prefixes sorted from longest to shortest\n    const argsPrefixesFromFile = (await fs.readFile(argsPrefixesFile, 'utf8'))\n      .split(/\\r?\\n/)\n      .filter(a => a.length)\n      .sort((a, b) => b.length - a.length);\n    if (argsPrefixesFromFile.length) argsPrefixes = argsPrefixesFromFile;\n    expectationLines = new Set(\n      (await fs.readFile(expectationsFile, 'utf8')).split(/\\r?\\n/).filter(l => l.length)\n    );\n  }\n\n  const expectations: Map<string, string[]> = new Map();\n  for (const prefix of argsPrefixes) {\n    expectations.set(prefix, []);\n  }\n\n  expLoop: for (const exp of expectationLines) {\n    // Take each expectation for the longest prefix it matches.\n    for (const argsPrefix of argsPrefixes) {\n      const prefix = expectationsPrefix + argsPrefix;\n      if (exp.startsWith(prefix)) {\n        expectations.get(argsPrefix)!.push(exp.substring(prefix.length));\n        continue expLoop;\n      }\n    }\n    console.log('note: ignored expectation: ' + exp);\n  }\n\n  const loader = new DefaultTestFileLoader();\n  const lines: Array<string | undefined> = [];\n  for (const prefix of argsPrefixes) {\n    const rootQuery = new TestQueryMultiFile(suite, []);\n    const tree = await loader.loadTree(rootQuery, expectations.get(prefix)!);\n\n    lines.push(undefined); // output blank line between prefixes\n    const alwaysExpandThroughLevel = 2; // expand to, at minimum, every test.\n    for (const { query } of tree.iterateCollapsedNodes({ alwaysExpandThroughLevel })) {\n      const urlQueryString = prefix + query.toString(); // \"?worker=0&q=...\"\n      // Check for a safe-ish path length limit. Filename must be <= 255, and on Windows the whole\n      // path must be <= 259. Leave room for e.g.:\n      // 'c:\\b\\s\\w\\xxxxxxxx\\layout-test-results\\external\\wpt\\webgpu\\cts_worker=0_q=...-actual.txt'\n      assert(\n        urlQueryString.length < 185,\n        'Generated test variant would produce too-long -actual.txt filename. \\\nTry broadening suppressions to avoid long test variant names. ' +\n          urlQueryString\n      );\n      lines.push(urlQueryString);\n    }\n  }\n  await generateFile(lines);\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  process.exit(1);\n});\n\nasync function generateFile(lines: Array<string | undefined>): Promise<void> {\n  let result = '';\n  result += '<!-- AUTO-GENERATED - DO NOT EDIT. See WebGPU CTS: tools/gen_wpt_cts_html. -->\\n';\n\n  result += await fs.readFile(templateFile, 'utf8');\n\n  for (const line of lines) {\n    if (line === undefined) {\n      result += '\\n';\n    } else {\n      result += `<meta name=variant content='${line}'>\\n`;\n    }\n  }\n\n  await fs.writeFile(outFile, result);\n}\n"],"file":"gen_wpt_cts_html.js"}