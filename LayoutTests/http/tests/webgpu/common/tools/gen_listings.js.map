{"version":3,"sources":["../../../src/common/tools/gen_listings.ts"],"names":["fs","path","process","crawl","usage","rc","console","error","exit","argv","indexOf","validate","i","splice","length","myself","outDir","suiteDir","slice","listing","suite","basename","outFile","normalize","join","mkdirSync","recursive","writeFileSync","JSON","stringify","undefined","unlinkSync","ex"],"mappings":";AAAA;AACA,GADA,OAAO,KAAKA,EAAZ,MAAoB,IAApB,CACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB,CACA,OAAO,KAAKC,OAAZ,MAAyB,SAAzB;;AAEA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,KAAR,CAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATE;AAUAL,EAAAA,OAAO,CAACM,IAAR,CAAaH,EAAb;AACD;;AAED,MAAMI,IAAI,GAAGP,OAAO,CAACO,IAArB;AACA,IAAIA,IAAI,CAACC,OAAL,CAAa,QAAb,MAA2B,CAAC,CAAhC,EAAmC;AACjCN,EAAAA,KAAK,CAAC,CAAD,CAAL;AACD;;AAED,IAAIO,QAAQ,GAAG,IAAf;AACA;AACE,QAAMC,CAAC,GAAGH,IAAI,CAACC,OAAL,CAAa,eAAb,CAAV;AACA,MAAIE,CAAC,KAAK,CAAC,CAAX,EAAc;AACZD,IAAAA,QAAQ,GAAG,KAAX;AACAF,IAAAA,IAAI,CAACI,MAAL,CAAYD,CAAZ,EAAe,CAAf;AACD;AACF;;AAED,IAAIH,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnBV,EAAAA,KAAK,CAAC,CAAD,CAAL;AACD;;AAED,MAAMW,MAAM,GAAG,kCAAf;;AAEA,MAAMC,MAAM,GAAGP,IAAI,CAAC,CAAD,CAAnB;;AAEA,CAAC,YAAY;AACX,OAAK,MAAMQ,QAAX,IAAuBR,IAAI,CAACS,KAAL,CAAW,CAAX,CAAvB,EAAsC;AACpC,UAAMC,OAAO,GAAG,MAAMhB,KAAK,CAACc,QAAD,EAAWN,QAAX,CAA3B;;AAEA,UAAMS,KAAK,GAAGnB,IAAI,CAACoB,QAAL,CAAcJ,QAAd,CAAd;AACA,UAAMK,OAAO,GAAGrB,IAAI,CAACsB,SAAL,CAAetB,IAAI,CAACuB,IAAL,CAAUR,MAAV,EAAmB,GAAEI,KAAM,aAA3B,CAAf,CAAhB;AACApB,IAAAA,EAAE,CAACyB,SAAH,CAAaxB,IAAI,CAACuB,IAAL,CAAUR,MAAV,EAAkBI,KAAlB,CAAb,EAAuC,EAAEM,SAAS,EAAE,IAAb,EAAvC;AACA1B,IAAAA,EAAE,CAAC2B,aAAH;AACEL,IAAAA,OADF;AAEG;AACP,uCAAuCP,MAAO;AAC9C;AACA,yBAAyBa,IAAI,CAACC,SAAL,CAAeV,OAAf,EAAwBW,SAAxB,EAAmC,CAAnC,CAAsC;AAC/D,CANI;;AAQA,QAAI;AACF9B,MAAAA,EAAE,CAAC+B,UAAH,CAAcT,OAAO,GAAG,MAAxB;AACD,KAFD,CAEE,OAAOU,EAAP,EAAW;AACX;AACD;AACF;AACF,CArBD","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as process from 'process';\n\nimport { crawl } from './crawl.js';\n\nfunction usage(rc: number): void {\n  console.error(`Usage: tools/gen_listings [options] [OUT_DIR] [SUITE_DIRS...]\n\nFor each suite in SUITE_DIRS, generate listings and write each listing.js\ninto OUT_DIR/{suite}/listing.js. Example:\n  tools/gen_listings out/ src/unittests/ src/webgpu/\n\nOptions:\n  --help          Print this message and exit.\n  --no-validate   Whether to validate test modules while crawling.\n`);\n  process.exit(rc);\n}\n\nconst argv = process.argv;\nif (argv.indexOf('--help') !== -1) {\n  usage(0);\n}\n\nlet validate = true;\n{\n  const i = argv.indexOf('--no-validate');\n  if (i !== -1) {\n    validate = false;\n    argv.splice(i, 1);\n  }\n}\n\nif (argv.length < 4) {\n  usage(0);\n}\n\nconst myself = 'src/common/tools/gen_listings.ts';\n\nconst outDir = argv[2];\n\n(async () => {\n  for (const suiteDir of argv.slice(3)) {\n    const listing = await crawl(suiteDir, validate);\n\n    const suite = path.basename(suiteDir);\n    const outFile = path.normalize(path.join(outDir, `${suite}/listing.js`));\n    fs.mkdirSync(path.join(outDir, suite), { recursive: true });\n    fs.writeFileSync(\n      outFile,\n      `\\\n// AUTO-GENERATED - DO NOT EDIT. See ${myself}.\n\nexport const listing = ${JSON.stringify(listing, undefined, 2)};\n`\n    );\n    try {\n      fs.unlinkSync(outFile + '.map');\n    } catch (ex) {\n      // ignore if file didn't exist\n    }\n  }\n})();\n"],"file":"gen_listings.js"}