
Harness Error (FAIL), message = Unhandled rejection

PASS Piping through a duck-typed pass-through transform stream should work
PASS Piping through a transform errored on the writable end does not cause an unhandled promise rejection
PASS pipeThrough should not call pipeTo on this
PASS pipeThrough should not call pipeTo on the ReadableStream prototype
PASS pipeThrough should brand-check this and not allow 'null'
PASS pipeThrough should brand-check readable and not allow 'null'
PASS pipeThrough should brand-check this and not allow 'undefined'
PASS pipeThrough should brand-check readable and not allow 'undefined'
PASS pipeThrough should brand-check this and not allow '0'
PASS pipeThrough should brand-check readable and not allow '0'
PASS pipeThrough should brand-check this and not allow 'NaN'
PASS pipeThrough should brand-check readable and not allow 'NaN'
PASS pipeThrough should brand-check this and not allow 'true'
PASS pipeThrough should brand-check readable and not allow 'true'
PASS pipeThrough should brand-check this and not allow 'ReadableStream'
PASS pipeThrough should brand-check readable and not allow 'ReadableStream'
PASS pipeThrough should brand-check this and not allow '[object ReadableStream]'
PASS pipeThrough should brand-check readable and not allow '[object ReadableStream]'
PASS pipeThrough should brand-check writable and not allow 'null'
PASS pipeThrough should brand-check writable and not allow 'undefined'
PASS pipeThrough should brand-check writable and not allow '0'
PASS pipeThrough should brand-check writable and not allow 'NaN'
PASS pipeThrough should brand-check writable and not allow 'true'
PASS pipeThrough should brand-check writable and not allow 'WritableStream'
PASS pipeThrough should brand-check writable and not allow '[object WritableStream]'
PASS pipeThrough should rethrow errors from accessing readable or writable
PASS invalid values of signal should throw; specifically 'null'
PASS invalid values of signal should throw; specifically '0'
PASS invalid values of signal should throw; specifically 'NaN'
PASS invalid values of signal should throw; specifically 'true'
PASS invalid values of signal should throw; specifically 'AbortSignal'
FAIL invalid values of signal should throw; specifically '[object AbortSignal]' assert_throws_js: pipeThrough should throw function "() => rs.pipeThrough(uninterestingReadableWritablePair(), { signal })" did not throw
PASS pipeThrough should accept a real AbortSignal
PASS pipeThrough should throw if this is locked
PASS pipeThrough should throw if writable is locked
PASS pipeThrough should not care if readable is locked
PASS preventCancel should work
PASS preventClose should work
PASS preventAbort should work
PASS pipeThrough() should throw if an option getter grabs a writer

