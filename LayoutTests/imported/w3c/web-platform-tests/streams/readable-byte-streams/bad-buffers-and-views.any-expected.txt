
Harness Error (TIMEOUT), message = null

FAIL ReadableStream with byte source: read()ing from a closed stream still transfers the buffer assert_not_equals: a different ArrayBuffer must underlie the value got disallowed value object "[object ArrayBuffer]"
FAIL ReadableStream with byte source: read()ing from a stream with queued chunks still transfers the buffer assert_not_equals: a different ArrayBuffer must underlie the value got disallowed value object "[object ArrayBuffer]"
FAIL ReadableStream with byte source: enqueuing an already-detached buffer throws assert_throws_js: function "() => c.enqueue(view)" did not throw
FAIL ReadableStream with byte source: enqueuing a zero-length buffer throws assert_throws_js: function "() => c.enqueue(view)" did not throw
FAIL ReadableStream with byte source: enqueuing a zero-length view on a non-zero-length buffer throws assert_throws_js: function "() => c.enqueue(view)" did not throw
TIMEOUT ReadableStream with byte source: reading into an already-detached buffer rejects Test timed out
NOTRUN ReadableStream with byte source: reading into a zero-length buffer rejects
NOTRUN ReadableStream with byte source: reading into a zero-length view on a non-zero-length buffer rejects
FAIL ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the readable state) assert_throws_js: respond() must throw if the corresponding view has become detached function "() => c.byobRequest.respond(1)" did not throw
FAIL ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the closed state) assert_throws_js: respond() must throw if the corresponding view has become detached function "() => c.byobRequest.respond(0)" did not throw
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the readable state) assert_throws_js: function "() => c.byobRequest.respondWithNewView(view)" did not throw
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer is zero-length (in the readable state) assert_throws_js: function "() => c.byobRequest.respondWithNewView(view)" threw object "RangeError: Invalid value for view.byteLength" ("RangeError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view is zero-length on a non-zero-length buffer (in the readable state) assert_throws_js: function "() => c.byobRequest.respondWithNewView(view)" threw object "RangeError: Invalid value for view.byteLength" ("RangeError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
PASS ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the closed state)
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer is zero-length (in the closed state) assert_throws_js: function "() => c.byobRequest.respondWithNewView(view)" threw object "RangeError: Invalid value for view.byteLength" ("RangeError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
FAIL ReadableStream with byte source: respondWithNewView() throws if the supplied view is zero-length on a non-zero-length buffer (in the closed state) assert_throws_js: function "() => c.byobRequest.respondWithNewView(view)" threw object "RangeError: Invalid value for view.byteLength" ("RangeError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")

