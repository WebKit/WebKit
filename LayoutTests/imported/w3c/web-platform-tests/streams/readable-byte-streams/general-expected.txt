
PASS getReader({mode: "byob"}) throws on non-bytes streams
PASS ReadableStream with byte source can be constructed with no errors
PASS getReader({mode}) must perform ToString()
PASS ReadableStream with byte source: Construct and expect start and pull being called
PASS ReadableStream with byte source: No automatic pull call if start doesn't finish
PASS ReadableStream with byte source: Construct with highWaterMark of 0
PASS ReadableStream with byte source: desiredSize when closed
PASS ReadableStream with byte source: desiredSize when errored
PASS ReadableStream with byte source: getReader(), then releaseLock()
PASS ReadableStream with byte source: getReader() with mode set to byob, then releaseLock()
PASS ReadableStream with byte source: Test that closing a stream does not release a reader automatically
PASS ReadableStream with byte source: Test that closing a stream does not release a BYOB reader automatically
PASS ReadableStream with byte source: Test that erroring a stream does not release a reader automatically
PASS ReadableStream with byte source: Test that erroring a stream does not release a BYOB reader automatically
PASS ReadableStream with byte source: releaseLock() on ReadableStreamReader with pending read() must throw
PASS ReadableStream with byte source: Automatic pull() after start()
PASS ReadableStream with byte source: Automatic pull() after start() and read()
PASS ReadableStream with byte source: autoAllocateChunkSize
PASS ReadableStream with byte source: Mix of auto allocate and BYOB
PASS ReadableStream with byte source: Automatic pull() after start() and read(view)
PASS ReadableStream with byte source: enqueue(), getReader(), then read()
PASS ReadableStream with byte source: Push source that doesn't understand pull signal
PASS ReadableStream with byte source: read(), but pull() function is not callable
PASS ReadableStream with byte source: read(view), but pull() function is not callable
PASS ReadableStream with byte source: enqueue() with Uint16Array, getReader(), then read()
PASS ReadableStream with byte source: enqueue(), read(view) partially, then read()
PASS ReadableStream with byte source: getReader(), enqueue(), close(), then read()
PASS ReadableStream with byte source: enqueue(), close(), getReader(), then read()
PASS ReadableStream with byte source: Respond to pull() by enqueue()
PASS ReadableStream with byte source: Respond to pull() by enqueue() asynchronously
PASS ReadableStream with byte source: read(view), then respond()
PASS ReadableStream with byte source: read(view), then respond() with a transferred ArrayBuffer
PASS ReadableStream with byte source: read(view), then respond() with too big value
PASS ReadableStream with byte source: respond(3) to read(view) with 2 element Uint16Array enqueues the 1 byte remainder
PASS ReadableStream with byte source: enqueue(), getReader(), then read(view)
PASS ReadableStream with byte source: enqueue(), getReader(), then cancel() (mode = not BYOB)
PASS ReadableStream with byte source: enqueue(), getReader(), then cancel() (mode = BYOB)
PASS ReadableStream with byte source: getReader(), read(view), then cancel()
PASS ReadableStream with byte source: cancel() with partially filled pending pull() request
PASS ReadableStream with byte source: enqueue(), getReader(), then read(view) where view.buffer is not fully covered by view
PASS ReadableStream with byte source: Multiple enqueue(), getReader(), then read(view)
PASS ReadableStream with byte source: enqueue(), getReader(), then read(view) with a bigger view
PASS ReadableStream with byte source: enqueue(), getReader(), then read(view) with a smaller views
PASS ReadableStream with byte source: enqueue() 1 byte, getReader(), then read(view) with Uint16Array
PASS ReadableStream with byte source: enqueue() 3 byte, getReader(), then read(view) with 2-element Uint16Array
PASS ReadableStream with byte source: read(view) with Uint16Array on close()-d stream with 1 byte enqueue()-d must fail
PASS ReadableStream with byte source: A stream must be errored if close()-d before fulfilling read(view) with Uint16Array
PASS ReadableStream with byte source: Throw if close()-ed more than once
PASS ReadableStream with byte source: Throw on enqueue() after close()
PASS ReadableStream with byte source: read(view), then respond() and close() in pull()
PASS ReadableStream with byte source: read(view) with Uint32Array, then fill it by multiple respond() calls
PASS ReadableStream with byte source: read() twice, then enqueue() twice
PASS ReadableStream with byte source: Multiple read(view), close() and respond()
PASS ReadableStream with byte source: Multiple read(view), big enqueue()
PASS ReadableStream with byte source: Multiple read(view) and multiple enqueue()
PASS ReadableStream with byte source: read(view) with passing undefined as view must fail
PASS ReadableStream with byte source: read(view) with zero-length view must fail
PASS ReadableStream with byte source: read(view) with passing an empty object as view must fail
PASS ReadableStream with byte source: Even read(view) with passing ArrayBufferView like object as view must fail
PASS ReadableStream with byte source: read() on an errored stream
PASS ReadableStream with byte source: read(), then error()
PASS ReadableStream with byte source: read(view) on an errored stream
PASS ReadableStream with byte source: read(view), then error()
PASS ReadableStream with byte source: Throwing in pull function must error the stream
PASS ReadableStream with byte source: Throwing in pull in response to read() must be ignored if the stream is errored in it
PASS ReadableStream with byte source: Throwing in pull in response to read(view) function must error the stream
PASS ReadableStream with byte source: Throwing in pull in response to read(view) must be ignored if the stream is errored in it
PASS ReadableStream with byte source: default reader + autoAllocateChunkSize + byobRequest interaction
PASS ReadableStreamBYOBReader can be constructed directly
PASS ReadableStreamBYOBReader constructor requires a ReadableStream argument
PASS ReadableStreamBYOBReader constructor requires an unlocked ReadableStream
PASS ReadableStreamBYOBReader constructor requires a ReadableStream with type "bytes"
PASS ReadableStream constructor should not accept a strategy with a size defined if type is "bytes"

