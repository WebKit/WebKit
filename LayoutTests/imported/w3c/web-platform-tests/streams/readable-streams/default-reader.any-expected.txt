
FAIL ReadableStreamDefaultReader constructor should get a ReadableStream object as argument assert_throws_js: function "() => new ReadableStreamDefaultReader('potato')" threw object "ReferenceError: Can't find variable: ReadableStreamDefaultReader" ("ReferenceError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
FAIL ReadableStreamDefaultReader closed should always return the same promise object Can't find variable: ReadableStreamDefaultReader
FAIL Constructing a ReadableStreamDefaultReader directly should fail if the stream is already locked (via direct construction) Can't find variable: ReadableStreamDefaultReader
FAIL Getting a ReadableStreamDefaultReader via getReader should fail if the stream is already locked (via direct construction) Can't find variable: ReadableStreamDefaultReader
FAIL Constructing a ReadableStreamDefaultReader directly should fail if the stream is already locked (via getReader) assert_throws_js: constructing directly should fail function "() => new ReadableStreamDefaultReader(rs)" threw object "ReferenceError: Can't find variable: ReadableStreamDefaultReader" ("ReferenceError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
PASS Getting a ReadableStreamDefaultReader via getReader should fail if the stream is already locked (via getReader)
FAIL Constructing a ReadableStreamDefaultReader directly should be OK if the stream is closed Can't find variable: ReadableStreamDefaultReader
FAIL Constructing a ReadableStreamDefaultReader directly should be OK if the stream is errored Can't find variable: ReadableStreamDefaultReader
PASS Reading from a reader for an empty stream will wait until a chunk is available
PASS cancel() on a reader does not release the reader
PASS closed should be fulfilled after stream is closed (.closed access before acquiring)
PASS closed should be rejected after reader releases its lock (multiple stream locks)
PASS closed is replaced when stream closes and reader releases its lock
PASS closed is replaced when stream errors and reader releases its lock
PASS Multiple readers can access the stream in sequence
PASS Cannot use an already-released reader to unlock a stream again
PASS cancel() on a released reader is a no-op and does not pass through
PASS Getting a second reader after erroring the stream and releasing the reader should succeed
PASS ReadableStreamDefaultReader closed promise should be rejected with undefined if that is the error
PASS ReadableStreamDefaultReader: if start rejects with no parameter, it should error the stream with an undefined error
PASS Erroring a ReadableStream after checking closed should reject ReadableStreamDefaultReader closed promise
PASS Erroring a ReadableStream before checking closed should reject ReadableStreamDefaultReader closed promise
PASS Reading twice on a stream that gets closed
PASS Reading twice on a closed stream
PASS Reading twice on an errored stream
PASS Reading twice on a stream that gets errored
FAIL getReader() should call ToString() on mode assert_throws_js: getReader() should throw function "() => rs.getReader({ mode })" threw object "RangeError: Invalid mode is specified" ("RangeError") expected instance of function "function TypeError() {
    [native code]
}" ("TypeError")
PASS controller.close() should clear the list of pending read requests

