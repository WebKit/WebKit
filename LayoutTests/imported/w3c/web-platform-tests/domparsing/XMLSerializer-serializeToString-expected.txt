domparsing_XMLSerializer_serializeToString


PASS check XMLSerializer.serializeToString method could parsing xmldoc to string
PASS check XMLSerializer.serializeToString method could parsing document to string
PASS Check if the default namespace is correctly reset.
FAIL Check if there is no redundant empty namespace declaration. assert_equals: expected "<root xmlns=\"urn:bar\"><outer xmlns=\"\"><inner>value1</inner></outer></root>" but got "<root xmlns=\"urn:bar\"><outer xmlns=\"\"><inner xmlns=\"\">value1</inner></outer></root>"
FAIL Check if redundant xmlns="..." is dropped. assert_equals: expected "<root><child/></root>" but got "<root><child xmlns=\"\"/></root>"
FAIL Check if inconsistent xmlns="..." is dropped. assert_equals: expected "<root xmlns=\"uri1\"><child xmlns=\"\"/><child2 xmlns=\"uri2\"/><child3/><child4 xmlns=\"uri4\"/><child5 xmlns=\"\"/></root>" but got "<root xmlns=\"uri1\"><child xmlns=\"FAIL1\"/><child2 xmlns=\"FAIL2\"/><child3 xmlns=\"FAIL3\"/><child4 xmlns=\"uri4\"/><child5 xmlns=\"\"/></root>"
PASS Check if an attribute with namespace and no prefix is serialized with the nearest-declared prefix
FAIL Check if an attribute with namespace and no prefix is serialized with the nearest-declared prefix even if the prefix is assigned to another namespace. assert_equals: expected "<el1 xmlns:p=\"u1\" xmlns:q=\"u1\"><el2 xmlns:q=\"u2\" q:name=\"v\"/></el1>" but got "<el1 xmlns:p=\"u1\" xmlns:q=\"u1\"><el2 xmlns:q=\"u2\" xmlns:q=\"u1\" q:name=\"v\"/></el1>"
PASS Check if the prefix of an attribute is replaced with another existing prefix mapped to the same namespace URI.
FAIL Check if the prefix of an attribute is NOT preserved in a case where neither its prefix nor its namespace URI is not already used. assert_equals: expected "<r xmlns:xx=\"uri\" xmlns:ns1=\"uri2\" ns1:name=\"value\"/>" but got "<r xmlns:xx=\"uri\" xmlns:p=\"uri2\" p:name=\"value\"/>"
PASS Check if the prefix of an attribute is replaced with a generated one in a case where the prefix is already mapped to a different namespace URI.
PASS check XMLSerializer.serializeToString escapes attribute values for roundtripping
FAIL Check if attribute serialization takes into account of following xmlns:* attributes assert_equals: expected "<root xmlns:ns1=\"uri1\" ns1:foobar=\"value1\" xmlns:p=\"uri2\"/>" but got "<root xmlns:p=\"uri1\" p:foobar=\"value1\" xmlns:p=\"uri2\"/>"
PASS Check if attribute serialization takes into account of the same prefix declared in an ancestor element
FAIL Check if start tag serialization drops element prefix if the namespace is same as inherited default namespace. assert_equals: expected "<root xmlns=\"u1\"><child xmlns:p=\"u1\"/></root>" but got "<root xmlns=\"u1\"><p:child xmlns:p=\"u1\"/></root>"
FAIL Check if start tag serialization finds an appropriate prefix. assert_equals: expected "<root xmlns:p1=\"u1\"><child xmlns:p2=\"u1\"><p2:child2/></child></root>" but got "<root xmlns:p1=\"u1\"><child xmlns:p2=\"u1\"><child2 xmlns=\"u1\"/></child></root>"
FAIL Check if start tag serialization takes into account of its xmlns:* attributes assert_equals: expected "<ns1:root xmlns:ns1=\"uri1\" xmlns:p=\"uri2\"/>" but got "<p:root xmlns:p=\"uri2\"/>"
PASS Check if start tag serialization applied the original prefix even if it is declared in an ancestor element.
FAIL Check if start tag serialization does NOT apply the default namespace if its namespace is declared in an ancestor. assert_equals: expected "<root xmlns:x=\"uri1\"><x:table xmlns=\"uri1\"/></root>" but got "<root xmlns:x=\"uri1\"><table xmlns=\"uri1\"/></root>"
PASS Check if generated prefixes match to "ns${index}".
FAIL Check if "ns1" is generated even if the element already has xmlns:ns1. assert_equals: expected "<root xmlns:ns2=\"uri2\"><child xmlns:ns1=\"uri1\" xmlns:ns1=\"uri3\" ns1:attr1=\"value1\"/></root>" but got "<root xmlns:ns2=\"uri2\"><child xmlns:ns1=\"uri1\" xmlns:ns3=\"uri3\" ns3:attr1=\"value1\"/></root>"
PASS Check if no special handling for XLink namespace unlike HTML serializer.
PASS Check if document fragment serializes.
PASS Check children were included for void elements

