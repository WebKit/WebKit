
PASS Loading data‚Ä¶
PASS <a>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged.
PASS <area>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged.
PASS <a>: Setting <a://example.net>.protocol = 'b'
PASS <area>: Setting <a://example.net>.protocol = 'b'
PASS <a>: Setting <javascript:alert(1)>.protocol = 'defuse'
PASS <area>: Setting <javascript:alert(1)>.protocol = 'defuse'
PASS <a>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased
PASS <area>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased
PASS <a>: Setting <a://example.net>.protocol = '√©' Non-ASCII is rejected
PASS <area>: Setting <a://example.net>.protocol = '√©' Non-ASCII is rejected
PASS <a>: Setting <a://example.net>.protocol = '0b' No leading digit
PASS <area>: Setting <a://example.net>.protocol = '0b' No leading digit
PASS <a>: Setting <a://example.net>.protocol = '+b' No leading punctuation
PASS <area>: Setting <a://example.net>.protocol = '+b' No leading punctuation
PASS <a>: Setting <a://example.net>.protocol = 'bC0+-.'
PASS <area>: Setting <a://example.net>.protocol = 'bC0+-.'
PASS <a>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable
PASS <area>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable
PASS <a>: Setting <a://example.net>.protocol = 'b√©' Non-ASCII is rejected
PASS <area>: Setting <a://example.net>.protocol = 'b√©' Non-ASCII is rejected
PASS <a>: Setting <http://test@example.net>.protocol = 'file' Can‚Äôt switch from URL containing username/password/port to file
PASS <area>: Setting <http://test@example.net>.protocol = 'file' Can‚Äôt switch from URL containing username/password/port to file
PASS <a>: Setting <https://example.net:1234>.protocol = 'file'
PASS <area>: Setting <https://example.net:1234>.protocol = 'file'
PASS <a>: Setting <wss://x:x@example.net:1234>.protocol = 'file'
PASS <area>: Setting <wss://x:x@example.net:1234>.protocol = 'file'
PASS <a>: Setting <file://localhost/>.protocol = 'http' Can‚Äôt switch from file URL with no host
PASS <area>: Setting <file://localhost/>.protocol = 'http' Can‚Äôt switch from file URL with no host
PASS <a>: Setting <file:///test>.protocol = 'https'
PASS <area>: Setting <file:///test>.protocol = 'https'
PASS <a>: Setting <file:>.protocol = 'wss'
PASS <area>: Setting <file:>.protocol = 'wss'
FAIL <a>: Setting <http://example.net>.protocol = 'b' Can‚Äôt switch from special scheme to non-special assert_equals: expected "http://example.net/" but got "b://example.net/"
FAIL <area>: Setting <http://example.net>.protocol = 'b' Can‚Äôt switch from special scheme to non-special assert_equals: expected "http://example.net/" but got "b://example.net/"
FAIL <a>: Setting <file://hi/path>.protocol = 's' assert_equals: expected "file://hi/path" but got "s://hi/path"
FAIL <area>: Setting <file://hi/path>.protocol = 's' assert_equals: expected "file://hi/path" but got "s://hi/path"
FAIL <a>: Setting <https://example.net>.protocol = 's' assert_equals: expected "https://example.net/" but got "s://example.net/"
FAIL <area>: Setting <https://example.net>.protocol = 's' assert_equals: expected "https://example.net/" but got "s://example.net/"
FAIL <a>: Setting <ftp://example.net>.protocol = 'test' assert_equals: expected "ftp://example.net/" but got "test://example.net/"
FAIL <area>: Setting <ftp://example.net>.protocol = 'test' assert_equals: expected "ftp://example.net/" but got "test://example.net/"
FAIL <a>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn‚Äôt have a host, but URL in a special scheme must. assert_equals: expected "mailto:me@example.net" but got "http://me@example.net/"
FAIL <area>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn‚Äôt have a host, but URL in a special scheme must. assert_equals: expected "mailto:me@example.net" but got "http://me@example.net/"
FAIL <a>: Setting <ssh://me@example.net>.protocol = 'http' Can‚Äôt switch from non-special scheme to special assert_equals: expected "ssh://me@example.net" but got "http://me@example.net/"
FAIL <area>: Setting <ssh://me@example.net>.protocol = 'http' Can‚Äôt switch from non-special scheme to special assert_equals: expected "ssh://me@example.net" but got "http://me@example.net/"
FAIL <a>: Setting <ssh://me@example.net>.protocol = 'https' assert_equals: expected "ssh://me@example.net" but got "https://me@example.net/"
FAIL <area>: Setting <ssh://me@example.net>.protocol = 'https' assert_equals: expected "ssh://me@example.net" but got "https://me@example.net/"
PASS <a>: Setting <ssh://me@example.net>.protocol = 'file'
PASS <area>: Setting <ssh://me@example.net>.protocol = 'file'
FAIL <a>: Setting <ssh://example.net>.protocol = 'file' assert_equals: expected "ssh://example.net" but got "file://example.net/"
FAIL <area>: Setting <ssh://example.net>.protocol = 'file' assert_equals: expected "ssh://example.net" but got "file://example.net/"
FAIL <a>: Setting <nonsense:///test>.protocol = 'https' assert_equals: expected "nonsense:///test" but got "https://test/"
FAIL <area>: Setting <nonsense:///test>.protocol = 'https' assert_equals: expected "nonsense:///test" but got "https://test/"
PASS <a>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored
PASS <area>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored
PASS <a>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored
PASS <area>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored
PASS <a>: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme.
PASS <area>: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme.
PASS <a>: Setting <http://test/>.protocol = 'h\r
tt	ps' Tab and newline are stripped
PASS <area>: Setting <http://test/>.protocol = 'h\r
tt	ps' Tab and newline are stripped
PASS <a>: Setting <http://test/>.protocol = 'https\r'
PASS <area>: Setting <http://test/>.protocol = 'https\r'
PASS <a>: Setting <http://test/>.protocol = 'https\0' Non-tab/newline C0 controls result in no-op
PASS <area>: Setting <http://test/>.protocol = 'https\0' Non-tab/newline C0 controls result in no-op
PASS <a>: Setting <http://test/>.protocol = 'https'
PASS <area>: Setting <http://test/>.protocol = 'https'
PASS <a>: Setting <http://test/>.protocol = 'https'
PASS <area>: Setting <http://test/>.protocol = 'https'
PASS <a>: Setting <http://test/>.protocol = 'https '
PASS <area>: Setting <http://test/>.protocol = 'https '
PASS <a>: Setting <file:///home/you/index.html>.username = 'me' No host means no username
PASS <area>: Setting <file:///home/you/index.html>.username = 'me' No host means no username
PASS <a>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username
PASS <area>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username
PASS <a>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username
PASS <area>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username
PASS <a>: Setting <javascript:alert(1)>.username = 'wario'
PASS <area>: Setting <javascript:alert(1)>.username = 'wario'
PASS <a>: Setting <http://example.net>.username = 'me'
PASS <area>: Setting <http://example.net>.username = 'me'
PASS <a>: Setting <http://:secret@example.net>.username = 'me'
PASS <area>: Setting <http://:secret@example.net>.username = 'me'
PASS <a>: Setting <http://me@example.net>.username = ''
PASS <area>: Setting <http://me@example.net>.username = ''
PASS <a>: Setting <http://me:secret@example.net>.username = ''
PASS <area>: Setting <http://me:secret@example.net>.username = ''
PASS <a>: Setting <http://example.net>.username = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the userinfo encode set.
PASS <area>: Setting <http://example.net>.username = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the userinfo encode set.
PASS <a>: Setting <http://example.net>.username = '%c3%89t√©' Bytes already percent-encoded are left as-is.
PASS <area>: Setting <http://example.net>.username = '%c3%89t√©' Bytes already percent-encoded are left as-is.
PASS <a>: Setting <sc:///>.username = 'x'
PASS <area>: Setting <sc:///>.username = 'x'
PASS <a>: Setting <javascript://x/>.username = 'wario'
PASS <area>: Setting <javascript://x/>.username = 'wario'
PASS <a>: Setting <file://test/>.username = 'test'
PASS <area>: Setting <file://test/>.username = 'test'
PASS <a>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password
PASS <area>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password
PASS <a>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password
PASS <area>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password
PASS <a>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password
PASS <area>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password
PASS <a>: Setting <http://example.net>.password = 'secret'
PASS <area>: Setting <http://example.net>.password = 'secret'
PASS <a>: Setting <http://me@example.net>.password = 'secret'
PASS <area>: Setting <http://me@example.net>.password = 'secret'
PASS <a>: Setting <http://:secret@example.net>.password = ''
PASS <area>: Setting <http://:secret@example.net>.password = ''
PASS <a>: Setting <http://me:secret@example.net>.password = ''
PASS <area>: Setting <http://me:secret@example.net>.password = ''
PASS <a>: Setting <http://example.net>.password = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the userinfo encode set.
PASS <area>: Setting <http://example.net>.password = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the userinfo encode set.
PASS <a>: Setting <http://example.net>.password = '%c3%89t√©' Bytes already percent-encoded are left as-is.
PASS <area>: Setting <http://example.net>.password = '%c3%89t√©' Bytes already percent-encoded are left as-is.
PASS <a>: Setting <sc:///>.password = 'x'
PASS <area>: Setting <sc:///>.password = 'x'
PASS <a>: Setting <javascript://x/>.password = 'bowser'
PASS <area>: Setting <javascript://x/>.password = 'bowser'
PASS <a>: Setting <file://test/>.password = 'test'
PASS <area>: Setting <file://test/>.password = 'test'
PASS <a>: Setting <sc://x/>.host = '\0' Non-special scheme
PASS <area>: Setting <sc://x/>.host = '\0' Non-special scheme
PASS <a>: Setting <sc://x/>.host = '	'
PASS <area>: Setting <sc://x/>.host = '	'
PASS <a>: Setting <sc://x/>.host = '
'
PASS <area>: Setting <sc://x/>.host = '
'
PASS <a>: Setting <sc://x/>.host = '\r'
PASS <area>: Setting <sc://x/>.host = '\r'
PASS <a>: Setting <sc://x/>.host = ' '
PASS <area>: Setting <sc://x/>.host = ' '
PASS <a>: Setting <sc://x/>.host = '#'
PASS <area>: Setting <sc://x/>.host = '#'
PASS <a>: Setting <sc://x/>.host = '/'
PASS <area>: Setting <sc://x/>.host = '/'
PASS <a>: Setting <sc://x/>.host = '?'
PASS <area>: Setting <sc://x/>.host = '?'
PASS <a>: Setting <sc://x/>.host = '@'
PASS <area>: Setting <sc://x/>.host = '@'
PASS <a>: Setting <sc://x/>.host = '√ü'
PASS <area>: Setting <sc://x/>.host = '√ü'
PASS <a>: Setting <https://x/>.host = '√ü' IDNA Nontransitional_Processing
PASS <area>: Setting <https://x/>.host = '√ü' IDNA Nontransitional_Processing
PASS <a>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host
PASS <area>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host
PASS <a>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no host
PASS <area>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no host
PASS <a>: Setting <http://example.net>.host = 'example.com:8080'
PASS <area>: Setting <http://example.net>.host = 'example.com:8080'
PASS <a>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value
PASS <area>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value
PASS <a>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified
PASS <area>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified
PASS <a>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes
PASS <area>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes
PASS <a>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes
PASS <area>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes
PASS <a>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host
PASS <area>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host
PASS <a>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized
PASS <area>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized
PASS <a>: Setting <http://example.net>.host = '[::0:01]:2' IPv6 address syntax is normalized
PASS <area>: Setting <http://example.net>.host = '[::0:01]:2' IPv6 address syntax is normalized
PASS <a>: Setting <http://example.net>.host = '[2001:db8::2]:4002' IPv6 literal address with port, crbug.com/1012416
PASS <area>: Setting <http://example.net>.host = '[2001:db8::2]:4002' IPv6 literal address with port, crbug.com/1012416
PASS <a>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed
PASS <area>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed
PASS <a>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed
PASS <area>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed
PASS <a>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme
PASS <area>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme
PASS <a>: Setting <http://example.net:8080>.host = 'example.com:80' Port number is removed if new port is scheme default and existing URL has a non-default port
PASS <area>: Setting <http://example.net:8080>.host = 'example.com:80' Port number is removed if new port is scheme default and existing URL has a non-default port
PASS <a>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored
PASS <a>: Setting <http://example.net/path>.host = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <area>: Setting <http://example.net/path>.host = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <a>: Setting <view-source+http://example.net/path>.host = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts
PASS <area>: Setting <view-source+http://example.net/path>.host = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts
PASS <a>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers
PASS <area>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers
PASS <a>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though.
PASS <area>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though.
PASS <a>: Setting <http://example.net/>.host = '[google.com]' Broken IPv6
PASS <area>: Setting <http://example.net/>.host = '[google.com]' Broken IPv6
PASS <a>: Setting <http://example.net/>.host = '[::1.2.3.4x]'
PASS <area>: Setting <http://example.net/>.host = '[::1.2.3.4x]'
PASS <a>: Setting <http://example.net/>.host = '[::1.2.3.]'
PASS <area>: Setting <http://example.net/>.host = '[::1.2.3.]'
PASS <a>: Setting <http://example.net/>.host = '[::1.2.]'
PASS <area>: Setting <http://example.net/>.host = '[::1.2.]'
PASS <a>: Setting <http://example.net/>.host = '[::1.]'
PASS <area>: Setting <http://example.net/>.host = '[::1.]'
PASS <a>: Setting <file://y/>.host = 'x:123'
PASS <area>: Setting <file://y/>.host = 'x:123'
PASS <a>: Setting <file://y/>.host = 'loc%41lhost'
PASS <area>: Setting <file://y/>.host = 'loc%41lhost'
PASS <a>: Setting <file://hi/x>.host = ''
PASS <area>: Setting <file://hi/x>.host = ''
PASS <a>: Setting <sc://test@test/>.host = ''
PASS <area>: Setting <sc://test@test/>.host = ''
PASS <a>: Setting <sc://test:12/>.host = ''
PASS <area>: Setting <sc://test:12/>.host = ''
PASS <a>: Setting <http://example.com/>.host = '///bad.com' Leading / is not stripped
PASS <area>: Setting <http://example.com/>.host = '///bad.com' Leading / is not stripped
PASS <a>: Setting <sc://example.com/>.host = '///bad.com' Leading / is not stripped
PASS <area>: Setting <sc://example.com/>.host = '///bad.com' Leading / is not stripped
PASS <a>: Setting <https://example.com/>.host = 'a%C2%ADb'
PASS <area>: Setting <https://example.com/>.host = 'a%C2%ADb'
PASS <a>: Setting <https://example.com/>.host = '¬≠'
PASS <area>: Setting <https://example.com/>.host = '¬≠'
PASS <a>: Setting <https://example.com/>.host = '%C2%AD'
PASS <area>: Setting <https://example.com/>.host = '%C2%AD'
PASS <a>: Setting <https://example.com/>.host = 'xn--'
PASS <area>: Setting <https://example.com/>.host = 'xn--'
PASS <a>: Setting <sc://x/>.hostname = '\0' Non-special scheme
PASS <area>: Setting <sc://x/>.hostname = '\0' Non-special scheme
PASS <a>: Setting <sc://x/>.hostname = '	'
PASS <area>: Setting <sc://x/>.hostname = '	'
PASS <a>: Setting <sc://x/>.hostname = '
'
PASS <area>: Setting <sc://x/>.hostname = '
'
PASS <a>: Setting <sc://x/>.hostname = '\r'
PASS <area>: Setting <sc://x/>.hostname = '\r'
PASS <a>: Setting <sc://x/>.hostname = ' '
PASS <area>: Setting <sc://x/>.hostname = ' '
PASS <a>: Setting <sc://x/>.hostname = '#'
PASS <area>: Setting <sc://x/>.hostname = '#'
PASS <a>: Setting <sc://x/>.hostname = '/'
PASS <area>: Setting <sc://x/>.hostname = '/'
PASS <a>: Setting <sc://x/>.hostname = '?'
PASS <area>: Setting <sc://x/>.hostname = '?'
PASS <a>: Setting <sc://x/>.hostname = '@'
PASS <area>: Setting <sc://x/>.hostname = '@'
PASS <a>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host
PASS <area>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host
PASS <a>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no host
PASS <area>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no host
PASS <a>: Setting <http://example.net:8080>.hostname = 'example.com'
PASS <area>: Setting <http://example.net:8080>.hostname = 'example.com'
PASS <a>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes
PASS <area>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes
PASS <a>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes
PASS <area>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes
PASS <a>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host
PASS <area>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host
PASS <a>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized
PASS <area>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized
PASS <a>: Setting <http://example.net>.hostname = '[::0:01]' IPv6 address syntax is normalized
PASS <area>: Setting <http://example.net>.hostname = '[::0:01]' IPv6 address syntax is normalized
PASS <a>: Setting <http://example.net/path>.hostname = 'example.com:8080' : delimiter invalidates entire value
PASS <area>: Setting <http://example.net/path>.hostname = 'example.com:8080' : delimiter invalidates entire value
PASS <a>: Setting <http://example.net:8080/path>.hostname = 'example.com:' : delimiter invalidates entire value
PASS <area>: Setting <http://example.net:8080/path>.hostname = 'example.com:' : delimiter invalidates entire value
PASS <a>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored
PASS <area>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored
PASS <a>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored
PASS <area>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored
PASS <a>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored
PASS <area>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored
PASS <a>: Setting <http://example.net/path>.hostname = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <area>: Setting <http://example.net/path>.hostname = 'example.com\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <a>: Setting <view-source+http://example.net/path>.hostname = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts
PASS <area>: Setting <view-source+http://example.net/path>.hostname = 'example.com\stuff' \ is not a delimiter for non-special schemes, but still forbidden in hosts
PASS <a>: Setting <http://example.net/>.hostname = '[google.com]' Broken IPv6
PASS <area>: Setting <http://example.net/>.hostname = '[google.com]' Broken IPv6
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.3.4x]'
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.3.4x]'
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.3.]'
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.3.]'
PASS <a>: Setting <http://example.net/>.hostname = '[::1.2.]'
PASS <area>: Setting <http://example.net/>.hostname = '[::1.2.]'
PASS <a>: Setting <http://example.net/>.hostname = '[::1.]'
PASS <area>: Setting <http://example.net/>.hostname = '[::1.]'
PASS <a>: Setting <file://y/>.hostname = 'x:123'
PASS <area>: Setting <file://y/>.hostname = 'x:123'
PASS <a>: Setting <file://y/>.hostname = 'loc%41lhost'
PASS <area>: Setting <file://y/>.hostname = 'loc%41lhost'
PASS <a>: Setting <file://hi/x>.hostname = ''
PASS <area>: Setting <file://hi/x>.hostname = ''
PASS <a>: Setting <sc://test@test/>.hostname = ''
PASS <area>: Setting <sc://test@test/>.hostname = ''
PASS <a>: Setting <sc://test:12/>.hostname = ''
PASS <area>: Setting <sc://test:12/>.hostname = ''
PASS <a>: Setting <non-spec:/.//p>.hostname = 'h' Drop /. from path
PASS <area>: Setting <non-spec:/.//p>.hostname = 'h' Drop /. from path
PASS <a>: Setting <non-spec:/.//p>.hostname = ''
PASS <area>: Setting <non-spec:/.//p>.hostname = ''
PASS <a>: Setting <http://example.com/>.hostname = '///bad.com' Leading / is not stripped
PASS <area>: Setting <http://example.com/>.hostname = '///bad.com' Leading / is not stripped
PASS <a>: Setting <sc://example.com/>.hostname = '///bad.com' Leading / is not stripped
PASS <area>: Setting <sc://example.com/>.hostname = '///bad.com' Leading / is not stripped
PASS <a>: Setting <https://example.com/>.hostname = 'a%C2%ADb'
PASS <area>: Setting <https://example.com/>.hostname = 'a%C2%ADb'
PASS <a>: Setting <https://example.com/>.hostname = '¬≠'
PASS <area>: Setting <https://example.com/>.hostname = '¬≠'
PASS <a>: Setting <https://example.com/>.hostname = '%C2%AD'
PASS <area>: Setting <https://example.com/>.hostname = '%C2%AD'
PASS <a>: Setting <https://example.com/>.hostname = 'xn--'
PASS <area>: Setting <https://example.com/>.hostname = 'xn--'
PASS <a>: Setting <http://example.net>.port = '8080'
PASS <area>: Setting <http://example.net>.port = '8080'
PASS <a>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value
PASS <area>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value
PASS <a>: Setting <http://example.net:8080>.port = '80' Default port number is removed
PASS <area>: Setting <http://example.net:8080>.port = '80' Default port number is removed
PASS <a>: Setting <https://example.net:4433>.port = '443' Default port number is removed
PASS <area>: Setting <https://example.net:4433>.port = '443' Default port number is removed
PASS <a>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme
PASS <area>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme
PASS <a>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored
PASS <area>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored
PASS <a>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored
PASS <area>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored
PASS <a>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored
PASS <area>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored
PASS <a>: Setting <http://example.net/path>.port = '8080\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <area>: Setting <http://example.net/path>.port = '8080\stuff' Stuff after a \ delimiter is ignored for special schemes
PASS <a>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <area>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error
PASS <a>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers
PASS <area>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers
PASS <a>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error
PASS <area>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error
PASS <a>: Setting <http://example.net:8080/path>.port = 'randomstring' Setting port to a string that doesn't parse as a number
PASS <area>: Setting <http://example.net:8080/path>.port = 'randomstring' Setting port to a string that doesn't parse as a number
PASS <a>: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error
PASS <area>: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error
PASS <a>: Setting <file://test/>.port = '12'
PASS <area>: Setting <file://test/>.port = '12'
PASS <a>: Setting <file://localhost/>.port = '12'
PASS <area>: Setting <file://localhost/>.port = '12'
PASS <a>: Setting <non-base:value>.port = '12'
PASS <area>: Setting <non-base:value>.port = '12'
PASS <a>: Setting <sc:///>.port = '12'
PASS <area>: Setting <sc:///>.port = '12'
PASS <a>: Setting <sc://x/>.port = '12'
PASS <area>: Setting <sc://x/>.port = '12'
PASS <a>: Setting <javascript://x/>.port = '12'
PASS <area>: Setting <javascript://x/>.port = '12'
PASS <a>: Setting <https://domain.com:443>.port = '	8080' Leading u0009 on special scheme
PASS <area>: Setting <https://domain.com:443>.port = '	8080' Leading u0009 on special scheme
PASS <a>: Setting <wpt++://domain.com:443>.port = '	8080' Leading u0009 on non-special scheme
PASS <area>: Setting <wpt++://domain.com:443>.port = '	8080' Leading u0009 on non-special scheme
PASS <a>: Setting <https://www.google.com:4343>.port = '4wpt' Should use all ascii prefixed characters as port
PASS <area>: Setting <https://www.google.com:4343>.port = '4wpt' Should use all ascii prefixed characters as port
PASS <a>: Setting <mailto:me@example.net>.pathname = '/foo' Opaque paths cannot be set
PASS <area>: Setting <mailto:me@example.net>.pathname = '/foo' Opaque paths cannot be set
PASS <a>: Setting <data:original>.pathname = 'new value'
PASS <area>: Setting <data:original>.pathname = 'new value'
PASS <a>: Setting <sc:original>.pathname = 'new value'
PASS <area>: Setting <sc:original>.pathname = 'new value'
PASS <a>: Setting <file:///some/path>.pathname = '' Special URLs cannot have their paths erased
PASS <area>: Setting <file:///some/path>.pathname = '' Special URLs cannot have their paths erased
PASS <a>: Setting <foo://somehost/some/path>.pathname = '' Non-special URLs can have their paths erased
PASS <area>: Setting <foo://somehost/some/path>.pathname = '' Non-special URLs can have their paths erased
PASS <a>: Setting <foo:///some/path>.pathname = '' Non-special URLs with an empty host can have their paths erased
PASS <area>: Setting <foo:///some/path>.pathname = '' Non-special URLs with an empty host can have their paths erased
PASS <a>: Setting <foo:/some/path>.pathname = '' Path-only URLs cannot have their paths erased
PASS <area>: Setting <foo:/some/path>.pathname = '' Path-only URLs cannot have their paths erased
PASS <a>: Setting <foo:/some/path>.pathname = 'test' Path-only URLs always have an initial slash
PASS <area>: Setting <foo:/some/path>.pathname = 'test' Path-only URLs always have an initial slash
PASS <a>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket'
PASS <area>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket'
PASS <a>: Setting <https://example.net#nav>.pathname = 'home'
PASS <area>: Setting <https://example.net#nav>.pathname = 'home'
PASS <a>: Setting <https://example.net#nav>.pathname = '../home'
PASS <area>: Setting <https://example.net#nav>.pathname = '../home'
PASS <a>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is a segment delimiter for 'special' URLs
PASS <area>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is a segment delimiter for 'special' URLs
PASS <a>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is *not* a segment delimiter for non-'special' URLs
PASS <area>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\a\%2E\b\%2e.\c' \ is *not* a segment delimiter for non-'special' URLs
PASS <a>: Setting <a:/>.pathname = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.
PASS <area>: Setting <a:/>.pathname = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.
PASS <a>: Setting <http://example.net>.pathname = '%2e%2E%c3%89t√©' Bytes already percent-encoded are left as-is, including %2E outside dotted segments.
PASS <area>: Setting <http://example.net>.pathname = '%2e%2E%c3%89t√©' Bytes already percent-encoded are left as-is, including %2E outside dotted segments.
PASS <a>: Setting <http://example.net>.pathname = '?' ? needs to be encoded
PASS <area>: Setting <http://example.net>.pathname = '?' ? needs to be encoded
PASS <a>: Setting <http://example.net>.pathname = '#' # needs to be encoded
PASS <area>: Setting <http://example.net>.pathname = '#' # needs to be encoded
PASS <a>: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme
PASS <area>: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme
PASS <a>: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme
PASS <area>: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme
PASS <a>: Setting <http://example.net>.pathname = '/?√©' ? doesn't mess up encoding
PASS <area>: Setting <http://example.net>.pathname = '/?√©' ? doesn't mess up encoding
PASS <a>: Setting <http://example.net>.pathname = '/#√©' # doesn't mess up encoding
PASS <area>: Setting <http://example.net>.pathname = '/#√©' # doesn't mess up encoding
PASS <a>: Setting <file://monkey/>.pathname = '\\' File URLs and (back)slashes
PASS <area>: Setting <file://monkey/>.pathname = '\\' File URLs and (back)slashes
PASS <a>: Setting <file:///unicorn>.pathname = '//\/' File URLs and (back)slashes
PASS <area>: Setting <file:///unicorn>.pathname = '//\/' File URLs and (back)slashes
PASS <a>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes
PASS <area>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes
PASS <a>: Setting <non-spec:/>.pathname = '/.//p' Serialize /. in path
PASS <area>: Setting <non-spec:/>.pathname = '/.//p' Serialize /. in path
PASS <a>: Setting <non-spec:/>.pathname = '/..//p'
PASS <area>: Setting <non-spec:/>.pathname = '/..//p'
PASS <a>: Setting <non-spec:/>.pathname = '//p'
PASS <area>: Setting <non-spec:/>.pathname = '//p'
PASS <a>: Setting <non-spec:/.//>.pathname = 'p' Drop /. from path
PASS <area>: Setting <non-spec:/.//>.pathname = 'p' Drop /. from path
FAIL <a>: Setting <data:/nospace>.pathname = 'space ' Non-special URLs with non-opaque paths percent-encode U+0020 assert_equals: expected "data:/space%20" but got "data:/space"
FAIL <area>: Setting <data:/nospace>.pathname = 'space ' Non-special URLs with non-opaque paths percent-encode U+0020 assert_equals: expected "data:/space%20" but got "data:/space"
FAIL <a>: Setting <sc:/nospace>.pathname = 'space ' assert_equals: expected "sc:/space%20" but got "sc:/space"
FAIL <area>: Setting <sc:/nospace>.pathname = 'space ' assert_equals: expected "sc:/space%20" but got "sc:/space"
PASS <a>: Setting <https://example.net#nav>.search = 'lang=fr'
PASS <area>: Setting <https://example.net#nav>.search = 'lang=fr'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = '?'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = '?'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.search = ''
PASS <area>: Setting <https://example.net?lang=en-US#nav>.search = ''
PASS <a>: Setting <https://example.net?lang=en-US>.search = ''
PASS <area>: Setting <https://example.net?lang=en-US>.search = ''
PASS <a>: Setting <https://example.net>.search = ''
PASS <area>: Setting <https://example.net>.search = ''
PASS <a>: Setting <a:/>.search = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.
PASS <area>: Setting <a:/>.search = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.
PASS <a>: Setting <http://example.net>.search = '%c3%89t√©' Bytes already percent-encoded are left as-is
PASS <area>: Setting <http://example.net>.search = '%c3%89t√©' Bytes already percent-encoded are left as-is
PASS <a>: Setting <data:space ?query>.search = '' Drop trailing spaces from trailing opaque paths
PASS <area>: Setting <data:space ?query>.search = '' Drop trailing spaces from trailing opaque paths
PASS <a>: Setting <sc:space ?query>.search = ''
PASS <area>: Setting <sc:space ?query>.search = ''
PASS <a>: Setting <data:space  ?query#fragment>.search = '' Do not drop trailing spaces from non-trailing opaque paths
PASS <area>: Setting <data:space  ?query#fragment>.search = '' Do not drop trailing spaces from non-trailing opaque paths
PASS <a>: Setting <sc:space  ?query#fragment>.search = ''
PASS <area>: Setting <sc:space  ?query#fragment>.search = ''
PASS <a>: Setting <https://example.net>.hash = 'main'
PASS <area>: Setting <https://example.net>.hash = 'main'
PASS <a>: Setting <https://example.net#nav>.hash = 'main'
PASS <area>: Setting <https://example.net#nav>.hash = 'main'
PASS <a>: Setting <https://example.net?lang=en-US>.hash = '##nav'
PASS <area>: Setting <https://example.net?lang=en-US>.hash = '##nav'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.hash = '#main'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.hash = '#main'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.hash = '#'
PASS <area>: Setting <https://example.net?lang=en-US#nav>.hash = '#'
PASS <a>: Setting <https://example.net?lang=en-US#nav>.hash = ''
PASS <area>: Setting <https://example.net?lang=en-US#nav>.hash = ''
PASS <a>: Setting <http://example.net>.hash = '#foo bar'
PASS <area>: Setting <http://example.net>.hash = '#foo bar'
PASS <a>: Setting <http://example.net>.hash = '#foo"bar'
PASS <area>: Setting <http://example.net>.hash = '#foo"bar'
PASS <a>: Setting <http://example.net>.hash = '#foo<bar'
PASS <area>: Setting <http://example.net>.hash = '#foo<bar'
PASS <a>: Setting <http://example.net>.hash = '#foo>bar'
PASS <area>: Setting <http://example.net>.hash = '#foo>bar'
PASS <a>: Setting <http://example.net>.hash = '#foo`bar'
PASS <area>: Setting <http://example.net>.hash = '#foo`bar'
PASS <a>: Setting <a:/>.hash = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' Simple percent-encoding; tabs and newlines are removed
PASS <area>: Setting <a:/>.hash = '\0	
\r !"#$%&'()*+,-./09:;<=>?@AZ[\]^_`az{|}~¬Ä¬Å√â√©' Simple percent-encoding; tabs and newlines are removed
PASS <a>: Setting <http://example.net>.hash = 'a\0b' Percent-encode NULLs in fragment
PASS <area>: Setting <http://example.net>.hash = 'a\0b' Percent-encode NULLs in fragment
PASS <a>: Setting <non-spec:/>.hash = 'a\0b' Percent-encode NULLs in fragment
PASS <area>: Setting <non-spec:/>.hash = 'a\0b' Percent-encode NULLs in fragment
PASS <a>: Setting <http://example.net>.hash = '%c3%89t√©' Bytes already percent-encoded are left as-is
PASS <area>: Setting <http://example.net>.hash = '%c3%89t√©' Bytes already percent-encoded are left as-is
PASS <a>: Setting <javascript:alert(1)>.hash = 'castle'
PASS <area>: Setting <javascript:alert(1)>.hash = 'castle'
PASS <a>: Setting <data:space                                                                                                                                  #fragment>.hash = '' Drop trailing spaces from trailing opaque paths
PASS <area>: Setting <data:space                                                                                                                                  #fragment>.hash = '' Drop trailing spaces from trailing opaque paths
PASS <a>: Setting <sc:space    #fragment>.hash = ''
PASS <area>: Setting <sc:space    #fragment>.hash = ''
PASS <a>: Setting <data:space  ?query#fragment>.hash = '' Do not drop trailing spaces from non-trailing opaque paths
PASS <area>: Setting <data:space  ?query#fragment>.hash = '' Do not drop trailing spaces from non-trailing opaque paths
PASS <a>: Setting <sc:space  ?query#fragment>.hash = ''
PASS <area>: Setting <sc:space  ?query#fragment>.hash = ''
PASS <a>: Setting <file:///var/log/system.log>.href = 'http://0300.168.0xF0'
PASS <area>: Setting <file:///var/log/system.log>.href = 'http://0300.168.0xF0'

