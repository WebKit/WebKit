
FAIL Element becoming scope root assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Element becoming scope root (selector list) assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Element becoming scope root, with inner :scope rule assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Parent element becoming scope limit assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Parent element becoming scope limit (selector list) assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Subject element becoming scope limit assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Parent element affecting scope limit assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Sibling element affecting scope limit assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Toggling inner/outer scope roots assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Element becoming root, with :scope in subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Scope root with :has() assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Scope root with :has(), :scope subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Scope root with :has(), :scope both subject and non-subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Scope limit with :has() assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL Element becoming root, with :scope selected by ~ combinator assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Element becoming root via ~ combinator assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Element becoming root via + combinator assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL :not(scope) in subject assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL :not(scope) in ancestor assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL :not(scope) in limit subject assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"
FAIL :not(scope) in limit ancestor assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL :nth-child() in scope root assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL :nth-child() in scope limit assert_equals: expected "rgb(0, 0, 0)" but got "rgb(0, 128, 0)"

