
PASS Element becoming scope root
PASS Element becoming scope root (selector list)
FAIL Element becoming scope root, with inner :scope rule assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
PASS Parent element becoming scope limit
PASS Parent element becoming scope limit (selector list)
PASS Subject element becoming scope limit
PASS Parent element affecting scope limit
PASS Sibling element affecting scope limit
PASS Toggling inner/outer scope roots
FAIL Element becoming root, with :scope in subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
PASS Scope root with :has()
FAIL Scope root with :has(), :scope subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
FAIL Scope root with :has(), :scope both subject and non-subject assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
PASS Scope limit with :has()
FAIL Element becoming root, with :scope selected by ~ combinator assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
PASS Element becoming root via ~ combinator
PASS Element becoming root via + combinator
PASS :not(scope) in subject
PASS :not(scope) in ancestor
PASS :not(scope) in limit subject
PASS :not(scope) in limit ancestor
FAIL :nth-child() in scope root assert_equals: expected "rgb(0, 128, 0)" but got "rgb(0, 0, 0)"
PASS :nth-child() in scope limit

