@font-face descriptor tests

PASS font-weight(valid): 'normal' keyword: normal
PASS font-weight(valid): 'bold' keyword: bold
PASS font-weight(invalid): 'lighter' keyword iside @font-face: lighter
PASS font-weight(invalid): 'lighter' keyword iside @font-face: bolder
PASS font-weight(invalid): Extra content after keyword: bold a
PASS font-weight(valid): Values that are not multiple of 100 should be parsed successfully: 401
PASS font-weight(valid): Non-integer values should be parsed successfully: 400.1
PASS font-weight(valid): Minimum allowed value should be parsed successfully: 1
PASS font-weight(invalid): Values below minimum should be rejected: 0.999
PASS font-weight(invalid): Values below zero should be rejected: -100
PASS font-weight(valid): Maximum allowed value should be parsed successfully: 1000
PASS font-weight(invalid): Values above maximum should be rejected: 1000.001
PASS font-weight(invalid): Extra content after value: 100 a
PASS font-weight(valid): Simple calc value: calc(100.5)
FAIL font-weight(valid): Out-of-range simple calc value (should be clamped): calc(1001) assert_equals: Unexpected resulting value. expected "calc(1001)" but got "999.9999999999999"
PASS font-weight(valid): Valid calc expression: calc(100.5*3 + 50.5)
FAIL font-weight(valid): Valid calc expression with out-of-range value (should be clamped): calc(100.5*3 + 800) assert_equals: Unexpected resulting value. expected "calc(100.5*3 + 800)" but got "999.9999999999999"
PASS font-weight(invalid): Valid calc expression with units: calc(100.5px + 50.5px)
PASS font-weight(valid): Simple range: 100 900
FAIL font-weight(valid): Simple range with equal upper and lower bounds: 500 500 assert_equals: Unexpected resulting value. expected "500" but got "500 500"
PASS font-weight(invalid): Lower bound out of range: 0.9 100
PASS font-weight(invalid): Upper bound out of range: 100 1001
PASS font-weight(valid): Lower bound calc(): calc(100 + 100) 400
PASS font-weight(valid): Upper bound calc(): 200 calc(200 + 200)
PASS font-weight(valid): Both bounds are calc(): calc(100 + 100) calc(200 + 200)
FAIL font-weight(valid): Bounds out of order are valid: 400 200 assert_not_equals: Valid value should be accepted. got disallowed value ""
PASS font-weight(invalid): Extra content after upper bound: 100 200 300
PASS font-stretch(valid): 'ultra-condensed' keyword: ultra-condensed
PASS font-stretch(valid): 'extra-condensed' keyword: extra-condensed
PASS font-stretch(valid): 'condensed' keyword: condensed
PASS font-stretch(valid): 'semi-condensed' keyword: semi-condensed
PASS font-stretch(valid): 'normal' keyword: normal
PASS font-stretch(valid): 'semi-expanded' keyword: semi-expanded
PASS font-stretch(valid): 'expanded' keyword: expanded
PASS font-stretch(valid): 'extra-expanded' keyword: extra-expanded
PASS font-stretch(valid): 'ultra-expanded' keyword: ultra-expanded
PASS font-stretch(invalid): Extra content after value: expanded a
PASS font-stretch(valid): Legal percentage: 1%
PASS font-stretch(valid): Legal percentage: 10.5%
PASS font-stretch(valid): Legal percentage: 100%
PASS font-stretch(valid): Legal percentage: 1000%
PASS font-stretch(invalid): Only percentages, not numbers allowed: 100
PASS font-stretch(invalid): Negative values are illegal: -1%
PASS font-stretch(valid): Zero is legal: 0%
PASS font-stretch(invalid): Extra content after value: 100% a
FAIL font-stretch(valid): Simple calc value: calc(200.5%) assert_equals: Unexpected resulting value. expected "200.5%" but got "calc(200.5%)"
FAIL font-stretch(valid): Valid calc expression: calc(50%*2 - 20%) assert_equals: Unexpected resulting value. expected "80%" but got "calc(80%)"
PASS font-stretch(valid): Negative calc value (to be clamped): calc(-100%)
PASS font-stretch(valid): Negative calc expression (to be clamped): calc(50% - 50%*2)
PASS font-stretch(invalid): Unit-less calc value: calc(100)
PASS font-stretch(invalid): Calc value with units: calc(100px)
PASS font-stretch(valid): Simple range: 100% 200%
FAIL font-stretch(valid): Simple range with equal upper and lower bounds: 100% 100% assert_equals: Unexpected resulting value. expected "100%" but got "100% 100%"
PASS font-stretch(invalid): Lower bound out of range: -100% 100%
FAIL font-stretch(valid): Lower bound calc(): calc(10% + 10%) 30% assert_equals: Unexpected resulting value. expected "20% 30%" but got "calc(20%) 30%"
FAIL font-stretch(valid): Upper bound calc(): 10% calc(10% + 10%) assert_equals: Unexpected resulting value. expected "10% 20%" but got "10% calc(20%)"
FAIL font-stretch(valid): Both bounds are calc(): calc(10% + 10%) calc(20% + 20%) assert_equals: Unexpected resulting value. expected "20% 40%" but got "calc(20%) calc(40%)"
FAIL font-stretch(valid): Bounds out of order: 200% 100% assert_not_equals: Valid value should be accepted. got disallowed value ""
PASS font-stretch(invalid): Extra content after upper bound: 100% 200% 300%
PASS font-style(valid): 'normal' keyword: normal
PASS font-style(valid): 'italic' keyword: italic
PASS font-style(valid): 'oblique' keyword: oblique
PASS font-style(invalid): 'italic' followed by angle: italic 20deg
PASS font-style(invalid): Extra content after keyword: italic a
PASS font-style(valid): 'oblique' followed by zero degrees: oblique 0deg
FAIL font-style(valid): 'oblique' followed by default 20deg angle: oblique 20deg assert_equals: Unexpected resulting value. expected "oblique" but got "oblique 20deg"
FAIL font-style(valid): 'oblique' followed by maxumum 90 degree angle: oblique 90deg assert_not_equals: Valid value should be accepted. got disallowed value ""
FAIL font-style(valid): 'oblique' followed by minimum -90 degree angle: oblique -90deg assert_not_equals: Valid value should be accepted. got disallowed value ""
FAIL font-style(valid): 'oblique' followed by calc with out of range value (should be clamped): oblique calc(91deg) assert_not_equals: Valid value should be accepted. got disallowed value ""
FAIL font-style(valid): 'oblique' followed by calc with out of range value (should be clamped): oblique calc(-91deg) assert_not_equals: Valid value should be accepted. got disallowed value ""
FAIL font-style(valid): 'oblique' followed by  angle in radians: oblique 0rad assert_equals: Unexpected resulting value. expected "oblique 0deg" but got "oblique 0rad"
PASS font-style(invalid): 'oblique' followed by unit-less number: oblique 20
PASS font-style(invalid): 'oblique' followed by non-angle: oblique 20px
PASS font-style(invalid): 'oblique' followed by non-number: oblique a
PASS font-style(invalid): 'oblique' followed by isolated minus: oblique -
PASS font-style(invalid): 'oblique' followed by minus and angle separated by space: oblique - 20deg
PASS font-style(invalid): 'oblique' followed by minus and non-number: oblique -a
PASS font-style(valid): Simple range: oblique 10deg 20deg
FAIL font-style(valid): Simple range with equal upper and lower bounds: oblique 10deg 10deg assert_equals: Unexpected resulting value. expected "oblique 10deg" but got "oblique 10deg 10deg"
FAIL font-style(valid): Simple range with  default angle for both bounds: oblique 20deg 20deg assert_equals: Unexpected resulting value. expected "oblique" but got "oblique 20deg 20deg"
FAIL font-style(valid): Bounds out of order: oblique 20deg 10deg assert_not_equals: Valid value should be accepted. got disallowed value ""
PASS font-style(invalid): Lower bound out of range: oblique -100deg 20deg
PASS font-style(invalid): Upper bound out of range: oblique 20deg 100deg
PASS font-style(invalid): Extra content after upper bound: oblique 10deg 20deg 30deg

