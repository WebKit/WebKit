
FAIL ":has(a)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(#a)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a)" should be a valid selector The string did not match the expected pattern.
FAIL ":has([a])" should be a valid selector The string did not match the expected pattern.
FAIL ":has([a=\"b\"])" should be a valid selector The string did not match the expected pattern.
FAIL ":has([a|=\"b\"])" should be a valid selector The string did not match the expected pattern.
FAIL ":has(:hover)" should be a valid selector The string did not match the expected pattern.
FAIL "*:has(.a)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:scope .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a:scope .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a .b:scope)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(> .b)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:scope > .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a:scope > .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(> .a .b:scope)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(~ .b)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:scope ~ .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a:scope ~ .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(~ .a .b:scope)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(+ .b)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:scope + .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(.a:scope + .b)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(+ .a .b:scope)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:scope .b :scope)" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b) .c" should be a valid selector The string did not match the expected pattern.
FAIL ".a .b:has(.c)" should be a valid selector The string did not match the expected pattern.
FAIL ".a .b:has(.c .d)" should be a valid selector The string did not match the expected pattern.
FAIL ".a .b:has(.c .d) .e" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b:has(.c))" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b:is(.c .d))" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b:is(.c:has(.d) .e))" should be a valid selector The string did not match the expected pattern.
FAIL ".a:is(.b:has(.c) .d)" should be a valid selector assert_equals: serialization should be canonical expected ".a:is(.b:has(.c) .d)" but got ".a:is()"
FAIL ".a:not(:has(.b))" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(:not(.b))" should be a valid selector The string did not match the expected pattern.
FAIL ".a:has(.b):has(.c)" should be a valid selector The string did not match the expected pattern.
FAIL "*|*:has(*)" should be a valid selector The string did not match the expected pattern.
FAIL ":has(*|*)" should be a valid selector The string did not match the expected pattern.
PASS ".a:has()" should be an invalid selector

