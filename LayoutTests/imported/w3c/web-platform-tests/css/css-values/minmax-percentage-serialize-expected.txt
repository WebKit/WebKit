
PASS 'min(1%)' as a specified value should serialize as 'calc(1%)'.
PASS 'min(1%)' as a computed value should serialize as '1%'.
PASS 'min(1%)' as a used value should serialize as '1px'.
PASS 'max(1%)' as a specified value should serialize as 'calc(1%)'.
PASS 'max(1%)' as a computed value should serialize as '1%'.
PASS 'max(1%)' as a used value should serialize as '1px'.
FAIL 'min(1%, 2%, 3%)' as a specified value should serialize as 'min(1%, 2%, 3%)'. assert_equals: 'min(1%, 2%, 3%)' should round-trip exactly in specified values. expected "min(1%, 2%, 3%)" but got "calc(1%)"
FAIL 'min(1%, 2%, 3%)' as a computed value should serialize as 'min(1%, 2%, 3%)'. assert_equals: 'min(1%, 2%, 3%)' should round-trip exactly in computed values. expected "min(1%, 2%, 3%)" but got "1%"
PASS 'min(1%, 2%, 3%)' as a used value should serialize as '1px'.
FAIL 'min(3%, 2%, 1%)' as a specified value should serialize as 'min(3%, 2%, 1%)'. assert_equals: 'min(3%, 2%, 1%)' should round-trip exactly in specified values. expected "min(3%, 2%, 1%)" but got "calc(1%)"
FAIL 'min(3%, 2%, 1%)' as a computed value should serialize as 'min(3%, 2%, 1%)'. assert_equals: 'min(3%, 2%, 1%)' should round-trip exactly in computed values. expected "min(3%, 2%, 1%)" but got "1%"
PASS 'min(3%, 2%, 1%)' as a used value should serialize as '1px'.
FAIL 'min(-1%, 1%)' as a specified value should serialize as 'min(-1%, 1%)'. assert_equals: 'min(-1%, 1%)' should round-trip exactly in specified values. expected "min(-1%, 1%)" but got "calc(-1%)"
FAIL 'min(-1%, 1%)' as a computed value should serialize as 'min(-1%, 1%)'. assert_equals: 'min(-1%, 1%)' should round-trip exactly in computed values. expected "min(-1%, 1%)" but got "-1%"
PASS 'min(-1%, 1%)' as a used value should serialize as '-1px'.
FAIL 'min(-0%, 0%)' as a specified value should serialize as 'min(0%, 0%)'. assert_equals: 'min(0%, 0%)' should round-trip exactly in specified values. expected "min(0%, 0%)" but got "calc(0%)"
FAIL 'min(-0%, 0%)' as a computed value should serialize as 'min(0%, 0%)'. assert_equals: 'min(0%, 0%)' should round-trip exactly in computed values. expected "min(0%, 0%)" but got "0%"
PASS 'min(-0%, 0%)' as a used value should serialize as '0px'.
FAIL 'max(1%, 2%, 3%)' as a specified value should serialize as 'max(1%, 2%, 3%)'. assert_equals: 'max(1%, 2%, 3%)' should round-trip exactly in specified values. expected "max(1%, 2%, 3%)" but got "calc(3%)"
FAIL 'max(1%, 2%, 3%)' as a computed value should serialize as 'max(1%, 2%, 3%)'. assert_equals: 'max(1%, 2%, 3%)' should round-trip exactly in computed values. expected "max(1%, 2%, 3%)" but got "3%"
PASS 'max(1%, 2%, 3%)' as a used value should serialize as '3px'.
FAIL 'max(3%, 2%, 1%)' as a specified value should serialize as 'max(3%, 2%, 1%)'. assert_equals: 'max(3%, 2%, 1%)' should round-trip exactly in specified values. expected "max(3%, 2%, 1%)" but got "calc(3%)"
FAIL 'max(3%, 2%, 1%)' as a computed value should serialize as 'max(3%, 2%, 1%)'. assert_equals: 'max(3%, 2%, 1%)' should round-trip exactly in computed values. expected "max(3%, 2%, 1%)" but got "3%"
PASS 'max(3%, 2%, 1%)' as a used value should serialize as '3px'.
FAIL 'max(-1%, 1%)' as a specified value should serialize as 'max(-1%, 1%)'. assert_equals: 'max(-1%, 1%)' should round-trip exactly in specified values. expected "max(-1%, 1%)" but got "calc(1%)"
FAIL 'max(-1%, 1%)' as a computed value should serialize as 'max(-1%, 1%)'. assert_equals: 'max(-1%, 1%)' should round-trip exactly in computed values. expected "max(-1%, 1%)" but got "1%"
PASS 'max(-1%, 1%)' as a used value should serialize as '1px'.
FAIL 'max(-0%, 0%)' as a specified value should serialize as 'max(0%, 0%)'. assert_equals: 'max(0%, 0%)' should round-trip exactly in specified values. expected "max(0%, 0%)" but got "calc(0%)"
FAIL 'max(-0%, 0%)' as a computed value should serialize as 'max(0%, 0%)'. assert_equals: 'max(0%, 0%)' should round-trip exactly in computed values. expected "max(0%, 0%)" but got "0%"
PASS 'max(-0%, 0%)' as a used value should serialize as '0px'.
PASS 'min(1%, 2%, 3%) 0px' as a specified value should serialize as 'min(1%, 2%, 3%) 0px'.
FAIL 'min(1%, 2%, 3%) 0px' as a computed value should serialize as 'min(1%, 2%, 3%) 0px'. assert_equals: 'min(1%, 2%, 3%) 0px' should round-trip exactly in computed values. expected "min(1%, 2%, 3%) 0px" but got "calc(1%) 0px"
FAIL 'calc(min(1%, 2%) + max(3%, 4%) + 10%)' as a specified value should serialize as 'calc(10% + min(1%, 2%) + max(3%, 4%))'. assert_equals: 'calc(10% + min(1%, 2%) + max(3%, 4%))' should round-trip exactly in specified values. expected "calc(10% + min(1%, 2%) + max(3%, 4%))" but got "calc(15%)"
FAIL 'calc(min(1%, 2%) + max(3%, 4%) + 10%)' as a computed value should serialize as 'calc(10% + min(1%, 2%) + max(3%, 4%))'. assert_equals: 'calc(10% + min(1%, 2%) + max(3%, 4%))' should round-trip exactly in computed values. expected "calc(10% + min(1%, 2%) + max(3%, 4%))" but got "15%"
PASS 'calc(min(1%, 2%) + max(3%, 4%) + 10%)' as a used value should serialize as '15px'.

