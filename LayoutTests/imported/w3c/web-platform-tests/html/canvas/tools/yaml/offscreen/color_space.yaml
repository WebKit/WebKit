- name: 2d.color.space.p3.to.p3
  testing:
  - 2d.color.space.p3.to.p3
  desc: test getImageData with display-p3 and uint8 from display p3 uint8 canvas
  attributes: |
    {colorSpace: "display-p3"}
  code: |
    var color_style = 'rgb(50, 100, 150)';
    // [0.24304, 0.38818, 0.57227, 1.0] * 255 = [62, 99, 146, 255]
    var pixel_expected = [62, 99, 146, 255];
    var epsilon = 2;
    ctx.fillStyle = color_style;
    ctx.fillRect(0, 0, 10, 10);

    var pixel = ctx.getImageData(5, 5, 1, 1, {colorSpace: "display-p3", storageFormat: "uint8"}).data;
    @assert pixel.length === pixel_expected.length;
    assert_approx_equals(pixel[0], pixel_expected[0], 2);
    assert_approx_equals(pixel[1], pixel_expected[1], 2);
    assert_approx_equals(pixel[2], pixel_expected[2], 2);
    assert_approx_equals(pixel[3], pixel_expected[3], 2);
    t.done();

- name: 2d.color.space.p3.to.srgb
  testing:
  - 2d.color.space.p3.to.srgb
  desc: test getImageData with srsb and uint8 from display p3 uint8 canvas
  attributes: |
    {colorSpace: "display-p3"}
  code: |
    var color_style = 'rgb(50, 100, 150)';
    var pixel_expected = [50, 100, 150, 255];
    var epsilon = 2;
    ctx.fillStyle = color_style;
    ctx.fillRect(0, 0, 10, 10);

    var pixel = ctx.getImageData(5, 5, 1, 1, {colorSpace: "srgb", storageFormat: "uint8"}).data;
    @assert pixel.length === pixel_expected.length;
    assert_approx_equals(pixel[0], pixel_expected[0], 2);
    assert_approx_equals(pixel[1], pixel_expected[1], 2);
    assert_approx_equals(pixel[2], pixel_expected[2], 2);
    assert_approx_equals(pixel[3], pixel_expected[3], 2);
    t.done();
