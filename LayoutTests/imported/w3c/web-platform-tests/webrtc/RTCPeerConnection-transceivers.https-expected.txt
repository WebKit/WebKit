
PASS addTrack: creates a transceiver for the sender
PASS addTrack: "transceiver == {sender,receiver}"
PASS addTrack: transceiver.sender is associated with the track
PASS addTrack: transceiver.receiver has its own track
PASS addTrack: transceiver.receiver's track is muted
PASS addTrack: transceiver is not associated with an m-section
PASS addTrack: transceiver is not stopped
PASS addTrack: transceiver's direction is sendrecv
PASS addTrack: transceiver's currentDirection is null
PASS setLocalDescription(offer): transceiver gets associated with an m-section
PASS setLocalDescription(offer): transceiver.mid matches the offer SDP
PASS setRemoteDescription(offer): ontrack fires with a track
PASS setRemoteDescription(offer): ontrack's stream.id is the same as stream.id
PASS setRemoteDescription(offer): ontrack fires with a transceiver.
PASS setRemoteDescription(offer): transceiver.mid is the same on both ends
PASS setRemoteDescription(offer): "transceiver == {sender,receiver}"
PASS setRemoteDescription(offer): transceiver.direction is recvonly
PASS setRemoteDescription(offer): transceiver.currentDirection is null
PASS setRemoteDescription(offer): transceiver.stopped is false
PASS setLocalDescription(answer): transceiver.currentDirection is recvonly
PASS setLocalDescription(answer): transceiver.currentDirection is sendonly
PASS addTransceiver(track): creates a transceiver for the track
PASS addTransceiver(track): "transceiver == {sender,receiver}"
PASS addTransceiver(track, init): initialize direction to inactive
PASS addTransceiver(track, init): initialize sendEncodings[0].active to false
PASS addTransceiver(0 streams): ontrack fires with no stream
PASS addTransceiver(1 stream): ontrack fires with corresponding stream
PASS addTransceiver(2 streams): ontrack fires with corresponding two streams
PASS addTrack(0 streams): ontrack fires with no stream
PASS addTrack(1 stream): ontrack fires with corresponding stream
PASS addTrack(2 streams): ontrack fires with corresponding two streams
PASS addTransceiver('audio'): creates a transceiver with direction sendrecv
PASS addTransceiver('audio'): transceiver.receiver.track.kind == 'audio'
PASS addTransceiver('video'): transceiver.receiver.track.kind == 'video'
PASS addTransceiver('audio'): transceiver.sender.track == null
PASS addTransceiver('audio'): transceiver.currentDirection is null
PASS addTransceiver('audio'): transceiver.stopped is false
PASS addTrack reuses reusable transceivers
PASS addTransceiver does not reuse reusable transceivers
PASS Can setup two-way call using a single transceiver
FAIL Closing the PC stops the transceivers assert_equals: expected (object) null but got (string) "inactive"
PASS Changing transceiver direction to 'sendrecv' makes ontrack fire
FAIL transceiver.sender.track does not revert to an old state promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'pc1.getReceivers()[0].track')"
FAIL transceiver.direction does not revert to an old state promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'pc1.getTransceivers()[0].direction = 'inactive'')"

