
PASS # AUDIT TASK RUNNER STARTED.
PASS Executing "initialize"
PASS Executing "test value"
PASS Executing "test time"
PASS Executing "test setValueCurve"
PASS Executing "special cases 1"
PASS Executing "special cases 2"
PASS Audit report
PASS > [initialize]
PASS   Creating context for testing did not throw an exception.
PASS < [initialize] All assertions passed. (total 1 assertions)
PASS > [test value] Test non-finite arguments for AudioParam value
PASS   gain.gain.setValueAtTime(Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(Infinity,1,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueAtTime(-Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(-Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(-Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(-Infinity,1,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueAtTime(NaN,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(NaN,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(NaN,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(NaN,1,1) threw TypeError: "The provided value is non-finite".
PASS < [test value] All assertions passed. (total 12 assertions)
PASS > [test time] Test non-finite arguments for AudioParam time
PASS   gain.gain.setValueAtTime(1,Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(1,Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(1,Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,1,Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueAtTime(1,-Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(1,-Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(1,-Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,-Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,1,-Infinity) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueAtTime(1,NaN) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.linearRampToValueAtTime(1,NaN) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.exponentialRampToValueAtTime(1,NaN) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,NaN,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setTargetAtTime(1,1,NaN) threw TypeError: "The provided value is non-finite".
PASS < [test time] All assertions passed. (total 15 assertions)
PASS > [test setValueCurve] Test non-finite arguments for setValueCurveAtTime
PASS   gain.gain.setValueCurveAtTime([0,0,0],Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueCurveAtTime([0,0,0],-Infinity,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueCurveAtTime([0,0,0],NaN,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueCurveAtTime([1,2,Infinity,3],1,1) threw TypeError: "The provided value is non-finite".
PASS   gain.gain.setValueCurveAtTime([1,NaN,2,3],1,1) threw TypeError: "The provided value is non-finite".
PASS < [test setValueCurve] All assertions passed. (total 5 assertions)
PASS > [special cases 1] Test exceptions for finite values
PASS   gain.gain.setValueAtTime(1,-1) threw RangeError: "startTime must be a positive value".
PASS   gain.gain.linearRampToValueAtTime(1,-1) threw RangeError: "endTime must be a positive value".
PASS   gain.gain.exponentialRampToValueAtTime(1,-1) threw RangeError: "endTime must be a positive value".
PASS   gain.gain.setTargetAtTime(1,-1,1) threw RangeError: "startTime must be a positive value".
PASS   gain.gain.setTargetAtTime(1,1,-1) threw RangeError: "timeConstant must be a positive value".
PASS   gain.gain.setValueCurveAtTime([0,0,0],-1,1) threw RangeError: "startTime must be a positive value".
PASS   gain.gain.setValueCurveAtTime([0,0,0],1,-1) threw RangeError: "duration must be a strictly positive value".
PASS   gain.gain.setValueCurveAtTime(curve, 1, 0) threw RangeError: "duration must be a strictly positive value".
PASS   gain.gain.setValueCurveAtTime(curve, 1, -1) threw RangeError: "duration must be a strictly positive value".
PASS < [special cases 1] All assertions passed. (total 9 assertions)
PASS > [special cases 2] Test special cases for expeonentialRamp
PASS   gain.gain.exponentialRampToValueAtTime(0,1) threw RangeError: "value cannot be 0".
PASS   gain.gain.exponentialRampToValueAtTime(-1e-100,1) threw RangeError: "value cannot be 0".
PASS   gain.gain.exponentialRampToValueAtTime(1e-100,1) threw RangeError: "value cannot be 0".
PASS < [special cases 2] All assertions passed. (total 3 assertions)
PASS # AUDIT TASK RUNNER FINISHED: 6 tasks ran successfully.

