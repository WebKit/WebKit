
Harness Error (TIMEOUT), message = null

PASS Codec should be undefined by default on audio encodings
PASS Codec should be undefined by default on video encodings
FAIL Creating an audio sender with addTransceiver and codec should work promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
FAIL Creating a video sender with addTransceiver and codec should work promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
FAIL Setting codec on an audio sender with setParameters should work promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
FAIL Setting codec on a video sender with setParameters should work promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
FAIL Creating an audio sender with addTransceiver and non-existing codec should throw OperationError assert_throws_dom: function "() => pc.addTransceiver('audio', {
      sendEncodings: [{codec: newCodec}],
    })" did not throw
FAIL Creating an audio sender with addTransceiver and non-existing codec type should throw OperationError assert_throws_dom: function "() => pc.addTransceiver('audio', {
      sendEncodings: [{codec: newCodec}],
    })" did not throw
FAIL Creating a video sender with addTransceiver and non-existing codec should throw OperationError assert_throws_dom: function "() => pc.addTransceiver('video', {
      sendEncodings: [{codec: newCodec}],
    })" did not throw
FAIL Creating a video sender with addTransceiver and non-existing codec type should throw OperationError assert_throws_dom: function "() => pc.addTransceiver('video', {
      sendEncodings: [{codec: newCodec}],
    })" did not throw
FAIL Setting a non-existing codec on an audio sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Setting a non-existing codec on a video sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Setting a non-preferred codec on an audio sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Setting a non-preferred codec on a video sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Setting a non-negotiated codec on an audio sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Setting a non-negotiated codec on a video sender with setParameters should throw InvalidModificationError assert_unreached: Should have rejected: undefined Reached unreachable code
FAIL Codec should be undefined after negotiating away the currently set codec on an audio sender promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
FAIL Codec should be undefined after negotiating away the currently set codec on a video sender promise_test: Unhandled rejection with value: object "TypeError: undefined is not an object (evaluating 'b.mimeType')"
TIMEOUT Stats output-rtp should match the selected codec in non-simulcast usecase on an audio sender Test timed out
NOTRUN Stats output-rtp should match the selected codec in non-simulcast usecase on a video sender
NOTRUN Stats output-rtp should match the selected codec in simulcast usecase on a video sender
NOTRUN Stats output-rtp should match the selected mixed codecs in simulcast usecase on a video sender

