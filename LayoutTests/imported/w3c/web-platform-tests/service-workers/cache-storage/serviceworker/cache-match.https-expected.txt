
PASS Cache.match
PASS Cache.match with no matching entries
PASS Cache.match with URL
PASS Cache.match with Request
PASS Cache.match with multiple cache hits
PASS Cache.match with new Request
PASS Cache.match with HEAD
PASS Cache.match with ignoreSearch option (request with no search parameters)
PASS Cache.match with ignoreSearch option (request with search parameter)
PASS Cache.match supports ignoreMethod
PASS Cache.match supports ignoreVary
FAIL Cache.match does not support cacheName option assert_false: Cache.match does not support cacheName option which was removed in CacheQueryOptions. expected false got true
PASS Cache.match with URL containing fragment
PASS Cache.match with string fragment "http" as query
PASS Cache.match with responses containing "Vary" header
PASS Cache.match with Request and Response objects with different URLs
PASS Cache.match invoked multiple times for the same Request/Response
PASS Cache.match blob should be sliceable
PASS Cache.match with POST Request
PASS Cache.match with a non-2xx Response
PASS Cache.match with a network error Response
PASS Cache produces large Responses that can be cloned and read correctly.
PASS cors-exposed header should be stored correctly.
PASS MIME type should be set from content-header correctly.
FAIL MIME type should reflect Content-Type headers of response. assert_equals: mime type can be overridden expected "text/plain" but got "text/html"
FAIL Cache.match ignores vary headers on opaque response. assert_not_equals: got disallowed value undefined

