
Harness Error (TIMEOUT), message = null

PASS Allows setting the delay to a positive number
FAIL Allows setting the delay to a negative number assert_equals: 'actual' unit type must be 'percent' for "getComputedTiming().endTime after set delay -100" expected (string) "percent" but got (undefined) undefined
TIMEOUT Allows setting the delay of an animation in progress: positive delay that causes the animation to be no longer in-effect Test timed out
NOTRUN Allows setting the delay of an animation in progress: negative delay that seeks into the active interval
NOTRUN Allows setting the delay of an animation in progress: large negative delay that causes the animation to be finished
PASS Throws when setting invalid delay value: NaN
PASS Throws when setting invalid delay value: Infinity
PASS Throws when setting invalid delay value: -Infinity
NOTRUN Allows setting the endDelay to a positive number
NOTRUN Allows setting the endDelay to a negative number
NOTRUN Throws when setting the endDelay to infinity
NOTRUN Throws when setting the endDelay to negative infinity
PASS Allows setting the fill to 'none'
PASS Allows setting the fill to 'forwards'
PASS Allows setting the fill to 'backwards'
PASS Allows setting the fill to 'both'
NOTRUN Allows setting the iterationStart of an animation in progress: backwards-filling
NOTRUN Allows setting the iterationStart of an animation in progress: active phase
NOTRUN Allows setting the iterationStart of an animation in progress: forwards-filling
PASS Throws when setting invalid iterationStart value: -1
PASS Throws when setting invalid iterationStart value: NaN
PASS Throws when setting invalid iterationStart value: Infinity
PASS Throws when setting invalid iterationStart value: -Infinity
PASS Allows setting iterations to a double value
FAIL Throws when setting iterations to Infinity assert_throws_js: test function "() => {
    anim.effect.updateTiming({ iterations: Infinity });
  }" did not throw
FAIL Allows setting the iterations of an animation in progress assert_equals: 'actual' unit type must be 'percent' for "duration when animation is finished" expected (string) "percent" but got (undefined) undefined
FAIL Allows setting the iterations of an animation in progress with duration "auto" assert_equals: 'actual' unit type must be 'percent' for "duration when animation is finished" expected (string) "percent" but got (undefined) undefined
FAIL Allows setting the duration to 123.45 assert_equals: 'actual' unit type must be 'percent' for "Updates computed duration" expected (string) "percent" but got (undefined) undefined
FAIL Allows setting the duration to auto assert_equals: 'actual' unit type must be 'percent' for "Updates computed duration" expected (string) "percent" but got (undefined) undefined
PASS Throws when setting invalid duration: -1
PASS Throws when setting invalid duration: NaN
FAIL Throws when setting invalid duration: Infinity assert_throws_js: function "() => {
      const anim = createScrollLinkedAnimationWithTiming(t,  { duration: invalid })
      anim.play();
    }" did not throw
PASS Throws when setting invalid duration: -Infinity
PASS Throws when setting invalid duration: "abc"
PASS Throws when setting invalid duration: "100"
FAIL Allows setting the duration of an animation in progress assert_approx_equals: progress after doubling the duration expected 1 +/- 0.0005 but got 0.5
NOTRUN Allows setting the duration of an animation in progress such that the the start and current time do not change
PASS Allows setting the direction to each of the possible keywords
NOTRUN Allows setting the direction of an animation in progress from 'normal' to 'reverse'
NOTRUN Allows setting the direction of an animation in progress from 'normal' to 'reverse' while at start of active interval
NOTRUN Allows setting the direction of an animation in progress from 'normal' to 'reverse' while filling backwards
NOTRUN Allows setting the direction of an animation in progress from 'normal' to 'alternate'
NOTRUN Allows setting the direction of an animation in progress from 'alternate' to 'alternate-reverse'
NOTRUN Allows setting the easing to a step-start function
NOTRUN Allows setting the easing to a steps(1, start) function
NOTRUN Allows setting the easing to a steps(2, start) function
NOTRUN Allows setting the easing to a step-end function
NOTRUN Allows setting the easing to a steps(1) function
NOTRUN Allows setting the easing to a steps(1, end) function
NOTRUN Allows setting the easing to a steps(2, end) function
NOTRUN Allows setting the easing to a linear function
NOTRUN Allows setting the easing to a ease function
NOTRUN Allows setting the easing to a ease-in function
NOTRUN Allows setting the easing to a ease-in-out function
NOTRUN Allows setting the easing to a ease-out function
NOTRUN Allows setting the easing to a easing function which produces values greater than 1
NOTRUN Allows setting the easing to a easing function which produces values less than 1
PASS Updates the specified value when setting the easing to 'ease'
PASS Updates the specified value when setting the easing to 'linear'
PASS Updates the specified value when setting the easing to 'ease-in'
PASS Updates the specified value when setting the easing to 'ease-out'
PASS Updates the specified value when setting the easing to 'ease-in-out'
PASS Updates the specified value when setting the easing to 'cubic-bezier(0.1, 5, 0.23, 0)'
PASS Updates the specified value when setting the easing to 'steps(3, start)'
PASS Updates the specified value when setting the easing to 'steps(3)'
NOTRUN Allows setting the easing of an animation in progress

