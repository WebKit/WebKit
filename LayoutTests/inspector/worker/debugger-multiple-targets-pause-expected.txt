Ensure we can pause in multiple targets and evaluate in each.


== Running test suite: Worker.Debugger.Threads
-- Running test case: Worker.Debugger.Threads.CreateThreads
PASS: Created Worker 1
PASS: Created Worker 2

-- Running test case: Worker.Debugger.Threads.Pause
PASS: Paused event should happen before CallFramesDidChange event.
PASS: In Paused event all other Targets should be pausing.
PASS: Worker 1 should be the first to pause.
PASS: All Targets should eventually pause.

TARGET: Page
   CALL FRAME #1: workOnMainThread
TARGET: worker-debugger-thread-1.js
 * CALL FRAME #1: foo
   CALL FRAME #2: workInThread1
TARGET: worker-debugger-thread-2.js
   CALL FRAME #1: workInThread2

-- Running test case: Worker.Debugger.Threads.Paused.Worker1Evaluate
PASS: Evaluated result in worker-debugger-thread-1.js should be "worker thread 1".

-- Running test case: Worker.Debugger.Threads.Paused.Worker2Evaluate
PASS: Evaluated result in worker-debugger-thread-2.js should be "worker thread 2".

-- Running test case: Worker.Debugger.Threads.Paused.MainEvaluate
PASS: Evaluated result in Page should be "main thread".

-- Running test case: Worker.Debugger.Threads.Paused.Worker1.StepOut
PASS: Should receive CallFramesDidChange for Worker 1.

TARGET: Page
   CALL FRAME #1: workOnMainThread
TARGET: worker-debugger-thread-1.js
 * CALL FRAME #1: workInThread1
TARGET: worker-debugger-thread-2.js
   CALL FRAME #1: workInThread2

-- Running test case: Worker.Debugger.Threads.Paused.Worker2.ResumeThread
PASS: Should Receive CallFramesDidChange for Worker 2.
PASS: Worker 2 should be pausing.
PASS: Should Receive CallFramesDidChange for Worker 2.
PASS: Worker 2 should be paused.

TARGET: Page
   CALL FRAME #1: workOnMainThread
TARGET: worker-debugger-thread-1.js
 * CALL FRAME #1: workInThread1
TARGET: worker-debugger-thread-2.js
   CALL FRAME #1: laterWorkInThread2

-- Running test case: Worker.Debugger.Threads.Complete
PASS: Received Resume event.
PASS: All Targets should be unpaused.

